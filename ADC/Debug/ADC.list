
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b48  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009cd0  08009cd0  0000acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf4  08009cf4  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08009cfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a6c  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ae8  20000ae8  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cee  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ae6  00000000  00000000  00020d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00024880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000def  00000000  00000000  00025ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024b46  00000000  00000000  000268b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f8f  00000000  00000000  0004b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d822b  00000000  00000000  0006538c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d5b7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005068  00000000  00000000  0013d5fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00142664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009cb8 	.word	0x08009cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009cb8 	.word	0x08009cb8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96a 	b.w	8000cf0 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	460c      	mov	r4, r1
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d14e      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a40:	4694      	mov	ip, r2
 8000a42:	458c      	cmp	ip, r1
 8000a44:	4686      	mov	lr, r0
 8000a46:	fab2 f282 	clz	r2, r2
 8000a4a:	d962      	bls.n	8000b12 <__udivmoddi4+0xde>
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0320 	rsb	r3, r2, #32
 8000a52:	4091      	lsls	r1, r2
 8000a54:	fa20 f303 	lsr.w	r3, r0, r3
 8000a58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5c:	4319      	orrs	r1, r3
 8000a5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a66:	fa1f f68c 	uxth.w	r6, ip
 8000a6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a72:	fb07 1114 	mls	r1, r7, r4, r1
 8000a76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a7a:	fb04 f106 	mul.w	r1, r4, r6
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a8a:	f080 8112 	bcs.w	8000cb2 <__udivmoddi4+0x27e>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 810f 	bls.w	8000cb2 <__udivmoddi4+0x27e>
 8000a94:	3c02      	subs	r4, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a59      	subs	r1, r3, r1
 8000a9a:	fa1f f38e 	uxth.w	r3, lr
 8000a9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aa2:	fb07 1110 	mls	r1, r7, r0, r1
 8000aa6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aaa:	fb00 f606 	mul.w	r6, r0, r6
 8000aae:	429e      	cmp	r6, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x94>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000aba:	f080 80fc 	bcs.w	8000cb6 <__udivmoddi4+0x282>
 8000abe:	429e      	cmp	r6, r3
 8000ac0:	f240 80f9 	bls.w	8000cb6 <__udivmoddi4+0x282>
 8000ac4:	4463      	add	r3, ip
 8000ac6:	3802      	subs	r0, #2
 8000ac8:	1b9b      	subs	r3, r3, r6
 8000aca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000ace:	2100      	movs	r1, #0
 8000ad0:	b11d      	cbz	r5, 8000ada <__udivmoddi4+0xa6>
 8000ad2:	40d3      	lsrs	r3, r2
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	e9c5 3200 	strd	r3, r2, [r5]
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d905      	bls.n	8000aee <__udivmoddi4+0xba>
 8000ae2:	b10d      	cbz	r5, 8000ae8 <__udivmoddi4+0xb4>
 8000ae4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4608      	mov	r0, r1
 8000aec:	e7f5      	b.n	8000ada <__udivmoddi4+0xa6>
 8000aee:	fab3 f183 	clz	r1, r3
 8000af2:	2900      	cmp	r1, #0
 8000af4:	d146      	bne.n	8000b84 <__udivmoddi4+0x150>
 8000af6:	42a3      	cmp	r3, r4
 8000af8:	d302      	bcc.n	8000b00 <__udivmoddi4+0xcc>
 8000afa:	4290      	cmp	r0, r2
 8000afc:	f0c0 80f0 	bcc.w	8000ce0 <__udivmoddi4+0x2ac>
 8000b00:	1a86      	subs	r6, r0, r2
 8000b02:	eb64 0303 	sbc.w	r3, r4, r3
 8000b06:	2001      	movs	r0, #1
 8000b08:	2d00      	cmp	r5, #0
 8000b0a:	d0e6      	beq.n	8000ada <__udivmoddi4+0xa6>
 8000b0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000b10:	e7e3      	b.n	8000ada <__udivmoddi4+0xa6>
 8000b12:	2a00      	cmp	r2, #0
 8000b14:	f040 8090 	bne.w	8000c38 <__udivmoddi4+0x204>
 8000b18:	eba1 040c 	sub.w	r4, r1, ip
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	fa1f f78c 	uxth.w	r7, ip
 8000b24:	2101      	movs	r1, #1
 8000b26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000b32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b36:	fb07 f006 	mul.w	r0, r7, r6
 8000b3a:	4298      	cmp	r0, r3
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0x11c>
 8000b3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000b46:	d202      	bcs.n	8000b4e <__udivmoddi4+0x11a>
 8000b48:	4298      	cmp	r0, r3
 8000b4a:	f200 80cd 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b4e:	4626      	mov	r6, r4
 8000b50:	1a1c      	subs	r4, r3, r0
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000b5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b62:	fb00 f707 	mul.w	r7, r0, r7
 8000b66:	429f      	cmp	r7, r3
 8000b68:	d908      	bls.n	8000b7c <__udivmoddi4+0x148>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b72:	d202      	bcs.n	8000b7a <__udivmoddi4+0x146>
 8000b74:	429f      	cmp	r7, r3
 8000b76:	f200 80b0 	bhi.w	8000cda <__udivmoddi4+0x2a6>
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	1bdb      	subs	r3, r3, r7
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	e7a5      	b.n	8000ad0 <__udivmoddi4+0x9c>
 8000b84:	f1c1 0620 	rsb	r6, r1, #32
 8000b88:	408b      	lsls	r3, r1
 8000b8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b8e:	431f      	orrs	r7, r3
 8000b90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b94:	fa04 f301 	lsl.w	r3, r4, r1
 8000b98:	ea43 030c 	orr.w	r3, r3, ip
 8000b9c:	40f4      	lsrs	r4, r6
 8000b9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ba2:	0c38      	lsrs	r0, r7, #16
 8000ba4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ba8:	fbb4 fef0 	udiv	lr, r4, r0
 8000bac:	fa1f fc87 	uxth.w	ip, r7
 8000bb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000bb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000bbc:	45a1      	cmp	r9, r4
 8000bbe:	fa02 f201 	lsl.w	r2, r2, r1
 8000bc2:	d90a      	bls.n	8000bda <__udivmoddi4+0x1a6>
 8000bc4:	193c      	adds	r4, r7, r4
 8000bc6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000bca:	f080 8084 	bcs.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bce:	45a1      	cmp	r9, r4
 8000bd0:	f240 8081 	bls.w	8000cd6 <__udivmoddi4+0x2a2>
 8000bd4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bd8:	443c      	add	r4, r7
 8000bda:	eba4 0409 	sub.w	r4, r4, r9
 8000bde:	fa1f f983 	uxth.w	r9, r3
 8000be2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000be6:	fb00 4413 	mls	r4, r0, r3, r4
 8000bea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bf2:	45a4      	cmp	ip, r4
 8000bf4:	d907      	bls.n	8000c06 <__udivmoddi4+0x1d2>
 8000bf6:	193c      	adds	r4, r7, r4
 8000bf8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000bfc:	d267      	bcs.n	8000cce <__udivmoddi4+0x29a>
 8000bfe:	45a4      	cmp	ip, r4
 8000c00:	d965      	bls.n	8000cce <__udivmoddi4+0x29a>
 8000c02:	3b02      	subs	r3, #2
 8000c04:	443c      	add	r4, r7
 8000c06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000c0e:	eba4 040c 	sub.w	r4, r4, ip
 8000c12:	429c      	cmp	r4, r3
 8000c14:	46ce      	mov	lr, r9
 8000c16:	469c      	mov	ip, r3
 8000c18:	d351      	bcc.n	8000cbe <__udivmoddi4+0x28a>
 8000c1a:	d04e      	beq.n	8000cba <__udivmoddi4+0x286>
 8000c1c:	b155      	cbz	r5, 8000c34 <__udivmoddi4+0x200>
 8000c1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000c22:	eb64 040c 	sbc.w	r4, r4, ip
 8000c26:	fa04 f606 	lsl.w	r6, r4, r6
 8000c2a:	40cb      	lsrs	r3, r1
 8000c2c:	431e      	orrs	r6, r3
 8000c2e:	40cc      	lsrs	r4, r1
 8000c30:	e9c5 6400 	strd	r6, r4, [r5]
 8000c34:	2100      	movs	r1, #0
 8000c36:	e750      	b.n	8000ada <__udivmoddi4+0xa6>
 8000c38:	f1c2 0320 	rsb	r3, r2, #32
 8000c3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa24 f303 	lsr.w	r3, r4, r3
 8000c48:	4094      	lsls	r4, r2
 8000c4a:	430c      	orrs	r4, r1
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c54:	fa1f f78c 	uxth.w	r7, ip
 8000c58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000c60:	0c23      	lsrs	r3, r4, #16
 8000c62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c66:	fb00 f107 	mul.w	r1, r0, r7
 8000c6a:	4299      	cmp	r1, r3
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x24c>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c76:	d22c      	bcs.n	8000cd2 <__udivmoddi4+0x29e>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	d92a      	bls.n	8000cd2 <__udivmoddi4+0x29e>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c88:	fb08 3311 	mls	r3, r8, r1, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb01 f307 	mul.w	r3, r1, r7
 8000c94:	42a3      	cmp	r3, r4
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x276>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ca0:	d213      	bcs.n	8000cca <__udivmoddi4+0x296>
 8000ca2:	42a3      	cmp	r3, r4
 8000ca4:	d911      	bls.n	8000cca <__udivmoddi4+0x296>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4464      	add	r4, ip
 8000caa:	1ae4      	subs	r4, r4, r3
 8000cac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000cb0:	e739      	b.n	8000b26 <__udivmoddi4+0xf2>
 8000cb2:	4604      	mov	r4, r0
 8000cb4:	e6f0      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cb6:	4608      	mov	r0, r1
 8000cb8:	e706      	b.n	8000ac8 <__udivmoddi4+0x94>
 8000cba:	45c8      	cmp	r8, r9
 8000cbc:	d2ae      	bcs.n	8000c1c <__udivmoddi4+0x1e8>
 8000cbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000cc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000cc6:	3801      	subs	r0, #1
 8000cc8:	e7a8      	b.n	8000c1c <__udivmoddi4+0x1e8>
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e7ed      	b.n	8000caa <__udivmoddi4+0x276>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	e799      	b.n	8000c06 <__udivmoddi4+0x1d2>
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	e7d4      	b.n	8000c80 <__udivmoddi4+0x24c>
 8000cd6:	46d6      	mov	lr, sl
 8000cd8:	e77f      	b.n	8000bda <__udivmoddi4+0x1a6>
 8000cda:	4463      	add	r3, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	e74d      	b.n	8000b7c <__udivmoddi4+0x148>
 8000ce0:	4606      	mov	r6, r0
 8000ce2:	4623      	mov	r3, r4
 8000ce4:	4608      	mov	r0, r1
 8000ce6:	e70f      	b.n	8000b08 <__udivmoddi4+0xd4>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	e730      	b.n	8000b50 <__udivmoddi4+0x11c>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	0000      	movs	r0, r0
	...

08000cf8 <read_ADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void read_ADC()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000cfc:	481c      	ldr	r0, [pc, #112]	@ (8000d70 <read_ADC+0x78>)
 8000cfe:	f000 fdad 	bl	800185c <HAL_ADC_Start>

	if (HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK) //timeout ms cinsinden
 8000d02:	491c      	ldr	r1, [pc, #112]	@ (8000d74 <read_ADC+0x7c>)
 8000d04:	481a      	ldr	r0, [pc, #104]	@ (8000d70 <read_ADC+0x78>)
 8000d06:	f000 feae 	bl	8001a66 <HAL_ADC_PollForConversion>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d122      	bne.n	8000d56 <read_ADC+0x5e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <read_ADC+0x78>)
 8000d12:	f000 ff33 	bl	8001b7c <HAL_ADC_GetValue>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b17      	ldr	r3, [pc, #92]	@ (8000d78 <read_ADC+0x80>)
 8000d1c:	801a      	strh	r2, [r3, #0]
		V_adc = (adc_value * 3.3)/4095;
 8000d1e:	4b16      	ldr	r3, [pc, #88]	@ (8000d78 <read_ADC+0x80>)
 8000d20:	881b      	ldrh	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fba2 	bl	800046c <__aeabi_i2d>
 8000d28:	a30d      	add	r3, pc, #52	@ (adr r3, 8000d60 <read_ADC+0x68>)
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f7ff fc07 	bl	8000540 <__aeabi_dmul>
 8000d32:	4602      	mov	r2, r0
 8000d34:	460b      	mov	r3, r1
 8000d36:	4610      	mov	r0, r2
 8000d38:	4619      	mov	r1, r3
 8000d3a:	a30b      	add	r3, pc, #44	@ (adr r3, 8000d68 <read_ADC+0x70>)
 8000d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d40:	f7ff fd28 	bl	8000794 <__aeabi_ddiv>
 8000d44:	4602      	mov	r2, r0
 8000d46:	460b      	mov	r3, r1
 8000d48:	4610      	mov	r0, r2
 8000d4a:	4619      	mov	r1, r3
 8000d4c:	f7ff fe0a 	bl	8000964 <__aeabi_d2f>
 8000d50:	4603      	mov	r3, r0
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <read_ADC+0x84>)
 8000d54:	6013      	str	r3, [r2, #0]
	}

	HAL_ADC_Stop(&hadc1);
 8000d56:	4806      	ldr	r0, [pc, #24]	@ (8000d70 <read_ADC+0x78>)
 8000d58:	f000 fe52 	bl	8001a00 <HAL_ADC_Stop>

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	66666666 	.word	0x66666666
 8000d64:	400a6666 	.word	0x400a6666
 8000d68:	00000000 	.word	0x00000000
 8000d6c:	40affe00 	.word	0x40affe00
 8000d70:	200000a0 	.word	0x200000a0
 8000d74:	000186a0 	.word	0x000186a0
 8000d78:	20000098 	.word	0x20000098
 8000d7c:	2000009c 	.word	0x2000009c

08000d80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d84:	f000 fc90 	bl	80016a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d88:	f000 f812 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8c:	f000 f960 	bl	8001050 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000d90:	f000 f8ca 	bl	8000f28 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000d94:	f000 f8f6 	bl	8000f84 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000d98:	f000 f924 	bl	8000fe4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000d9c:	f008 fb36 	bl	800940c <MX_USB_HOST_Init>
  MX_ADC1_Init();
 8000da0:	f000 f870 	bl	8000e84 <MX_ADC1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000da4:	f008 fb58 	bl	8009458 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    read_ADC();
 8000da8:	f7ff ffa6 	bl	8000cf8 <read_ADC>
    MX_USB_HOST_Process();
 8000dac:	bf00      	nop
 8000dae:	e7f9      	b.n	8000da4 <main+0x24>

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	@ 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	@ 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f008 feec 	bl	8009b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b28      	ldr	r3, [pc, #160]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	4a27      	ldr	r2, [pc, #156]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de4:	4b25      	ldr	r3, [pc, #148]	@ (8000e7c <SystemClock_Config+0xcc>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a21      	ldr	r2, [pc, #132]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000dfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b1f      	ldr	r3, [pc, #124]	@ (8000e80 <SystemClock_Config+0xd0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e10:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e14:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e20:	2308      	movs	r3, #8
 8000e22:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e28:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e2e:	2307      	movs	r3, #7
 8000e30:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4618      	mov	r0, r3
 8000e38:	f004 faac 	bl	8005394 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e42:	f000 fa03 	bl	800124c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e52:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e5e:	f107 030c 	add.w	r3, r7, #12
 8000e62:	2105      	movs	r1, #5
 8000e64:	4618      	mov	r0, r3
 8000e66:	f004 fd0d 	bl	8005884 <HAL_RCC_ClockConfig>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e70:	f000 f9ec 	bl	800124c <Error_Handler>
  }
}
 8000e74:	bf00      	nop
 8000e76:	3750      	adds	r7, #80	@ 0x50
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e96:	4b21      	ldr	r3, [pc, #132]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000e98:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <MX_ADC1_Init+0x9c>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000e9e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ea2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b19      	ldr	r3, [pc, #100]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b15      	ldr	r3, [pc, #84]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ec6:	4a17      	ldr	r2, [pc, #92]	@ (8000f24 <MX_ADC1_Init+0xa0>)
 8000ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b14      	ldr	r3, [pc, #80]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ed0:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ed6:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ede:	4b0f      	ldr	r3, [pc, #60]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee4:	480d      	ldr	r0, [pc, #52]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000ee6:	f000 fc75 	bl	80017d4 <HAL_ADC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f9ac 	bl	800124c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_ADC1_Init+0x98>)
 8000f06:	f000 fe47 	bl	8001b98 <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f10:	f000 f99c 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3710      	adds	r7, #16
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	200000a0 	.word	0x200000a0
 8000f20:	40012000 	.word	0x40012000
 8000f24:	0f000001 	.word	0x0f000001

08000f28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f2e:	4a13      	ldr	r2, [pc, #76]	@ (8000f7c <MX_I2C1_Init+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000f32:	4b11      	ldr	r3, [pc, #68]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f34:	4a12      	ldr	r2, [pc, #72]	@ (8000f80 <MX_I2C1_Init+0x58>)
 8000f36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f46:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000f4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f58:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f64:	4804      	ldr	r0, [pc, #16]	@ (8000f78 <MX_I2C1_Init+0x50>)
 8000f66:	f003 fc31 	bl	80047cc <HAL_I2C_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f70:	f000 f96c 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	200000e8 	.word	0x200000e8
 8000f7c:	40005400 	.word	0x40005400
 8000f80:	000186a0 	.word	0x000186a0

08000f84 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000f88:	4b13      	ldr	r3, [pc, #76]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000f8a:	4a14      	ldr	r2, [pc, #80]	@ (8000fdc <MX_I2S3_Init+0x58>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000f8e:	4b12      	ldr	r3, [pc, #72]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000f96:	4b10      	ldr	r3, [pc, #64]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fa4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fa8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fac:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <MX_I2S3_Init+0x5c>)
 8000fae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	@ (8000fd8 <MX_I2S3_Init+0x54>)
 8000fc4:	f003 fd46 	bl	8004a54 <HAL_I2S_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000fce:	f000 f93d 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000013c 	.word	0x2000013c
 8000fdc:	40003c00 	.word	0x40003c00
 8000fe0:	00017700 	.word	0x00017700

08000fe4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000fe8:	4b17      	ldr	r3, [pc, #92]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000fea:	4a18      	ldr	r2, [pc, #96]	@ (800104c <MX_SPI1_Init+0x68>)
 8000fec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fee:	4b16      	ldr	r3, [pc, #88]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ff0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ff4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ff6:	4b14      	ldr	r3, [pc, #80]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_SPI1_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_SPI1_Init+0x64>)
 800100a:	2200      	movs	r2, #0
 800100c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001010:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001014:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001016:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_SPI1_Init+0x64>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001024:	2200      	movs	r2, #0
 8001026:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_SPI1_Init+0x64>)
 800102a:	2200      	movs	r2, #0
 800102c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001030:	220a      	movs	r2, #10
 8001032:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_SPI1_Init+0x64>)
 8001036:	f004 ff73 	bl	8005f20 <HAL_SPI_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001040:	f000 f904 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000184 	.word	0x20000184
 800104c:	40013000 	.word	0x40013000

08001050 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	@ 0x30
 8001054:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001056:	f107 031c 	add.w	r3, r7, #28
 800105a:	2200      	movs	r2, #0
 800105c:	601a      	str	r2, [r3, #0]
 800105e:	605a      	str	r2, [r3, #4]
 8001060:	609a      	str	r2, [r3, #8]
 8001062:	60da      	str	r2, [r3, #12]
 8001064:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	61bb      	str	r3, [r7, #24]
 800106a:	4b72      	ldr	r3, [pc, #456]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	4a71      	ldr	r2, [pc, #452]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 8001070:	f043 0310 	orr.w	r3, r3, #16
 8001074:	6313      	str	r3, [r2, #48]	@ 0x30
 8001076:	4b6f      	ldr	r3, [pc, #444]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107a:	f003 0310 	and.w	r3, r3, #16
 800107e:	61bb      	str	r3, [r7, #24]
 8001080:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	617b      	str	r3, [r7, #20]
 8001086:	4b6b      	ldr	r3, [pc, #428]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	4a6a      	ldr	r2, [pc, #424]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	6313      	str	r3, [r2, #48]	@ 0x30
 8001092:	4b68      	ldr	r3, [pc, #416]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	617b      	str	r3, [r7, #20]
 800109c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b64      	ldr	r3, [pc, #400]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a63      	ldr	r2, [pc, #396]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b61      	ldr	r3, [pc, #388]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b5d      	ldr	r3, [pc, #372]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a5c      	ldr	r2, [pc, #368]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	4b56      	ldr	r3, [pc, #344]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a55      	ldr	r2, [pc, #340]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010e0:	f043 0302 	orr.w	r3, r3, #2
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b53      	ldr	r3, [pc, #332]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a4e      	ldr	r2, [pc, #312]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 80010fc:	f043 0308 	orr.w	r3, r3, #8
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b4c      	ldr	r3, [pc, #304]	@ (8001234 <MX_GPIO_Init+0x1e4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0308 	and.w	r3, r3, #8
 800110a:	607b      	str	r3, [r7, #4]
 800110c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	2108      	movs	r1, #8
 8001112:	4849      	ldr	r0, [pc, #292]	@ (8001238 <MX_GPIO_Init+0x1e8>)
 8001114:	f001 fa0c 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2101      	movs	r1, #1
 800111c:	4847      	ldr	r0, [pc, #284]	@ (800123c <MX_GPIO_Init+0x1ec>)
 800111e:	f001 fa07 	bl	8002530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001122:	2200      	movs	r2, #0
 8001124:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001128:	4845      	ldr	r0, [pc, #276]	@ (8001240 <MX_GPIO_Init+0x1f0>)
 800112a:	f001 fa01 	bl	8002530 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800112e:	2308      	movs	r3, #8
 8001130:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001132:	2301      	movs	r3, #1
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2300      	movs	r3, #0
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	483c      	ldr	r0, [pc, #240]	@ (8001238 <MX_GPIO_Init+0x1e8>)
 8001146:	f001 f857 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800114a:	2301      	movs	r3, #1
 800114c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2300      	movs	r3, #0
 8001158:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 031c 	add.w	r3, r7, #28
 800115e:	4619      	mov	r1, r3
 8001160:	4836      	ldr	r0, [pc, #216]	@ (800123c <MX_GPIO_Init+0x1ec>)
 8001162:	f001 f849 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001166:	2308      	movs	r3, #8
 8001168:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116e:	2300      	movs	r3, #0
 8001170:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001176:	2305      	movs	r3, #5
 8001178:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800117a:	f107 031c 	add.w	r3, r7, #28
 800117e:	4619      	mov	r1, r3
 8001180:	482e      	ldr	r0, [pc, #184]	@ (800123c <MX_GPIO_Init+0x1ec>)
 8001182:	f001 f839 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001186:	2301      	movs	r3, #1
 8001188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800118a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800118e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	482a      	ldr	r0, [pc, #168]	@ (8001244 <MX_GPIO_Init+0x1f4>)
 800119c:	f001 f82c 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80011a0:	2304      	movs	r3, #4
 80011a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 031c 	add.w	r3, r7, #28
 80011b0:	4619      	mov	r1, r3
 80011b2:	4825      	ldr	r0, [pc, #148]	@ (8001248 <MX_GPIO_Init+0x1f8>)
 80011b4:	f001 f820 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80011b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011ca:	2305      	movs	r3, #5
 80011cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80011ce:	f107 031c 	add.w	r3, r7, #28
 80011d2:	4619      	mov	r1, r3
 80011d4:	481c      	ldr	r0, [pc, #112]	@ (8001248 <MX_GPIO_Init+0x1f8>)
 80011d6:	f001 f80f 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80011da:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80011de:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e0:	2301      	movs	r3, #1
 80011e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4813      	ldr	r0, [pc, #76]	@ (8001240 <MX_GPIO_Init+0x1f0>)
 80011f4:	f001 f800 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80011f8:	2320      	movs	r3, #32
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001204:	f107 031c 	add.w	r3, r7, #28
 8001208:	4619      	mov	r1, r3
 800120a:	480d      	ldr	r0, [pc, #52]	@ (8001240 <MX_GPIO_Init+0x1f0>)
 800120c:	f000 fff4 	bl	80021f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001210:	2302      	movs	r3, #2
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001214:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800121e:	f107 031c 	add.w	r3, r7, #28
 8001222:	4619      	mov	r1, r3
 8001224:	4804      	ldr	r0, [pc, #16]	@ (8001238 <MX_GPIO_Init+0x1e8>)
 8001226:	f000 ffe7 	bl	80021f8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800122a:	bf00      	nop
 800122c:	3730      	adds	r7, #48	@ 0x30
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40021000 	.word	0x40021000
 800123c:	40020800 	.word	0x40020800
 8001240:	40020c00 	.word	0x40020c00
 8001244:	40020000 	.word	0x40020000
 8001248:	40020400 	.word	0x40020400

0800124c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001250:	b672      	cpsid	i
}
 8001252:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001254:	bf00      	nop
 8001256:	e7fd      	b.n	8001254 <Error_Handler+0x8>

08001258 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	607b      	str	r3, [r7, #4]
 8001262:	4b10      	ldr	r3, [pc, #64]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001266:	4a0f      	ldr	r2, [pc, #60]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800126c:	6453      	str	r3, [r2, #68]	@ 0x44
 800126e:	4b0d      	ldr	r3, [pc, #52]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001276:	607b      	str	r3, [r7, #4]
 8001278:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	603b      	str	r3, [r7, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001282:	4a08      	ldr	r2, [pc, #32]	@ (80012a4 <HAL_MspInit+0x4c>)
 8001284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001288:	6413      	str	r3, [r2, #64]	@ 0x40
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <HAL_MspInit+0x4c>)
 800128c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001296:	2007      	movs	r0, #7
 8001298:	f000 ff6c 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	@ 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a17      	ldr	r2, [pc, #92]	@ (8001324 <HAL_ADC_MspInit+0x7c>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d127      	bne.n	800131a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d2:	4a15      	ldr	r2, [pc, #84]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012da:	4b13      	ldr	r3, [pc, #76]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001328 <HAL_ADC_MspInit+0x80>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001302:	2302      	movs	r3, #2
 8001304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001306:	2303      	movs	r3, #3
 8001308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	@ (800132c <HAL_ADC_MspInit+0x84>)
 8001316:	f000 ff6f 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	@ 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40012000 	.word	0x40012000
 8001328:	40023800 	.word	0x40023800
 800132c:	40020000 	.word	0x40020000

08001330 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08a      	sub	sp, #40	@ 0x28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 0314 	add.w	r3, r7, #20
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a19      	ldr	r2, [pc, #100]	@ (80013b4 <HAL_I2C_MspInit+0x84>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12c      	bne.n	80013ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a17      	ldr	r2, [pc, #92]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 800135c:	f043 0302 	orr.w	r3, r3, #2
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b15      	ldr	r3, [pc, #84]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800136e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001372:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001374:	2312      	movs	r3, #18
 8001376:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001380:	2304      	movs	r3, #4
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	4619      	mov	r1, r3
 800138a:	480c      	ldr	r0, [pc, #48]	@ (80013bc <HAL_I2C_MspInit+0x8c>)
 800138c:	f000 ff34 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	4a07      	ldr	r2, [pc, #28]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 800139a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800139e:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a0:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_I2C_MspInit+0x88>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013a8:	60fb      	str	r3, [r7, #12]
 80013aa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013ac:	bf00      	nop
 80013ae:	3728      	adds	r7, #40	@ 0x28
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	40005400 	.word	0x40005400
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020400 	.word	0x40020400

080013c0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08e      	sub	sp, #56	@ 0x38
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a31      	ldr	r2, [pc, #196]	@ (80014b0 <HAL_I2S_MspInit+0xf0>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d15a      	bne.n	80014a6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80013f0:	2301      	movs	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80013f4:	23c0      	movs	r3, #192	@ 0xc0
 80013f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4618      	mov	r0, r3
 8001402:	f004 fc4b 	bl	8005c9c <HAL_RCCEx_PeriphCLKConfig>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800140c:	f7ff ff1e 	bl	800124c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	4b27      	ldr	r3, [pc, #156]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 8001416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001418:	4a26      	ldr	r2, [pc, #152]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 800141a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800141e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001420:	4b24      	ldr	r3, [pc, #144]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	4b20      	ldr	r3, [pc, #128]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001434:	4a1f      	ldr	r2, [pc, #124]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6313      	str	r3, [r2, #48]	@ 0x30
 800143c:	4b1d      	ldr	r3, [pc, #116]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001448:	2300      	movs	r3, #0
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001450:	4a18      	ldr	r2, [pc, #96]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 8001452:	f043 0304 	orr.w	r3, r3, #4
 8001456:	6313      	str	r3, [r2, #48]	@ 0x30
 8001458:	4b16      	ldr	r3, [pc, #88]	@ (80014b4 <HAL_I2S_MspInit+0xf4>)
 800145a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145c:	f003 0304 	and.w	r3, r3, #4
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001464:	2310      	movs	r3, #16
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001468:	2302      	movs	r3, #2
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001474:	2306      	movs	r3, #6
 8001476:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	480e      	ldr	r0, [pc, #56]	@ (80014b8 <HAL_I2S_MspInit+0xf8>)
 8001480:	f000 feba 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001484:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001496:	2306      	movs	r3, #6
 8001498:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4806      	ldr	r0, [pc, #24]	@ (80014bc <HAL_I2S_MspInit+0xfc>)
 80014a2:	f000 fea9 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 80014a6:	bf00      	nop
 80014a8:	3738      	adds	r7, #56	@ 0x38
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40003c00 	.word	0x40003c00
 80014b4:	40023800 	.word	0x40023800
 80014b8:	40020000 	.word	0x40020000
 80014bc:	40020800 	.word	0x40020800

080014c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08a      	sub	sp, #40	@ 0x28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <HAL_SPI_MspInit+0x84>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d12b      	bne.n	800153a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
 80014e6:	4b18      	ldr	r3, [pc, #96]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a17      	ldr	r2, [pc, #92]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001506:	4a10      	ldr	r2, [pc, #64]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	@ 0x30
 800150e:	4b0e      	ldr	r3, [pc, #56]	@ (8001548 <HAL_SPI_MspInit+0x88>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800151a:	23e0      	movs	r3, #224	@ 0xe0
 800151c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152a:	2305      	movs	r3, #5
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0314 	add.w	r3, r7, #20
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	@ (800154c <HAL_SPI_MspInit+0x8c>)
 8001536:	f000 fe5f 	bl	80021f8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 800153a:	bf00      	nop
 800153c:	3728      	adds	r7, #40	@ 0x28
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40013000 	.word	0x40013000
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000

08001550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001554:	bf00      	nop
 8001556:	e7fd      	b.n	8001554 <NMI_Handler+0x4>

08001558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800155c:	bf00      	nop
 800155e:	e7fd      	b.n	800155c <HardFault_Handler+0x4>

08001560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <MemManage_Handler+0x4>

08001568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800156c:	bf00      	nop
 800156e:	e7fd      	b.n	800156c <BusFault_Handler+0x4>

08001570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <UsageFault_Handler+0x4>

08001578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr

08001586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001598:	bf00      	nop
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a2:	b580      	push	{r7, lr}
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f000 f8d1 	bl	800174c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
	...

080015b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80015b4:	4802      	ldr	r0, [pc, #8]	@ (80015c0 <OTG_FS_IRQHandler+0x10>)
 80015b6:	f001 fab5 	bl	8002b24 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	200005c0 	.word	0x200005c0

080015c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b086      	sub	sp, #24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015cc:	4a14      	ldr	r2, [pc, #80]	@ (8001620 <_sbrk+0x5c>)
 80015ce:	4b15      	ldr	r3, [pc, #84]	@ (8001624 <_sbrk+0x60>)
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d8:	4b13      	ldr	r3, [pc, #76]	@ (8001628 <_sbrk+0x64>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e0:	4b11      	ldr	r3, [pc, #68]	@ (8001628 <_sbrk+0x64>)
 80015e2:	4a12      	ldr	r2, [pc, #72]	@ (800162c <_sbrk+0x68>)
 80015e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015e6:	4b10      	ldr	r3, [pc, #64]	@ (8001628 <_sbrk+0x64>)
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4413      	add	r3, r2
 80015ee:	693a      	ldr	r2, [r7, #16]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d207      	bcs.n	8001604 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f4:	f008 faea 	bl	8009bcc <__errno>
 80015f8:	4603      	mov	r3, r0
 80015fa:	220c      	movs	r2, #12
 80015fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001602:	e009      	b.n	8001618 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <_sbrk+0x64>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160a:	4b07      	ldr	r3, [pc, #28]	@ (8001628 <_sbrk+0x64>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4413      	add	r3, r2
 8001612:	4a05      	ldr	r2, [pc, #20]	@ (8001628 <_sbrk+0x64>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001616:	68fb      	ldr	r3, [r7, #12]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20020000 	.word	0x20020000
 8001624:	00000400 	.word	0x00000400
 8001628:	200001dc 	.word	0x200001dc
 800162c:	20000ae8 	.word	0x20000ae8

08001630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <SystemInit+0x20>)
 8001636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800163a:	4a05      	ldr	r2, [pc, #20]	@ (8001650 <SystemInit+0x20>)
 800163c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001654:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800168c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001658:	f7ff ffea 	bl	8001630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480c      	ldr	r0, [pc, #48]	@ (8001690 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800165e:	490d      	ldr	r1, [pc, #52]	@ (8001694 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001660:	4a0d      	ldr	r2, [pc, #52]	@ (8001698 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0a      	ldr	r2, [pc, #40]	@ (800169c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001674:	4c0a      	ldr	r4, [pc, #40]	@ (80016a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001682:	f008 faa9 	bl	8009bd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001686:	f7ff fb7b 	bl	8000d80 <main>
  bx  lr    
 800168a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800168c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001690:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001694:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001698:	08009cfc 	.word	0x08009cfc
  ldr r2, =_sbss
 800169c:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80016a0:	20000ae8 	.word	0x20000ae8

080016a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a4:	e7fe      	b.n	80016a4 <ADC_IRQHandler>
	...

080016a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ac:	4b0e      	ldr	r3, [pc, #56]	@ (80016e8 <HAL_Init+0x40>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a0d      	ldr	r2, [pc, #52]	@ (80016e8 <HAL_Init+0x40>)
 80016b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_Init+0x40>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_Init+0x40>)
 80016be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016c4:	4b08      	ldr	r3, [pc, #32]	@ (80016e8 <HAL_Init+0x40>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a07      	ldr	r2, [pc, #28]	@ (80016e8 <HAL_Init+0x40>)
 80016ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f000 fd4f 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f000 f808 	bl	80016ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016dc:	f7ff fdbc 	bl	8001258 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40023c00 	.word	0x40023c00

080016ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016f4:	4b12      	ldr	r3, [pc, #72]	@ (8001740 <HAL_InitTick+0x54>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <HAL_InitTick+0x58>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	4619      	mov	r1, r3
 80016fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001702:	fbb3 f3f1 	udiv	r3, r3, r1
 8001706:	fbb2 f3f3 	udiv	r3, r2, r3
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fd67 	bl	80021de <HAL_SYSTICK_Config>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e00e      	b.n	8001738 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2b0f      	cmp	r3, #15
 800171e:	d80a      	bhi.n	8001736 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001720:	2200      	movs	r2, #0
 8001722:	6879      	ldr	r1, [r7, #4]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	f000 fd2f 	bl	800218a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800172c:	4a06      	ldr	r2, [pc, #24]	@ (8001748 <HAL_InitTick+0x5c>)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001732:	2300      	movs	r3, #0
 8001734:	e000      	b.n	8001738 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20000000 	.word	0x20000000
 8001744:	20000008 	.word	0x20000008
 8001748:	20000004 	.word	0x20000004

0800174c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <HAL_IncTick+0x20>)
 8001752:	781b      	ldrb	r3, [r3, #0]
 8001754:	461a      	mov	r2, r3
 8001756:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x24>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4413      	add	r3, r2
 800175c:	4a04      	ldr	r2, [pc, #16]	@ (8001770 <HAL_IncTick+0x24>)
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	20000008 	.word	0x20000008
 8001770:	200001e0 	.word	0x200001e0

08001774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return uwTick;
 8001778:	4b03      	ldr	r3, [pc, #12]	@ (8001788 <HAL_GetTick+0x14>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200001e0 	.word	0x200001e0

0800178c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001794:	f7ff ffee 	bl	8001774 <HAL_GetTick>
 8001798:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a4:	d005      	beq.n	80017b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <HAL_Delay+0x44>)
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	461a      	mov	r2, r3
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	4413      	add	r3, r2
 80017b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017b2:	bf00      	nop
 80017b4:	f7ff ffde 	bl	8001774 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d8f7      	bhi.n	80017b4 <HAL_Delay+0x28>
  {
  }
}
 80017c4:	bf00      	nop
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000008 	.word	0x20000008

080017d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e033      	b.n	8001852 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d109      	bne.n	8001806 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff fd58 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	f003 0310 	and.w	r3, r3, #16
 800180e:	2b00      	cmp	r3, #0
 8001810:	d118      	bne.n	8001844 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001816:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800181a:	f023 0302 	bic.w	r3, r3, #2
 800181e:	f043 0202 	orr.w	r2, r3, #2
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fad8 	bl	8001ddc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001836:	f023 0303 	bic.w	r3, r3, #3
 800183a:	f043 0201 	orr.w	r2, r3, #1
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	641a      	str	r2, [r3, #64]	@ 0x40
 8001842:	e001      	b.n	8001848 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001850:	7bfb      	ldrb	r3, [r7, #15]
}
 8001852:	4618      	mov	r0, r3
 8001854:	3710      	adds	r7, #16
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_Start+0x1a>
 8001872:	2302      	movs	r3, #2
 8001874:	e0b2      	b.n	80019dc <HAL_ADC_Start+0x180>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d018      	beq.n	80018be <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800189c:	4b52      	ldr	r3, [pc, #328]	@ (80019e8 <HAL_ADC_Start+0x18c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a52      	ldr	r2, [pc, #328]	@ (80019ec <HAL_ADC_Start+0x190>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	0c9a      	lsrs	r2, r3, #18
 80018a8:	4613      	mov	r3, r2
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	4413      	add	r3, r2
 80018ae:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 0301 	and.w	r3, r3, #1
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d17a      	bne.n	80019c2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80018d4:	f023 0301 	bic.w	r3, r3, #1
 80018d8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d007      	beq.n	80018fe <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018f6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001906:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800190a:	d106      	bne.n	800191a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001910:	f023 0206 	bic.w	r2, r3, #6
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	645a      	str	r2, [r3, #68]	@ 0x44
 8001918:	e002      	b.n	8001920 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2200      	movs	r2, #0
 800191e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001928:	4b31      	ldr	r3, [pc, #196]	@ (80019f0 <HAL_ADC_Start+0x194>)
 800192a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001934:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2b00      	cmp	r3, #0
 8001940:	d12a      	bne.n	8001998 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a2b      	ldr	r2, [pc, #172]	@ (80019f4 <HAL_ADC_Start+0x198>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d015      	beq.n	8001978 <HAL_ADC_Start+0x11c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a29      	ldr	r2, [pc, #164]	@ (80019f8 <HAL_ADC_Start+0x19c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d105      	bne.n	8001962 <HAL_ADC_Start+0x106>
 8001956:	4b26      	ldr	r3, [pc, #152]	@ (80019f0 <HAL_ADC_Start+0x194>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00a      	beq.n	8001978 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a25      	ldr	r2, [pc, #148]	@ (80019fc <HAL_ADC_Start+0x1a0>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d136      	bne.n	80019da <HAL_ADC_Start+0x17e>
 800196c:	4b20      	ldr	r3, [pc, #128]	@ (80019f0 <HAL_ADC_Start+0x194>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0310 	and.w	r3, r3, #16
 8001974:	2b00      	cmp	r3, #0
 8001976:	d130      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d129      	bne.n	80019da <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001994:	609a      	str	r2, [r3, #8]
 8001996:	e020      	b.n	80019da <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	@ (80019f4 <HAL_ADC_Start+0x198>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d11b      	bne.n	80019da <HAL_ADC_Start+0x17e>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d114      	bne.n	80019da <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	e00b      	b.n	80019da <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f043 0210 	orr.w	r2, r3, #16
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d2:	f043 0201 	orr.w	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3714      	adds	r7, #20
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000000 	.word	0x20000000
 80019ec:	431bde83 	.word	0x431bde83
 80019f0:	40012300 	.word	0x40012300
 80019f4:	40012000 	.word	0x40012000
 80019f8:	40012100 	.word	0x40012100
 80019fc:	40012200 	.word	0x40012200

08001a00 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d101      	bne.n	8001a16 <HAL_ADC_Stop+0x16>
 8001a12:	2302      	movs	r3, #2
 8001a14:	e021      	b.n	8001a5a <HAL_ADC_Stop+0x5a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2201      	movs	r2, #1
 8001a1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	689a      	ldr	r2, [r3, #8]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f022 0201 	bic.w	r2, r2, #1
 8001a2c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d109      	bne.n	8001a50 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a40:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a44:	f023 0301 	bic.w	r3, r3, #1
 8001a48:	f043 0201 	orr.w	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a82:	d113      	bne.n	8001aac <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001a8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a92:	d10b      	bne.n	8001aac <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	f043 0220 	orr.w	r2, r3, #32
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e063      	b.n	8001b74 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001aac:	f7ff fe62 	bl	8001774 <HAL_GetTick>
 8001ab0:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ab2:	e021      	b.n	8001af8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aba:	d01d      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d007      	beq.n	8001ad2 <HAL_ADC_PollForConversion+0x6c>
 8001ac2:	f7ff fe57 	bl	8001774 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d212      	bcs.n	8001af8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d00b      	beq.n	8001af8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae4:	f043 0204 	orr.w	r2, r3, #4
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e03d      	b.n	8001b74 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d1d6      	bne.n	8001ab4 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f06f 0212 	mvn.w	r2, #18
 8001b0e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d123      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d11f      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d111      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d105      	bne.n	8001b72 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3710      	adds	r7, #16
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b085      	sub	sp, #20
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x1c>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e105      	b.n	8001dc0 <HAL_ADC_ConfigChannel+0x228>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2b09      	cmp	r3, #9
 8001bc2:	d925      	bls.n	8001c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68d9      	ldr	r1, [r3, #12]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	4413      	add	r3, r2
 8001bd8:	3b1e      	subs	r3, #30
 8001bda:	2207      	movs	r2, #7
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	43da      	mvns	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	400a      	ands	r2, r1
 8001be8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68d9      	ldr	r1, [r3, #12]
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4403      	add	r3, r0
 8001c02:	3b1e      	subs	r3, #30
 8001c04:	409a      	lsls	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	60da      	str	r2, [r3, #12]
 8001c0e:	e022      	b.n	8001c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	6919      	ldr	r1, [r3, #16]
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	4613      	mov	r3, r2
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	4413      	add	r3, r2
 8001c24:	2207      	movs	r2, #7
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	400a      	ands	r2, r1
 8001c32:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6919      	ldr	r1, [r3, #16]
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	4618      	mov	r0, r3
 8001c46:	4603      	mov	r3, r0
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	4403      	add	r3, r0
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d824      	bhi.n	8001ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685a      	ldr	r2, [r3, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	3b05      	subs	r3, #5
 8001c70:	221f      	movs	r2, #31
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	b29b      	uxth	r3, r3
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	4613      	mov	r3, r2
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	4413      	add	r3, r2
 8001c98:	3b05      	subs	r3, #5
 8001c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ca6:	e04c      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	2b0c      	cmp	r3, #12
 8001cae:	d824      	bhi.n	8001cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685a      	ldr	r2, [r3, #4]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	4413      	add	r3, r2
 8001cc0:	3b23      	subs	r3, #35	@ 0x23
 8001cc2:	221f      	movs	r2, #31
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43da      	mvns	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	400a      	ands	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	4413      	add	r3, r2
 8001cea:	3b23      	subs	r3, #35	@ 0x23
 8001cec:	fa00 f203 	lsl.w	r2, r0, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001cf8:	e023      	b.n	8001d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685a      	ldr	r2, [r3, #4]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	3b41      	subs	r3, #65	@ 0x41
 8001d0c:	221f      	movs	r2, #31
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	400a      	ands	r2, r1
 8001d1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	3b41      	subs	r3, #65	@ 0x41
 8001d36:	fa00 f203 	lsl.w	r2, r0, r3
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d42:	4b22      	ldr	r3, [pc, #136]	@ (8001dcc <HAL_ADC_ConfigChannel+0x234>)
 8001d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a21      	ldr	r2, [pc, #132]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d109      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b12      	cmp	r3, #18
 8001d56:	d105      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a19      	ldr	r2, [pc, #100]	@ (8001dd0 <HAL_ADC_ConfigChannel+0x238>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d123      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2b10      	cmp	r3, #16
 8001d74:	d003      	beq.n	8001d7e <HAL_ADC_ConfigChannel+0x1e6>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	2b11      	cmp	r3, #17
 8001d7c:	d11b      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b10      	cmp	r3, #16
 8001d90:	d111      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d92:	4b10      	ldr	r3, [pc, #64]	@ (8001dd4 <HAL_ADC_ConfigChannel+0x23c>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a10      	ldr	r2, [pc, #64]	@ (8001dd8 <HAL_ADC_ConfigChannel+0x240>)
 8001d98:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9c:	0c9a      	lsrs	r2, r3, #18
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001da8:	e002      	b.n	8001db0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	3b01      	subs	r3, #1
 8001dae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f9      	bne.n	8001daa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3714      	adds	r7, #20
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	40012300 	.word	0x40012300
 8001dd0:	40012000 	.word	0x40012000
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	431bde83 	.word	0x431bde83

08001ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b085      	sub	sp, #20
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de4:	4b79      	ldr	r3, [pc, #484]	@ (8001fcc <ADC_Init+0x1f0>)
 8001de6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	431a      	orrs	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6859      	ldr	r1, [r3, #4]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	021a      	lsls	r2, r3, #8
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	6859      	ldr	r1, [r3, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	689a      	ldr	r2, [r3, #8]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6899      	ldr	r1, [r3, #8]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68da      	ldr	r2, [r3, #12]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e6e:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <ADC_Init+0x1f4>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d022      	beq.n	8001eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689a      	ldr	r2, [r3, #8]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	6899      	ldr	r1, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	430a      	orrs	r2, r1
 8001e94:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	689a      	ldr	r2, [r3, #8]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6899      	ldr	r1, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	e00f      	b.n	8001eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689a      	ldr	r2, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001ed8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	689a      	ldr	r2, [r3, #8]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f022 0202 	bic.w	r2, r2, #2
 8001ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	6899      	ldr	r1, [r3, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	7e1b      	ldrb	r3, [r3, #24]
 8001ef4:	005a      	lsls	r2, r3, #1
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685a      	ldr	r2, [r3, #4]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f16:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6859      	ldr	r1, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f32:	3b01      	subs	r3, #1
 8001f34:	035a      	lsls	r2, r3, #13
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	605a      	str	r2, [r3, #4]
 8001f3e:	e007      	b.n	8001f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	051a      	lsls	r2, r3, #20
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	430a      	orrs	r2, r1
 8001f74:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6899      	ldr	r1, [r3, #8]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f92:	025a      	lsls	r2, r3, #9
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	695b      	ldr	r3, [r3, #20]
 8001fb6:	029a      	lsls	r2, r3, #10
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40012300 	.word	0x40012300
 8001fd0:	0f000001 	.word	0x0f000001

08001fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	f003 0307 	and.w	r3, r3, #7
 8001fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002006:	4a04      	ldr	r2, [pc, #16]	@ (8002018 <__NVIC_SetPriorityGrouping+0x44>)
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	60d3      	str	r3, [r2, #12]
}
 800200c:	bf00      	nop
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002020:	4b04      	ldr	r3, [pc, #16]	@ (8002034 <__NVIC_GetPriorityGrouping+0x18>)
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	0a1b      	lsrs	r3, r3, #8
 8002026:	f003 0307 	and.w	r3, r3, #7
}
 800202a:	4618      	mov	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	e000ed00 	.word	0xe000ed00

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	2b00      	cmp	r3, #0
 8002048:	db0b      	blt.n	8002062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204a:	79fb      	ldrb	r3, [r7, #7]
 800204c:	f003 021f 	and.w	r2, r3, #31
 8002050:	4907      	ldr	r1, [pc, #28]	@ (8002070 <__NVIC_EnableIRQ+0x38>)
 8002052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002056:	095b      	lsrs	r3, r3, #5
 8002058:	2001      	movs	r0, #1
 800205a:	fa00 f202 	lsl.w	r2, r0, r2
 800205e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000e100 	.word	0xe000e100

08002074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	6039      	str	r1, [r7, #0]
 800207e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002084:	2b00      	cmp	r3, #0
 8002086:	db0a      	blt.n	800209e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	b2da      	uxtb	r2, r3
 800208c:	490c      	ldr	r1, [pc, #48]	@ (80020c0 <__NVIC_SetPriority+0x4c>)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	0112      	lsls	r2, r2, #4
 8002094:	b2d2      	uxtb	r2, r2
 8002096:	440b      	add	r3, r1
 8002098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800209c:	e00a      	b.n	80020b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	b2da      	uxtb	r2, r3
 80020a2:	4908      	ldr	r1, [pc, #32]	@ (80020c4 <__NVIC_SetPriority+0x50>)
 80020a4:	79fb      	ldrb	r3, [r7, #7]
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	3b04      	subs	r3, #4
 80020ac:	0112      	lsls	r2, r2, #4
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	440b      	add	r3, r1
 80020b2:	761a      	strb	r2, [r3, #24]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	e000e100 	.word	0xe000e100
 80020c4:	e000ed00 	.word	0xe000ed00

080020c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b089      	sub	sp, #36	@ 0x24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	f1c3 0307 	rsb	r3, r3, #7
 80020e2:	2b04      	cmp	r3, #4
 80020e4:	bf28      	it	cs
 80020e6:	2304      	movcs	r3, #4
 80020e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3304      	adds	r3, #4
 80020ee:	2b06      	cmp	r3, #6
 80020f0:	d902      	bls.n	80020f8 <NVIC_EncodePriority+0x30>
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	3b03      	subs	r3, #3
 80020f6:	e000      	b.n	80020fa <NVIC_EncodePriority+0x32>
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002100:	69bb      	ldr	r3, [r7, #24]
 8002102:	fa02 f303 	lsl.w	r3, r2, r3
 8002106:	43da      	mvns	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	401a      	ands	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002110:	f04f 31ff 	mov.w	r1, #4294967295
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	fa01 f303 	lsl.w	r3, r1, r3
 800211a:	43d9      	mvns	r1, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	4313      	orrs	r3, r2
         );
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	@ 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3b01      	subs	r3, #1
 800213c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002140:	d301      	bcc.n	8002146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002142:	2301      	movs	r3, #1
 8002144:	e00f      	b.n	8002166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002146:	4a0a      	ldr	r2, [pc, #40]	@ (8002170 <SysTick_Config+0x40>)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3b01      	subs	r3, #1
 800214c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800214e:	210f      	movs	r1, #15
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f7ff ff8e 	bl	8002074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002158:	4b05      	ldr	r3, [pc, #20]	@ (8002170 <SysTick_Config+0x40>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800215e:	4b04      	ldr	r3, [pc, #16]	@ (8002170 <SysTick_Config+0x40>)
 8002160:	2207      	movs	r2, #7
 8002162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3708      	adds	r7, #8
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	e000e010 	.word	0xe000e010

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff29 	bl	8001fd4 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff3e 	bl	800201c <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ff8e 	bl	80020c8 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff5d 	bl	8002074 <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff31 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b082      	sub	sp, #8
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f7ff ffa2 	bl	8002130 <SysTick_Config>
 80021ec:	4603      	mov	r3, r0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b089      	sub	sp, #36	@ 0x24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800220e:	2300      	movs	r3, #0
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e16b      	b.n	80024ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002214:	2201      	movs	r2, #1
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	4013      	ands	r3, r2
 8002226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002228:	693a      	ldr	r2, [r7, #16]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	429a      	cmp	r2, r3
 800222e:	f040 815a 	bne.w	80024e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d005      	beq.n	800224a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002246:	2b02      	cmp	r3, #2
 8002248:	d130      	bne.n	80022ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	2203      	movs	r2, #3
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	005b      	lsls	r3, r3, #1
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69ba      	ldr	r2, [r7, #24]
 8002278:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002280:	2201      	movs	r2, #1
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	69b9      	ldr	r1, [r7, #24]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80b4 	beq.w	80024e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b60      	ldr	r3, [pc, #384]	@ (8002504 <HAL_GPIO_Init+0x30c>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002386:	4a5f      	ldr	r2, [pc, #380]	@ (8002504 <HAL_GPIO_Init+0x30c>)
 8002388:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800238c:	6453      	str	r3, [r2, #68]	@ 0x44
 800238e:	4b5d      	ldr	r3, [pc, #372]	@ (8002504 <HAL_GPIO_Init+0x30c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002392:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800239a:	4a5b      	ldr	r2, [pc, #364]	@ (8002508 <HAL_GPIO_Init+0x310>)
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	089b      	lsrs	r3, r3, #2
 80023a0:	3302      	adds	r3, #2
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	220f      	movs	r2, #15
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	@ (800250c <HAL_GPIO_Init+0x314>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d02b      	beq.n	800241e <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	@ (8002510 <HAL_GPIO_Init+0x318>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d025      	beq.n	800241a <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	@ (8002514 <HAL_GPIO_Init+0x31c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d01f      	beq.n	8002416 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	@ (8002518 <HAL_GPIO_Init+0x320>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d019      	beq.n	8002412 <HAL_GPIO_Init+0x21a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a4e      	ldr	r2, [pc, #312]	@ (800251c <HAL_GPIO_Init+0x324>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d013      	beq.n	800240e <HAL_GPIO_Init+0x216>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002520 <HAL_GPIO_Init+0x328>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00d      	beq.n	800240a <HAL_GPIO_Init+0x212>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a4c      	ldr	r2, [pc, #304]	@ (8002524 <HAL_GPIO_Init+0x32c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <HAL_GPIO_Init+0x20e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002528 <HAL_GPIO_Init+0x330>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_GPIO_Init+0x20a>
 80023fe:	2307      	movs	r3, #7
 8002400:	e00e      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002402:	2308      	movs	r3, #8
 8002404:	e00c      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002406:	2306      	movs	r3, #6
 8002408:	e00a      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240a:	2305      	movs	r3, #5
 800240c:	e008      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800240e:	2304      	movs	r3, #4
 8002410:	e006      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002412:	2303      	movs	r3, #3
 8002414:	e004      	b.n	8002420 <HAL_GPIO_Init+0x228>
 8002416:	2302      	movs	r3, #2
 8002418:	e002      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <HAL_GPIO_Init+0x228>
 800241e:	2300      	movs	r3, #0
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	f002 0203 	and.w	r2, r2, #3
 8002426:	0092      	lsls	r2, r2, #2
 8002428:	4093      	lsls	r3, r2
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4313      	orrs	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002430:	4935      	ldr	r1, [pc, #212]	@ (8002508 <HAL_GPIO_Init+0x310>)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	089b      	lsrs	r3, r3, #2
 8002436:	3302      	adds	r3, #2
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_GPIO_Init+0x334>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002462:	4a32      	ldr	r2, [pc, #200]	@ (800252c <HAL_GPIO_Init+0x334>)
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002468:	4b30      	ldr	r3, [pc, #192]	@ (800252c <HAL_GPIO_Init+0x334>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	43db      	mvns	r3, r3
 8002472:	69ba      	ldr	r2, [r7, #24]
 8002474:	4013      	ands	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	4313      	orrs	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800248c:	4a27      	ldr	r2, [pc, #156]	@ (800252c <HAL_GPIO_Init+0x334>)
 800248e:	69bb      	ldr	r3, [r7, #24]
 8002490:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002492:	4b26      	ldr	r3, [pc, #152]	@ (800252c <HAL_GPIO_Init+0x334>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d003      	beq.n	80024b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024b6:	4a1d      	ldr	r2, [pc, #116]	@ (800252c <HAL_GPIO_Init+0x334>)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024bc:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_GPIO_Init+0x334>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d003      	beq.n	80024e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e0:	4a12      	ldr	r2, [pc, #72]	@ (800252c <HAL_GPIO_Init+0x334>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	3301      	adds	r3, #1
 80024ea:	61fb      	str	r3, [r7, #28]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	2b0f      	cmp	r3, #15
 80024f0:	f67f ae90 	bls.w	8002214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3724      	adds	r7, #36	@ 0x24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40013800 	.word	0x40013800
 800250c:	40020000 	.word	0x40020000
 8002510:	40020400 	.word	0x40020400
 8002514:	40020800 	.word	0x40020800
 8002518:	40020c00 	.word	0x40020c00
 800251c:	40021000 	.word	0x40021000
 8002520:	40021400 	.word	0x40021400
 8002524:	40021800 	.word	0x40021800
 8002528:	40021c00 	.word	0x40021c00
 800252c:	40013c00 	.word	0x40013c00

08002530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	807b      	strh	r3, [r7, #2]
 800253c:	4613      	mov	r3, r2
 800253e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002540:	787b      	ldrb	r3, [r7, #1]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002546:	887a      	ldrh	r2, [r7, #2]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800254c:	e003      	b.n	8002556 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800254e:	887b      	ldrh	r3, [r7, #2]
 8002550:	041a      	lsls	r2, r3, #16
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	619a      	str	r2, [r3, #24]
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af02      	add	r7, sp, #8
 8002568:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e059      	b.n	8002628 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f006 ff9a 	bl	80094c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2203      	movs	r2, #3
 8002598:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80025a2:	d102      	bne.n	80025aa <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f003 fdb4 	bl	800611c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	7c1a      	ldrb	r2, [r3, #16]
 80025bc:	f88d 2000 	strb.w	r2, [sp]
 80025c0:	3304      	adds	r3, #4
 80025c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025c4:	f003 fd35 	bl	8006032 <USB_CoreInit>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2202      	movs	r2, #2
 80025d2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e026      	b.n	8002628 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	2101      	movs	r1, #1
 80025e0:	4618      	mov	r0, r3
 80025e2:	f003 fdac 	bl	800613e <USB_SetCurrentMode>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d005      	beq.n	80025f8 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e017      	b.n	8002628 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6818      	ldr	r0, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7c1a      	ldrb	r2, [r3, #16]
 8002600:	f88d 2000 	strb.w	r2, [sp]
 8002604:	3304      	adds	r3, #4
 8002606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002608:	f003 ff4e 	bl	80064a8 <USB_HostInit>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d005      	beq.n	800261e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2202      	movs	r2, #2
 8002616:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e004      	b.n	8002628 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002626:	2300      	movs	r3, #0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3710      	adds	r7, #16
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002630:	b590      	push	{r4, r7, lr}
 8002632:	b08b      	sub	sp, #44	@ 0x2c
 8002634:	af04      	add	r7, sp, #16
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	4608      	mov	r0, r1
 800263a:	4611      	mov	r1, r2
 800263c:	461a      	mov	r2, r3
 800263e:	4603      	mov	r3, r0
 8002640:	70fb      	strb	r3, [r7, #3]
 8002642:	460b      	mov	r3, r1
 8002644:	70bb      	strb	r3, [r7, #2]
 8002646:	4613      	mov	r3, r2
 8002648:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800264a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800264c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002654:	2b01      	cmp	r3, #1
 8002656:	d101      	bne.n	800265c <HAL_HCD_HC_Init+0x2c>
 8002658:	2302      	movs	r3, #2
 800265a:	e09d      	b.n	8002798 <HAL_HCD_HC_Init+0x168>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3319      	adds	r3, #25
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3314      	adds	r3, #20
 8002688:	787a      	ldrb	r2, [r7, #1]
 800268a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3315      	adds	r3, #21
 800269c:	78fa      	ldrb	r2, [r7, #3]
 800269e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	3326      	adds	r3, #38	@ 0x26
 80026b0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80026b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	78bb      	ldrb	r3, [r7, #2]
 80026ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80026be:	b2d8      	uxtb	r0, r3
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3316      	adds	r3, #22
 80026ce:	4602      	mov	r2, r0
 80026d0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80026d2:	78fb      	ldrb	r3, [r7, #3]
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 fbc8 	bl	8002e6c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80026dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	da0a      	bge.n	80026fa <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80026e4:	78fa      	ldrb	r2, [r7, #3]
 80026e6:	6879      	ldr	r1, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	1a9b      	subs	r3, r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	3317      	adds	r3, #23
 80026f4:	2201      	movs	r2, #1
 80026f6:	701a      	strb	r2, [r3, #0]
 80026f8:	e009      	b.n	800270e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	4613      	mov	r3, r2
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	1a9b      	subs	r3, r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	440b      	add	r3, r1
 8002708:	3317      	adds	r3, #23
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f004 f82c 	bl	8006770 <USB_GetHostSpeed>
 8002718:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800271a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10b      	bne.n	800273a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002722:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002726:	2b01      	cmp	r3, #1
 8002728:	d107      	bne.n	800273a <HAL_HCD_HC_Init+0x10a>
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d104      	bne.n	800273a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2bbc      	cmp	r3, #188	@ 0xbc
 8002734:	d901      	bls.n	800273a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002736:	23bc      	movs	r3, #188	@ 0xbc
 8002738:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	3318      	adds	r3, #24
 800274a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800274e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002750:	78fa      	ldrb	r2, [r7, #3]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	b298      	uxth	r0, r3
 8002756:	6879      	ldr	r1, [r7, #4]
 8002758:	4613      	mov	r3, r2
 800275a:	011b      	lsls	r3, r3, #4
 800275c:	1a9b      	subs	r3, r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	3328      	adds	r3, #40	@ 0x28
 8002764:	4602      	mov	r2, r0
 8002766:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6818      	ldr	r0, [r3, #0]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	b29b      	uxth	r3, r3
 8002770:	787c      	ldrb	r4, [r7, #1]
 8002772:	78ba      	ldrb	r2, [r7, #2]
 8002774:	78f9      	ldrb	r1, [r7, #3]
 8002776:	9302      	str	r3, [sp, #8]
 8002778:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800277c:	9301      	str	r3, [sp, #4]
 800277e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	4623      	mov	r3, r4
 8002786:	f004 f81b 	bl	80067c0 <USB_HC_Init>
 800278a:	4603      	mov	r3, r0
 800278c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002796:	7bfb      	ldrb	r3, [r7, #15]
}
 8002798:	4618      	mov	r0, r3
 800279a:	371c      	adds	r7, #28
 800279c:	46bd      	mov	sp, r7
 800279e:	bd90      	pop	{r4, r7, pc}

080027a0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	460b      	mov	r3, r1
 80027aa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_HCD_HC_Halt+0x1e>
 80027ba:	2302      	movs	r3, #2
 80027bc:	e00f      	b.n	80027de <HAL_HCD_HC_Halt+0x3e>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f004 fbad 	bl	8006f2e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
	...

080027e8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	70fb      	strb	r3, [r7, #3]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70bb      	strb	r3, [r7, #2]
 80027fe:	4613      	mov	r3, r2
 8002800:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002802:	78fa      	ldrb	r2, [r7, #3]
 8002804:	6879      	ldr	r1, [r7, #4]
 8002806:	4613      	mov	r3, r2
 8002808:	011b      	lsls	r3, r3, #4
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	440b      	add	r3, r1
 8002810:	3317      	adds	r3, #23
 8002812:	78ba      	ldrb	r2, [r7, #2]
 8002814:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	3326      	adds	r3, #38	@ 0x26
 8002826:	787a      	ldrb	r2, [r7, #1]
 8002828:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800282a:	7c3b      	ldrb	r3, [r7, #16]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d114      	bne.n	800285a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	4613      	mov	r3, r2
 8002836:	011b      	lsls	r3, r3, #4
 8002838:	1a9b      	subs	r3, r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	332a      	adds	r3, #42	@ 0x2a
 8002840:	2203      	movs	r2, #3
 8002842:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3319      	adds	r3, #25
 8002854:	7f3a      	ldrb	r2, [r7, #28]
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	e009      	b.n	800286e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	6879      	ldr	r1, [r7, #4]
 800285e:	4613      	mov	r3, r2
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	1a9b      	subs	r3, r3, r2
 8002864:	009b      	lsls	r3, r3, #2
 8002866:	440b      	add	r3, r1
 8002868:	332a      	adds	r3, #42	@ 0x2a
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800286e:	787b      	ldrb	r3, [r7, #1]
 8002870:	2b03      	cmp	r3, #3
 8002872:	f200 8102 	bhi.w	8002a7a <HAL_HCD_HC_SubmitRequest+0x292>
 8002876:	a201      	add	r2, pc, #4	@ (adr r2, 800287c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800287c:	0800288d 	.word	0x0800288d
 8002880:	08002a65 	.word	0x08002a65
 8002884:	08002951 	.word	0x08002951
 8002888:	080029db 	.word	0x080029db
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800288c:	7c3b      	ldrb	r3, [r7, #16]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 80f5 	bne.w	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002894:	78bb      	ldrb	r3, [r7, #2]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d12d      	bne.n	80028f6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800289a:	8b3b      	ldrh	r3, [r7, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d109      	bne.n	80028b4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	1a9b      	subs	r3, r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	333d      	adds	r3, #61	@ 0x3d
 80028b0:	2201      	movs	r2, #1
 80028b2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80028b4:	78fa      	ldrb	r2, [r7, #3]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	1a9b      	subs	r3, r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	333d      	adds	r3, #61	@ 0x3d
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80028ca:	78fa      	ldrb	r2, [r7, #3]
 80028cc:	6879      	ldr	r1, [r7, #4]
 80028ce:	4613      	mov	r3, r2
 80028d0:	011b      	lsls	r3, r3, #4
 80028d2:	1a9b      	subs	r3, r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	440b      	add	r3, r1
 80028d8:	332a      	adds	r3, #42	@ 0x2a
 80028da:	2200      	movs	r2, #0
 80028dc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80028de:	e0ce      	b.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	4613      	mov	r3, r2
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	1a9b      	subs	r3, r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	440b      	add	r3, r1
 80028ee:	332a      	adds	r3, #42	@ 0x2a
 80028f0:	2202      	movs	r2, #2
 80028f2:	701a      	strb	r2, [r3, #0]
      break;
 80028f4:	e0c3      	b.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80028f6:	78fa      	ldrb	r2, [r7, #3]
 80028f8:	6879      	ldr	r1, [r7, #4]
 80028fa:	4613      	mov	r3, r2
 80028fc:	011b      	lsls	r3, r3, #4
 80028fe:	1a9b      	subs	r3, r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	331a      	adds	r3, #26
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b01      	cmp	r3, #1
 800290a:	f040 80b8 	bne.w	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	333c      	adds	r3, #60	@ 0x3c
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10a      	bne.n	800293a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	332a      	adds	r3, #42	@ 0x2a
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
      break;
 8002938:	e0a1      	b.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	332a      	adds	r3, #42	@ 0x2a
 800294a:	2202      	movs	r2, #2
 800294c:	701a      	strb	r2, [r3, #0]
      break;
 800294e:	e096      	b.n	8002a7e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002950:	78bb      	ldrb	r3, [r7, #2]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d120      	bne.n	8002998 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002956:	78fa      	ldrb	r2, [r7, #3]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	011b      	lsls	r3, r3, #4
 800295e:	1a9b      	subs	r3, r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	333d      	adds	r3, #61	@ 0x3d
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10a      	bne.n	8002982 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	332a      	adds	r3, #42	@ 0x2a
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002980:	e07e      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	332a      	adds	r3, #42	@ 0x2a
 8002992:	2202      	movs	r2, #2
 8002994:	701a      	strb	r2, [r3, #0]
      break;
 8002996:	e073      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	011b      	lsls	r3, r3, #4
 80029a0:	1a9b      	subs	r3, r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	333c      	adds	r3, #60	@ 0x3c
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10a      	bne.n	80029c4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029ae:	78fa      	ldrb	r2, [r7, #3]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	011b      	lsls	r3, r3, #4
 80029b6:	1a9b      	subs	r3, r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	332a      	adds	r3, #42	@ 0x2a
 80029be:	2200      	movs	r2, #0
 80029c0:	701a      	strb	r2, [r3, #0]
      break;
 80029c2:	e05d      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029c4:	78fa      	ldrb	r2, [r7, #3]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	011b      	lsls	r3, r3, #4
 80029cc:	1a9b      	subs	r3, r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	332a      	adds	r3, #42	@ 0x2a
 80029d4:	2202      	movs	r2, #2
 80029d6:	701a      	strb	r2, [r3, #0]
      break;
 80029d8:	e052      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029da:	78bb      	ldrb	r3, [r7, #2]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d120      	bne.n	8002a22 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029e0:	78fa      	ldrb	r2, [r7, #3]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	011b      	lsls	r3, r3, #4
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	440b      	add	r3, r1
 80029ee:	333d      	adds	r3, #61	@ 0x3d
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d10a      	bne.n	8002a0c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	332a      	adds	r3, #42	@ 0x2a
 8002a06:	2200      	movs	r2, #0
 8002a08:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002a0a:	e039      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	332a      	adds	r3, #42	@ 0x2a
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	701a      	strb	r2, [r3, #0]
      break;
 8002a20:	e02e      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	6879      	ldr	r1, [r7, #4]
 8002a26:	4613      	mov	r3, r2
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	1a9b      	subs	r3, r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	440b      	add	r3, r1
 8002a30:	333c      	adds	r3, #60	@ 0x3c
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	332a      	adds	r3, #42	@ 0x2a
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
      break;
 8002a4c:	e018      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6879      	ldr	r1, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	332a      	adds	r3, #42	@ 0x2a
 8002a5e:	2202      	movs	r2, #2
 8002a60:	701a      	strb	r2, [r3, #0]
      break;
 8002a62:	e00d      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	332a      	adds	r3, #42	@ 0x2a
 8002a74:	2200      	movs	r2, #0
 8002a76:	701a      	strb	r2, [r3, #0]
      break;
 8002a78:	e002      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002a7a:	bf00      	nop
 8002a7c:	e000      	b.n	8002a80 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002a7e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	011b      	lsls	r3, r3, #4
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	332c      	adds	r3, #44	@ 0x2c
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a94:	78fa      	ldrb	r2, [r7, #3]
 8002a96:	8b39      	ldrh	r1, [r7, #24]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4403      	add	r3, r0
 8002aa4:	3334      	adds	r3, #52	@ 0x34
 8002aa6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002aa8:	78fa      	ldrb	r2, [r7, #3]
 8002aaa:	6879      	ldr	r1, [r7, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	011b      	lsls	r3, r3, #4
 8002ab0:	1a9b      	subs	r3, r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	334c      	adds	r3, #76	@ 0x4c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002abc:	78fa      	ldrb	r2, [r7, #3]
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	011b      	lsls	r3, r3, #4
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	440b      	add	r3, r1
 8002aca:	3338      	adds	r3, #56	@ 0x38
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002ad0:	78fa      	ldrb	r2, [r7, #3]
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	011b      	lsls	r3, r3, #4
 8002ad8:	1a9b      	subs	r3, r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	3315      	adds	r3, #21
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334d      	adds	r3, #77	@ 0x4d
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6818      	ldr	r0, [r3, #0]
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3310      	adds	r3, #16
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	1d19      	adds	r1, r3, #4
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	799b      	ldrb	r3, [r3, #6]
 8002b12:	461a      	mov	r2, r3
 8002b14:	f003 ff80 	bl	8006a18 <USB_HC_StartXfer>
 8002b18:	4603      	mov	r3, r0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop

08002b24 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fc75 	bl	800642a <USB_GetMode>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	f040 80fb 	bne.w	8002d3e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f003 fc38 	bl	80063c2 <USB_ReadInterrupts>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f000 80f1 	beq.w	8002d3c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f003 fc2f 	bl	80063c2 <USB_ReadInterrupts>
 8002b64:	4603      	mov	r3, r0
 8002b66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b6a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b6e:	d104      	bne.n	8002b7a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002b78:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fc1f 	bl	80063c2 <USB_ReadInterrupts>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002b8e:	d104      	bne.n	8002b9a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002b98:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f003 fc0f 	bl	80063c2 <USB_ReadInterrupts>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002baa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002bae:	d104      	bne.n	8002bba <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002bb8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	f003 fbff 	bl	80063c2 <USB_ReadInterrupts>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b02      	cmp	r3, #2
 8002bcc:	d103      	bne.n	8002bd6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2202      	movs	r2, #2
 8002bd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fbf1 	bl	80063c2 <USB_ReadInterrupts>
 8002be0:	4603      	mov	r3, r0
 8002be2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002be6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bea:	d120      	bne.n	8002c2e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002bf4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d113      	bne.n	8002c2e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002c06:	2110      	movs	r1, #16
 8002c08:	6938      	ldr	r0, [r7, #16]
 8002c0a:	f003 fae4 	bl	80061d6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002c0e:	6938      	ldr	r0, [r7, #16]
 8002c10:	f003 fb13 	bl	800623a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7a5b      	ldrb	r3, [r3, #9]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d105      	bne.n	8002c28 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2101      	movs	r1, #1
 8002c22:	4618      	mov	r0, r3
 8002c24:	f003 fd04 	bl	8006630 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f006 fccb 	bl	80095c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f003 fbc5 	bl	80063c2 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c3e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c42:	d102      	bne.n	8002c4a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f001 fd4d 	bl	80046e4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f003 fbb7 	bl	80063c2 <USB_ReadInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0308 	and.w	r3, r3, #8
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d106      	bne.n	8002c6c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f006 fc94 	bl	800958c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2208      	movs	r2, #8
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f003 fba6 	bl	80063c2 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002c80:	d139      	bne.n	8002cf6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f004 f940 	bl	8006f0c <USB_HC_ReadInterrupt>
 8002c8c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c8e:	2300      	movs	r3, #0
 8002c90:	617b      	str	r3, [r7, #20]
 8002c92:	e025      	b.n	8002ce0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d018      	beq.n	8002cda <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cbe:	d106      	bne.n	8002cce <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f905 	bl	8002ed6 <HCD_HC_IN_IRQHandler>
 8002ccc:	e005      	b.n	8002cda <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 ff67 	bl	8003ba8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	3301      	adds	r3, #1
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	795b      	ldrb	r3, [r3, #5]
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d3d3      	bcc.n	8002c94 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fb61 	bl	80063c2 <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f003 0310 	and.w	r3, r3, #16
 8002d06:	2b10      	cmp	r3, #16
 8002d08:	d101      	bne.n	8002d0e <HAL_HCD_IRQHandler+0x1ea>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <HAL_HCD_IRQHandler+0x1ec>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d014      	beq.n	8002d3e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699a      	ldr	r2, [r3, #24]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f022 0210 	bic.w	r2, r2, #16
 8002d22:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f001 fbfe 	bl	8004526 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699a      	ldr	r2, [r3, #24]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0210 	orr.w	r2, r2, #16
 8002d38:	619a      	str	r2, [r3, #24]
 8002d3a:	e000      	b.n	8002d3e <HAL_HCD_IRQHandler+0x21a>
      return;
 8002d3c:	bf00      	nop
    }
  }
}
 8002d3e:	3718      	adds	r7, #24
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_HCD_Start+0x16>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e013      	b.n	8002d82 <HAL_HCD_Start+0x3e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2101      	movs	r1, #1
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f003 fcc8 	bl	80066fe <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f003 f9c1 	bl	80060fa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}

08002d8a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d8a:	b580      	push	{r7, lr}
 8002d8c:	b082      	sub	sp, #8
 8002d8e:	af00      	add	r7, sp, #0
 8002d90:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d101      	bne.n	8002da0 <HAL_HCD_Stop+0x16>
 8002d9c:	2302      	movs	r3, #2
 8002d9e:	e00d      	b.n	8002dbc <HAL_HCD_Stop+0x32>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f004 fa1b 	bl	80071e8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3708      	adds	r7, #8
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f003 fc6a 	bl	80066aa <USB_ResetPort>
 8002dd6:	4603      	mov	r3, r0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3708      	adds	r7, #8
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dec:	78fa      	ldrb	r2, [r7, #3]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	1a9b      	subs	r3, r3, r2
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	440b      	add	r3, r1
 8002dfa:	334c      	adds	r3, #76	@ 0x4c
 8002dfc:	781b      	ldrb	r3, [r3, #0]
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	370c      	adds	r7, #12
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr

08002e0a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002e0a:	b480      	push	{r7}
 8002e0c:	b083      	sub	sp, #12
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
 8002e12:	460b      	mov	r3, r1
 8002e14:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	6879      	ldr	r1, [r7, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	1a9b      	subs	r3, r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	440b      	add	r3, r1
 8002e24:	3338      	adds	r3, #56	@ 0x38
 8002e26:	681b      	ldr	r3, [r3, #0]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f003 fcac 	bl	800679e <USB_GetCurrentFrame>
 8002e46:	4603      	mov	r3, r0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fc87 	bl	8006770 <USB_GetHostSpeed>
 8002e62:	4603      	mov	r3, r0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3708      	adds	r7, #8
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	331a      	adds	r3, #26
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	331b      	adds	r3, #27
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	3325      	adds	r3, #37	@ 0x25
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	3324      	adds	r3, #36	@ 0x24
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	370c      	adds	r7, #12
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b086      	sub	sp, #24
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	4611      	mov	r1, r2
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f003 fa77 	bl	80063e8 <USB_ReadChInterrupts>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f003 0304 	and.w	r3, r3, #4
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d11a      	bne.n	8002f3a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	461a      	mov	r2, r3
 8002f12:	2304      	movs	r3, #4
 8002f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	6879      	ldr	r1, [r7, #4]
 8002f1a:	4613      	mov	r3, r2
 8002f1c:	011b      	lsls	r3, r3, #4
 8002f1e:	1a9b      	subs	r3, r3, r2
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	334d      	adds	r3, #77	@ 0x4d
 8002f26:	2207      	movs	r2, #7
 8002f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f003 fffb 	bl	8006f2e <USB_HC_Halt>
 8002f38:	e09e      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	78fa      	ldrb	r2, [r7, #3]
 8002f40:	4611      	mov	r1, r2
 8002f42:	4618      	mov	r0, r3
 8002f44:	f003 fa50 	bl	80063e8 <USB_ReadChInterrupts>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f52:	d11b      	bne.n	8002f8c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002f54:	78fb      	ldrb	r3, [r7, #3]
 8002f56:	015a      	lsls	r2, r3, #5
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f60:	461a      	mov	r2, r3
 8002f62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f66:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	334d      	adds	r3, #77	@ 0x4d
 8002f78:	2208      	movs	r2, #8
 8002f7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 ffd2 	bl	8006f2e <USB_HC_Halt>
 8002f8a:	e075      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	78fa      	ldrb	r2, [r7, #3]
 8002f92:	4611      	mov	r1, r2
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 fa27 	bl	80063e8 <USB_ReadChInterrupts>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d11a      	bne.n	8002fda <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002fa4:	78fb      	ldrb	r3, [r7, #3]
 8002fa6:	015a      	lsls	r2, r3, #5
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	4413      	add	r3, r2
 8002fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	334d      	adds	r3, #77	@ 0x4d
 8002fc6:	2206      	movs	r2, #6
 8002fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	78fa      	ldrb	r2, [r7, #3]
 8002fd0:	4611      	mov	r1, r2
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 ffab 	bl	8006f2e <USB_HC_Halt>
 8002fd8:	e04e      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	4611      	mov	r1, r2
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 fa00 	bl	80063e8 <USB_ReadChInterrupts>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff2:	d11b      	bne.n	800302c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003006:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	334d      	adds	r3, #77	@ 0x4d
 8003018:	2209      	movs	r2, #9
 800301a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	4611      	mov	r1, r2
 8003024:	4618      	mov	r0, r3
 8003026:	f003 ff82 	bl	8006f2e <USB_HC_Halt>
 800302a:	e025      	b.n	8003078 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f003 f9d7 	bl	80063e8 <USB_ReadChInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003040:	2b80      	cmp	r3, #128	@ 0x80
 8003042:	d119      	bne.n	8003078 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	461a      	mov	r2, r3
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334d      	adds	r3, #77	@ 0x4d
 8003066:	2207      	movs	r2, #7
 8003068:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f003 ff5b 	bl	8006f2e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	4611      	mov	r1, r2
 8003080:	4618      	mov	r0, r3
 8003082:	f003 f9b1 	bl	80063e8 <USB_ReadChInterrupts>
 8003086:	4603      	mov	r3, r0
 8003088:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800308c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003090:	d112      	bne.n	80030b8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	4611      	mov	r1, r2
 800309a:	4618      	mov	r0, r3
 800309c:	f003 ff47 	bl	8006f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80030a0:	78fb      	ldrb	r3, [r7, #3]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80030b2:	6093      	str	r3, [r2, #8]
 80030b4:	f000 bd75 	b.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	4611      	mov	r1, r2
 80030c0:	4618      	mov	r0, r3
 80030c2:	f003 f991 	bl	80063e8 <USB_ReadChInterrupts>
 80030c6:	4603      	mov	r3, r0
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	f040 8128 	bne.w	8003322 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	2320      	movs	r3, #32
 80030e2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	331b      	adds	r3, #27
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d119      	bne.n	800312e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	331b      	adds	r3, #27
 800310a:	2200      	movs	r2, #0
 800310c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	015a      	lsls	r2, r3, #5
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4413      	add	r3, r2
 8003116:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	0151      	lsls	r1, r2, #5
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	440a      	add	r2, r1
 8003124:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003128:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800312c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	799b      	ldrb	r3, [r3, #6]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d01b      	beq.n	800316e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	3330      	adds	r3, #48	@ 0x30
 8003146:	6819      	ldr	r1, [r3, #0]
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800315a:	78fa      	ldrb	r2, [r7, #3]
 800315c:	1ac9      	subs	r1, r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	4403      	add	r3, r0
 800316a:	3338      	adds	r3, #56	@ 0x38
 800316c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	334d      	adds	r3, #77	@ 0x4d
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003182:	78fa      	ldrb	r2, [r7, #3]
 8003184:	6879      	ldr	r1, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	440b      	add	r3, r1
 8003190:	3344      	adds	r3, #68	@ 0x44
 8003192:	2200      	movs	r2, #0
 8003194:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	4413      	add	r3, r2
 800319e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a2:	461a      	mov	r2, r3
 80031a4:	2301      	movs	r3, #1
 80031a6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3326      	adds	r3, #38	@ 0x26
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00a      	beq.n	80031d4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031be:	78fa      	ldrb	r2, [r7, #3]
 80031c0:	6879      	ldr	r1, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	011b      	lsls	r3, r3, #4
 80031c6:	1a9b      	subs	r3, r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	440b      	add	r3, r1
 80031cc:	3326      	adds	r3, #38	@ 0x26
 80031ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d110      	bne.n	80031f6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f003 fea6 	bl	8006f2e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	015a      	lsls	r2, r3, #5
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	4413      	add	r3, r2
 80031ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ee:	461a      	mov	r2, r3
 80031f0:	2310      	movs	r3, #16
 80031f2:	6093      	str	r3, [r2, #8]
 80031f4:	e03d      	b.n	8003272 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	3326      	adds	r3, #38	@ 0x26
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d00a      	beq.n	8003222 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3326      	adds	r3, #38	@ 0x26
 800321c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800321e:	2b01      	cmp	r3, #1
 8003220:	d127      	bne.n	8003272 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	0151      	lsls	r1, r2, #5
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	440a      	add	r2, r1
 8003238:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800323c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003240:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334c      	adds	r3, #76	@ 0x4c
 8003252:	2201      	movs	r2, #1
 8003254:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334c      	adds	r3, #76	@ 0x4c
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f006 f9b7 	bl	80095e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	799b      	ldrb	r3, [r3, #6]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d13b      	bne.n	80032f2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3338      	adds	r3, #56	@ 0x38
 800328a:	6819      	ldr	r1, [r3, #0]
 800328c:	78fa      	ldrb	r2, [r7, #3]
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4613      	mov	r3, r2
 8003292:	011b      	lsls	r3, r3, #4
 8003294:	1a9b      	subs	r3, r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4403      	add	r3, r0
 800329a:	3328      	adds	r3, #40	@ 0x28
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	440b      	add	r3, r1
 80032a0:	1e59      	subs	r1, r3, #1
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4403      	add	r3, r0
 80032b0:	3328      	adds	r3, #40	@ 0x28
 80032b2:	881b      	ldrh	r3, [r3, #0]
 80032b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f000 8470 	beq.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	333c      	adds	r3, #60	@ 0x3c
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	f083 0301 	eor.w	r3, r3, #1
 80032da:	b2d8      	uxtb	r0, r3
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	011b      	lsls	r3, r3, #4
 80032e2:	1a9b      	subs	r3, r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	333c      	adds	r3, #60	@ 0x3c
 80032ea:	4602      	mov	r2, r0
 80032ec:	701a      	strb	r2, [r3, #0]
 80032ee:	f000 bc58 	b.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80032f2:	78fa      	ldrb	r2, [r7, #3]
 80032f4:	6879      	ldr	r1, [r7, #4]
 80032f6:	4613      	mov	r3, r2
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	440b      	add	r3, r1
 8003300:	333c      	adds	r3, #60	@ 0x3c
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	f083 0301 	eor.w	r3, r3, #1
 800330a:	b2d8      	uxtb	r0, r3
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	333c      	adds	r3, #60	@ 0x3c
 800331a:	4602      	mov	r2, r0
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	f000 bc40 	b.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	78fa      	ldrb	r2, [r7, #3]
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 f85c 	bl	80063e8 <USB_ReadChInterrupts>
 8003330:	4603      	mov	r3, r0
 8003332:	f003 0320 	and.w	r3, r3, #32
 8003336:	2b20      	cmp	r3, #32
 8003338:	d131      	bne.n	800339e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	4413      	add	r3, r2
 8003342:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003346:	461a      	mov	r2, r3
 8003348:	2320      	movs	r3, #32
 800334a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800334c:	78fa      	ldrb	r2, [r7, #3]
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	4613      	mov	r3, r2
 8003352:	011b      	lsls	r3, r3, #4
 8003354:	1a9b      	subs	r3, r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	331a      	adds	r3, #26
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b01      	cmp	r3, #1
 8003360:	f040 841f 	bne.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	331b      	adds	r3, #27
 8003374:	2201      	movs	r2, #1
 8003376:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003378:	78fa      	ldrb	r2, [r7, #3]
 800337a:	6879      	ldr	r1, [r7, #4]
 800337c:	4613      	mov	r3, r2
 800337e:	011b      	lsls	r3, r3, #4
 8003380:	1a9b      	subs	r3, r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	440b      	add	r3, r1
 8003386:	334d      	adds	r3, #77	@ 0x4d
 8003388:	2203      	movs	r2, #3
 800338a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	4611      	mov	r1, r2
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fdca 	bl	8006f2e <USB_HC_Halt>
 800339a:	f000 bc02 	b.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f003 f81e 	bl	80063e8 <USB_ReadChInterrupts>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	f040 8305 	bne.w	80039c2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80033b8:	78fb      	ldrb	r3, [r7, #3]
 80033ba:	015a      	lsls	r2, r3, #5
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4413      	add	r3, r2
 80033c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033c4:	461a      	mov	r2, r3
 80033c6:	2302      	movs	r3, #2
 80033c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	334d      	adds	r3, #77	@ 0x4d
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d114      	bne.n	800340a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033e0:	78fa      	ldrb	r2, [r7, #3]
 80033e2:	6879      	ldr	r1, [r7, #4]
 80033e4:	4613      	mov	r3, r2
 80033e6:	011b      	lsls	r3, r3, #4
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	334d      	adds	r3, #77	@ 0x4d
 80033f0:	2202      	movs	r2, #2
 80033f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334c      	adds	r3, #76	@ 0x4c
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
 8003408:	e2cc      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	334d      	adds	r3, #77	@ 0x4d
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b06      	cmp	r3, #6
 800341e:	d114      	bne.n	800344a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	334d      	adds	r3, #77	@ 0x4d
 8003430:	2202      	movs	r2, #2
 8003432:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	334c      	adds	r3, #76	@ 0x4c
 8003444:	2205      	movs	r2, #5
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	e2ac      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334d      	adds	r3, #77	@ 0x4d
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b07      	cmp	r3, #7
 800345e:	d00b      	beq.n	8003478 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	@ 0x4d
 8003470:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003472:	2b09      	cmp	r3, #9
 8003474:	f040 80a6 	bne.w	80035c4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003478:	78fa      	ldrb	r2, [r7, #3]
 800347a:	6879      	ldr	r1, [r7, #4]
 800347c:	4613      	mov	r3, r2
 800347e:	011b      	lsls	r3, r3, #4
 8003480:	1a9b      	subs	r3, r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	334d      	adds	r3, #77	@ 0x4d
 8003488:	2202      	movs	r2, #2
 800348a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3344      	adds	r3, #68	@ 0x44
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	1c59      	adds	r1, r3, #1
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	4403      	add	r3, r0
 80034ac:	3344      	adds	r3, #68	@ 0x44
 80034ae:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	3344      	adds	r3, #68	@ 0x44
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d943      	bls.n	800354e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80034c6:	78fa      	ldrb	r2, [r7, #3]
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	4613      	mov	r3, r2
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	1a9b      	subs	r3, r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	440b      	add	r3, r1
 80034d4:	3344      	adds	r3, #68	@ 0x44
 80034d6:	2200      	movs	r2, #0
 80034d8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	331a      	adds	r3, #26
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	2b01      	cmp	r3, #1
 80034ee:	d123      	bne.n	8003538 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	331b      	adds	r3, #27
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	331c      	adds	r3, #28
 8003514:	2200      	movs	r2, #0
 8003516:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	4413      	add	r3, r2
 8003520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	0151      	lsls	r1, r2, #5
 800352a:	693a      	ldr	r2, [r7, #16]
 800352c:	440a      	add	r2, r1
 800352e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003532:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003536:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	@ 0x4c
 8003548:	2204      	movs	r2, #4
 800354a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800354c:	e229      	b.n	80039a2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334c      	adds	r3, #76	@ 0x4c
 800355e:	2202      	movs	r2, #2
 8003560:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3326      	adds	r3, #38	@ 0x26
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00b      	beq.n	8003590 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	3326      	adds	r3, #38	@ 0x26
 8003588:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800358a:	2b02      	cmp	r3, #2
 800358c:	f040 8209 	bne.w	80039a2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80035a6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80035ae:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80035c2:	e1ee      	b.n	80039a2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	011b      	lsls	r3, r3, #4
 80035cc:	1a9b      	subs	r3, r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	334d      	adds	r3, #77	@ 0x4d
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b05      	cmp	r3, #5
 80035d8:	f040 80c8 	bne.w	800376c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	334d      	adds	r3, #77	@ 0x4d
 80035ec:	2202      	movs	r2, #2
 80035ee:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	331b      	adds	r3, #27
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b01      	cmp	r3, #1
 8003604:	f040 81ce 	bne.w	80039a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3326      	adds	r3, #38	@ 0x26
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	2b03      	cmp	r3, #3
 800361c:	d16b      	bne.n	80036f6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800361e:	78fa      	ldrb	r2, [r7, #3]
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	4613      	mov	r3, r2
 8003624:	011b      	lsls	r3, r3, #4
 8003626:	1a9b      	subs	r3, r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	440b      	add	r3, r1
 800362c:	3348      	adds	r3, #72	@ 0x48
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	1c59      	adds	r1, r3, #1
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4403      	add	r3, r0
 800363e:	3348      	adds	r3, #72	@ 0x48
 8003640:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	3348      	adds	r3, #72	@ 0x48
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d943      	bls.n	80036e0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3348      	adds	r3, #72	@ 0x48
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	331b      	adds	r3, #27
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	3344      	adds	r3, #68	@ 0x44
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b02      	cmp	r3, #2
 8003694:	d809      	bhi.n	80036aa <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	331c      	adds	r3, #28
 80036a6:	2201      	movs	r2, #1
 80036a8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80036ca:	78fa      	ldrb	r2, [r7, #3]
 80036cc:	6879      	ldr	r1, [r7, #4]
 80036ce:	4613      	mov	r3, r2
 80036d0:	011b      	lsls	r3, r3, #4
 80036d2:	1a9b      	subs	r3, r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	440b      	add	r3, r1
 80036d8:	334c      	adds	r3, #76	@ 0x4c
 80036da:	2204      	movs	r2, #4
 80036dc:	701a      	strb	r2, [r3, #0]
 80036de:	e014      	b.n	800370a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	334c      	adds	r3, #76	@ 0x4c
 80036f0:	2202      	movs	r2, #2
 80036f2:	701a      	strb	r2, [r3, #0]
 80036f4:	e009      	b.n	800370a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	334c      	adds	r3, #76	@ 0x4c
 8003706:	2202      	movs	r2, #2
 8003708:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3326      	adds	r3, #38	@ 0x26
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3326      	adds	r3, #38	@ 0x26
 8003730:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003732:	2b02      	cmp	r3, #2
 8003734:	f040 8136 	bne.w	80039a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003738:	78fb      	ldrb	r3, [r7, #3]
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4413      	add	r3, r2
 8003740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003756:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	4413      	add	r3, r2
 8003760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003764:	461a      	mov	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	6013      	str	r3, [r2, #0]
 800376a:	e11b      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	334d      	adds	r3, #77	@ 0x4d
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b03      	cmp	r3, #3
 8003780:	f040 8081 	bne.w	8003886 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003784:	78fa      	ldrb	r2, [r7, #3]
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	4613      	mov	r3, r2
 800378a:	011b      	lsls	r3, r3, #4
 800378c:	1a9b      	subs	r3, r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	334d      	adds	r3, #77	@ 0x4d
 8003794:	2202      	movs	r2, #2
 8003796:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	4613      	mov	r3, r2
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	1a9b      	subs	r3, r3, r2
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	440b      	add	r3, r1
 80037a6:	331b      	adds	r3, #27
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	f040 80fa 	bne.w	80039a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037b0:	78fa      	ldrb	r2, [r7, #3]
 80037b2:	6879      	ldr	r1, [r7, #4]
 80037b4:	4613      	mov	r3, r2
 80037b6:	011b      	lsls	r3, r3, #4
 80037b8:	1a9b      	subs	r3, r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	334c      	adds	r3, #76	@ 0x4c
 80037c0:	2202      	movs	r2, #2
 80037c2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80037c4:	78fb      	ldrb	r3, [r7, #3]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	0151      	lsls	r1, r2, #5
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	440a      	add	r2, r1
 80037da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003802:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	0151      	lsls	r1, r2, #5
 8003816:	693a      	ldr	r2, [r7, #16]
 8003818:	440a      	add	r2, r1
 800381a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800381e:	f023 0320 	bic.w	r3, r3, #32
 8003822:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003824:	78fa      	ldrb	r2, [r7, #3]
 8003826:	6879      	ldr	r1, [r7, #4]
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	3326      	adds	r3, #38	@ 0x26
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00b      	beq.n	8003852 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	3326      	adds	r3, #38	@ 0x26
 800384a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800384c:	2b02      	cmp	r3, #2
 800384e:	f040 80a9 	bne.w	80039a4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003852:	78fb      	ldrb	r3, [r7, #3]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003868:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003870:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003872:	78fb      	ldrb	r3, [r7, #3]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	4413      	add	r3, r2
 800387a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387e:	461a      	mov	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	e08e      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	334d      	adds	r3, #77	@ 0x4d
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b04      	cmp	r3, #4
 800389a:	d143      	bne.n	8003924 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	4613      	mov	r3, r2
 80038a2:	011b      	lsls	r3, r3, #4
 80038a4:	1a9b      	subs	r3, r3, r2
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	334d      	adds	r3, #77	@ 0x4d
 80038ac:	2202      	movs	r2, #2
 80038ae:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038b0:	78fa      	ldrb	r2, [r7, #3]
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	011b      	lsls	r3, r3, #4
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	334c      	adds	r3, #76	@ 0x4c
 80038c0:	2202      	movs	r2, #2
 80038c2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038c4:	78fa      	ldrb	r2, [r7, #3]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	3326      	adds	r3, #38	@ 0x26
 80038d4:	781b      	ldrb	r3, [r3, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00a      	beq.n	80038f0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	6879      	ldr	r1, [r7, #4]
 80038de:	4613      	mov	r3, r2
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	1a9b      	subs	r3, r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	3326      	adds	r3, #38	@ 0x26
 80038ea:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d159      	bne.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003906:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800390e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003910:	78fb      	ldrb	r3, [r7, #3]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	4413      	add	r3, r2
 8003918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800391c:	461a      	mov	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e03f      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003924:	78fa      	ldrb	r2, [r7, #3]
 8003926:	6879      	ldr	r1, [r7, #4]
 8003928:	4613      	mov	r3, r2
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	1a9b      	subs	r3, r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	440b      	add	r3, r1
 8003932:	334d      	adds	r3, #77	@ 0x4d
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b08      	cmp	r3, #8
 8003938:	d126      	bne.n	8003988 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	334d      	adds	r3, #77	@ 0x4d
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	4613      	mov	r3, r2
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	1a9b      	subs	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	440b      	add	r3, r1
 800395c:	3344      	adds	r3, #68	@ 0x44
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	1c59      	adds	r1, r3, #1
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	4613      	mov	r3, r2
 8003966:	011b      	lsls	r3, r3, #4
 8003968:	1a9b      	subs	r3, r3, r2
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4403      	add	r3, r0
 800396e:	3344      	adds	r3, #68	@ 0x44
 8003970:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	334c      	adds	r3, #76	@ 0x4c
 8003982:	2204      	movs	r2, #4
 8003984:	701a      	strb	r2, [r3, #0]
 8003986:	e00d      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	334d      	adds	r3, #77	@ 0x4d
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b02      	cmp	r3, #2
 800399c:	f000 8100 	beq.w	8003ba0 <HCD_HC_IN_IRQHandler+0xcca>
 80039a0:	e000      	b.n	80039a4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80039a2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334c      	adds	r3, #76	@ 0x4c
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	4619      	mov	r1, r3
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f005 fe10 	bl	80095e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 80039c0:	e0ef      	b.n	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f002 fd0c 	bl	80063e8 <USB_ReadChInterrupts>
 80039d0:	4603      	mov	r3, r0
 80039d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039d6:	2b40      	cmp	r3, #64	@ 0x40
 80039d8:	d12f      	bne.n	8003a3a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039da:	78fb      	ldrb	r3, [r7, #3]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	2340      	movs	r3, #64	@ 0x40
 80039ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	334d      	adds	r3, #77	@ 0x4d
 80039fc:	2205      	movs	r2, #5
 80039fe:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	331a      	adds	r3, #26
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3344      	adds	r3, #68	@ 0x44
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	78fa      	ldrb	r2, [r7, #3]
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 fa7b 	bl	8006f2e <USB_HC_Halt>
 8003a38:	e0b3      	b.n	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	4611      	mov	r1, r2
 8003a42:	4618      	mov	r0, r3
 8003a44:	f002 fcd0 	bl	80063e8 <USB_ReadChInterrupts>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f003 0310 	and.w	r3, r3, #16
 8003a4e:	2b10      	cmp	r3, #16
 8003a50:	f040 80a7 	bne.w	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	011b      	lsls	r3, r3, #4
 8003a5c:	1a9b      	subs	r3, r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3326      	adds	r3, #38	@ 0x26
 8003a64:	781b      	ldrb	r3, [r3, #0]
 8003a66:	2b03      	cmp	r3, #3
 8003a68:	d11b      	bne.n	8003aa2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003a6a:	78fa      	ldrb	r2, [r7, #3]
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	4613      	mov	r3, r2
 8003a70:	011b      	lsls	r3, r3, #4
 8003a72:	1a9b      	subs	r3, r3, r2
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	440b      	add	r3, r1
 8003a78:	3344      	adds	r3, #68	@ 0x44
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334d      	adds	r3, #77	@ 0x4d
 8003a8e:	2204      	movs	r2, #4
 8003a90:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	78fa      	ldrb	r2, [r7, #3]
 8003a98:	4611      	mov	r1, r2
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 fa47 	bl	8006f2e <USB_HC_Halt>
 8003aa0:	e03f      	b.n	8003b22 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aa2:	78fa      	ldrb	r2, [r7, #3]
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	011b      	lsls	r3, r3, #4
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	440b      	add	r3, r1
 8003ab0:	3326      	adds	r3, #38	@ 0x26
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00a      	beq.n	8003ace <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	3326      	adds	r3, #38	@ 0x26
 8003ac8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d129      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	011b      	lsls	r3, r3, #4
 8003ad6:	1a9b      	subs	r3, r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	440b      	add	r3, r1
 8003adc:	3344      	adds	r3, #68	@ 0x44
 8003ade:	2200      	movs	r2, #0
 8003ae0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	799b      	ldrb	r3, [r3, #6]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00a      	beq.n	8003b00 <HCD_HC_IN_IRQHandler+0xc2a>
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	331b      	adds	r3, #27
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d110      	bne.n	8003b22 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	334d      	adds	r3, #77	@ 0x4d
 8003b10:	2204      	movs	r2, #4
 8003b12:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	78fa      	ldrb	r2, [r7, #3]
 8003b1a:	4611      	mov	r1, r2
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f003 fa06 	bl	8006f2e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003b22:	78fa      	ldrb	r2, [r7, #3]
 8003b24:	6879      	ldr	r1, [r7, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	011b      	lsls	r3, r3, #4
 8003b2a:	1a9b      	subs	r3, r3, r2
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	440b      	add	r3, r1
 8003b30:	331b      	adds	r3, #27
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d129      	bne.n	8003b8c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	331b      	adds	r3, #27
 8003b48:	2200      	movs	r2, #0
 8003b4a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	693a      	ldr	r2, [r7, #16]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b78:	68db      	ldr	r3, [r3, #12]
 8003b7a:	78fa      	ldrb	r2, [r7, #3]
 8003b7c:	0151      	lsls	r1, r2, #5
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	440a      	add	r2, r1
 8003b82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b86:	f043 0320 	orr.w	r3, r3, #32
 8003b8a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b8c:	78fb      	ldrb	r3, [r7, #3]
 8003b8e:	015a      	lsls	r2, r3, #5
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	4413      	add	r3, r2
 8003b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b98:	461a      	mov	r2, r3
 8003b9a:	2310      	movs	r3, #16
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	e000      	b.n	8003ba2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003ba0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003ba2:	3718      	adds	r7, #24
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}

08003ba8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b086      	sub	sp, #24
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	4611      	mov	r1, r2
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f002 fc0e 	bl	80063e8 <USB_ReadChInterrupts>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	f003 0304 	and.w	r3, r3, #4
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d11b      	bne.n	8003c0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	015a      	lsls	r2, r3, #5
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4413      	add	r3, r2
 8003bde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003be2:	461a      	mov	r2, r3
 8003be4:	2304      	movs	r3, #4
 8003be6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	334d      	adds	r3, #77	@ 0x4d
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f992 	bl	8006f2e <USB_HC_Halt>
 8003c0a:	f000 bc89 	b.w	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	4611      	mov	r1, r2
 8003c16:	4618      	mov	r0, r3
 8003c18:	f002 fbe6 	bl	80063e8 <USB_ReadChInterrupts>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b20      	cmp	r3, #32
 8003c24:	f040 8082 	bne.w	8003d2c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c34:	461a      	mov	r2, r3
 8003c36:	2320      	movs	r3, #32
 8003c38:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3319      	adds	r3, #25
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d124      	bne.n	8003c9a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	3319      	adds	r3, #25
 8003c60:	2200      	movs	r2, #0
 8003c62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334c      	adds	r3, #76	@ 0x4c
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334d      	adds	r3, #77	@ 0x4d
 8003c88:	2203      	movs	r2, #3
 8003c8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	4611      	mov	r1, r2
 8003c94:	4618      	mov	r0, r3
 8003c96:	f003 f94a 	bl	8006f2e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	331a      	adds	r3, #26
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	f040 8437 	bne.w	8004520 <HCD_HC_OUT_IRQHandler+0x978>
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	6879      	ldr	r1, [r7, #4]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	011b      	lsls	r3, r3, #4
 8003cba:	1a9b      	subs	r3, r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	440b      	add	r3, r1
 8003cc0:	331b      	adds	r3, #27
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f040 842b 	bne.w	8004520 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3326      	adds	r3, #38	@ 0x26
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d009      	beq.n	8003cf4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	331b      	adds	r3, #27
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	334d      	adds	r3, #77	@ 0x4d
 8003d04:	2203      	movs	r2, #3
 8003d06:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	78fa      	ldrb	r2, [r7, #3]
 8003d0e:	4611      	mov	r1, r2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 f90c 	bl	8006f2e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3344      	adds	r3, #68	@ 0x44
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
 8003d2a:	e3f9      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	78fa      	ldrb	r2, [r7, #3]
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f002 fb57 	bl	80063e8 <USB_ReadChInterrupts>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003d40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d44:	d111      	bne.n	8003d6a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	015a      	lsls	r2, r3, #5
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4413      	add	r3, r2
 8003d4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d52:	461a      	mov	r2, r3
 8003d54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003d58:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	78fa      	ldrb	r2, [r7, #3]
 8003d60:	4611      	mov	r1, r2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f003 f8e3 	bl	8006f2e <USB_HC_Halt>
 8003d68:	e3da      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 fb38 	bl	80063e8 <USB_ReadChInterrupts>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b01      	cmp	r3, #1
 8003d80:	d168      	bne.n	8003e54 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003d82:	78fa      	ldrb	r2, [r7, #3]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	3344      	adds	r3, #68	@ 0x44
 8003d92:	2200      	movs	r2, #0
 8003d94:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	4611      	mov	r1, r2
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f002 fb22 	bl	80063e8 <USB_ReadChInterrupts>
 8003da4:	4603      	mov	r3, r0
 8003da6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003daa:	2b40      	cmp	r3, #64	@ 0x40
 8003dac:	d112      	bne.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	3319      	adds	r3, #25
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003dc2:	78fb      	ldrb	r3, [r7, #3]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2340      	movs	r3, #64	@ 0x40
 8003dd2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	331b      	adds	r3, #27
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d019      	beq.n	8003e1e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6879      	ldr	r1, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	440b      	add	r3, r1
 8003df8:	331b      	adds	r3, #27
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003dfe:	78fb      	ldrb	r3, [r7, #3]
 8003e00:	015a      	lsls	r2, r3, #5
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	4413      	add	r3, r2
 8003e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	0151      	lsls	r1, r2, #5
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	440a      	add	r2, r1
 8003e14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e1c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003e1e:	78fb      	ldrb	r3, [r7, #3]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003e30:	78fa      	ldrb	r2, [r7, #3]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	011b      	lsls	r3, r3, #4
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	334d      	adds	r3, #77	@ 0x4d
 8003e40:	2201      	movs	r2, #1
 8003e42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	78fa      	ldrb	r2, [r7, #3]
 8003e4a:	4611      	mov	r1, r2
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 f86e 	bl	8006f2e <USB_HC_Halt>
 8003e52:	e365      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	78fa      	ldrb	r2, [r7, #3]
 8003e5a:	4611      	mov	r1, r2
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fac3 	bl	80063e8 <USB_ReadChInterrupts>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e68:	2b40      	cmp	r3, #64	@ 0x40
 8003e6a:	d139      	bne.n	8003ee0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	334d      	adds	r3, #77	@ 0x4d
 8003e7c:	2205      	movs	r2, #5
 8003e7e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003e80:	78fa      	ldrb	r2, [r7, #3]
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	4613      	mov	r3, r2
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	1a9b      	subs	r3, r3, r2
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	440b      	add	r3, r1
 8003e8e:	331a      	adds	r3, #26
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d109      	bne.n	8003eaa <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003e96:	78fa      	ldrb	r2, [r7, #3]
 8003e98:	6879      	ldr	r1, [r7, #4]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3319      	adds	r3, #25
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	3344      	adds	r3, #68	@ 0x44
 8003eba:	2200      	movs	r2, #0
 8003ebc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	4611      	mov	r1, r2
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f003 f831 	bl	8006f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ed8:	461a      	mov	r2, r3
 8003eda:	2340      	movs	r3, #64	@ 0x40
 8003edc:	6093      	str	r3, [r2, #8]
 8003ede:	e31f      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f002 fa7d 	bl	80063e8 <USB_ReadChInterrupts>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d11a      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003f0a:	78fa      	ldrb	r2, [r7, #3]
 8003f0c:	6879      	ldr	r1, [r7, #4]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	011b      	lsls	r3, r3, #4
 8003f12:	1a9b      	subs	r3, r3, r2
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	440b      	add	r3, r1
 8003f18:	334d      	adds	r3, #77	@ 0x4d
 8003f1a:	2206      	movs	r2, #6
 8003f1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	78fa      	ldrb	r2, [r7, #3]
 8003f24:	4611      	mov	r1, r2
 8003f26:	4618      	mov	r0, r3
 8003f28:	f003 f801 	bl	8006f2e <USB_HC_Halt>
 8003f2c:	e2f8      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	78fa      	ldrb	r2, [r7, #3]
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f002 fa56 	bl	80063e8 <USB_ReadChInterrupts>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f003 0310 	and.w	r3, r3, #16
 8003f42:	2b10      	cmp	r3, #16
 8003f44:	d144      	bne.n	8003fd0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	6879      	ldr	r1, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	011b      	lsls	r3, r3, #4
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	440b      	add	r3, r1
 8003f54:	3344      	adds	r3, #68	@ 0x44
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003f5a:	78fa      	ldrb	r2, [r7, #3]
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	1a9b      	subs	r3, r3, r2
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	440b      	add	r3, r1
 8003f68:	334d      	adds	r3, #77	@ 0x4d
 8003f6a:	2204      	movs	r2, #4
 8003f6c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003f6e:	78fa      	ldrb	r2, [r7, #3]
 8003f70:	6879      	ldr	r1, [r7, #4]
 8003f72:	4613      	mov	r3, r2
 8003f74:	011b      	lsls	r3, r3, #4
 8003f76:	1a9b      	subs	r3, r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	440b      	add	r3, r1
 8003f7c:	3319      	adds	r3, #25
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d114      	bne.n	8003fae <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	3318      	adds	r3, #24
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003f9a:	78fa      	ldrb	r2, [r7, #3]
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	011b      	lsls	r3, r3, #4
 8003fa2:	1a9b      	subs	r3, r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	440b      	add	r3, r1
 8003fa8:	3319      	adds	r3, #25
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f002 ffb9 	bl	8006f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003fbc:	78fb      	ldrb	r3, [r7, #3]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2310      	movs	r3, #16
 8003fcc:	6093      	str	r3, [r2, #8]
 8003fce:	e2a7      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	4611      	mov	r1, r2
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f002 fa05 	bl	80063e8 <USB_ReadChInterrupts>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe4:	2b80      	cmp	r3, #128	@ 0x80
 8003fe6:	f040 8083 	bne.w	80040f0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	799b      	ldrb	r3, [r3, #6]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d111      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003ff2:	78fa      	ldrb	r2, [r7, #3]
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	334d      	adds	r3, #77	@ 0x4d
 8004002:	2207      	movs	r2, #7
 8004004:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	78fa      	ldrb	r2, [r7, #3]
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f002 ff8d 	bl	8006f2e <USB_HC_Halt>
 8004014:	e062      	b.n	80040dc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004016:	78fa      	ldrb	r2, [r7, #3]
 8004018:	6879      	ldr	r1, [r7, #4]
 800401a:	4613      	mov	r3, r2
 800401c:	011b      	lsls	r3, r3, #4
 800401e:	1a9b      	subs	r3, r3, r2
 8004020:	009b      	lsls	r3, r3, #2
 8004022:	440b      	add	r3, r1
 8004024:	3344      	adds	r3, #68	@ 0x44
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	1c59      	adds	r1, r3, #1
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4403      	add	r3, r0
 8004036:	3344      	adds	r3, #68	@ 0x44
 8004038:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800403a:	78fa      	ldrb	r2, [r7, #3]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	011b      	lsls	r3, r3, #4
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	3344      	adds	r3, #68	@ 0x44
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2b02      	cmp	r3, #2
 800404e:	d922      	bls.n	8004096 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004050:	78fa      	ldrb	r2, [r7, #3]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3344      	adds	r3, #68	@ 0x44
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004064:	78fa      	ldrb	r2, [r7, #3]
 8004066:	6879      	ldr	r1, [r7, #4]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	334c      	adds	r3, #76	@ 0x4c
 8004074:	2204      	movs	r2, #4
 8004076:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334c      	adds	r3, #76	@ 0x4c
 8004088:	781a      	ldrb	r2, [r3, #0]
 800408a:	78fb      	ldrb	r3, [r7, #3]
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f005 faa6 	bl	80095e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004094:	e022      	b.n	80040dc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	334c      	adds	r3, #76	@ 0x4c
 80040a6:	2202      	movs	r2, #2
 80040a8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80040c0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80040c8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040d6:	461a      	mov	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80040dc:	78fb      	ldrb	r3, [r7, #3]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040e8:	461a      	mov	r2, r3
 80040ea:	2380      	movs	r3, #128	@ 0x80
 80040ec:	6093      	str	r3, [r2, #8]
 80040ee:	e217      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f002 f975 	bl	80063e8 <USB_ReadChInterrupts>
 80040fe:	4603      	mov	r3, r0
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004108:	d11b      	bne.n	8004142 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	334d      	adds	r3, #77	@ 0x4d
 800411a:	2209      	movs	r2, #9
 800411c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	4611      	mov	r1, r2
 8004126:	4618      	mov	r0, r3
 8004128:	f002 ff01 	bl	8006f2e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800412c:	78fb      	ldrb	r3, [r7, #3]
 800412e:	015a      	lsls	r2, r3, #5
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4413      	add	r3, r2
 8004134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004138:	461a      	mov	r2, r3
 800413a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800413e:	6093      	str	r3, [r2, #8]
 8004140:	e1ee      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f002 f94c 	bl	80063e8 <USB_ReadChInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b02      	cmp	r3, #2
 8004158:	f040 81df 	bne.w	800451a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	015a      	lsls	r2, r3, #5
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	4413      	add	r3, r2
 8004164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004168:	461a      	mov	r2, r3
 800416a:	2302      	movs	r3, #2
 800416c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334d      	adds	r3, #77	@ 0x4d
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 8093 	bne.w	80042ac <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004186:	78fa      	ldrb	r2, [r7, #3]
 8004188:	6879      	ldr	r1, [r7, #4]
 800418a:	4613      	mov	r3, r2
 800418c:	011b      	lsls	r3, r3, #4
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	334d      	adds	r3, #77	@ 0x4d
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800419a:	78fa      	ldrb	r2, [r7, #3]
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4613      	mov	r3, r2
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	334c      	adds	r3, #76	@ 0x4c
 80041aa:	2201      	movs	r2, #1
 80041ac:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	3326      	adds	r3, #38	@ 0x26
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d00b      	beq.n	80041dc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80041c4:	78fa      	ldrb	r2, [r7, #3]
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	4613      	mov	r3, r2
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	1a9b      	subs	r3, r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	3326      	adds	r3, #38	@ 0x26
 80041d4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	f040 8190 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	799b      	ldrb	r3, [r3, #6]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d115      	bne.n	8004210 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	333d      	adds	r3, #61	@ 0x3d
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	f083 0301 	eor.w	r3, r3, #1
 80041fc:	b2d8      	uxtb	r0, r3
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	333d      	adds	r3, #61	@ 0x3d
 800420c:	4602      	mov	r2, r0
 800420e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	799b      	ldrb	r3, [r3, #6]
 8004214:	2b01      	cmp	r3, #1
 8004216:	f040 8171 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	6879      	ldr	r1, [r7, #4]
 800421e:	4613      	mov	r3, r2
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	1a9b      	subs	r3, r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	440b      	add	r3, r1
 8004228:	3334      	adds	r3, #52	@ 0x34
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8165 	beq.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004232:	78fa      	ldrb	r2, [r7, #3]
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	4613      	mov	r3, r2
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	1a9b      	subs	r3, r3, r2
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	3334      	adds	r3, #52	@ 0x34
 8004242:	6819      	ldr	r1, [r3, #0]
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4403      	add	r3, r0
 8004252:	3328      	adds	r3, #40	@ 0x28
 8004254:	881b      	ldrh	r3, [r3, #0]
 8004256:	440b      	add	r3, r1
 8004258:	1e59      	subs	r1, r3, #1
 800425a:	78fa      	ldrb	r2, [r7, #3]
 800425c:	6878      	ldr	r0, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	1a9b      	subs	r3, r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4403      	add	r3, r0
 8004268:	3328      	adds	r3, #40	@ 0x28
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004270:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	f000 813f 	beq.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800427e:	78fa      	ldrb	r2, [r7, #3]
 8004280:	6879      	ldr	r1, [r7, #4]
 8004282:	4613      	mov	r3, r2
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	1a9b      	subs	r3, r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	440b      	add	r3, r1
 800428c:	333d      	adds	r3, #61	@ 0x3d
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	f083 0301 	eor.w	r3, r3, #1
 8004296:	b2d8      	uxtb	r0, r3
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	333d      	adds	r3, #61	@ 0x3d
 80042a6:	4602      	mov	r2, r0
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e127      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80042ac:	78fa      	ldrb	r2, [r7, #3]
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	4613      	mov	r3, r2
 80042b2:	011b      	lsls	r3, r3, #4
 80042b4:	1a9b      	subs	r3, r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	440b      	add	r3, r1
 80042ba:	334d      	adds	r3, #77	@ 0x4d
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	2b03      	cmp	r3, #3
 80042c0:	d120      	bne.n	8004304 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	334d      	adds	r3, #77	@ 0x4d
 80042d2:	2202      	movs	r2, #2
 80042d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80042d6:	78fa      	ldrb	r2, [r7, #3]
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	4613      	mov	r3, r2
 80042dc:	011b      	lsls	r3, r3, #4
 80042de:	1a9b      	subs	r3, r3, r2
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	440b      	add	r3, r1
 80042e4:	331b      	adds	r3, #27
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	f040 8107 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ee:	78fa      	ldrb	r2, [r7, #3]
 80042f0:	6879      	ldr	r1, [r7, #4]
 80042f2:	4613      	mov	r3, r2
 80042f4:	011b      	lsls	r3, r3, #4
 80042f6:	1a9b      	subs	r3, r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	440b      	add	r3, r1
 80042fc:	334c      	adds	r3, #76	@ 0x4c
 80042fe:	2202      	movs	r2, #2
 8004300:	701a      	strb	r2, [r3, #0]
 8004302:	e0fb      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004304:	78fa      	ldrb	r2, [r7, #3]
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4613      	mov	r3, r2
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	1a9b      	subs	r3, r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	334d      	adds	r3, #77	@ 0x4d
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	2b04      	cmp	r3, #4
 8004318:	d13a      	bne.n	8004390 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800431a:	78fa      	ldrb	r2, [r7, #3]
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	334d      	adds	r3, #77	@ 0x4d
 800432a:	2202      	movs	r2, #2
 800432c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800432e:	78fa      	ldrb	r2, [r7, #3]
 8004330:	6879      	ldr	r1, [r7, #4]
 8004332:	4613      	mov	r3, r2
 8004334:	011b      	lsls	r3, r3, #4
 8004336:	1a9b      	subs	r3, r3, r2
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	334c      	adds	r3, #76	@ 0x4c
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	011b      	lsls	r3, r3, #4
 800434a:	1a9b      	subs	r3, r3, r2
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	440b      	add	r3, r1
 8004350:	331b      	adds	r3, #27
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	2b01      	cmp	r3, #1
 8004356:	f040 80d1 	bne.w	80044fc <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800435a:	78fa      	ldrb	r2, [r7, #3]
 800435c:	6879      	ldr	r1, [r7, #4]
 800435e:	4613      	mov	r3, r2
 8004360:	011b      	lsls	r3, r3, #4
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	331b      	adds	r3, #27
 800436a:	2200      	movs	r2, #0
 800436c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800436e:	78fb      	ldrb	r3, [r7, #3]
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4413      	add	r3, r2
 8004376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	0151      	lsls	r1, r2, #5
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	440a      	add	r2, r1
 8004384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004388:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800438c:	6053      	str	r3, [r2, #4]
 800438e:	e0b5      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	011b      	lsls	r3, r3, #4
 8004398:	1a9b      	subs	r3, r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	334d      	adds	r3, #77	@ 0x4d
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d114      	bne.n	80043d0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043a6:	78fa      	ldrb	r2, [r7, #3]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	4613      	mov	r3, r2
 80043ac:	011b      	lsls	r3, r3, #4
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	440b      	add	r3, r1
 80043b4:	334d      	adds	r3, #77	@ 0x4d
 80043b6:	2202      	movs	r2, #2
 80043b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	1a9b      	subs	r3, r3, r2
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	440b      	add	r3, r1
 80043c8:	334c      	adds	r3, #76	@ 0x4c
 80043ca:	2202      	movs	r2, #2
 80043cc:	701a      	strb	r2, [r3, #0]
 80043ce:	e095      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334d      	adds	r3, #77	@ 0x4d
 80043e0:	781b      	ldrb	r3, [r3, #0]
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d114      	bne.n	8004410 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	1a9b      	subs	r3, r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	440b      	add	r3, r1
 80043f4:	334d      	adds	r3, #77	@ 0x4d
 80043f6:	2202      	movs	r2, #2
 80043f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	6879      	ldr	r1, [r7, #4]
 80043fe:	4613      	mov	r3, r2
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	440b      	add	r3, r1
 8004408:	334c      	adds	r3, #76	@ 0x4c
 800440a:	2205      	movs	r2, #5
 800440c:	701a      	strb	r2, [r3, #0]
 800440e:	e075      	b.n	80044fc <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004410:	78fa      	ldrb	r2, [r7, #3]
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	4613      	mov	r3, r2
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	1a9b      	subs	r3, r3, r2
 800441a:	009b      	lsls	r3, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	334d      	adds	r3, #77	@ 0x4d
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b07      	cmp	r3, #7
 8004424:	d00a      	beq.n	800443c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004426:	78fa      	ldrb	r2, [r7, #3]
 8004428:	6879      	ldr	r1, [r7, #4]
 800442a:	4613      	mov	r3, r2
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	440b      	add	r3, r1
 8004434:	334d      	adds	r3, #77	@ 0x4d
 8004436:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004438:	2b09      	cmp	r3, #9
 800443a:	d170      	bne.n	800451e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800443c:	78fa      	ldrb	r2, [r7, #3]
 800443e:	6879      	ldr	r1, [r7, #4]
 8004440:	4613      	mov	r3, r2
 8004442:	011b      	lsls	r3, r3, #4
 8004444:	1a9b      	subs	r3, r3, r2
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	440b      	add	r3, r1
 800444a:	334d      	adds	r3, #77	@ 0x4d
 800444c:	2202      	movs	r2, #2
 800444e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004450:	78fa      	ldrb	r2, [r7, #3]
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	4613      	mov	r3, r2
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	1a9b      	subs	r3, r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	440b      	add	r3, r1
 800445e:	3344      	adds	r3, #68	@ 0x44
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	1c59      	adds	r1, r3, #1
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4613      	mov	r3, r2
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4403      	add	r3, r0
 8004470:	3344      	adds	r3, #68	@ 0x44
 8004472:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004474:	78fa      	ldrb	r2, [r7, #3]
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	4613      	mov	r3, r2
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	3344      	adds	r3, #68	@ 0x44
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b02      	cmp	r3, #2
 8004488:	d914      	bls.n	80044b4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800448a:	78fa      	ldrb	r2, [r7, #3]
 800448c:	6879      	ldr	r1, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	440b      	add	r3, r1
 8004498:	3344      	adds	r3, #68	@ 0x44
 800449a:	2200      	movs	r2, #0
 800449c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800449e:	78fa      	ldrb	r2, [r7, #3]
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	4613      	mov	r3, r2
 80044a4:	011b      	lsls	r3, r3, #4
 80044a6:	1a9b      	subs	r3, r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	334c      	adds	r3, #76	@ 0x4c
 80044ae:	2204      	movs	r2, #4
 80044b0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044b2:	e022      	b.n	80044fa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044b4:	78fa      	ldrb	r2, [r7, #3]
 80044b6:	6879      	ldr	r1, [r7, #4]
 80044b8:	4613      	mov	r3, r2
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	1a9b      	subs	r3, r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	440b      	add	r3, r1
 80044c2:	334c      	adds	r3, #76	@ 0x4c
 80044c4:	2202      	movs	r2, #2
 80044c6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80044c8:	78fb      	ldrb	r3, [r7, #3]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80044de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80044e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80044e8:	78fb      	ldrb	r3, [r7, #3]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044f4:	461a      	mov	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80044fa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	6879      	ldr	r1, [r7, #4]
 8004500:	4613      	mov	r3, r2
 8004502:	011b      	lsls	r3, r3, #4
 8004504:	1a9b      	subs	r3, r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	440b      	add	r3, r1
 800450a:	334c      	adds	r3, #76	@ 0x4c
 800450c:	781a      	ldrb	r2, [r3, #0]
 800450e:	78fb      	ldrb	r3, [r7, #3]
 8004510:	4619      	mov	r1, r3
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f005 f864 	bl	80095e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004518:	e002      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800451a:	bf00      	nop
 800451c:	e000      	b.n	8004520 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800451e:	bf00      	nop
  }
}
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08a      	sub	sp, #40	@ 0x28
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6a1b      	ldr	r3, [r3, #32]
 800453e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	0c5b      	lsrs	r3, r3, #17
 800454c:	f003 030f 	and.w	r3, r3, #15
 8004550:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	091b      	lsrs	r3, r3, #4
 8004556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800455a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b02      	cmp	r3, #2
 8004560:	d004      	beq.n	800456c <HCD_RXQLVL_IRQHandler+0x46>
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	2b05      	cmp	r3, #5
 8004566:	f000 80b6 	beq.w	80046d6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800456a:	e0b7      	b.n	80046dc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	f000 80b3 	beq.w	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
 8004574:	6879      	ldr	r1, [r7, #4]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	332c      	adds	r3, #44	@ 0x2c
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f000 80a7 	beq.w	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	4613      	mov	r3, r2
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	1a9b      	subs	r3, r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	3338      	adds	r3, #56	@ 0x38
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	18d1      	adds	r1, r2, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4613      	mov	r3, r2
 80045a8:	011b      	lsls	r3, r3, #4
 80045aa:	1a9b      	subs	r3, r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4403      	add	r3, r0
 80045b0:	3334      	adds	r3, #52	@ 0x34
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4299      	cmp	r1, r3
 80045b6:	f200 8083 	bhi.w	80046c0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	6879      	ldr	r1, [r7, #4]
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4613      	mov	r3, r2
 80045c4:	011b      	lsls	r3, r3, #4
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	440b      	add	r3, r1
 80045cc:	332c      	adds	r3, #44	@ 0x2c
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	b292      	uxth	r2, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	f001 fe9c 	bl	8006312 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4613      	mov	r3, r2
 80045e0:	011b      	lsls	r3, r3, #4
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	440b      	add	r3, r1
 80045e8:	332c      	adds	r3, #44	@ 0x2c
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	18d1      	adds	r1, r2, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	69ba      	ldr	r2, [r7, #24]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4403      	add	r3, r0
 80045fe:	332c      	adds	r3, #44	@ 0x2c
 8004600:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	69ba      	ldr	r2, [r7, #24]
 8004606:	4613      	mov	r3, r2
 8004608:	011b      	lsls	r3, r3, #4
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	440b      	add	r3, r1
 8004610:	3338      	adds	r3, #56	@ 0x38
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	18d1      	adds	r1, r2, r3
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	69ba      	ldr	r2, [r7, #24]
 800461c:	4613      	mov	r3, r2
 800461e:	011b      	lsls	r3, r3, #4
 8004620:	1a9b      	subs	r3, r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	4403      	add	r3, r0
 8004626:	3338      	adds	r3, #56	@ 0x38
 8004628:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800462a:	69bb      	ldr	r3, [r7, #24]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	0cdb      	lsrs	r3, r3, #19
 800463a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800463e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	4613      	mov	r3, r2
 8004646:	011b      	lsls	r3, r3, #4
 8004648:	1a9b      	subs	r3, r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3328      	adds	r3, #40	@ 0x28
 8004650:	881b      	ldrh	r3, [r3, #0]
 8004652:	461a      	mov	r2, r3
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4293      	cmp	r3, r2
 8004658:	d13f      	bne.n	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d03c      	beq.n	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	6a3b      	ldr	r3, [r7, #32]
 8004666:	4413      	add	r3, r2
 8004668:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004676:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800467e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	4413      	add	r3, r2
 8004688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800468c:	461a      	mov	r2, r3
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4613      	mov	r3, r2
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	333c      	adds	r3, #60	@ 0x3c
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f083 0301 	eor.w	r3, r3, #1
 80046a8:	b2d8      	uxtb	r0, r3
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4613      	mov	r3, r2
 80046b0:	011b      	lsls	r3, r3, #4
 80046b2:	1a9b      	subs	r3, r3, r2
 80046b4:	009b      	lsls	r3, r3, #2
 80046b6:	440b      	add	r3, r1
 80046b8:	333c      	adds	r3, #60	@ 0x3c
 80046ba:	4602      	mov	r2, r0
 80046bc:	701a      	strb	r2, [r3, #0]
      break;
 80046be:	e00c      	b.n	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80046c0:	6879      	ldr	r1, [r7, #4]
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4613      	mov	r3, r2
 80046c6:	011b      	lsls	r3, r3, #4
 80046c8:	1a9b      	subs	r3, r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334c      	adds	r3, #76	@ 0x4c
 80046d0:	2204      	movs	r2, #4
 80046d2:	701a      	strb	r2, [r3, #0]
      break;
 80046d4:	e001      	b.n	80046da <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80046da:	bf00      	nop
  }
}
 80046dc:	bf00      	nop
 80046de:	3728      	adds	r7, #40	@ 0x28
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004710:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b02      	cmp	r3, #2
 800471a:	d10b      	bne.n	8004734 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b01      	cmp	r3, #1
 8004724:	d102      	bne.n	800472c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f004 ff3e 	bl	80095a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f043 0302 	orr.w	r3, r3, #2
 8004732:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b08      	cmp	r3, #8
 800473c:	d132      	bne.n	80047a4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f043 0308 	orr.w	r3, r3, #8
 8004744:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	2b04      	cmp	r3, #4
 800474e:	d126      	bne.n	800479e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	7a5b      	ldrb	r3, [r3, #9]
 8004754:	2b02      	cmp	r3, #2
 8004756:	d113      	bne.n	8004780 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800475e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004762:	d106      	bne.n	8004772 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2102      	movs	r1, #2
 800476a:	4618      	mov	r0, r3
 800476c:	f001 ff60 	bl	8006630 <USB_InitFSLSPClkSel>
 8004770:	e011      	b.n	8004796 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2101      	movs	r1, #1
 8004778:	4618      	mov	r0, r3
 800477a:	f001 ff59 	bl	8006630 <USB_InitFSLSPClkSel>
 800477e:	e00a      	b.n	8004796 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	79db      	ldrb	r3, [r3, #7]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d106      	bne.n	8004796 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800478e:	461a      	mov	r2, r3
 8004790:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004794:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f004 ff30 	bl	80095fc <HAL_HCD_PortEnabled_Callback>
 800479c:	e002      	b.n	80047a4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f004 ff3a 	bl	8009618 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f003 0320 	and.w	r3, r3, #32
 80047aa:	2b20      	cmp	r3, #32
 80047ac:	d103      	bne.n	80047b6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	f043 0320 	orr.w	r3, r3, #32
 80047b4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80047bc:	461a      	mov	r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6013      	str	r3, [r2, #0]
}
 80047c2:	bf00      	nop
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e12b      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d106      	bne.n	80047f8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f7fc fd9c 	bl	8001330 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	@ 0x24
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800481e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800482e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004830:	f001 fa20 	bl	8005c74 <HAL_RCC_GetPCLK1Freq>
 8004834:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4a81      	ldr	r2, [pc, #516]	@ (8004a40 <HAL_I2C_Init+0x274>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d807      	bhi.n	8004850 <HAL_I2C_Init+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	4a80      	ldr	r2, [pc, #512]	@ (8004a44 <HAL_I2C_Init+0x278>)
 8004844:	4293      	cmp	r3, r2
 8004846:	bf94      	ite	ls
 8004848:	2301      	movls	r3, #1
 800484a:	2300      	movhi	r3, #0
 800484c:	b2db      	uxtb	r3, r3
 800484e:	e006      	b.n	800485e <HAL_I2C_Init+0x92>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4a7d      	ldr	r2, [pc, #500]	@ (8004a48 <HAL_I2C_Init+0x27c>)
 8004854:	4293      	cmp	r3, r2
 8004856:	bf94      	ite	ls
 8004858:	2301      	movls	r3, #1
 800485a:	2300      	movhi	r3, #0
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e0e7      	b.n	8004a36 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a78      	ldr	r2, [pc, #480]	@ (8004a4c <HAL_I2C_Init+0x280>)
 800486a:	fba2 2303 	umull	r2, r3, r2, r3
 800486e:	0c9b      	lsrs	r3, r3, #18
 8004870:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	68ba      	ldr	r2, [r7, #8]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	4a6a      	ldr	r2, [pc, #424]	@ (8004a40 <HAL_I2C_Init+0x274>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d802      	bhi.n	80048a0 <HAL_I2C_Init+0xd4>
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	3301      	adds	r3, #1
 800489e:	e009      	b.n	80048b4 <HAL_I2C_Init+0xe8>
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
 80048aa:	4a69      	ldr	r2, [pc, #420]	@ (8004a50 <HAL_I2C_Init+0x284>)
 80048ac:	fba2 2303 	umull	r2, r3, r2, r3
 80048b0:	099b      	lsrs	r3, r3, #6
 80048b2:	3301      	adds	r3, #1
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	430b      	orrs	r3, r1
 80048ba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	69db      	ldr	r3, [r3, #28]
 80048c2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80048c6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	495c      	ldr	r1, [pc, #368]	@ (8004a40 <HAL_I2C_Init+0x274>)
 80048d0:	428b      	cmp	r3, r1
 80048d2:	d819      	bhi.n	8004908 <HAL_I2C_Init+0x13c>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e59      	subs	r1, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	fbb1 f3f3 	udiv	r3, r1, r3
 80048e2:	1c59      	adds	r1, r3, #1
 80048e4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048e8:	400b      	ands	r3, r1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00a      	beq.n	8004904 <HAL_I2C_Init+0x138>
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	1e59      	subs	r1, r3, #1
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	005b      	lsls	r3, r3, #1
 80048f8:	fbb1 f3f3 	udiv	r3, r1, r3
 80048fc:	3301      	adds	r3, #1
 80048fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004902:	e051      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004904:	2304      	movs	r3, #4
 8004906:	e04f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d111      	bne.n	8004934 <HAL_I2C_Init+0x168>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	1e58      	subs	r0, r3, #1
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	440b      	add	r3, r1
 800491e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004922:	3301      	adds	r3, #1
 8004924:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e012      	b.n	800495a <HAL_I2C_Init+0x18e>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	1e58      	subs	r0, r3, #1
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6859      	ldr	r1, [r3, #4]
 800493c:	460b      	mov	r3, r1
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	0099      	lsls	r1, r3, #2
 8004944:	440b      	add	r3, r1
 8004946:	fbb0 f3f3 	udiv	r3, r0, r3
 800494a:	3301      	adds	r3, #1
 800494c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004950:	2b00      	cmp	r3, #0
 8004952:	bf0c      	ite	eq
 8004954:	2301      	moveq	r3, #1
 8004956:	2300      	movne	r3, #0
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_I2C_Init+0x196>
 800495e:	2301      	movs	r3, #1
 8004960:	e022      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10e      	bne.n	8004988 <HAL_I2C_Init+0x1bc>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	1e58      	subs	r0, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6859      	ldr	r1, [r3, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	005b      	lsls	r3, r3, #1
 8004976:	440b      	add	r3, r1
 8004978:	fbb0 f3f3 	udiv	r3, r0, r3
 800497c:	3301      	adds	r3, #1
 800497e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004982:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004986:	e00f      	b.n	80049a8 <HAL_I2C_Init+0x1dc>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1e58      	subs	r0, r3, #1
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6859      	ldr	r1, [r3, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	0099      	lsls	r1, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	fbb0 f3f3 	udiv	r3, r0, r3
 800499e:	3301      	adds	r3, #1
 80049a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	6809      	ldr	r1, [r1, #0]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a1b      	ldr	r3, [r3, #32]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80049d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	6911      	ldr	r1, [r2, #16]
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	68d2      	ldr	r2, [r2, #12]
 80049e2:	4311      	orrs	r1, r2
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	6812      	ldr	r2, [r2, #0]
 80049e8:	430b      	orrs	r3, r1
 80049ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	699b      	ldr	r3, [r3, #24]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f042 0201 	orr.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2220      	movs	r2, #32
 8004a22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3710      	adds	r7, #16
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	000186a0 	.word	0x000186a0
 8004a44:	001e847f 	.word	0x001e847f
 8004a48:	003d08ff 	.word	0x003d08ff
 8004a4c:	431bde83 	.word	0x431bde83
 8004a50:	10624dd3 	.word	0x10624dd3

08004a54 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b088      	sub	sp, #32
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e128      	b.n	8004cb8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4a90      	ldr	r2, [pc, #576]	@ (8004cc0 <HAL_I2S_Init+0x26c>)
 8004a7e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7fc fc9d 	bl	80013c0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2202      	movs	r2, #2
 8004a8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	6812      	ldr	r2, [r2, #0]
 8004a98:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004a9c:	f023 030f 	bic.w	r3, r3, #15
 8004aa0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d060      	beq.n	8004b74 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004aba:	2310      	movs	r3, #16
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e001      	b.n	8004ac4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d802      	bhi.n	8004ad2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004ad2:	2001      	movs	r0, #1
 8004ad4:	f001 f9c4 	bl	8005e60 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ad8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ae2:	d125      	bne.n	8004b30 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d010      	beq.n	8004b0e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004af6:	4613      	mov	r3, r2
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	4413      	add	r3, r2
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b08:	3305      	adds	r3, #5
 8004b0a:	613b      	str	r3, [r7, #16]
 8004b0c:	e01f      	b.n	8004b4e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	461a      	mov	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	3305      	adds	r3, #5
 8004b2c:	613b      	str	r3, [r7, #16]
 8004b2e:	e00e      	b.n	8004b4e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004b30:	68fa      	ldr	r2, [r7, #12]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b38:	4613      	mov	r3, r2
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	005b      	lsls	r3, r3, #1
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b4a:	3305      	adds	r3, #5
 8004b4c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	4a5c      	ldr	r2, [pc, #368]	@ (8004cc4 <HAL_I2S_Init+0x270>)
 8004b52:	fba2 2303 	umull	r2, r3, r2, r3
 8004b56:	08db      	lsrs	r3, r3, #3
 8004b58:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f003 0301 	and.w	r3, r3, #1
 8004b60:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	085b      	lsrs	r3, r3, #1
 8004b6a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	61bb      	str	r3, [r7, #24]
 8004b72:	e003      	b.n	8004b7c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004b74:	2302      	movs	r3, #2
 8004b76:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004b7c:	69fb      	ldr	r3, [r7, #28]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d902      	bls.n	8004b88 <HAL_I2S_Init+0x134>
 8004b82:	69fb      	ldr	r3, [r7, #28]
 8004b84:	2bff      	cmp	r3, #255	@ 0xff
 8004b86:	d907      	bls.n	8004b98 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8c:	f043 0210 	orr.w	r2, r3, #16
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e08f      	b.n	8004cb8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	ea42 0103 	orr.w	r1, r2, r3
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69fa      	ldr	r2, [r7, #28]
 8004ba8:	430a      	orrs	r2, r1
 8004baa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004bb6:	f023 030f 	bic.w	r3, r3, #15
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6851      	ldr	r1, [r2, #4]
 8004bbe:	687a      	ldr	r2, [r7, #4]
 8004bc0:	6892      	ldr	r2, [r2, #8]
 8004bc2:	4311      	orrs	r1, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	68d2      	ldr	r2, [r2, #12]
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6992      	ldr	r2, [r2, #24]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bda:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d161      	bne.n	8004ca8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a38      	ldr	r2, [pc, #224]	@ (8004cc8 <HAL_I2S_Init+0x274>)
 8004be8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a37      	ldr	r2, [pc, #220]	@ (8004ccc <HAL_I2S_Init+0x278>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d101      	bne.n	8004bf8 <HAL_I2S_Init+0x1a4>
 8004bf4:	4b36      	ldr	r3, [pc, #216]	@ (8004cd0 <HAL_I2S_Init+0x27c>)
 8004bf6:	e001      	b.n	8004bfc <HAL_I2S_Init+0x1a8>
 8004bf8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6812      	ldr	r2, [r2, #0]
 8004c02:	4932      	ldr	r1, [pc, #200]	@ (8004ccc <HAL_I2S_Init+0x278>)
 8004c04:	428a      	cmp	r2, r1
 8004c06:	d101      	bne.n	8004c0c <HAL_I2S_Init+0x1b8>
 8004c08:	4a31      	ldr	r2, [pc, #196]	@ (8004cd0 <HAL_I2S_Init+0x27c>)
 8004c0a:	e001      	b.n	8004c10 <HAL_I2S_Init+0x1bc>
 8004c0c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004c10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004c14:	f023 030f 	bic.w	r3, r3, #15
 8004c18:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2b      	ldr	r2, [pc, #172]	@ (8004ccc <HAL_I2S_Init+0x278>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d101      	bne.n	8004c28 <HAL_I2S_Init+0x1d4>
 8004c24:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd0 <HAL_I2S_Init+0x27c>)
 8004c26:	e001      	b.n	8004c2c <HAL_I2S_Init+0x1d8>
 8004c28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a25      	ldr	r2, [pc, #148]	@ (8004ccc <HAL_I2S_Init+0x278>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d101      	bne.n	8004c3e <HAL_I2S_Init+0x1ea>
 8004c3a:	4b25      	ldr	r3, [pc, #148]	@ (8004cd0 <HAL_I2S_Init+0x27c>)
 8004c3c:	e001      	b.n	8004c42 <HAL_I2S_Init+0x1ee>
 8004c3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c4e:	d003      	beq.n	8004c58 <HAL_I2S_Init+0x204>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d103      	bne.n	8004c60 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	e001      	b.n	8004c64 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	699b      	ldr	r3, [r3, #24]
 8004c80:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004c82:	4313      	orrs	r3, r2
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	897b      	ldrh	r3, [r7, #10]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004c90:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <HAL_I2S_Init+0x278>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d101      	bne.n	8004ca0 <HAL_I2S_Init+0x24c>
 8004c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004cd0 <HAL_I2S_Init+0x27c>)
 8004c9e:	e001      	b.n	8004ca4 <HAL_I2S_Init+0x250>
 8004ca0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ca4:	897a      	ldrh	r2, [r7, #10]
 8004ca6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08004dcb 	.word	0x08004dcb
 8004cc4:	cccccccd 	.word	0xcccccccd
 8004cc8:	08004ee1 	.word	0x08004ee1
 8004ccc:	40003800 	.word	0x40003800
 8004cd0:	40003400 	.word	0x40003400

08004cd4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b082      	sub	sp, #8
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	881a      	ldrh	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d28:	1c9a      	adds	r2, r3, #2
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	3b01      	subs	r3, #1
 8004d36:	b29a      	uxth	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10e      	bne.n	8004d64 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	685a      	ldr	r2, [r3, #4]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004d54:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffb8 	bl	8004cd4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b082      	sub	sp, #8
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7e:	b292      	uxth	r2, r2
 8004d80:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	1c9a      	adds	r2, r3, #2
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	3b01      	subs	r3, #1
 8004d94:	b29a      	uxth	r2, r3
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10e      	bne.n	8004dc2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685a      	ldr	r2, [r3, #4]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004db2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff93 	bl	8004ce8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b086      	sub	sp, #24
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d13a      	bne.n	8004e5c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d109      	bne.n	8004e04 <I2S_IRQHandler+0x3a>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b40      	cmp	r3, #64	@ 0x40
 8004dfc:	d102      	bne.n	8004e04 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7ff ffb4 	bl	8004d6c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e0a:	2b40      	cmp	r3, #64	@ 0x40
 8004e0c:	d126      	bne.n	8004e5c <I2S_IRQHandler+0x92>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b20      	cmp	r3, #32
 8004e1a:	d11f      	bne.n	8004e5c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004e2a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	613b      	str	r3, [r7, #16]
 8004e40:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4e:	f043 0202 	orr.w	r2, r3, #2
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ff50 	bl	8004cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d136      	bne.n	8004ed6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f003 0302 	and.w	r3, r3, #2
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d109      	bne.n	8004e86 <I2S_IRQHandler+0xbc>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e7c:	2b80      	cmp	r3, #128	@ 0x80
 8004e7e:	d102      	bne.n	8004e86 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7ff ff45 	bl	8004d10 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d122      	bne.n	8004ed6 <I2S_IRQHandler+0x10c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f003 0320 	and.w	r3, r3, #32
 8004e9a:	2b20      	cmp	r3, #32
 8004e9c:	d11b      	bne.n	8004ed6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004eac:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	60fb      	str	r3, [r7, #12]
 8004eba:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ec8:	f043 0204 	orr.w	r2, r3, #4
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ff13 	bl	8004cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ed6:	bf00      	nop
 8004ed8:	3718      	adds	r7, #24
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b088      	sub	sp, #32
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a92      	ldr	r2, [pc, #584]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d101      	bne.n	8004efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004efa:	4b92      	ldr	r3, [pc, #584]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004efc:	e001      	b.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004efe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a8b      	ldr	r2, [pc, #556]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d101      	bne.n	8004f1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004f18:	4b8a      	ldr	r3, [pc, #552]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f1a:	e001      	b.n	8004f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004f1c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	685b      	ldr	r3, [r3, #4]
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f2c:	d004      	beq.n	8004f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 8099 	bne.w	800506a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	f003 0302 	and.w	r3, r3, #2
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d107      	bne.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f000 f925 	bl	800519c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d107      	bne.n	8004f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f9c8 	bl	80052fc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f72:	2b40      	cmp	r3, #64	@ 0x40
 8004f74:	d13a      	bne.n	8004fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	f003 0320 	and.w	r3, r3, #32
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d035      	beq.n	8004fec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a6e      	ldr	r2, [pc, #440]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d101      	bne.n	8004f8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004f8a:	4b6e      	ldr	r3, [pc, #440]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f8c:	e001      	b.n	8004f92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004f8e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4969      	ldr	r1, [pc, #420]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f9a:	428b      	cmp	r3, r1
 8004f9c:	d101      	bne.n	8004fa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004f9e:	4b69      	ldr	r3, [pc, #420]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004fa0:	e001      	b.n	8004fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004fa2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004fa6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004faa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004fba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fde:	f043 0202 	orr.w	r2, r3, #2
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fe88 	bl	8004cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f003 0308 	and.w	r3, r3, #8
 8004ff2:	2b08      	cmp	r3, #8
 8004ff4:	f040 80c3 	bne.w	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	f003 0320 	and.w	r3, r3, #32
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80bd 	beq.w	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685a      	ldr	r2, [r3, #4]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005012:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a49      	ldr	r2, [pc, #292]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800501e:	4b49      	ldr	r3, [pc, #292]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005020:	e001      	b.n	8005026 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005022:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005026:	685a      	ldr	r2, [r3, #4]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4944      	ldr	r1, [pc, #272]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800502e:	428b      	cmp	r3, r1
 8005030:	d101      	bne.n	8005036 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005032:	4b44      	ldr	r3, [pc, #272]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005034:	e001      	b.n	800503a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005036:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800503a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800503e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005040:	2300      	movs	r3, #0
 8005042:	60bb      	str	r3, [r7, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505a:	f043 0204 	orr.w	r2, r3, #4
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fe4a 	bl	8004cfc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005068:	e089      	b.n	800517e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b02      	cmp	r3, #2
 8005072:	d107      	bne.n	8005084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800507a:	2b00      	cmp	r3, #0
 800507c:	d002      	beq.n	8005084 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f8be 	bl	8005200 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005094:	2b00      	cmp	r3, #0
 8005096:	d002      	beq.n	800509e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f000 f8fd 	bl	8005298 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050a4:	2b40      	cmp	r3, #64	@ 0x40
 80050a6:	d12f      	bne.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	f003 0320 	and.w	r3, r3, #32
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d02a      	beq.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80050c0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d101      	bne.n	80050d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80050cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050ce:	e001      	b.n	80050d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80050d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050d4:	685a      	ldr	r2, [r3, #4]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4919      	ldr	r1, [pc, #100]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050dc:	428b      	cmp	r3, r1
 80050de:	d101      	bne.n	80050e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80050e0:	4b18      	ldr	r3, [pc, #96]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050e2:	e001      	b.n	80050e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80050e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80050e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80050ec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fdfa 	bl	8004cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b08      	cmp	r3, #8
 8005110:	d136      	bne.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	f003 0320 	and.w	r3, r3, #32
 8005118:	2b00      	cmp	r3, #0
 800511a:	d031      	beq.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a07      	ldr	r2, [pc, #28]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d101      	bne.n	800512a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005126:	4b07      	ldr	r3, [pc, #28]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005128:	e001      	b.n	800512e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800512a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4902      	ldr	r1, [pc, #8]	@ (8005140 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005136:	428b      	cmp	r3, r1
 8005138:	d106      	bne.n	8005148 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800513a:	4b02      	ldr	r3, [pc, #8]	@ (8005144 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800513c:	e006      	b.n	800514c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800513e:	bf00      	nop
 8005140:	40003800 	.word	0x40003800
 8005144:	40003400 	.word	0x40003400
 8005148:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800514c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005150:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005160:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2201      	movs	r2, #1
 8005166:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516e:	f043 0204 	orr.w	r2, r3, #4
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7ff fdc0 	bl	8004cfc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800517c:	e000      	b.n	8005180 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800517e:	bf00      	nop
}
 8005180:	bf00      	nop
 8005182:	3720      	adds	r7, #32
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051a8:	1c99      	adds	r1, r3, #2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80051ae:	881a      	ldrh	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d113      	bne.n	80051f6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80051dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f7ff ffc9 	bl	8005188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	1c99      	adds	r1, r3, #2
 800520e:	687a      	ldr	r2, [r7, #4]
 8005210:	6251      	str	r1, [r2, #36]	@ 0x24
 8005212:	8819      	ldrh	r1, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <I2SEx_TxISR_I2SExt+0x90>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d101      	bne.n	8005222 <I2SEx_TxISR_I2SExt+0x22>
 800521e:	4b1d      	ldr	r3, [pc, #116]	@ (8005294 <I2SEx_TxISR_I2SExt+0x94>)
 8005220:	e001      	b.n	8005226 <I2SEx_TxISR_I2SExt+0x26>
 8005222:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005226:	460a      	mov	r2, r1
 8005228:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800522e:	b29b      	uxth	r3, r3
 8005230:	3b01      	subs	r3, #1
 8005232:	b29a      	uxth	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800523c:	b29b      	uxth	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d121      	bne.n	8005286 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a12      	ldr	r2, [pc, #72]	@ (8005290 <I2SEx_TxISR_I2SExt+0x90>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d101      	bne.n	8005250 <I2SEx_TxISR_I2SExt+0x50>
 800524c:	4b11      	ldr	r3, [pc, #68]	@ (8005294 <I2SEx_TxISR_I2SExt+0x94>)
 800524e:	e001      	b.n	8005254 <I2SEx_TxISR_I2SExt+0x54>
 8005250:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005254:	685a      	ldr	r2, [r3, #4]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	490d      	ldr	r1, [pc, #52]	@ (8005290 <I2SEx_TxISR_I2SExt+0x90>)
 800525c:	428b      	cmp	r3, r1
 800525e:	d101      	bne.n	8005264 <I2SEx_TxISR_I2SExt+0x64>
 8005260:	4b0c      	ldr	r3, [pc, #48]	@ (8005294 <I2SEx_TxISR_I2SExt+0x94>)
 8005262:	e001      	b.n	8005268 <I2SEx_TxISR_I2SExt+0x68>
 8005264:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005268:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800526c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005272:	b29b      	uxth	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7ff ff81 	bl	8005188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005286:	bf00      	nop
 8005288:	3708      	adds	r7, #8
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40003800 	.word	0x40003800
 8005294:	40003400 	.word	0x40003400

08005298 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68d8      	ldr	r0, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052aa:	1c99      	adds	r1, r3, #2
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80052b0:	b282      	uxth	r2, r0
 80052b2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	3b01      	subs	r3, #1
 80052bc:	b29a      	uxth	r2, r3
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d113      	bne.n	80052f4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80052da:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e0:	b29b      	uxth	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2201      	movs	r2, #1
 80052ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7ff ff4a 	bl	8005188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b082      	sub	sp, #8
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a20      	ldr	r2, [pc, #128]	@ (800538c <I2SEx_RxISR_I2SExt+0x90>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d101      	bne.n	8005312 <I2SEx_RxISR_I2SExt+0x16>
 800530e:	4b20      	ldr	r3, [pc, #128]	@ (8005390 <I2SEx_RxISR_I2SExt+0x94>)
 8005310:	e001      	b.n	8005316 <I2SEx_RxISR_I2SExt+0x1a>
 8005312:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005316:	68d8      	ldr	r0, [r3, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531c:	1c99      	adds	r1, r3, #2
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005322:	b282      	uxth	r2, r0
 8005324:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800532a:	b29b      	uxth	r3, r3
 800532c:	3b01      	subs	r3, #1
 800532e:	b29a      	uxth	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005338:	b29b      	uxth	r3, r3
 800533a:	2b00      	cmp	r3, #0
 800533c:	d121      	bne.n	8005382 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a12      	ldr	r2, [pc, #72]	@ (800538c <I2SEx_RxISR_I2SExt+0x90>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d101      	bne.n	800534c <I2SEx_RxISR_I2SExt+0x50>
 8005348:	4b11      	ldr	r3, [pc, #68]	@ (8005390 <I2SEx_RxISR_I2SExt+0x94>)
 800534a:	e001      	b.n	8005350 <I2SEx_RxISR_I2SExt+0x54>
 800534c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	490d      	ldr	r1, [pc, #52]	@ (800538c <I2SEx_RxISR_I2SExt+0x90>)
 8005358:	428b      	cmp	r3, r1
 800535a:	d101      	bne.n	8005360 <I2SEx_RxISR_I2SExt+0x64>
 800535c:	4b0c      	ldr	r3, [pc, #48]	@ (8005390 <I2SEx_RxISR_I2SExt+0x94>)
 800535e:	e001      	b.n	8005364 <I2SEx_RxISR_I2SExt+0x68>
 8005360:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005364:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005368:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d106      	bne.n	8005382 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f7ff ff03 	bl	8005188 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005382:	bf00      	nop
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	40003800 	.word	0x40003800
 8005390:	40003400 	.word	0x40003400

08005394 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b086      	sub	sp, #24
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d101      	bne.n	80053a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e267      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d075      	beq.n	800549e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053b2:	4b88      	ldr	r3, [pc, #544]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053b4:	689b      	ldr	r3, [r3, #8]
 80053b6:	f003 030c 	and.w	r3, r3, #12
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d00c      	beq.n	80053d8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053be:	4b85      	ldr	r3, [pc, #532]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d112      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053ca:	4b82      	ldr	r3, [pc, #520]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053d2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053d6:	d10b      	bne.n	80053f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d8:	4b7e      	ldr	r3, [pc, #504]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05b      	beq.n	800549c <HAL_RCC_OscConfig+0x108>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d157      	bne.n	800549c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e242      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053f8:	d106      	bne.n	8005408 <HAL_RCC_OscConfig+0x74>
 80053fa:	4b76      	ldr	r3, [pc, #472]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a75      	ldr	r2, [pc, #468]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005400:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005404:	6013      	str	r3, [r2, #0]
 8005406:	e01d      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005410:	d10c      	bne.n	800542c <HAL_RCC_OscConfig+0x98>
 8005412:	4b70      	ldr	r3, [pc, #448]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a6f      	ldr	r2, [pc, #444]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005418:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	4b6d      	ldr	r3, [pc, #436]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a6c      	ldr	r2, [pc, #432]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005428:	6013      	str	r3, [r2, #0]
 800542a:	e00b      	b.n	8005444 <HAL_RCC_OscConfig+0xb0>
 800542c:	4b69      	ldr	r3, [pc, #420]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a68      	ldr	r2, [pc, #416]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005432:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005436:	6013      	str	r3, [r2, #0]
 8005438:	4b66      	ldr	r3, [pc, #408]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a65      	ldr	r2, [pc, #404]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 800543e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005442:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d013      	beq.n	8005474 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800544c:	f7fc f992 	bl	8001774 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fc f98e 	bl	8001774 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	@ 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e207      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b5b      	ldr	r3, [pc, #364]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d0f0      	beq.n	8005454 <HAL_RCC_OscConfig+0xc0>
 8005472:	e014      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005474:	f7fc f97e 	bl	8001774 <HAL_GetTick>
 8005478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	e008      	b.n	800548e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800547c:	f7fc f97a 	bl	8001774 <HAL_GetTick>
 8005480:	4602      	mov	r2, r0
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	1ad3      	subs	r3, r2, r3
 8005486:	2b64      	cmp	r3, #100	@ 0x64
 8005488:	d901      	bls.n	800548e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e1f3      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	4b51      	ldr	r3, [pc, #324]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1f0      	bne.n	800547c <HAL_RCC_OscConfig+0xe8>
 800549a:	e000      	b.n	800549e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800549c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d063      	beq.n	8005572 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054aa:	4b4a      	ldr	r3, [pc, #296]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054b6:	4b47      	ldr	r3, [pc, #284]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d11c      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054c2:	4b44      	ldr	r3, [pc, #272]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d116      	bne.n	80054fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ce:	4b41      	ldr	r3, [pc, #260]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d001      	beq.n	80054e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	e1c7      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054e6:	4b3b      	ldr	r3, [pc, #236]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	4937      	ldr	r1, [pc, #220]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054fa:	e03a      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d020      	beq.n	8005546 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005504:	4b34      	ldr	r3, [pc, #208]	@ (80055d8 <HAL_RCC_OscConfig+0x244>)
 8005506:	2201      	movs	r2, #1
 8005508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800550a:	f7fc f933 	bl	8001774 <HAL_GetTick>
 800550e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	e008      	b.n	8005524 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005512:	f7fc f92f 	bl	8001774 <HAL_GetTick>
 8005516:	4602      	mov	r2, r0
 8005518:	693b      	ldr	r3, [r7, #16]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	2b02      	cmp	r3, #2
 800551e:	d901      	bls.n	8005524 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e1a8      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	4b2b      	ldr	r3, [pc, #172]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0302 	and.w	r3, r3, #2
 800552c:	2b00      	cmp	r3, #0
 800552e:	d0f0      	beq.n	8005512 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005530:	4b28      	ldr	r3, [pc, #160]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4925      	ldr	r1, [pc, #148]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005540:	4313      	orrs	r3, r2
 8005542:	600b      	str	r3, [r1, #0]
 8005544:	e015      	b.n	8005572 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005546:	4b24      	ldr	r3, [pc, #144]	@ (80055d8 <HAL_RCC_OscConfig+0x244>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc f912 	bl	8001774 <HAL_GetTick>
 8005550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005554:	f7fc f90e 	bl	8001774 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e187      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	4b1b      	ldr	r3, [pc, #108]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1f0      	bne.n	8005554 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0308 	and.w	r3, r3, #8
 800557a:	2b00      	cmp	r3, #0
 800557c:	d036      	beq.n	80055ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005586:	4b15      	ldr	r3, [pc, #84]	@ (80055dc <HAL_RCC_OscConfig+0x248>)
 8005588:	2201      	movs	r2, #1
 800558a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fc f8f2 	bl	8001774 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005594:	f7fc f8ee 	bl	8001774 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e167      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <HAL_RCC_OscConfig+0x240>)
 80055a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d0f0      	beq.n	8005594 <HAL_RCC_OscConfig+0x200>
 80055b2:	e01b      	b.n	80055ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055b4:	4b09      	ldr	r3, [pc, #36]	@ (80055dc <HAL_RCC_OscConfig+0x248>)
 80055b6:	2200      	movs	r2, #0
 80055b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ba:	f7fc f8db 	bl	8001774 <HAL_GetTick>
 80055be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c0:	e00e      	b.n	80055e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055c2:	f7fc f8d7 	bl	8001774 <HAL_GetTick>
 80055c6:	4602      	mov	r2, r0
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	1ad3      	subs	r3, r2, r3
 80055cc:	2b02      	cmp	r3, #2
 80055ce:	d907      	bls.n	80055e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e150      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
 80055d4:	40023800 	.word	0x40023800
 80055d8:	42470000 	.word	0x42470000
 80055dc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055e0:	4b88      	ldr	r3, [pc, #544]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80055e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d1ea      	bne.n	80055c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8097 	beq.w	8005728 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055fa:	2300      	movs	r3, #0
 80055fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055fe:	4b81      	ldr	r3, [pc, #516]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d10f      	bne.n	800562a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800560a:	2300      	movs	r3, #0
 800560c:	60bb      	str	r3, [r7, #8]
 800560e:	4b7d      	ldr	r3, [pc, #500]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005612:	4a7c      	ldr	r2, [pc, #496]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005618:	6413      	str	r3, [r2, #64]	@ 0x40
 800561a:	4b7a      	ldr	r3, [pc, #488]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 800561c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800561e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005622:	60bb      	str	r3, [r7, #8]
 8005624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005626:	2301      	movs	r3, #1
 8005628:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800562a:	4b77      	ldr	r3, [pc, #476]	@ (8005808 <HAL_RCC_OscConfig+0x474>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d118      	bne.n	8005668 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005636:	4b74      	ldr	r3, [pc, #464]	@ (8005808 <HAL_RCC_OscConfig+0x474>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a73      	ldr	r2, [pc, #460]	@ (8005808 <HAL_RCC_OscConfig+0x474>)
 800563c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005642:	f7fc f897 	bl	8001774 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	e008      	b.n	800565c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800564a:	f7fc f893 	bl	8001774 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	2b02      	cmp	r3, #2
 8005656:	d901      	bls.n	800565c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005658:	2303      	movs	r3, #3
 800565a:	e10c      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	4b6a      	ldr	r3, [pc, #424]	@ (8005808 <HAL_RCC_OscConfig+0x474>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005664:	2b00      	cmp	r3, #0
 8005666:	d0f0      	beq.n	800564a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d106      	bne.n	800567e <HAL_RCC_OscConfig+0x2ea>
 8005670:	4b64      	ldr	r3, [pc, #400]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005674:	4a63      	ldr	r2, [pc, #396]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	6713      	str	r3, [r2, #112]	@ 0x70
 800567c:	e01c      	b.n	80056b8 <HAL_RCC_OscConfig+0x324>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	2b05      	cmp	r3, #5
 8005684:	d10c      	bne.n	80056a0 <HAL_RCC_OscConfig+0x30c>
 8005686:	4b5f      	ldr	r3, [pc, #380]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568a:	4a5e      	ldr	r2, [pc, #376]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 800568c:	f043 0304 	orr.w	r3, r3, #4
 8005690:	6713      	str	r3, [r2, #112]	@ 0x70
 8005692:	4b5c      	ldr	r3, [pc, #368]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005696:	4a5b      	ldr	r2, [pc, #364]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005698:	f043 0301 	orr.w	r3, r3, #1
 800569c:	6713      	str	r3, [r2, #112]	@ 0x70
 800569e:	e00b      	b.n	80056b8 <HAL_RCC_OscConfig+0x324>
 80056a0:	4b58      	ldr	r3, [pc, #352]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	4a57      	ldr	r2, [pc, #348]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80056ac:	4b55      	ldr	r3, [pc, #340]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80056ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b0:	4a54      	ldr	r2, [pc, #336]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80056b2:	f023 0304 	bic.w	r3, r3, #4
 80056b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d015      	beq.n	80056ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c0:	f7fc f858 	bl	8001774 <HAL_GetTick>
 80056c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c6:	e00a      	b.n	80056de <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056c8:	f7fc f854 	bl	8001774 <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e0cb      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056de:	4b49      	ldr	r3, [pc, #292]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80056e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d0ee      	beq.n	80056c8 <HAL_RCC_OscConfig+0x334>
 80056ea:	e014      	b.n	8005716 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056ec:	f7fc f842 	bl	8001774 <HAL_GetTick>
 80056f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f2:	e00a      	b.n	800570a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f4:	f7fc f83e 	bl	8001774 <HAL_GetTick>
 80056f8:	4602      	mov	r2, r0
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005702:	4293      	cmp	r3, r2
 8005704:	d901      	bls.n	800570a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005706:	2303      	movs	r3, #3
 8005708:	e0b5      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570a:	4b3e      	ldr	r3, [pc, #248]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 800570c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800570e:	f003 0302 	and.w	r3, r3, #2
 8005712:	2b00      	cmp	r3, #0
 8005714:	d1ee      	bne.n	80056f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005716:	7dfb      	ldrb	r3, [r7, #23]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571c:	4b39      	ldr	r3, [pc, #228]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	4a38      	ldr	r2, [pc, #224]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005726:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	699b      	ldr	r3, [r3, #24]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80a1 	beq.w	8005874 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005732:	4b34      	ldr	r3, [pc, #208]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	f003 030c 	and.w	r3, r3, #12
 800573a:	2b08      	cmp	r3, #8
 800573c:	d05c      	beq.n	80057f8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d141      	bne.n	80057ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005746:	4b31      	ldr	r3, [pc, #196]	@ (800580c <HAL_RCC_OscConfig+0x478>)
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800574c:	f7fc f812 	bl	8001774 <HAL_GetTick>
 8005750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	e008      	b.n	8005766 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005754:	f7fc f80e 	bl	8001774 <HAL_GetTick>
 8005758:	4602      	mov	r2, r0
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	2b02      	cmp	r3, #2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e087      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	4b27      	ldr	r3, [pc, #156]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1f0      	bne.n	8005754 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	019b      	lsls	r3, r3, #6
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	3b01      	subs	r3, #1
 800578c:	041b      	lsls	r3, r3, #16
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	061b      	lsls	r3, r3, #24
 8005796:	491b      	ldr	r1, [pc, #108]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 8005798:	4313      	orrs	r3, r2
 800579a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800579c:	4b1b      	ldr	r3, [pc, #108]	@ (800580c <HAL_RCC_OscConfig+0x478>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fb ffe7 	bl	8001774 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fb ffe3 	bl	8001774 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e05c      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057bc:	4b11      	ldr	r3, [pc, #68]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d0f0      	beq.n	80057aa <HAL_RCC_OscConfig+0x416>
 80057c8:	e054      	b.n	8005874 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ca:	4b10      	ldr	r3, [pc, #64]	@ (800580c <HAL_RCC_OscConfig+0x478>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057d0:	f7fb ffd0 	bl	8001774 <HAL_GetTick>
 80057d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	e008      	b.n	80057ea <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d8:	f7fb ffcc 	bl	8001774 <HAL_GetTick>
 80057dc:	4602      	mov	r2, r0
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	1ad3      	subs	r3, r2, r3
 80057e2:	2b02      	cmp	r3, #2
 80057e4:	d901      	bls.n	80057ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057e6:	2303      	movs	r3, #3
 80057e8:	e045      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	4b06      	ldr	r3, [pc, #24]	@ (8005804 <HAL_RCC_OscConfig+0x470>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1f0      	bne.n	80057d8 <HAL_RCC_OscConfig+0x444>
 80057f6:	e03d      	b.n	8005874 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d107      	bne.n	8005810 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e038      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
 8005804:	40023800 	.word	0x40023800
 8005808:	40007000 	.word	0x40007000
 800580c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005810:	4b1b      	ldr	r3, [pc, #108]	@ (8005880 <HAL_RCC_OscConfig+0x4ec>)
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d028      	beq.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005828:	429a      	cmp	r2, r3
 800582a:	d121      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005836:	429a      	cmp	r2, r3
 8005838:	d11a      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005840:	4013      	ands	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005846:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005848:	4293      	cmp	r3, r2
 800584a:	d111      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005856:	085b      	lsrs	r3, r3, #1
 8005858:	3b01      	subs	r3, #1
 800585a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800585c:	429a      	cmp	r2, r3
 800585e:	d107      	bne.n	8005870 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800586c:	429a      	cmp	r2, r3
 800586e:	d001      	beq.n	8005874 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e000      	b.n	8005876 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3718      	adds	r7, #24
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40023800 	.word	0x40023800

08005884 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d101      	bne.n	8005898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005894:	2301      	movs	r3, #1
 8005896:	e0cc      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005898:	4b68      	ldr	r3, [pc, #416]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0307 	and.w	r3, r3, #7
 80058a0:	683a      	ldr	r2, [r7, #0]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d90c      	bls.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058a6:	4b65      	ldr	r3, [pc, #404]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058a8:	683a      	ldr	r2, [r7, #0]
 80058aa:	b2d2      	uxtb	r2, r2
 80058ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ae:	4b63      	ldr	r3, [pc, #396]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0307 	and.w	r3, r3, #7
 80058b6:	683a      	ldr	r2, [r7, #0]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d001      	beq.n	80058c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e0b8      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d020      	beq.n	800590e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 0304 	and.w	r3, r3, #4
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d005      	beq.n	80058e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d8:	4b59      	ldr	r3, [pc, #356]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	4a58      	ldr	r2, [pc, #352]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0308 	and.w	r3, r3, #8
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d005      	beq.n	80058fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058f0:	4b53      	ldr	r3, [pc, #332]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	4a52      	ldr	r2, [pc, #328]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80058fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058fc:	4b50      	ldr	r3, [pc, #320]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	494d      	ldr	r1, [pc, #308]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	4313      	orrs	r3, r2
 800590c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0301 	and.w	r3, r3, #1
 8005916:	2b00      	cmp	r3, #0
 8005918:	d044      	beq.n	80059a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d107      	bne.n	8005932 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005922:	4b47      	ldr	r3, [pc, #284]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800592a:	2b00      	cmp	r3, #0
 800592c:	d119      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e07f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	2b02      	cmp	r3, #2
 8005938:	d003      	beq.n	8005942 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800593e:	2b03      	cmp	r3, #3
 8005940:	d107      	bne.n	8005952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005942:	4b3f      	ldr	r3, [pc, #252]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d109      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005952:	4b3b      	ldr	r3, [pc, #236]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e067      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005962:	4b37      	ldr	r3, [pc, #220]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f023 0203 	bic.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	685b      	ldr	r3, [r3, #4]
 800596e:	4934      	ldr	r1, [pc, #208]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005970:	4313      	orrs	r3, r2
 8005972:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005974:	f7fb fefe 	bl	8001774 <HAL_GetTick>
 8005978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597a:	e00a      	b.n	8005992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800597c:	f7fb fefa 	bl	8001774 <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800598a:	4293      	cmp	r3, r2
 800598c:	d901      	bls.n	8005992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800598e:	2303      	movs	r3, #3
 8005990:	e04f      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005992:	4b2b      	ldr	r3, [pc, #172]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f003 020c 	and.w	r2, r3, #12
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d1eb      	bne.n	800597c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059a4:	4b25      	ldr	r3, [pc, #148]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f003 0307 	and.w	r3, r3, #7
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d20c      	bcs.n	80059cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059b2:	4b22      	ldr	r3, [pc, #136]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059b4:	683a      	ldr	r2, [r7, #0]
 80059b6:	b2d2      	uxtb	r2, r2
 80059b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ba:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <HAL_RCC_ClockConfig+0x1b8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d001      	beq.n	80059cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e032      	b.n	8005a32 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d8:	4b19      	ldr	r3, [pc, #100]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	4916      	ldr	r1, [pc, #88]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f003 0308 	and.w	r3, r3, #8
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d009      	beq.n	8005a0a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059f6:	4b12      	ldr	r3, [pc, #72]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	00db      	lsls	r3, r3, #3
 8005a04:	490e      	ldr	r1, [pc, #56]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a0a:	f000 f821 	bl	8005a50 <HAL_RCC_GetSysClockFreq>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	4b0b      	ldr	r3, [pc, #44]	@ (8005a40 <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	f003 030f 	and.w	r3, r3, #15
 8005a1a:	490a      	ldr	r1, [pc, #40]	@ (8005a44 <HAL_RCC_ClockConfig+0x1c0>)
 8005a1c:	5ccb      	ldrb	r3, [r1, r3]
 8005a1e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a22:	4a09      	ldr	r2, [pc, #36]	@ (8005a48 <HAL_RCC_ClockConfig+0x1c4>)
 8005a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a26:	4b09      	ldr	r3, [pc, #36]	@ (8005a4c <HAL_RCC_ClockConfig+0x1c8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fb fe5e 	bl	80016ec <HAL_InitTick>

  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023c00 	.word	0x40023c00
 8005a40:	40023800 	.word	0x40023800
 8005a44:	08009cd4 	.word	0x08009cd4
 8005a48:	20000000 	.word	0x20000000
 8005a4c:	20000004 	.word	0x20000004

08005a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a54:	b094      	sub	sp, #80	@ 0x50
 8005a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a60:	2300      	movs	r3, #0
 8005a62:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a64:	2300      	movs	r3, #0
 8005a66:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a68:	4b79      	ldr	r3, [pc, #484]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	f003 030c 	and.w	r3, r3, #12
 8005a70:	2b08      	cmp	r3, #8
 8005a72:	d00d      	beq.n	8005a90 <HAL_RCC_GetSysClockFreq+0x40>
 8005a74:	2b08      	cmp	r3, #8
 8005a76:	f200 80e1 	bhi.w	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <HAL_RCC_GetSysClockFreq+0x34>
 8005a7e:	2b04      	cmp	r3, #4
 8005a80:	d003      	beq.n	8005a8a <HAL_RCC_GetSysClockFreq+0x3a>
 8005a82:	e0db      	b.n	8005c3c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a84:	4b73      	ldr	r3, [pc, #460]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a86:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a88:	e0db      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a8a:	4b73      	ldr	r3, [pc, #460]	@ (8005c58 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a8c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a8e:	e0d8      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a90:	4b6f      	ldr	r3, [pc, #444]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a98:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a9a:	4b6d      	ldr	r3, [pc, #436]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d063      	beq.n	8005b6e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	099b      	lsrs	r3, r3, #6
 8005aac:	2200      	movs	r2, #0
 8005aae:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ab0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab8:	633b      	str	r3, [r7, #48]	@ 0x30
 8005aba:	2300      	movs	r3, #0
 8005abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8005abe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ac2:	4622      	mov	r2, r4
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	f04f 0000 	mov.w	r0, #0
 8005aca:	f04f 0100 	mov.w	r1, #0
 8005ace:	0159      	lsls	r1, r3, #5
 8005ad0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ad4:	0150      	lsls	r0, r2, #5
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	460b      	mov	r3, r1
 8005ada:	4621      	mov	r1, r4
 8005adc:	1a51      	subs	r1, r2, r1
 8005ade:	6139      	str	r1, [r7, #16]
 8005ae0:	4629      	mov	r1, r5
 8005ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005af4:	4659      	mov	r1, fp
 8005af6:	018b      	lsls	r3, r1, #6
 8005af8:	4651      	mov	r1, sl
 8005afa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005afe:	4651      	mov	r1, sl
 8005b00:	018a      	lsls	r2, r1, #6
 8005b02:	4651      	mov	r1, sl
 8005b04:	ebb2 0801 	subs.w	r8, r2, r1
 8005b08:	4659      	mov	r1, fp
 8005b0a:	eb63 0901 	sbc.w	r9, r3, r1
 8005b0e:	f04f 0200 	mov.w	r2, #0
 8005b12:	f04f 0300 	mov.w	r3, #0
 8005b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b22:	4690      	mov	r8, r2
 8005b24:	4699      	mov	r9, r3
 8005b26:	4623      	mov	r3, r4
 8005b28:	eb18 0303 	adds.w	r3, r8, r3
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	462b      	mov	r3, r5
 8005b30:	eb49 0303 	adc.w	r3, r9, r3
 8005b34:	60fb      	str	r3, [r7, #12]
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b42:	4629      	mov	r1, r5
 8005b44:	024b      	lsls	r3, r1, #9
 8005b46:	4621      	mov	r1, r4
 8005b48:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b4c:	4621      	mov	r1, r4
 8005b4e:	024a      	lsls	r2, r1, #9
 8005b50:	4610      	mov	r0, r2
 8005b52:	4619      	mov	r1, r3
 8005b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b56:	2200      	movs	r2, #0
 8005b58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b5c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b60:	f7fa ff50 	bl	8000a04 <__aeabi_uldivmod>
 8005b64:	4602      	mov	r2, r0
 8005b66:	460b      	mov	r3, r1
 8005b68:	4613      	mov	r3, r2
 8005b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b6c:	e058      	b.n	8005c20 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b6e:	4b38      	ldr	r3, [pc, #224]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	099b      	lsrs	r3, r3, #6
 8005b74:	2200      	movs	r2, #0
 8005b76:	4618      	mov	r0, r3
 8005b78:	4611      	mov	r1, r2
 8005b7a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b7e:	623b      	str	r3, [r7, #32]
 8005b80:	2300      	movs	r3, #0
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b84:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b88:	4642      	mov	r2, r8
 8005b8a:	464b      	mov	r3, r9
 8005b8c:	f04f 0000 	mov.w	r0, #0
 8005b90:	f04f 0100 	mov.w	r1, #0
 8005b94:	0159      	lsls	r1, r3, #5
 8005b96:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b9a:	0150      	lsls	r0, r2, #5
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	ebb2 0a01 	subs.w	sl, r2, r1
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	f04f 0300 	mov.w	r3, #0
 8005bb4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bb8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bbc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bc0:	ebb2 040a 	subs.w	r4, r2, sl
 8005bc4:	eb63 050b 	sbc.w	r5, r3, fp
 8005bc8:	f04f 0200 	mov.w	r2, #0
 8005bcc:	f04f 0300 	mov.w	r3, #0
 8005bd0:	00eb      	lsls	r3, r5, #3
 8005bd2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bd6:	00e2      	lsls	r2, r4, #3
 8005bd8:	4614      	mov	r4, r2
 8005bda:	461d      	mov	r5, r3
 8005bdc:	4643      	mov	r3, r8
 8005bde:	18e3      	adds	r3, r4, r3
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	464b      	mov	r3, r9
 8005be4:	eb45 0303 	adc.w	r3, r5, r3
 8005be8:	607b      	str	r3, [r7, #4]
 8005bea:	f04f 0200 	mov.w	r2, #0
 8005bee:	f04f 0300 	mov.w	r3, #0
 8005bf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bf6:	4629      	mov	r1, r5
 8005bf8:	028b      	lsls	r3, r1, #10
 8005bfa:	4621      	mov	r1, r4
 8005bfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c00:	4621      	mov	r1, r4
 8005c02:	028a      	lsls	r2, r1, #10
 8005c04:	4610      	mov	r0, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	61bb      	str	r3, [r7, #24]
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c14:	f7fa fef6 	bl	8000a04 <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4613      	mov	r3, r2
 8005c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	@ (8005c50 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c38:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c3a:	e002      	b.n	8005c42 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c3c:	4b05      	ldr	r3, [pc, #20]	@ (8005c54 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3750      	adds	r7, #80	@ 0x50
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800
 8005c54:	00f42400 	.word	0x00f42400
 8005c58:	007a1200 	.word	0x007a1200

08005c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c60:	4b03      	ldr	r3, [pc, #12]	@ (8005c70 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c62:	681b      	ldr	r3, [r3, #0]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20000000 	.word	0x20000000

08005c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c78:	f7ff fff0 	bl	8005c5c <HAL_RCC_GetHCLKFreq>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	4b05      	ldr	r3, [pc, #20]	@ (8005c94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	0a9b      	lsrs	r3, r3, #10
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	4903      	ldr	r1, [pc, #12]	@ (8005c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c8a:	5ccb      	ldrb	r3, [r1, r3]
 8005c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	40023800 	.word	0x40023800
 8005c98:	08009ce4 	.word	0x08009ce4

08005c9c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d035      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005cc4:	4b62      	ldr	r3, [pc, #392]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005cca:	f7fb fd53 	bl	8001774 <HAL_GetTick>
 8005cce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005cd2:	f7fb fd4f 	bl	8001774 <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e0b0      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005ce4:	4b5b      	ldr	r3, [pc, #364]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1f0      	bne.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	019a      	lsls	r2, r3, #6
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	071b      	lsls	r3, r3, #28
 8005cfc:	4955      	ldr	r1, [pc, #340]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d04:	4b52      	ldr	r3, [pc, #328]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d0a:	f7fb fd33 	bl	8001774 <HAL_GetTick>
 8005d0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d10:	e008      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005d12:	f7fb fd2f 	bl	8001774 <HAL_GetTick>
 8005d16:	4602      	mov	r2, r0
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	2b02      	cmp	r3, #2
 8005d1e:	d901      	bls.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d20:	2303      	movs	r3, #3
 8005d22:	e090      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d24:	4b4b      	ldr	r3, [pc, #300]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d0f0      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8083 	beq.w	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d3e:	2300      	movs	r3, #0
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4b44      	ldr	r3, [pc, #272]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d46:	4a43      	ldr	r2, [pc, #268]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8005d4e:	4b41      	ldr	r3, [pc, #260]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a3e      	ldr	r2, [pc, #248]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d66:	f7fb fd05 	bl	8001774 <HAL_GetTick>
 8005d6a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d6c:	e008      	b.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d6e:	f7fb fd01 	bl	8001774 <HAL_GetTick>
 8005d72:	4602      	mov	r2, r0
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d901      	bls.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e062      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005d80:	4b35      	ldr	r3, [pc, #212]	@ (8005e58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d0f0      	beq.n	8005d6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005d8c:	4b31      	ldr	r3, [pc, #196]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d90:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d94:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d02f      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d028      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005daa:	4b2a      	ldr	r3, [pc, #168]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005db2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005db4:	4b29      	ldr	r3, [pc, #164]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005dba:	4b28      	ldr	r3, [pc, #160]	@ (8005e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005dc0:	4a24      	ldr	r2, [pc, #144]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005dc6:	4b23      	ldr	r3, [pc, #140]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d114      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005dd2:	f7fb fccf 	bl	8001774 <HAL_GetTick>
 8005dd6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005dd8:	e00a      	b.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dda:	f7fb fccb 	bl	8001774 <HAL_GetTick>
 8005dde:	4602      	mov	r2, r0
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e02a      	b.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005df0:	4b18      	ldr	r3, [pc, #96]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005df2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d0ee      	beq.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e04:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e08:	d10d      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005e0a:	4b12      	ldr	r3, [pc, #72]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005e1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e1e:	490d      	ldr	r1, [pc, #52]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	608b      	str	r3, [r1, #8]
 8005e24:	e005      	b.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005e26:	4b0b      	ldr	r3, [pc, #44]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	4a0a      	ldr	r2, [pc, #40]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e2c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005e30:	6093      	str	r3, [r2, #8]
 8005e32:	4b08      	ldr	r3, [pc, #32]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e34:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e3e:	4905      	ldr	r1, [pc, #20]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005e44:	2300      	movs	r3, #0
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	42470068 	.word	0x42470068
 8005e54:	40023800 	.word	0x40023800
 8005e58:	40007000 	.word	0x40007000
 8005e5c:	42470e40 	.word	0x42470e40

08005e60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b087      	sub	sp, #28
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005e70:	2300      	movs	r3, #0
 8005e72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005e74:	2300      	movs	r3, #0
 8005e76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d13f      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005e7e:	4b24      	ldr	r3, [pc, #144]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005e86:	60fb      	str	r3, [r7, #12]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d006      	beq.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005e94:	d12f      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005e96:	4b1f      	ldr	r3, [pc, #124]	@ (8005f14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005e98:	617b      	str	r3, [r7, #20]
          break;
 8005e9a:	e02f      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ea4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ea8:	d108      	bne.n	8005ebc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005eaa:	4b19      	ldr	r3, [pc, #100]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005eb2:	4a19      	ldr	r2, [pc, #100]	@ (8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	e007      	b.n	8005ecc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005ebc:	4b14      	ldr	r3, [pc, #80]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ec4:	4a15      	ldr	r2, [pc, #84]	@ (8005f1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eca:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005ecc:	4b10      	ldr	r3, [pc, #64]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ece:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ed2:	099b      	lsrs	r3, r3, #6
 8005ed4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ed8:	693b      	ldr	r3, [r7, #16]
 8005eda:	fb02 f303 	mul.w	r3, r2, r3
 8005ede:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8005f10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005ee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ee6:	0f1b      	lsrs	r3, r3, #28
 8005ee8:	f003 0307 	and.w	r3, r3, #7
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef2:	617b      	str	r3, [r7, #20]
          break;
 8005ef4:	e002      	b.n	8005efc <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	617b      	str	r3, [r7, #20]
          break;
 8005efa:	bf00      	nop
        }
      }
      break;
 8005efc:	e000      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8005efe:	bf00      	nop
    }
  }
  return frequency;
 8005f00:	697b      	ldr	r3, [r7, #20]
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	371c      	adds	r7, #28
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40023800 	.word	0x40023800
 8005f14:	00bb8000 	.word	0x00bb8000
 8005f18:	007a1200 	.word	0x007a1200
 8005f1c:	00f42400 	.word	0x00f42400

08005f20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e07b      	b.n	800602a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d108      	bne.n	8005f4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f42:	d009      	beq.n	8005f58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	61da      	str	r2, [r3, #28]
 8005f4a:	e005      	b.n	8005f58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005f64:	b2db      	uxtb	r3, r3
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb faa4 	bl	80014c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2202      	movs	r2, #2
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f8e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	685b      	ldr	r3, [r3, #4]
 8005f94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005fa0:	431a      	orrs	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	68db      	ldr	r3, [r3, #12]
 8005fa6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	431a      	orrs	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	699b      	ldr	r3, [r3, #24]
 8005fc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fc8:	431a      	orrs	r2, r3
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a1b      	ldr	r3, [r3, #32]
 8005fd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fdc:	ea42 0103 	orr.w	r1, r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	430a      	orrs	r2, r1
 8005fee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	0c1b      	lsrs	r3, r3, #16
 8005ff6:	f003 0104 	and.w	r1, r3, #4
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffe:	f003 0210 	and.w	r2, r3, #16
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	69da      	ldr	r2, [r3, #28]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006018:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006032:	b084      	sub	sp, #16
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	f107 001c 	add.w	r0, r7, #28
 8006040:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006044:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006048:	2b01      	cmp	r3, #1
 800604a:	d123      	bne.n	8006094 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006050:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006060:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006074:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006078:	2b01      	cmp	r3, #1
 800607a:	d105      	bne.n	8006088 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9dc 	bl	8006446 <USB_CoreReset>
 800608e:	4603      	mov	r3, r0
 8006090:	73fb      	strb	r3, [r7, #15]
 8006092:	e01b      	b.n	80060cc <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	68db      	ldr	r3, [r3, #12]
 8006098:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f9d0 	bl	8006446 <USB_CoreReset>
 80060a6:	4603      	mov	r3, r0
 80060a8:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060aa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d106      	bne.n	80060c0 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80060be:	e005      	b.n	80060cc <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060c4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060cc:	7fbb      	ldrb	r3, [r7, #30]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d10b      	bne.n	80060ea <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f043 0206 	orr.w	r2, r3, #6
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	f043 0220 	orr.w	r2, r3, #32
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3710      	adds	r7, #16
 80060f0:	46bd      	mov	sp, r7
 80060f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f6:	b004      	add	sp, #16
 80060f8:	4770      	bx	lr

080060fa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060fa:	b480      	push	{r7}
 80060fc:	b083      	sub	sp, #12
 80060fe:	af00      	add	r7, sp, #0
 8006100:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	689b      	ldr	r3, [r3, #8]
 8006106:	f043 0201 	orr.w	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f023 0201 	bic.w	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800614a:	2300      	movs	r3, #0
 800614c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800615a:	78fb      	ldrb	r3, [r7, #3]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d115      	bne.n	800618c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800616c:	200a      	movs	r0, #10
 800616e:	f7fb fb0d 	bl	800178c <HAL_Delay>
      ms += 10U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	330a      	adds	r3, #10
 8006176:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f956 	bl	800642a <USB_GetMode>
 800617e:	4603      	mov	r3, r0
 8006180:	2b01      	cmp	r3, #1
 8006182:	d01e      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2bc7      	cmp	r3, #199	@ 0xc7
 8006188:	d9f0      	bls.n	800616c <USB_SetCurrentMode+0x2e>
 800618a:	e01a      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800619e:	200a      	movs	r0, #10
 80061a0:	f7fb faf4 	bl	800178c <HAL_Delay>
      ms += 10U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	330a      	adds	r3, #10
 80061a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f93d 	bl	800642a <USB_GetMode>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <USB_SetCurrentMode+0x84>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2bc7      	cmp	r3, #199	@ 0xc7
 80061ba:	d9f0      	bls.n	800619e <USB_SetCurrentMode+0x60>
 80061bc:	e001      	b.n	80061c2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e005      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2bc8      	cmp	r3, #200	@ 0xc8
 80061c6:	d101      	bne.n	80061cc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d6:	b480      	push	{r7}
 80061d8:	b085      	sub	sp, #20
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
 80061de:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061f0:	d901      	bls.n	80061f6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e01b      	b.n	800622e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	daf2      	bge.n	80061e4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	019b      	lsls	r3, r3, #6
 8006206:	f043 0220 	orr.w	r2, r3, #32
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	3301      	adds	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800621a:	d901      	bls.n	8006220 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e006      	b.n	800622e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	691b      	ldr	r3, [r3, #16]
 8006224:	f003 0320 	and.w	r3, r3, #32
 8006228:	2b20      	cmp	r3, #32
 800622a:	d0f0      	beq.n	800620e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	4618      	mov	r0, r3
 8006230:	3714      	adds	r7, #20
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	3301      	adds	r3, #1
 800624a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006252:	d901      	bls.n	8006258 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e018      	b.n	800628a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691b      	ldr	r3, [r3, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	daf2      	bge.n	8006246 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2210      	movs	r2, #16
 8006268:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3301      	adds	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006276:	d901      	bls.n	800627c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e006      	b.n	800628a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	691b      	ldr	r3, [r3, #16]
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b10      	cmp	r3, #16
 8006286:	d0f0      	beq.n	800626a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006288:	2300      	movs	r3, #0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3714      	adds	r7, #20
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr

08006296 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006296:	b480      	push	{r7}
 8006298:	b089      	sub	sp, #36	@ 0x24
 800629a:	af00      	add	r7, sp, #0
 800629c:	60f8      	str	r0, [r7, #12]
 800629e:	60b9      	str	r1, [r7, #8]
 80062a0:	4611      	mov	r1, r2
 80062a2:	461a      	mov	r2, r3
 80062a4:	460b      	mov	r3, r1
 80062a6:	71fb      	strb	r3, [r7, #7]
 80062a8:	4613      	mov	r3, r2
 80062aa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80062b4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d123      	bne.n	8006304 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80062bc:	88bb      	ldrh	r3, [r7, #4]
 80062be:	3303      	adds	r3, #3
 80062c0:	089b      	lsrs	r3, r3, #2
 80062c2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80062c4:	2300      	movs	r3, #0
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e018      	b.n	80062fc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	031a      	lsls	r2, r3, #12
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062d6:	461a      	mov	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6013      	str	r3, [r2, #0]
      pSrc++;
 80062de:	69fb      	ldr	r3, [r7, #28]
 80062e0:	3301      	adds	r3, #1
 80062e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	3301      	adds	r3, #1
 80062e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	3301      	adds	r3, #1
 80062ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	3301      	adds	r3, #1
 80062f4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	3301      	adds	r3, #1
 80062fa:	61bb      	str	r3, [r7, #24]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	429a      	cmp	r2, r3
 8006302:	d3e2      	bcc.n	80062ca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3724      	adds	r7, #36	@ 0x24
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006312:	b480      	push	{r7}
 8006314:	b08b      	sub	sp, #44	@ 0x2c
 8006316:	af00      	add	r7, sp, #0
 8006318:	60f8      	str	r0, [r7, #12]
 800631a:	60b9      	str	r1, [r7, #8]
 800631c:	4613      	mov	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006328:	88fb      	ldrh	r3, [r7, #6]
 800632a:	089b      	lsrs	r3, r3, #2
 800632c:	b29b      	uxth	r3, r3
 800632e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006330:	88fb      	ldrh	r3, [r7, #6]
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	e014      	b.n	8006368 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800633e:	69bb      	ldr	r3, [r7, #24]
 8006340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006348:	601a      	str	r2, [r3, #0]
    pDest++;
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	3301      	adds	r3, #1
 800634e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006352:	3301      	adds	r3, #1
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	3301      	adds	r3, #1
 8006360:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	3301      	adds	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
 8006368:	6a3a      	ldr	r2, [r7, #32]
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	429a      	cmp	r2, r3
 800636e:	d3e6      	bcc.n	800633e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006370:	8bfb      	ldrh	r3, [r7, #30]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d01e      	beq.n	80063b4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006376:	2300      	movs	r3, #0
 8006378:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006380:	461a      	mov	r2, r3
 8006382:	f107 0310 	add.w	r3, r7, #16
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800638a:	693a      	ldr	r2, [r7, #16]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	b2db      	uxtb	r3, r3
 8006390:	00db      	lsls	r3, r3, #3
 8006392:	fa22 f303 	lsr.w	r3, r2, r3
 8006396:	b2da      	uxtb	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639a:	701a      	strb	r2, [r3, #0]
      i++;
 800639c:	6a3b      	ldr	r3, [r7, #32]
 800639e:	3301      	adds	r3, #1
 80063a0:	623b      	str	r3, [r7, #32]
      pDest++;
 80063a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a4:	3301      	adds	r3, #1
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80063a8:	8bfb      	ldrh	r3, [r7, #30]
 80063aa:	3b01      	subs	r3, #1
 80063ac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80063ae:	8bfb      	ldrh	r3, [r7, #30]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1ea      	bne.n	800638a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80063b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	372c      	adds	r7, #44	@ 0x2c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	695b      	ldr	r3, [r3, #20]
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4013      	ands	r3, r2
 80063d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80063da:	68fb      	ldr	r3, [r7, #12]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	460b      	mov	r3, r1
 80063f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80063f8:	78fb      	ldrb	r3, [r7, #3]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006408:	78fb      	ldrb	r3, [r7, #3]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	4013      	ands	r3, r2
 800641a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800641c:	68bb      	ldr	r3, [r7, #8]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	695b      	ldr	r3, [r3, #20]
 8006436:	f003 0301 	and.w	r3, r3, #1
}
 800643a:	4618      	mov	r0, r3
 800643c:	370c      	adds	r7, #12
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr

08006446 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006446:	b480      	push	{r7}
 8006448:	b085      	sub	sp, #20
 800644a:	af00      	add	r7, sp, #0
 800644c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800644e:	2300      	movs	r3, #0
 8006450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	3301      	adds	r3, #1
 8006456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800645e:	d901      	bls.n	8006464 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006460:	2303      	movs	r3, #3
 8006462:	e01b      	b.n	800649c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	691b      	ldr	r3, [r3, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	daf2      	bge.n	8006452 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	691b      	ldr	r3, [r3, #16]
 8006474:	f043 0201 	orr.w	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	3301      	adds	r3, #1
 8006480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006488:	d901      	bls.n	800648e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e006      	b.n	800649c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b01      	cmp	r3, #1
 8006498:	d0f0      	beq.n	800647c <USB_CoreReset+0x36>

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3714      	adds	r7, #20
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80064a8:	b084      	sub	sp, #16
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80064b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80064c8:	461a      	mov	r2, r3
 80064ca:	2300      	movs	r3, #0
 80064cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d119      	bne.n	8006532 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80064fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10a      	bne.n	800651c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006514:	f043 0304 	orr.w	r3, r3, #4
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	e014      	b.n	8006546 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800652a:	f023 0304 	bic.w	r3, r3, #4
 800652e:	6013      	str	r3, [r2, #0]
 8006530:	e009      	b.n	8006546 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	68fa      	ldr	r2, [r7, #12]
 800653c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006540:	f023 0304 	bic.w	r3, r3, #4
 8006544:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006546:	2110      	movs	r1, #16
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff fe44 	bl	80061d6 <USB_FlushTxFifo>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f7ff fe6e 	bl	800623a <USB_FlushRxFifo>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006568:	2300      	movs	r3, #0
 800656a:	613b      	str	r3, [r7, #16]
 800656c:	e015      	b.n	800659a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	015a      	lsls	r2, r3, #5
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4413      	add	r3, r2
 8006576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800657a:	461a      	mov	r2, r3
 800657c:	f04f 33ff 	mov.w	r3, #4294967295
 8006580:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	015a      	lsls	r2, r3, #5
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800658e:	461a      	mov	r2, r3
 8006590:	2300      	movs	r3, #0
 8006592:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	3301      	adds	r3, #1
 8006598:	613b      	str	r3, [r7, #16]
 800659a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800659e:	461a      	mov	r2, r3
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d3e3      	bcc.n	800656e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2200      	movs	r2, #0
 80065aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f04f 32ff 	mov.w	r2, #4294967295
 80065b2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a18      	ldr	r2, [pc, #96]	@ (8006618 <USB_HostInit+0x170>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d10b      	bne.n	80065d4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065c2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a15      	ldr	r2, [pc, #84]	@ (800661c <USB_HostInit+0x174>)
 80065c8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a14      	ldr	r2, [pc, #80]	@ (8006620 <USB_HostInit+0x178>)
 80065ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80065d2:	e009      	b.n	80065e8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2280      	movs	r2, #128	@ 0x80
 80065d8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a11      	ldr	r2, [pc, #68]	@ (8006624 <USB_HostInit+0x17c>)
 80065de:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a11      	ldr	r2, [pc, #68]	@ (8006628 <USB_HostInit+0x180>)
 80065e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80065e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d105      	bne.n	80065fc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f043 0210 	orr.w	r2, r3, #16
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	4b0a      	ldr	r3, [pc, #40]	@ (800662c <USB_HostInit+0x184>)
 8006602:	4313      	orrs	r3, r2
 8006604:	687a      	ldr	r2, [r7, #4]
 8006606:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006608:	7dfb      	ldrb	r3, [r7, #23]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3718      	adds	r7, #24
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006614:	b004      	add	sp, #16
 8006616:	4770      	bx	lr
 8006618:	40040000 	.word	0x40040000
 800661c:	01000200 	.word	0x01000200
 8006620:	00e00300 	.word	0x00e00300
 8006624:	00600080 	.word	0x00600080
 8006628:	004000e0 	.word	0x004000e0
 800662c:	a3200008 	.word	0xa3200008

08006630 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006630:	b480      	push	{r7}
 8006632:	b085      	sub	sp, #20
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	78fb      	ldrb	r3, [r7, #3]
 800665e:	f003 0303 	and.w	r3, r3, #3
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006668:	4313      	orrs	r3, r2
 800666a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	2b01      	cmp	r3, #1
 8006670:	d107      	bne.n	8006682 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006678:	461a      	mov	r2, r3
 800667a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800667e:	6053      	str	r3, [r2, #4]
 8006680:	e00c      	b.n	800669c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006682:	78fb      	ldrb	r3, [r7, #3]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d107      	bne.n	8006698 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800668e:	461a      	mov	r2, r3
 8006690:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006694:	6053      	str	r3, [r2, #4]
 8006696:	e001      	b.n	800669c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e000      	b.n	800669e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3714      	adds	r7, #20
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80066aa:	b580      	push	{r7, lr}
 80066ac:	b084      	sub	sp, #16
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80066ca:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066d8:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80066da:	2064      	movs	r0, #100	@ 0x64
 80066dc:	f7fb f856 	bl	800178c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80066ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80066ee:	200a      	movs	r0, #10
 80066f0:	f7fb f84c 	bl	800178c <HAL_Delay>

  return HAL_OK;
 80066f4:	2300      	movs	r3, #0
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}

080066fe <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80066fe:	b480      	push	{r7}
 8006700:	b085      	sub	sp, #20
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800670e:	2300      	movs	r3, #0
 8006710:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006722:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d109      	bne.n	8006742 <USB_DriveVbus+0x44>
 800672e:	78fb      	ldrb	r3, [r7, #3]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d106      	bne.n	8006742 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800673c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006740:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006748:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800674c:	d109      	bne.n	8006762 <USB_DriveVbus+0x64>
 800674e:	78fb      	ldrb	r3, [r7, #3]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800675c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006760:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006762:	2300      	movs	r3, #0
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	0c5b      	lsrs	r3, r3, #17
 800678e:	f003 0303 	and.w	r3, r3, #3
}
 8006792:	4618      	mov	r0, r3
 8006794:	3714      	adds	r7, #20
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800679e:	b480      	push	{r7}
 80067a0:	b085      	sub	sp, #20
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	b29b      	uxth	r3, r3
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b088      	sub	sp, #32
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	4608      	mov	r0, r1
 80067ca:	4611      	mov	r1, r2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4603      	mov	r3, r0
 80067d0:	70fb      	strb	r3, [r7, #3]
 80067d2:	460b      	mov	r3, r1
 80067d4:	70bb      	strb	r3, [r7, #2]
 80067d6:	4613      	mov	r3, r2
 80067d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80067da:	2300      	movs	r3, #0
 80067dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80067e2:	78fb      	ldrb	r3, [r7, #3]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067ee:	461a      	mov	r2, r3
 80067f0:	f04f 33ff 	mov.w	r3, #4294967295
 80067f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80067f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d87c      	bhi.n	80068f8 <USB_HC_Init+0x138>
 80067fe:	a201      	add	r2, pc, #4	@ (adr r2, 8006804 <USB_HC_Init+0x44>)
 8006800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006804:	08006815 	.word	0x08006815
 8006808:	080068bb 	.word	0x080068bb
 800680c:	08006815 	.word	0x08006815
 8006810:	0800687d 	.word	0x0800687d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006814:	78fb      	ldrb	r3, [r7, #3]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006820:	461a      	mov	r2, r3
 8006822:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006826:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006828:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800682c:	2b00      	cmp	r3, #0
 800682e:	da10      	bge.n	8006852 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006830:	78fb      	ldrb	r3, [r7, #3]
 8006832:	015a      	lsls	r2, r3, #5
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	4413      	add	r3, r2
 8006838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	78fa      	ldrb	r2, [r7, #3]
 8006840:	0151      	lsls	r1, r2, #5
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	440a      	add	r2, r1
 8006846:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800684a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800684e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006850:	e055      	b.n	80068fe <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4a6f      	ldr	r2, [pc, #444]	@ (8006a14 <USB_HC_Init+0x254>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d151      	bne.n	80068fe <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800685a:	78fb      	ldrb	r3, [r7, #3]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	4413      	add	r3, r2
 8006862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	78fa      	ldrb	r2, [r7, #3]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	440a      	add	r2, r1
 8006870:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006874:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006878:	60d3      	str	r3, [r2, #12]
      break;
 800687a:	e040      	b.n	80068fe <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	4413      	add	r3, r2
 8006884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006888:	461a      	mov	r2, r3
 800688a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800688e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006890:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006894:	2b00      	cmp	r3, #0
 8006896:	da34      	bge.n	8006902 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006898:	78fb      	ldrb	r3, [r7, #3]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a4:	68db      	ldr	r3, [r3, #12]
 80068a6:	78fa      	ldrb	r2, [r7, #3]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	693a      	ldr	r2, [r7, #16]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80068b6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80068b8:	e023      	b.n	8006902 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	015a      	lsls	r2, r3, #5
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	4413      	add	r3, r2
 80068c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c6:	461a      	mov	r2, r3
 80068c8:	f240 2325 	movw	r3, #549	@ 0x225
 80068cc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80068ce:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	da17      	bge.n	8006906 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80068d6:	78fb      	ldrb	r3, [r7, #3]
 80068d8:	015a      	lsls	r2, r3, #5
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	4413      	add	r3, r2
 80068de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	78fa      	ldrb	r2, [r7, #3]
 80068e6:	0151      	lsls	r1, r2, #5
 80068e8:	693a      	ldr	r2, [r7, #16]
 80068ea:	440a      	add	r2, r1
 80068ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068f0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80068f4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80068f6:	e006      	b.n	8006906 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77fb      	strb	r3, [r7, #31]
      break;
 80068fc:	e004      	b.n	8006908 <USB_HC_Init+0x148>
      break;
 80068fe:	bf00      	nop
 8006900:	e002      	b.n	8006908 <USB_HC_Init+0x148>
      break;
 8006902:	bf00      	nop
 8006904:	e000      	b.n	8006908 <USB_HC_Init+0x148>
      break;
 8006906:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006908:	78fb      	ldrb	r3, [r7, #3]
 800690a:	015a      	lsls	r2, r3, #5
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	4413      	add	r3, r2
 8006910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006914:	461a      	mov	r2, r3
 8006916:	2300      	movs	r3, #0
 8006918:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800691a:	78fb      	ldrb	r3, [r7, #3]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	78fa      	ldrb	r2, [r7, #3]
 800692a:	0151      	lsls	r1, r2, #5
 800692c:	693a      	ldr	r2, [r7, #16]
 800692e:	440a      	add	r2, r1
 8006930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006934:	f043 0302 	orr.w	r3, r3, #2
 8006938:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	78fb      	ldrb	r3, [r7, #3]
 8006944:	f003 030f 	and.w	r3, r3, #15
 8006948:	2101      	movs	r1, #1
 800694a:	fa01 f303 	lsl.w	r3, r1, r3
 800694e:	6939      	ldr	r1, [r7, #16]
 8006950:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006954:	4313      	orrs	r3, r2
 8006956:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006964:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006968:	2b00      	cmp	r3, #0
 800696a:	da03      	bge.n	8006974 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800696c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e001      	b.n	8006978 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006974:	2300      	movs	r3, #0
 8006976:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fef9 	bl	8006770 <USB_GetHostSpeed>
 800697e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006980:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006984:	2b02      	cmp	r3, #2
 8006986:	d106      	bne.n	8006996 <USB_HC_Init+0x1d6>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d003      	beq.n	8006996 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800698e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	e001      	b.n	800699a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006996:	2300      	movs	r3, #0
 8006998:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800699a:	787b      	ldrb	r3, [r7, #1]
 800699c:	059b      	lsls	r3, r3, #22
 800699e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069a2:	78bb      	ldrb	r3, [r7, #2]
 80069a4:	02db      	lsls	r3, r3, #11
 80069a6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069aa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069ac:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069b0:	049b      	lsls	r3, r3, #18
 80069b2:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80069b6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80069b8:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80069ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80069be:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069c8:	78fa      	ldrb	r2, [r7, #3]
 80069ca:	0151      	lsls	r1, r2, #5
 80069cc:	693a      	ldr	r2, [r7, #16]
 80069ce:	440a      	add	r2, r1
 80069d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80069d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80069d8:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80069da:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069de:	2b03      	cmp	r3, #3
 80069e0:	d003      	beq.n	80069ea <USB_HC_Init+0x22a>
 80069e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d10f      	bne.n	8006a0a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80069ea:	78fb      	ldrb	r3, [r7, #3]
 80069ec:	015a      	lsls	r2, r3, #5
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	4413      	add	r3, r2
 80069f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	78fa      	ldrb	r2, [r7, #3]
 80069fa:	0151      	lsls	r1, r2, #5
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	440a      	add	r2, r1
 8006a00:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a08:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006a0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3720      	adds	r7, #32
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}
 8006a14:	40040000 	.word	0x40040000

08006a18 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b08c      	sub	sp, #48	@ 0x30
 8006a1c:	af02      	add	r7, sp, #8
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4613      	mov	r3, r2
 8006a24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a34:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	4a5d      	ldr	r2, [pc, #372]	@ (8006bb0 <USB_HC_StartXfer+0x198>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d12f      	bne.n	8006a9e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006a3e:	79fb      	ldrb	r3, [r7, #7]
 8006a40:	2b01      	cmp	r3, #1
 8006a42:	d11c      	bne.n	8006a7e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	7c9b      	ldrb	r3, [r3, #18]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d003      	beq.n	8006a54 <USB_HC_StartXfer+0x3c>
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	7c9b      	ldrb	r3, [r3, #18]
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d124      	bne.n	8006a9e <USB_HC_StartXfer+0x86>
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	799b      	ldrb	r3, [r3, #6]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d120      	bne.n	8006a9e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	6a3b      	ldr	r3, [r7, #32]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	69fa      	ldr	r2, [r7, #28]
 8006a6c:	0151      	lsls	r1, r2, #5
 8006a6e:	6a3a      	ldr	r2, [r7, #32]
 8006a70:	440a      	add	r2, r1
 8006a72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a7a:	60d3      	str	r3, [r2, #12]
 8006a7c:	e00f      	b.n	8006a9e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	791b      	ldrb	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10b      	bne.n	8006a9e <USB_HC_StartXfer+0x86>
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	795b      	ldrb	r3, [r3, #5]
 8006a8a:	2b01      	cmp	r3, #1
 8006a8c:	d107      	bne.n	8006a9e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	785b      	ldrb	r3, [r3, #1]
 8006a92:	4619      	mov	r1, r3
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 fb6b 	bl	8007170 <USB_DoPing>
        return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	e232      	b.n	8006f04 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	799b      	ldrb	r3, [r3, #6]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d158      	bne.n	8006b58 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d007      	beq.n	8006ac2 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ab2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ab4:	68ba      	ldr	r2, [r7, #8]
 8006ab6:	8a92      	ldrh	r2, [r2, #20]
 8006ab8:	fb03 f202 	mul.w	r2, r3, r2
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	61da      	str	r2, [r3, #28]
 8006ac0:	e07c      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	7c9b      	ldrb	r3, [r3, #18]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d130      	bne.n	8006b2c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	6a1b      	ldr	r3, [r3, #32]
 8006ace:	2bbc      	cmp	r3, #188	@ 0xbc
 8006ad0:	d918      	bls.n	8006b04 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	8a9b      	ldrh	r3, [r3, #20]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	69da      	ldr	r2, [r3, #28]
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d003      	beq.n	8006af4 <USB_HC_StartXfer+0xdc>
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d103      	bne.n	8006afc <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2202      	movs	r2, #2
 8006af8:	60da      	str	r2, [r3, #12]
 8006afa:	e05f      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	2201      	movs	r2, #1
 8006b00:	60da      	str	r2, [r3, #12]
 8006b02:	e05b      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a1a      	ldr	r2, [r3, #32]
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	68db      	ldr	r3, [r3, #12]
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d007      	beq.n	8006b24 <USB_HC_StartXfer+0x10c>
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	2b02      	cmp	r3, #2
 8006b1a:	d003      	beq.n	8006b24 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	2204      	movs	r2, #4
 8006b20:	60da      	str	r2, [r3, #12]
 8006b22:	e04b      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2203      	movs	r2, #3
 8006b28:	60da      	str	r2, [r3, #12]
 8006b2a:	e047      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006b2c:	79fb      	ldrb	r3, [r7, #7]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d10d      	bne.n	8006b4e <USB_HC_StartXfer+0x136>
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	8a92      	ldrh	r2, [r2, #20]
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d907      	bls.n	8006b4e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b3e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	8a92      	ldrh	r2, [r2, #20]
 8006b44:	fb03 f202 	mul.w	r2, r3, r2
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	61da      	str	r2, [r3, #28]
 8006b4c:	e036      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	6a1a      	ldr	r2, [r3, #32]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	61da      	str	r2, [r3, #28]
 8006b56:	e031      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d018      	beq.n	8006b92 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	6a1b      	ldr	r3, [r3, #32]
 8006b64:	68ba      	ldr	r2, [r7, #8]
 8006b66:	8a92      	ldrh	r2, [r2, #20]
 8006b68:	4413      	add	r3, r2
 8006b6a:	3b01      	subs	r3, #1
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	8a92      	ldrh	r2, [r2, #20]
 8006b70:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b74:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006b76:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006b78:	8b7b      	ldrh	r3, [r7, #26]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90b      	bls.n	8006b96 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006b7e:	8b7b      	ldrh	r3, [r7, #26]
 8006b80:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b82:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b84:	68ba      	ldr	r2, [r7, #8]
 8006b86:	8a92      	ldrh	r2, [r2, #20]
 8006b88:	fb03 f202 	mul.w	r2, r3, r2
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	61da      	str	r2, [r3, #28]
 8006b90:	e001      	b.n	8006b96 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b92:	2301      	movs	r3, #1
 8006b94:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	78db      	ldrb	r3, [r3, #3]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d00a      	beq.n	8006bb4 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b9e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ba0:	68ba      	ldr	r2, [r7, #8]
 8006ba2:	8a92      	ldrh	r2, [r2, #20]
 8006ba4:	fb03 f202 	mul.w	r2, r3, r2
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	61da      	str	r2, [r3, #28]
 8006bac:	e006      	b.n	8006bbc <USB_HC_StartXfer+0x1a4>
 8006bae:	bf00      	nop
 8006bb0:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6a1a      	ldr	r2, [r3, #32]
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	69db      	ldr	r3, [r3, #28]
 8006bc0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006bc4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bc6:	04d9      	lsls	r1, r3, #19
 8006bc8:	4ba3      	ldr	r3, [pc, #652]	@ (8006e58 <USB_HC_StartXfer+0x440>)
 8006bca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bcc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	7d9b      	ldrb	r3, [r3, #22]
 8006bd2:	075b      	lsls	r3, r3, #29
 8006bd4:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006bd8:	69f9      	ldr	r1, [r7, #28]
 8006bda:	0148      	lsls	r0, r1, #5
 8006bdc:	6a39      	ldr	r1, [r7, #32]
 8006bde:	4401      	add	r1, r0
 8006be0:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006be4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006be6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6999      	ldr	r1, [r3, #24]
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	6a3b      	ldr	r3, [r7, #32]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bfe:	460a      	mov	r2, r1
 8006c00:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006c02:	6a3b      	ldr	r3, [r7, #32]
 8006c04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	f003 0301 	and.w	r3, r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	bf0c      	ite	eq
 8006c12:	2301      	moveq	r3, #1
 8006c14:	2300      	movne	r3, #0
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006c1a:	69fb      	ldr	r3, [r7, #28]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	6a3b      	ldr	r3, [r7, #32]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	0151      	lsls	r1, r2, #5
 8006c2c:	6a3a      	ldr	r2, [r7, #32]
 8006c2e:	440a      	add	r2, r1
 8006c30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c34:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006c38:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	6a3b      	ldr	r3, [r7, #32]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	7e7b      	ldrb	r3, [r7, #25]
 8006c4a:	075b      	lsls	r3, r3, #29
 8006c4c:	69f9      	ldr	r1, [r7, #28]
 8006c4e:	0148      	lsls	r0, r1, #5
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	4401      	add	r1, r0
 8006c54:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	799b      	ldrb	r3, [r3, #6]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	f040 80c3 	bne.w	8006dec <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	7c5b      	ldrb	r3, [r3, #17]
 8006c6a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c70:	4313      	orrs	r3, r2
 8006c72:	69fa      	ldr	r2, [r7, #28]
 8006c74:	0151      	lsls	r1, r2, #5
 8006c76:	6a3a      	ldr	r2, [r7, #32]
 8006c78:	440a      	add	r2, r1
 8006c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006c82:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	015a      	lsls	r2, r3, #5
 8006c88:	6a3b      	ldr	r3, [r7, #32]
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c90:	68db      	ldr	r3, [r3, #12]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	0151      	lsls	r1, r2, #5
 8006c96:	6a3a      	ldr	r2, [r7, #32]
 8006c98:	440a      	add	r2, r1
 8006c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c9e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006ca2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	79db      	ldrb	r3, [r3, #7]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d123      	bne.n	8006cf4 <USB_HC_StartXfer+0x2dc>
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	78db      	ldrb	r3, [r3, #3]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d11f      	bne.n	8006cf4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	0151      	lsls	r1, r2, #5
 8006cc6:	6a3a      	ldr	r2, [r7, #32]
 8006cc8:	440a      	add	r2, r1
 8006cca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006cd2:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	015a      	lsls	r2, r3, #5
 8006cd8:	6a3b      	ldr	r3, [r7, #32]
 8006cda:	4413      	add	r3, r2
 8006cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce0:	68db      	ldr	r3, [r3, #12]
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	0151      	lsls	r1, r2, #5
 8006ce6:	6a3a      	ldr	r2, [r7, #32]
 8006ce8:	440a      	add	r2, r1
 8006cea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cf2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	7c9b      	ldrb	r3, [r3, #18]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d003      	beq.n	8006d04 <USB_HC_StartXfer+0x2ec>
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	7c9b      	ldrb	r3, [r3, #18]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d117      	bne.n	8006d34 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006d08:	2b01      	cmp	r3, #1
 8006d0a:	d113      	bne.n	8006d34 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	78db      	ldrb	r3, [r3, #3]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d10f      	bne.n	8006d34 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	015a      	lsls	r2, r3, #5
 8006d18:	6a3b      	ldr	r3, [r7, #32]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	0151      	lsls	r1, r2, #5
 8006d26:	6a3a      	ldr	r2, [r7, #32]
 8006d28:	440a      	add	r2, r1
 8006d2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d32:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	7c9b      	ldrb	r3, [r3, #18]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d162      	bne.n	8006e02 <USB_HC_StartXfer+0x3ea>
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	78db      	ldrb	r3, [r3, #3]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d15e      	bne.n	8006e02 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	2b03      	cmp	r3, #3
 8006d4c:	d858      	bhi.n	8006e00 <USB_HC_StartXfer+0x3e8>
 8006d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d54 <USB_HC_StartXfer+0x33c>)
 8006d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d54:	08006d65 	.word	0x08006d65
 8006d58:	08006d87 	.word	0x08006d87
 8006d5c:	08006da9 	.word	0x08006da9
 8006d60:	08006dcb 	.word	0x08006dcb
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	69fa      	ldr	r2, [r7, #28]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	6a3a      	ldr	r2, [r7, #32]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d82:	6053      	str	r3, [r2, #4]
          break;
 8006d84:	e03d      	b.n	8006e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	69fa      	ldr	r2, [r7, #28]
 8006d96:	0151      	lsls	r1, r2, #5
 8006d98:	6a3a      	ldr	r2, [r7, #32]
 8006d9a:	440a      	add	r2, r1
 8006d9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006da0:	f043 030e 	orr.w	r3, r3, #14
 8006da4:	6053      	str	r3, [r2, #4]
          break;
 8006da6:	e02c      	b.n	8006e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	015a      	lsls	r2, r3, #5
 8006dac:	6a3b      	ldr	r3, [r7, #32]
 8006dae:	4413      	add	r3, r2
 8006db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	69fa      	ldr	r2, [r7, #28]
 8006db8:	0151      	lsls	r1, r2, #5
 8006dba:	6a3a      	ldr	r2, [r7, #32]
 8006dbc:	440a      	add	r2, r1
 8006dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006dc6:	6053      	str	r3, [r2, #4]
          break;
 8006dc8:	e01b      	b.n	8006e02 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	015a      	lsls	r2, r3, #5
 8006dce:	6a3b      	ldr	r3, [r7, #32]
 8006dd0:	4413      	add	r3, r2
 8006dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	69fa      	ldr	r2, [r7, #28]
 8006dda:	0151      	lsls	r1, r2, #5
 8006ddc:	6a3a      	ldr	r2, [r7, #32]
 8006dde:	440a      	add	r2, r1
 8006de0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006de4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006de8:	6053      	str	r3, [r2, #4]
          break;
 8006dea:	e00a      	b.n	8006e02 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	015a      	lsls	r2, r3, #5
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	4413      	add	r3, r2
 8006df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006df8:	461a      	mov	r2, r3
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	6053      	str	r3, [r2, #4]
 8006dfe:	e000      	b.n	8006e02 <USB_HC_StartXfer+0x3ea>
          break;
 8006e00:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	015a      	lsls	r2, r3, #5
 8006e06:	6a3b      	ldr	r3, [r7, #32]
 8006e08:	4413      	add	r3, r2
 8006e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e18:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	78db      	ldrb	r3, [r3, #3]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d004      	beq.n	8006e2c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e28:	613b      	str	r3, [r7, #16]
 8006e2a:	e003      	b.n	8006e34 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006e32:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e3a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	6a3b      	ldr	r3, [r7, #32]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e48:	461a      	mov	r2, r3
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e4e:	79fb      	ldrb	r3, [r7, #7]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d003      	beq.n	8006e5c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	e055      	b.n	8006f04 <USB_HC_StartXfer+0x4ec>
 8006e58:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	78db      	ldrb	r3, [r3, #3]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d14e      	bne.n	8006f02 <USB_HC_StartXfer+0x4ea>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d04a      	beq.n	8006f02 <USB_HC_StartXfer+0x4ea>
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	79db      	ldrb	r3, [r3, #7]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d146      	bne.n	8006f02 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	7c9b      	ldrb	r3, [r3, #18]
 8006e78:	2b03      	cmp	r3, #3
 8006e7a:	d831      	bhi.n	8006ee0 <USB_HC_StartXfer+0x4c8>
 8006e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e84 <USB_HC_StartXfer+0x46c>)
 8006e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e82:	bf00      	nop
 8006e84:	08006e95 	.word	0x08006e95
 8006e88:	08006eb9 	.word	0x08006eb9
 8006e8c:	08006e95 	.word	0x08006e95
 8006e90:	08006eb9 	.word	0x08006eb9
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	3303      	adds	r3, #3
 8006e9a:	089b      	lsrs	r3, r3, #2
 8006e9c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e9e:	8afa      	ldrh	r2, [r7, #22]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d91c      	bls.n	8006ee4 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f043 0220 	orr.w	r2, r3, #32
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006eb6:	e015      	b.n	8006ee4 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	6a1b      	ldr	r3, [r3, #32]
 8006ebc:	3303      	adds	r3, #3
 8006ebe:	089b      	lsrs	r3, r3, #2
 8006ec0:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006ec2:	8afa      	ldrh	r2, [r7, #22]
 8006ec4:	6a3b      	ldr	r3, [r7, #32]
 8006ec6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d90a      	bls.n	8006ee8 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	699b      	ldr	r3, [r3, #24]
 8006ed6:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ede:	e003      	b.n	8006ee8 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006ee0:	bf00      	nop
 8006ee2:	e002      	b.n	8006eea <USB_HC_StartXfer+0x4d2>
        break;
 8006ee4:	bf00      	nop
 8006ee6:	e000      	b.n	8006eea <USB_HC_StartXfer+0x4d2>
        break;
 8006ee8:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	6999      	ldr	r1, [r3, #24]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785a      	ldrb	r2, [r3, #1]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2000      	movs	r0, #0
 8006efa:	9000      	str	r0, [sp, #0]
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff f9ca 	bl	8006296 <USB_WritePacket>
  }

  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3728      	adds	r7, #40	@ 0x28
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f1e:	695b      	ldr	r3, [r3, #20]
 8006f20:	b29b      	uxth	r3, r3
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3714      	adds	r7, #20
 8006f26:	46bd      	mov	sp, r7
 8006f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2c:	4770      	bx	lr

08006f2e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b089      	sub	sp, #36	@ 0x24
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f3e:	78fb      	ldrb	r3, [r7, #3]
 8006f40:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f46:	69bb      	ldr	r3, [r7, #24]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	69fb      	ldr	r3, [r7, #28]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	0c9b      	lsrs	r3, r3, #18
 8006f56:	f003 0303 	and.w	r3, r3, #3
 8006f5a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	015a      	lsls	r2, r3, #5
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	4413      	add	r3, r2
 8006f64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	0fdb      	lsrs	r3, r3, #31
 8006f6c:	f003 0301 	and.w	r3, r3, #1
 8006f70:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006f72:	69bb      	ldr	r3, [r7, #24]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	69fb      	ldr	r3, [r7, #28]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	0fdb      	lsrs	r3, r3, #31
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f003 0320 	and.w	r3, r3, #32
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	d10d      	bne.n	8006fb0 <USB_HC_Halt+0x82>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d10a      	bne.n	8006fb0 <USB_HC_Halt+0x82>
 8006f9a:	693b      	ldr	r3, [r7, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d002      	beq.n	8006fac <USB_HC_Halt+0x7e>
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	2b03      	cmp	r3, #3
 8006faa:	d101      	bne.n	8006fb0 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	e0d8      	b.n	8007162 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <USB_HC_Halt+0x8e>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d173      	bne.n	80070a4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	015a      	lsls	r2, r3, #5
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	4413      	add	r3, r2
 8006fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	69ba      	ldr	r2, [r7, #24]
 8006fcc:	0151      	lsls	r1, r2, #5
 8006fce:	69fa      	ldr	r2, [r7, #28]
 8006fd0:	440a      	add	r2, r1
 8006fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fd6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006fda:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f003 0320 	and.w	r3, r3, #32
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d14a      	bne.n	800707e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d133      	bne.n	800705c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	015a      	lsls	r2, r3, #5
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	69ba      	ldr	r2, [r7, #24]
 8007004:	0151      	lsls	r1, r2, #5
 8007006:	69fa      	ldr	r2, [r7, #28]
 8007008:	440a      	add	r2, r1
 800700a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800700e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007012:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	015a      	lsls	r2, r3, #5
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	4413      	add	r3, r2
 800701c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	69ba      	ldr	r2, [r7, #24]
 8007024:	0151      	lsls	r1, r2, #5
 8007026:	69fa      	ldr	r2, [r7, #28]
 8007028:	440a      	add	r2, r1
 800702a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800702e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007032:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	3301      	adds	r3, #1
 8007038:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007040:	d82e      	bhi.n	80070a0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	4413      	add	r3, r2
 800704a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007054:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007058:	d0ec      	beq.n	8007034 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800705a:	e081      	b.n	8007160 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	4413      	add	r3, r2
 8007064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	69ba      	ldr	r2, [r7, #24]
 800706c:	0151      	lsls	r1, r2, #5
 800706e:	69fa      	ldr	r2, [r7, #28]
 8007070:	440a      	add	r2, r1
 8007072:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800707a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800707c:	e070      	b.n	8007160 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	015a      	lsls	r2, r3, #5
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	4413      	add	r3, r2
 8007086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	69ba      	ldr	r2, [r7, #24]
 800708e:	0151      	lsls	r1, r2, #5
 8007090:	69fa      	ldr	r2, [r7, #28]
 8007092:	440a      	add	r2, r1
 8007094:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800709c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800709e:	e05f      	b.n	8007160 <USB_HC_Halt+0x232>
            break;
 80070a0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070a2:	e05d      	b.n	8007160 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	015a      	lsls	r2, r3, #5
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	4413      	add	r3, r2
 80070ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	0151      	lsls	r1, r2, #5
 80070b6:	69fa      	ldr	r2, [r7, #28]
 80070b8:	440a      	add	r2, r1
 80070ba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070c2:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d133      	bne.n	800713c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ee:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070f2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	015a      	lsls	r2, r3, #5
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	4413      	add	r3, r2
 80070fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	0151      	lsls	r1, r2, #5
 8007106:	69fa      	ldr	r2, [r7, #28]
 8007108:	440a      	add	r2, r1
 800710a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800710e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007112:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	3301      	adds	r3, #1
 8007118:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007120:	d81d      	bhi.n	800715e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007122:	69bb      	ldr	r3, [r7, #24]
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007134:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007138:	d0ec      	beq.n	8007114 <USB_HC_Halt+0x1e6>
 800713a:	e011      	b.n	8007160 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800713c:	69bb      	ldr	r3, [r7, #24]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	4413      	add	r3, r2
 8007144:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	69ba      	ldr	r2, [r7, #24]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	69fa      	ldr	r2, [r7, #28]
 8007150:	440a      	add	r2, r1
 8007152:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007156:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	e000      	b.n	8007160 <USB_HC_Halt+0x232>
          break;
 800715e:	bf00      	nop
    }
  }

  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3724      	adds	r7, #36	@ 0x24
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
	...

08007170 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007184:	2301      	movs	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	04da      	lsls	r2, r3, #19
 800718c:	4b15      	ldr	r3, [pc, #84]	@ (80071e4 <USB_DoPing+0x74>)
 800718e:	4013      	ands	r3, r2
 8007190:	693a      	ldr	r2, [r7, #16]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	697a      	ldr	r2, [r7, #20]
 8007196:	440a      	add	r2, r1
 8007198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800719c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80071b8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071c0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	371c      	adds	r7, #28
 80071da:	46bd      	mov	sp, r7
 80071dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e0:	4770      	bx	lr
 80071e2:	bf00      	nop
 80071e4:	1ff80000 	.word	0x1ff80000

080071e8 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f7fe ff8d 	bl	800611c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007202:	2110      	movs	r1, #16
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7fe ffe6 	bl	80061d6 <USB_FlushTxFifo>
 800720a:	4603      	mov	r3, r0
 800720c:	2b00      	cmp	r3, #0
 800720e:	d001      	beq.n	8007214 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f7ff f810 	bl	800623a <USB_FlushRxFifo>
 800721a:	4603      	mov	r3, r0
 800721c:	2b00      	cmp	r3, #0
 800721e:	d001      	beq.n	8007224 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007224:	2300      	movs	r3, #0
 8007226:	61bb      	str	r3, [r7, #24]
 8007228:	e01f      	b.n	800726a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	4413      	add	r3, r2
 8007232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007240:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007248:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007250:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725e:	461a      	mov	r2, r3
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007264:	69bb      	ldr	r3, [r7, #24]
 8007266:	3301      	adds	r3, #1
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	2b0f      	cmp	r3, #15
 800726e:	d9dc      	bls.n	800722a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007270:	2300      	movs	r3, #0
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	e034      	b.n	80072e0 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007276:	69bb      	ldr	r3, [r7, #24]
 8007278:	015a      	lsls	r2, r3, #5
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	4413      	add	r3, r2
 800727e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800728c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007294:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800729c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	015a      	lsls	r2, r3, #5
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	4413      	add	r3, r2
 80072a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072aa:	461a      	mov	r2, r3
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	3301      	adds	r3, #1
 80072b4:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80072bc:	d80c      	bhi.n	80072d8 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072d4:	d0ec      	beq.n	80072b0 <USB_StopHost+0xc8>
 80072d6:	e000      	b.n	80072da <USB_StopHost+0xf2>
        break;
 80072d8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80072da:	69bb      	ldr	r3, [r7, #24]
 80072dc:	3301      	adds	r3, #1
 80072de:	61bb      	str	r3, [r7, #24]
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d9c7      	bls.n	8007276 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072ec:	461a      	mov	r2, r3
 80072ee:	f04f 33ff 	mov.w	r3, #4294967295
 80072f2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fe fefc 	bl	80060fa <USB_EnableGlobalInt>

  return ret;
 8007302:	7ffb      	ldrb	r3, [r7, #31]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3720      	adds	r7, #32
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800730c:	b590      	push	{r4, r7, lr}
 800730e:	b089      	sub	sp, #36	@ 0x24
 8007310:	af04      	add	r7, sp, #16
 8007312:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007314:	2301      	movs	r3, #1
 8007316:	2202      	movs	r2, #2
 8007318:	2102      	movs	r1, #2
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f000 fc85 	bl	8007c2a <USBH_FindInterface>
 8007320:	4603      	mov	r3, r0
 8007322:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007324:	7bfb      	ldrb	r3, [r7, #15]
 8007326:	2bff      	cmp	r3, #255	@ 0xff
 8007328:	d002      	beq.n	8007330 <USBH_CDC_InterfaceInit+0x24>
 800732a:	7bfb      	ldrb	r3, [r7, #15]
 800732c:	2b01      	cmp	r3, #1
 800732e:	d901      	bls.n	8007334 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007330:	2302      	movs	r3, #2
 8007332:	e13d      	b.n	80075b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	4619      	mov	r1, r3
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fc5a 	bl	8007bf2 <USBH_SelectInterface>
 800733e:	4603      	mov	r3, r0
 8007340:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007342:	7bbb      	ldrb	r3, [r7, #14]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007348:	2302      	movs	r3, #2
 800734a:	e131      	b.n	80075b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007352:	2050      	movs	r0, #80	@ 0x50
 8007354:	f002 fb64 	bl	8009a20 <malloc>
 8007358:	4603      	mov	r3, r0
 800735a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d101      	bne.n	8007370 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800736c:	2302      	movs	r3, #2
 800736e:	e11f      	b.n	80075b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007370:	2250      	movs	r2, #80	@ 0x50
 8007372:	2100      	movs	r1, #0
 8007374:	68b8      	ldr	r0, [r7, #8]
 8007376:	f002 fc11 	bl	8009b9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800737a:	7bfb      	ldrb	r3, [r7, #15]
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	211a      	movs	r1, #26
 8007380:	fb01 f303 	mul.w	r3, r1, r3
 8007384:	4413      	add	r3, r2
 8007386:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	b25b      	sxtb	r3, r3
 800738e:	2b00      	cmp	r3, #0
 8007390:	da15      	bge.n	80073be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	211a      	movs	r1, #26
 8007398:	fb01 f303 	mul.w	r3, r1, r3
 800739c:	4413      	add	r3, r2
 800739e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073a2:	781a      	ldrb	r2, [r3, #0]
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073a8:	7bfb      	ldrb	r3, [r7, #15]
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	211a      	movs	r1, #26
 80073ae:	fb01 f303 	mul.w	r3, r1, r3
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073b8:	881a      	ldrh	r2, [r3, #0]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	785b      	ldrb	r3, [r3, #1]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f001 ffbe 	bl	8009346 <USBH_AllocPipe>
 80073ca:	4603      	mov	r3, r0
 80073cc:	461a      	mov	r2, r3
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	7819      	ldrb	r1, [r3, #0]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	7858      	ldrb	r0, [r3, #1]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	8952      	ldrh	r2, [r2, #10]
 80073ea:	9202      	str	r2, [sp, #8]
 80073ec:	2203      	movs	r2, #3
 80073ee:	9201      	str	r2, [sp, #4]
 80073f0:	9300      	str	r3, [sp, #0]
 80073f2:	4623      	mov	r3, r4
 80073f4:	4602      	mov	r2, r0
 80073f6:	6878      	ldr	r0, [r7, #4]
 80073f8:	f001 ff76 	bl	80092e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2200      	movs	r2, #0
 8007402:	4619      	mov	r1, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f002 fa85 	bl	8009914 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800740a:	2300      	movs	r3, #0
 800740c:	2200      	movs	r2, #0
 800740e:	210a      	movs	r1, #10
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fc0a 	bl	8007c2a <USBH_FindInterface>
 8007416:	4603      	mov	r3, r0
 8007418:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	2bff      	cmp	r3, #255	@ 0xff
 800741e:	d002      	beq.n	8007426 <USBH_CDC_InterfaceInit+0x11a>
 8007420:	7bfb      	ldrb	r3, [r7, #15]
 8007422:	2b01      	cmp	r3, #1
 8007424:	d901      	bls.n	800742a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007426:	2302      	movs	r3, #2
 8007428:	e0c2      	b.n	80075b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800742a:	7bfb      	ldrb	r3, [r7, #15]
 800742c:	687a      	ldr	r2, [r7, #4]
 800742e:	211a      	movs	r1, #26
 8007430:	fb01 f303 	mul.w	r3, r1, r3
 8007434:	4413      	add	r3, r2
 8007436:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	b25b      	sxtb	r3, r3
 800743e:	2b00      	cmp	r3, #0
 8007440:	da16      	bge.n	8007470 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	211a      	movs	r1, #26
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007452:	781a      	ldrb	r2, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	211a      	movs	r1, #26
 800745e:	fb01 f303 	mul.w	r3, r1, r3
 8007462:	4413      	add	r3, r2
 8007464:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007468:	881a      	ldrh	r2, [r3, #0]
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	835a      	strh	r2, [r3, #26]
 800746e:	e015      	b.n	800749c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	211a      	movs	r1, #26
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	4413      	add	r3, r2
 800747c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007480:	781a      	ldrb	r2, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	687a      	ldr	r2, [r7, #4]
 800748a:	211a      	movs	r1, #26
 800748c:	fb01 f303 	mul.w	r3, r1, r3
 8007490:	4413      	add	r3, r2
 8007492:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007496:	881a      	ldrh	r2, [r3, #0]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800749c:	7bfb      	ldrb	r3, [r7, #15]
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	211a      	movs	r1, #26
 80074a2:	fb01 f303 	mul.w	r3, r1, r3
 80074a6:	4413      	add	r3, r2
 80074a8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	b25b      	sxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	da16      	bge.n	80074e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	211a      	movs	r1, #26
 80074ba:	fb01 f303 	mul.w	r3, r1, r3
 80074be:	4413      	add	r3, r2
 80074c0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074c4:	781a      	ldrb	r2, [r3, #0]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	211a      	movs	r1, #26
 80074d0:	fb01 f303 	mul.w	r3, r1, r3
 80074d4:	4413      	add	r3, r2
 80074d6:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80074da:	881a      	ldrh	r2, [r3, #0]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	835a      	strh	r2, [r3, #26]
 80074e0:	e015      	b.n	800750e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	211a      	movs	r1, #26
 80074e8:	fb01 f303 	mul.w	r3, r1, r3
 80074ec:	4413      	add	r3, r2
 80074ee:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80074f2:	781a      	ldrb	r2, [r3, #0]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80074f8:	7bfb      	ldrb	r3, [r7, #15]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	211a      	movs	r1, #26
 80074fe:	fb01 f303 	mul.w	r3, r1, r3
 8007502:	4413      	add	r3, r2
 8007504:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007508:	881a      	ldrh	r2, [r3, #0]
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	7b9b      	ldrb	r3, [r3, #14]
 8007512:	4619      	mov	r1, r3
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 ff16 	bl	8009346 <USBH_AllocPipe>
 800751a:	4603      	mov	r3, r0
 800751c:	461a      	mov	r2, r3
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	7bdb      	ldrb	r3, [r3, #15]
 8007526:	4619      	mov	r1, r3
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f001 ff0c 	bl	8009346 <USBH_AllocPipe>
 800752e:	4603      	mov	r3, r0
 8007530:	461a      	mov	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	7b59      	ldrb	r1, [r3, #13]
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	7b98      	ldrb	r0, [r3, #14]
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	8b12      	ldrh	r2, [r2, #24]
 800754e:	9202      	str	r2, [sp, #8]
 8007550:	2202      	movs	r2, #2
 8007552:	9201      	str	r2, [sp, #4]
 8007554:	9300      	str	r3, [sp, #0]
 8007556:	4623      	mov	r3, r4
 8007558:	4602      	mov	r2, r0
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f001 fec4 	bl	80092e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	7b19      	ldrb	r1, [r3, #12]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	7bd8      	ldrb	r0, [r3, #15]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007574:	68ba      	ldr	r2, [r7, #8]
 8007576:	8b52      	ldrh	r2, [r2, #26]
 8007578:	9202      	str	r2, [sp, #8]
 800757a:	2202      	movs	r2, #2
 800757c:	9201      	str	r2, [sp, #4]
 800757e:	9300      	str	r3, [sp, #0]
 8007580:	4623      	mov	r3, r4
 8007582:	4602      	mov	r2, r0
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f001 feaf 	bl	80092e8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7b5b      	ldrb	r3, [r3, #13]
 8007596:	2200      	movs	r2, #0
 8007598:	4619      	mov	r1, r3
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f002 f9ba 	bl	8009914 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	7b1b      	ldrb	r3, [r3, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f002 f9b3 	bl	8009914 <USBH_LL_SetToggle>

  return USBH_OK;
 80075ae:	2300      	movs	r3, #0
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd90      	pop	{r4, r7, pc}

080075b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b084      	sub	sp, #16
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d00e      	beq.n	80075f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f001 fea4 	bl	8009326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	4619      	mov	r1, r3
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f001 fecf 	bl	8009388 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	2200      	movs	r2, #0
 80075ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	7b1b      	ldrb	r3, [r3, #12]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00e      	beq.n	8007616 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	7b1b      	ldrb	r3, [r3, #12]
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fe91 	bl	8009326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	7b1b      	ldrb	r3, [r3, #12]
 8007608:	4619      	mov	r1, r3
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f001 febc 	bl	8009388 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	7b5b      	ldrb	r3, [r3, #13]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d00e      	beq.n	800763c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	7b5b      	ldrb	r3, [r3, #13]
 8007622:	4619      	mov	r1, r3
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f001 fe7e 	bl	8009326 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	7b5b      	ldrb	r3, [r3, #13]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 fea9 	bl	8009388 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007642:	69db      	ldr	r3, [r3, #28]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d00b      	beq.n	8007660 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800764e:	69db      	ldr	r3, [r3, #28]
 8007650:	4618      	mov	r0, r3
 8007652:	f002 f9ed 	bl	8009a30 <free>
    phost->pActiveClass->pData = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800765c:	2200      	movs	r2, #0
 800765e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007660:	2300      	movs	r3, #0
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}

0800766a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800766a:	b580      	push	{r7, lr}
 800766c:	b084      	sub	sp, #16
 800766e:	af00      	add	r7, sp, #0
 8007670:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007678:	69db      	ldr	r3, [r3, #28]
 800767a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	3340      	adds	r3, #64	@ 0x40
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f8b1 	bl	80077ea <GetLineCoding>
 8007688:	4603      	mov	r3, r0
 800768a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800768c:	7afb      	ldrb	r3, [r7, #11]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d105      	bne.n	800769e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007698:	2102      	movs	r1, #2
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800769e:	7afb      	ldrb	r3, [r7, #11]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3710      	adds	r7, #16
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80076b0:	2301      	movs	r3, #1
 80076b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80076b4:	2300      	movs	r3, #0
 80076b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076be:	69db      	ldr	r3, [r3, #28]
 80076c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80076c8:	2b04      	cmp	r3, #4
 80076ca:	d877      	bhi.n	80077bc <USBH_CDC_Process+0x114>
 80076cc:	a201      	add	r2, pc, #4	@ (adr r2, 80076d4 <USBH_CDC_Process+0x2c>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e9 	.word	0x080076e9
 80076d8:	080076ef 	.word	0x080076ef
 80076dc:	0800771f 	.word	0x0800771f
 80076e0:	08007793 	.word	0x08007793
 80076e4:	080077a1 	.word	0x080077a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80076e8:	2300      	movs	r3, #0
 80076ea:	73fb      	strb	r3, [r7, #15]
      break;
 80076ec:	e06d      	b.n	80077ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076f2:	4619      	mov	r1, r3
 80076f4:	6878      	ldr	r0, [r7, #4]
 80076f6:	f000 f897 	bl	8007828 <SetLineCoding>
 80076fa:	4603      	mov	r3, r0
 80076fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d104      	bne.n	800770e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2202      	movs	r2, #2
 8007708:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800770c:	e058      	b.n	80077c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800770e:	7bbb      	ldrb	r3, [r7, #14]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d055      	beq.n	80077c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2204      	movs	r2, #4
 8007718:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800771c:	e050      	b.n	80077c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	3340      	adds	r3, #64	@ 0x40
 8007722:	4619      	mov	r1, r3
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 f860 	bl	80077ea <GetLineCoding>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d126      	bne.n	8007782 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007746:	791b      	ldrb	r3, [r3, #4]
 8007748:	429a      	cmp	r2, r3
 800774a:	d13b      	bne.n	80077c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007756:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007758:	429a      	cmp	r2, r3
 800775a:	d133      	bne.n	80077c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007766:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007768:	429a      	cmp	r2, r3
 800776a:	d12b      	bne.n	80077c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007774:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007776:	429a      	cmp	r2, r3
 8007778:	d124      	bne.n	80077c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f958 	bl	8007a30 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007780:	e020      	b.n	80077c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007782:	7bbb      	ldrb	r3, [r7, #14]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d01d      	beq.n	80077c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	2204      	movs	r2, #4
 800778c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007790:	e018      	b.n	80077c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f867 	bl	8007866 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8da 	bl	8007952 <CDC_ProcessReception>
      break;
 800779e:	e014      	b.n	80077ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80077a0:	2100      	movs	r1, #0
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f001 f81a 	bl	80087dc <USBH_ClrFeature>
 80077a8:	4603      	mov	r3, r0
 80077aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80077ac:	7bbb      	ldrb	r3, [r7, #14]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d10a      	bne.n	80077c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	2200      	movs	r2, #0
 80077b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80077ba:	e005      	b.n	80077c8 <USBH_CDC_Process+0x120>

    default:
      break;
 80077bc:	bf00      	nop
 80077be:	e004      	b.n	80077ca <USBH_CDC_Process+0x122>
      break;
 80077c0:	bf00      	nop
 80077c2:	e002      	b.n	80077ca <USBH_CDC_Process+0x122>
      break;
 80077c4:	bf00      	nop
 80077c6:	e000      	b.n	80077ca <USBH_CDC_Process+0x122>
      break;
 80077c8:	bf00      	nop

  }

  return status;
 80077ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3710      	adds	r7, #16
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	370c      	adds	r7, #12
 80077e2:	46bd      	mov	sp, r7
 80077e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e8:	4770      	bx	lr

080077ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	22a1      	movs	r2, #161	@ 0xa1
 80077f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2221      	movs	r2, #33	@ 0x21
 80077fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2207      	movs	r2, #7
 8007810:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	2207      	movs	r2, #7
 8007816:	4619      	mov	r1, r3
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f001 fb14 	bl	8008e46 <USBH_CtlReq>
 800781e:	4603      	mov	r3, r0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2221      	movs	r2, #33	@ 0x21
 8007836:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2220      	movs	r2, #32
 800783c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2207      	movs	r2, #7
 800784e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	2207      	movs	r2, #7
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f001 faf5 	bl	8008e46 <USBH_CtlReq>
 800785c:	4603      	mov	r3, r0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}

08007866 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b086      	sub	sp, #24
 800786a:	af02      	add	r7, sp, #8
 800786c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007874:	69db      	ldr	r3, [r3, #28]
 8007876:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007878:	2300      	movs	r3, #0
 800787a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007882:	2b01      	cmp	r3, #1
 8007884:	d002      	beq.n	800788c <CDC_ProcessTransmission+0x26>
 8007886:	2b02      	cmp	r3, #2
 8007888:	d023      	beq.n	80078d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800788a:	e05e      	b.n	800794a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	8b12      	ldrh	r2, [r2, #24]
 8007894:	4293      	cmp	r3, r2
 8007896:	d90b      	bls.n	80078b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	69d9      	ldr	r1, [r3, #28]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8b1a      	ldrh	r2, [r3, #24]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	7b5b      	ldrb	r3, [r3, #13]
 80078a4:	2001      	movs	r0, #1
 80078a6:	9000      	str	r0, [sp, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f001 fcda 	bl	8009262 <USBH_BulkSendData>
 80078ae:	e00b      	b.n	80078c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80078b8:	b29a      	uxth	r2, r3
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	7b5b      	ldrb	r3, [r3, #13]
 80078be:	2001      	movs	r0, #1
 80078c0:	9000      	str	r0, [sp, #0]
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f001 fccd 	bl	8009262 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2202      	movs	r2, #2
 80078cc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078d0:	e03b      	b.n	800794a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	7b5b      	ldrb	r3, [r3, #13]
 80078d6:	4619      	mov	r1, r3
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f001 fff1 	bl	80098c0 <USBH_LL_GetURBState>
 80078de:	4603      	mov	r3, r0
 80078e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80078e2:	7afb      	ldrb	r3, [r7, #11]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d128      	bne.n	800793a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ec:	68fa      	ldr	r2, [r7, #12]
 80078ee:	8b12      	ldrh	r2, [r2, #24]
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d90e      	bls.n	8007912 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	8b12      	ldrh	r2, [r2, #24]
 80078fc:	1a9a      	subs	r2, r3, r2
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	8b12      	ldrh	r2, [r2, #24]
 800790a:	441a      	add	r2, r3
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	61da      	str	r2, [r3, #28]
 8007910:	e002      	b.n	8007918 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2200      	movs	r2, #0
 8007916:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2201      	movs	r2, #1
 8007924:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007928:	e00e      	b.n	8007948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f868 	bl	8007a08 <USBH_CDC_TransmitCallback>
      break;
 8007938:	e006      	b.n	8007948 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800793a:	7afb      	ldrb	r3, [r7, #11]
 800793c:	2b02      	cmp	r3, #2
 800793e:	d103      	bne.n	8007948 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007948:	bf00      	nop
  }
}
 800794a:	bf00      	nop
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b086      	sub	sp, #24
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007960:	69db      	ldr	r3, [r3, #28]
 8007962:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007964:	2300      	movs	r3, #0
 8007966:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800796e:	2b03      	cmp	r3, #3
 8007970:	d002      	beq.n	8007978 <CDC_ProcessReception+0x26>
 8007972:	2b04      	cmp	r3, #4
 8007974:	d00e      	beq.n	8007994 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007976:	e043      	b.n	8007a00 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	6a19      	ldr	r1, [r3, #32]
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	8b5a      	ldrh	r2, [r3, #26]
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	7b1b      	ldrb	r3, [r3, #12]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f001 fc91 	bl	80092ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2204      	movs	r2, #4
 800798e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007992:	e035      	b.n	8007a00 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007994:	697b      	ldr	r3, [r7, #20]
 8007996:	7b1b      	ldrb	r3, [r3, #12]
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f001 ff90 	bl	80098c0 <USBH_LL_GetURBState>
 80079a0:	4603      	mov	r3, r0
 80079a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80079a4:	7cfb      	ldrb	r3, [r7, #19]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d129      	bne.n	80079fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	7b1b      	ldrb	r3, [r3, #12]
 80079ae:	4619      	mov	r1, r3
 80079b0:	6878      	ldr	r0, [r7, #4]
 80079b2:	f001 fef3 	bl	800979c <USBH_LL_GetLastXferSize>
 80079b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079bc:	68fa      	ldr	r2, [r7, #12]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d016      	beq.n	80079f0 <CDC_ProcessReception+0x9e>
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	8b5b      	ldrh	r3, [r3, #26]
 80079c6:	461a      	mov	r2, r3
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d110      	bne.n	80079f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	1ad2      	subs	r2, r2, r3
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80079da:	697b      	ldr	r3, [r7, #20]
 80079dc:	6a1a      	ldr	r2, [r3, #32]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	441a      	add	r2, r3
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80079e6:	697b      	ldr	r3, [r7, #20]
 80079e8:	2203      	movs	r2, #3
 80079ea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80079ee:	e006      	b.n	80079fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f000 f80f 	bl	8007a1c <USBH_CDC_ReceiveCallback>
      break;
 80079fe:	bf00      	nop
  }
}
 8007a00:	bf00      	nop
 8007a02:	3718      	adds	r7, #24
 8007a04:	46bd      	mov	sp, r7
 8007a06:	bd80      	pop	{r7, pc}

08007a08 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b083      	sub	sp, #12
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a10:	bf00      	nop
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007a1c:	b480      	push	{r7}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a24:	bf00      	nop
 8007a26:	370c      	adds	r7, #12
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2e:	4770      	bx	lr

08007a30 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b083      	sub	sp, #12
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007a38:	bf00      	nop
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d101      	bne.n	8007a5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007a58:	2302      	movs	r3, #2
 8007a5a:	e029      	b.n	8007ab0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	79fa      	ldrb	r2, [r7, #7]
 8007a60:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2200      	movs	r2, #0
 8007a68:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f000 f81f 	bl	8007ab8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d003      	beq.n	8007aa8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007aa8:	68f8      	ldr	r0, [r7, #12]
 8007aaa:	f001 fdc3 	bl	8009634 <USBH_LL_Init>

  return USBH_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3710      	adds	r7, #16
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60fb      	str	r3, [r7, #12]
 8007ac8:	e009      	b.n	8007ade <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	33e0      	adds	r3, #224	@ 0xe0
 8007ad0:	009b      	lsls	r3, r3, #2
 8007ad2:	4413      	add	r3, r2
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3301      	adds	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b0f      	cmp	r3, #15
 8007ae2:	d9f2      	bls.n	8007aca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	e009      	b.n	8007afe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007aea:	687a      	ldr	r2, [r7, #4]
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	4413      	add	r3, r2
 8007af0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007af4:	2200      	movs	r2, #0
 8007af6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	3301      	adds	r3, #1
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b04:	d3f1      	bcc.n	8007aea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2240      	movs	r2, #64	@ 0x40
 8007b2a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	331c      	adds	r3, #28
 8007b56:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f002 f81d 	bl	8009b9c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f002 f814 	bl	8009b9c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007b7a:	2212      	movs	r2, #18
 8007b7c:	2100      	movs	r1, #0
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f002 f80c 	bl	8009b9c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b8a:	223e      	movs	r2, #62	@ 0x3e
 8007b8c:	2100      	movs	r1, #0
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f002 f804 	bl	8009b9c <memset>

  return USBH_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d016      	beq.n	8007be0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10e      	bne.n	8007bda <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007bc2:	1c59      	adds	r1, r3, #1
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007bca:	687a      	ldr	r2, [r7, #4]
 8007bcc:	33de      	adds	r3, #222	@ 0xde
 8007bce:	6839      	ldr	r1, [r7, #0]
 8007bd0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]
 8007bd8:	e004      	b.n	8007be4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007bda:	2302      	movs	r3, #2
 8007bdc:	73fb      	strb	r3, [r7, #15]
 8007bde:	e001      	b.n	8007be4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007be0:	2302      	movs	r3, #2
 8007be2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3714      	adds	r7, #20
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr

08007bf2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007bf2:	b480      	push	{r7}
 8007bf4:	b085      	sub	sp, #20
 8007bf6:	af00      	add	r7, sp, #0
 8007bf8:	6078      	str	r0, [r7, #4]
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007c08:	78fa      	ldrb	r2, [r7, #3]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d204      	bcs.n	8007c18 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	78fa      	ldrb	r2, [r7, #3]
 8007c12:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007c16:	e001      	b.n	8007c1c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr

08007c2a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007c2a:	b480      	push	{r7}
 8007c2c:	b087      	sub	sp, #28
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	6078      	str	r0, [r7, #4]
 8007c32:	4608      	mov	r0, r1
 8007c34:	4611      	mov	r1, r2
 8007c36:	461a      	mov	r2, r3
 8007c38:	4603      	mov	r3, r0
 8007c3a:	70fb      	strb	r3, [r7, #3]
 8007c3c:	460b      	mov	r3, r1
 8007c3e:	70bb      	strb	r3, [r7, #2]
 8007c40:	4613      	mov	r3, r2
 8007c42:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007c44:	2300      	movs	r3, #0
 8007c46:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c52:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c54:	e025      	b.n	8007ca2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	221a      	movs	r2, #26
 8007c5a:	fb02 f303 	mul.w	r3, r2, r3
 8007c5e:	3308      	adds	r3, #8
 8007c60:	68fa      	ldr	r2, [r7, #12]
 8007c62:	4413      	add	r3, r2
 8007c64:	3302      	adds	r3, #2
 8007c66:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	795b      	ldrb	r3, [r3, #5]
 8007c6c:	78fa      	ldrb	r2, [r7, #3]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d002      	beq.n	8007c78 <USBH_FindInterface+0x4e>
 8007c72:	78fb      	ldrb	r3, [r7, #3]
 8007c74:	2bff      	cmp	r3, #255	@ 0xff
 8007c76:	d111      	bne.n	8007c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007c7c:	78ba      	ldrb	r2, [r7, #2]
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d002      	beq.n	8007c88 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c82:	78bb      	ldrb	r3, [r7, #2]
 8007c84:	2bff      	cmp	r3, #255	@ 0xff
 8007c86:	d109      	bne.n	8007c9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c8c:	787a      	ldrb	r2, [r7, #1]
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	d002      	beq.n	8007c98 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c92:	787b      	ldrb	r3, [r7, #1]
 8007c94:	2bff      	cmp	r3, #255	@ 0xff
 8007c96:	d101      	bne.n	8007c9c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	e006      	b.n	8007caa <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d9d6      	bls.n	8007c56 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007ca8:	23ff      	movs	r3, #255	@ 0xff
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	371c      	adds	r7, #28
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb4:	4770      	bx	lr

08007cb6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007cb6:	b580      	push	{r7, lr}
 8007cb8:	b082      	sub	sp, #8
 8007cba:	af00      	add	r7, sp, #0
 8007cbc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f001 fcf4 	bl	80096ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007cc4:	2101      	movs	r1, #1
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fe0d 	bl	80098e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3708      	adds	r7, #8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
	...

08007cd8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b088      	sub	sp, #32
 8007cdc:	af04      	add	r7, sp, #16
 8007cde:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007cee:	b2db      	uxtb	r3, r3
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d102      	bne.n	8007cfa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2203      	movs	r2, #3
 8007cf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	2b0b      	cmp	r3, #11
 8007d02:	f200 81bb 	bhi.w	800807c <USBH_Process+0x3a4>
 8007d06:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <USBH_Process+0x34>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d3d 	.word	0x08007d3d
 8007d10:	08007d6f 	.word	0x08007d6f
 8007d14:	08007dd7 	.word	0x08007dd7
 8007d18:	08008017 	.word	0x08008017
 8007d1c:	0800807d 	.word	0x0800807d
 8007d20:	08007e77 	.word	0x08007e77
 8007d24:	08007fbd 	.word	0x08007fbd
 8007d28:	08007ead 	.word	0x08007ead
 8007d2c:	08007ecd 	.word	0x08007ecd
 8007d30:	08007eeb 	.word	0x08007eeb
 8007d34:	08007f2f 	.word	0x08007f2f
 8007d38:	08007fff 	.word	0x08007fff
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 819b 	beq.w	8008080 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007d50:	20c8      	movs	r0, #200	@ 0xc8
 8007d52:	f001 fe12 	bl	800997a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	f001 fd05 	bl	8009766 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d6c:	e188      	b.n	8008080 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d107      	bne.n	8007d88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007d86:	e18a      	b.n	800809e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d92:	d914      	bls.n	8007dbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d9a:	3301      	adds	r3, #1
 8007d9c:	b2da      	uxtb	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007daa:	2b03      	cmp	r3, #3
 8007dac:	d903      	bls.n	8007db6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	220d      	movs	r2, #13
 8007db2:	701a      	strb	r2, [r3, #0]
      break;
 8007db4:	e173      	b.n	800809e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2200      	movs	r2, #0
 8007dba:	701a      	strb	r2, [r3, #0]
      break;
 8007dbc:	e16f      	b.n	800809e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007dc4:	f103 020a 	add.w	r2, r3, #10
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007dce:	200a      	movs	r0, #10
 8007dd0:	f001 fdd3 	bl	800997a <USBH_Delay>
      break;
 8007dd4:	e163      	b.n	800809e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007de6:	2104      	movs	r1, #4
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007dec:	2064      	movs	r0, #100	@ 0x64
 8007dee:	f001 fdc4 	bl	800997a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f001 fc90 	bl	8009718 <USBH_LL_GetSpeed>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2205      	movs	r2, #5
 8007e06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007e08:	2100      	movs	r1, #0
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f001 fa9b 	bl	8009346 <USBH_AllocPipe>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007e18:	2180      	movs	r1, #128	@ 0x80
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fa93 	bl	8009346 <USBH_AllocPipe>
 8007e20:	4603      	mov	r3, r0
 8007e22:	461a      	mov	r2, r3
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	7919      	ldrb	r1, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007e3c:	9202      	str	r2, [sp, #8]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	9201      	str	r2, [sp, #4]
 8007e42:	9300      	str	r3, [sp, #0]
 8007e44:	4603      	mov	r3, r0
 8007e46:	2280      	movs	r2, #128	@ 0x80
 8007e48:	6878      	ldr	r0, [r7, #4]
 8007e4a:	f001 fa4d 	bl	80092e8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	7959      	ldrb	r1, [r3, #5]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007e5e:	687a      	ldr	r2, [r7, #4]
 8007e60:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007e62:	9202      	str	r2, [sp, #8]
 8007e64:	2200      	movs	r2, #0
 8007e66:	9201      	str	r2, [sp, #4]
 8007e68:	9300      	str	r3, [sp, #0]
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	6878      	ldr	r0, [r7, #4]
 8007e70:	f001 fa3a 	bl	80092e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e74:	e113      	b.n	800809e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 f916 	bl	80080a8 <USBH_HandleEnum>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007e80:	7bbb      	ldrb	r3, [r7, #14]
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	f040 80fd 	bne.w	8008084 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e98:	2b01      	cmp	r3, #1
 8007e9a:	d103      	bne.n	8007ea4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2208      	movs	r2, #8
 8007ea0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ea2:	e0ef      	b.n	8008084 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2207      	movs	r2, #7
 8007ea8:	701a      	strb	r2, [r3, #0]
      break;
 8007eaa:	e0eb      	b.n	8008084 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 80e8 	beq.w	8008088 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2208      	movs	r2, #8
 8007ec8:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007eca:	e0dd      	b.n	8008088 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 fc3a 	bl	800874e <USBH_SetCfg>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	f040 80d5 	bne.w	800808c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2209      	movs	r2, #9
 8007ee6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007ee8:	e0d0      	b.n	800808c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d016      	beq.n	8007f26 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ef8:	2101      	movs	r1, #1
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 fc4a 	bl	8008794 <USBH_SetFeature>
 8007f00:	4603      	mov	r3, r0
 8007f02:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f04:	7bbb      	ldrb	r3, [r7, #14]
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d103      	bne.n	8007f14 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	220a      	movs	r2, #10
 8007f10:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f12:	e0bd      	b.n	8008090 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007f14:	7bbb      	ldrb	r3, [r7, #14]
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	2b03      	cmp	r3, #3
 8007f1a:	f040 80b9 	bne.w	8008090 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220a      	movs	r2, #10
 8007f22:	701a      	strb	r2, [r3, #0]
      break;
 8007f24:	e0b4      	b.n	8008090 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	220a      	movs	r2, #10
 8007f2a:	701a      	strb	r2, [r3, #0]
      break;
 8007f2c:	e0b0      	b.n	8008090 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	f000 80ad 	beq.w	8008094 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f42:	2300      	movs	r3, #0
 8007f44:	73fb      	strb	r3, [r7, #15]
 8007f46:	e016      	b.n	8007f76 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007f48:	7bfa      	ldrb	r2, [r7, #15]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	32de      	adds	r2, #222	@ 0xde
 8007f4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f52:	791a      	ldrb	r2, [r3, #4]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007f5a:	429a      	cmp	r2, r3
 8007f5c:	d108      	bne.n	8007f70 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007f5e:	7bfa      	ldrb	r2, [r7, #15]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	32de      	adds	r2, #222	@ 0xde
 8007f64:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007f6e:	e005      	b.n	8007f7c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	3301      	adds	r3, #1
 8007f74:	73fb      	strb	r3, [r7, #15]
 8007f76:	7bfb      	ldrb	r3, [r7, #15]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0e5      	beq.n	8007f48 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d016      	beq.n	8007fb4 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	4798      	blx	r3
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d109      	bne.n	8007fac <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2206      	movs	r2, #6
 8007f9c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fa4:	2103      	movs	r1, #3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007faa:	e073      	b.n	8008094 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	220d      	movs	r2, #13
 8007fb0:	701a      	strb	r2, [r3, #0]
      break;
 8007fb2:	e06f      	b.n	8008094 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	220d      	movs	r2, #13
 8007fb8:	701a      	strb	r2, [r3, #0]
      break;
 8007fba:	e06b      	b.n	8008094 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d017      	beq.n	8007ff6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fcc:	691b      	ldr	r3, [r3, #16]
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	4798      	blx	r3
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007fd6:	7bbb      	ldrb	r3, [r7, #14]
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d103      	bne.n	8007fe6 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	220b      	movs	r2, #11
 8007fe2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fe4:	e058      	b.n	8008098 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d154      	bne.n	8008098 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	220d      	movs	r2, #13
 8007ff2:	701a      	strb	r2, [r3, #0]
      break;
 8007ff4:	e050      	b.n	8008098 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	220d      	movs	r2, #13
 8007ffa:	701a      	strb	r2, [r3, #0]
      break;
 8007ffc:	e04c      	b.n	8008098 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008004:	2b00      	cmp	r3, #0
 8008006:	d049      	beq.n	800809c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	4798      	blx	r3
      }
      break;
 8008014:	e042      	b.n	800809c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7ff fd4a 	bl	8007ab8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d009      	beq.n	8008042 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008052:	2105      	movs	r1, #5
 8008054:	6878      	ldr	r0, [r7, #4]
 8008056:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800805e:	b2db      	uxtb	r3, r3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d107      	bne.n	8008074 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7ff fe22 	bl	8007cb6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008072:	e014      	b.n	800809e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f001 fb19 	bl	80096ac <USBH_LL_Start>
      break;
 800807a:	e010      	b.n	800809e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800807c:	bf00      	nop
 800807e:	e00e      	b.n	800809e <USBH_Process+0x3c6>
      break;
 8008080:	bf00      	nop
 8008082:	e00c      	b.n	800809e <USBH_Process+0x3c6>
      break;
 8008084:	bf00      	nop
 8008086:	e00a      	b.n	800809e <USBH_Process+0x3c6>
    break;
 8008088:	bf00      	nop
 800808a:	e008      	b.n	800809e <USBH_Process+0x3c6>
      break;
 800808c:	bf00      	nop
 800808e:	e006      	b.n	800809e <USBH_Process+0x3c6>
      break;
 8008090:	bf00      	nop
 8008092:	e004      	b.n	800809e <USBH_Process+0x3c6>
      break;
 8008094:	bf00      	nop
 8008096:	e002      	b.n	800809e <USBH_Process+0x3c6>
      break;
 8008098:	bf00      	nop
 800809a:	e000      	b.n	800809e <USBH_Process+0x3c6>
      break;
 800809c:	bf00      	nop
  }
  return USBH_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b088      	sub	sp, #32
 80080ac:	af04      	add	r7, sp, #16
 80080ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80080b0:	2301      	movs	r3, #1
 80080b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	785b      	ldrb	r3, [r3, #1]
 80080bc:	2b07      	cmp	r3, #7
 80080be:	f200 81bd 	bhi.w	800843c <USBH_HandleEnum+0x394>
 80080c2:	a201      	add	r2, pc, #4	@ (adr r2, 80080c8 <USBH_HandleEnum+0x20>)
 80080c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c8:	080080e9 	.word	0x080080e9
 80080cc:	080081a3 	.word	0x080081a3
 80080d0:	0800820d 	.word	0x0800820d
 80080d4:	08008297 	.word	0x08008297
 80080d8:	08008301 	.word	0x08008301
 80080dc:	08008371 	.word	0x08008371
 80080e0:	080083b7 	.word	0x080083b7
 80080e4:	080083fd 	.word	0x080083fd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80080e8:	2108      	movs	r1, #8
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 fa4c 	bl	8008588 <USBH_Get_DevDesc>
 80080f0:	4603      	mov	r3, r0
 80080f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80080f4:	7bbb      	ldrb	r3, [r7, #14]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d12e      	bne.n	8008158 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	7919      	ldrb	r1, [r3, #4]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800811e:	9202      	str	r2, [sp, #8]
 8008120:	2200      	movs	r2, #0
 8008122:	9201      	str	r2, [sp, #4]
 8008124:	9300      	str	r3, [sp, #0]
 8008126:	4603      	mov	r3, r0
 8008128:	2280      	movs	r2, #128	@ 0x80
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f001 f8dc 	bl	80092e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7959      	ldrb	r1, [r3, #5]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008140:	687a      	ldr	r2, [r7, #4]
 8008142:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008144:	9202      	str	r2, [sp, #8]
 8008146:	2200      	movs	r2, #0
 8008148:	9201      	str	r2, [sp, #4]
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	4603      	mov	r3, r0
 800814e:	2200      	movs	r2, #0
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f001 f8c9 	bl	80092e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008156:	e173      	b.n	8008440 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008158:	7bbb      	ldrb	r3, [r7, #14]
 800815a:	2b03      	cmp	r3, #3
 800815c:	f040 8170 	bne.w	8008440 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008166:	3301      	adds	r3, #1
 8008168:	b2da      	uxtb	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008176:	2b03      	cmp	r3, #3
 8008178:	d903      	bls.n	8008182 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	220d      	movs	r2, #13
 800817e:	701a      	strb	r2, [r3, #0]
      break;
 8008180:	e15e      	b.n	8008440 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	795b      	ldrb	r3, [r3, #5]
 8008186:	4619      	mov	r1, r3
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f8fd 	bl	8009388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	791b      	ldrb	r3, [r3, #4]
 8008192:	4619      	mov	r1, r3
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f001 f8f7 	bl	8009388 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	701a      	strb	r2, [r3, #0]
      break;
 80081a0:	e14e      	b.n	8008440 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80081a2:	2112      	movs	r1, #18
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 f9ef 	bl	8008588 <USBH_Get_DevDesc>
 80081aa:	4603      	mov	r3, r0
 80081ac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081ae:	7bbb      	ldrb	r3, [r7, #14]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d103      	bne.n	80081bc <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2202      	movs	r2, #2
 80081b8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80081ba:	e143      	b.n	8008444 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081bc:	7bbb      	ldrb	r3, [r7, #14]
 80081be:	2b03      	cmp	r3, #3
 80081c0:	f040 8140 	bne.w	8008444 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081ca:	3301      	adds	r3, #1
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d903      	bls.n	80081e6 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	220d      	movs	r2, #13
 80081e2:	701a      	strb	r2, [r3, #0]
      break;
 80081e4:	e12e      	b.n	8008444 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	795b      	ldrb	r3, [r3, #5]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f8cb 	bl	8009388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	791b      	ldrb	r3, [r3, #4]
 80081f6:	4619      	mov	r1, r3
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 f8c5 	bl	8009388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2200      	movs	r2, #0
 8008208:	701a      	strb	r2, [r3, #0]
      break;
 800820a:	e11b      	b.n	8008444 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800820c:	2101      	movs	r1, #1
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 fa79 	bl	8008706 <USBH_SetAddress>
 8008214:	4603      	mov	r3, r0
 8008216:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008218:	7bbb      	ldrb	r3, [r7, #14]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d130      	bne.n	8008280 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800821e:	2002      	movs	r0, #2
 8008220:	f001 fbab 	bl	800997a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2203      	movs	r2, #3
 8008230:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	7919      	ldrb	r1, [r3, #4]
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008242:	687a      	ldr	r2, [r7, #4]
 8008244:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008246:	9202      	str	r2, [sp, #8]
 8008248:	2200      	movs	r2, #0
 800824a:	9201      	str	r2, [sp, #4]
 800824c:	9300      	str	r3, [sp, #0]
 800824e:	4603      	mov	r3, r0
 8008250:	2280      	movs	r2, #128	@ 0x80
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f001 f848 	bl	80092e8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	7959      	ldrb	r1, [r3, #5]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008268:	687a      	ldr	r2, [r7, #4]
 800826a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800826c:	9202      	str	r2, [sp, #8]
 800826e:	2200      	movs	r2, #0
 8008270:	9201      	str	r2, [sp, #4]
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	4603      	mov	r3, r0
 8008276:	2200      	movs	r2, #0
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 f835 	bl	80092e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800827e:	e0e3      	b.n	8008448 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b03      	cmp	r3, #3
 8008284:	f040 80e0 	bne.w	8008448 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	220d      	movs	r2, #13
 800828c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	705a      	strb	r2, [r3, #1]
      break;
 8008294:	e0d8      	b.n	8008448 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008296:	2109      	movs	r1, #9
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f9a1 	bl	80085e0 <USBH_Get_CfgDesc>
 800829e:	4603      	mov	r3, r0
 80082a0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082a2:	7bbb      	ldrb	r3, [r7, #14]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d103      	bne.n	80082b0 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2204      	movs	r2, #4
 80082ac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082ae:	e0cd      	b.n	800844c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082b0:	7bbb      	ldrb	r3, [r7, #14]
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	f040 80ca 	bne.w	800844c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082be:	3301      	adds	r3, #1
 80082c0:	b2da      	uxtb	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ce:	2b03      	cmp	r3, #3
 80082d0:	d903      	bls.n	80082da <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	220d      	movs	r2, #13
 80082d6:	701a      	strb	r2, [r3, #0]
      break;
 80082d8:	e0b8      	b.n	800844c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	795b      	ldrb	r3, [r3, #5]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 f851 	bl	8009388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	791b      	ldrb	r3, [r3, #4]
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f84b 	bl	8009388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	701a      	strb	r2, [r3, #0]
      break;
 80082fe:	e0a5      	b.n	800844c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008306:	4619      	mov	r1, r3
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 f969 	bl	80085e0 <USBH_Get_CfgDesc>
 800830e:	4603      	mov	r3, r0
 8008310:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008312:	7bbb      	ldrb	r3, [r7, #14]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d103      	bne.n	8008320 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2205      	movs	r2, #5
 800831c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800831e:	e097      	b.n	8008450 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b03      	cmp	r3, #3
 8008324:	f040 8094 	bne.w	8008450 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800832e:	3301      	adds	r3, #1
 8008330:	b2da      	uxtb	r2, r3
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800833e:	2b03      	cmp	r3, #3
 8008340:	d903      	bls.n	800834a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	220d      	movs	r2, #13
 8008346:	701a      	strb	r2, [r3, #0]
      break;
 8008348:	e082      	b.n	8008450 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	795b      	ldrb	r3, [r3, #5]
 800834e:	4619      	mov	r1, r3
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f819 	bl	8009388 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	791b      	ldrb	r3, [r3, #4]
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f001 f813 	bl	8009388 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2200      	movs	r2, #0
 8008366:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
      break;
 800836e:	e06f      	b.n	8008450 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008376:	2b00      	cmp	r3, #0
 8008378:	d019      	beq.n	80083ae <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008386:	23ff      	movs	r3, #255	@ 0xff
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f953 	bl	8008634 <USBH_Get_StringDesc>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008392:	7bbb      	ldrb	r3, [r7, #14]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2206      	movs	r2, #6
 800839c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800839e:	e059      	b.n	8008454 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	2b03      	cmp	r3, #3
 80083a4:	d156      	bne.n	8008454 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	2206      	movs	r2, #6
 80083aa:	705a      	strb	r2, [r3, #1]
      break;
 80083ac:	e052      	b.n	8008454 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2206      	movs	r2, #6
 80083b2:	705a      	strb	r2, [r3, #1]
      break;
 80083b4:	e04e      	b.n	8008454 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d019      	beq.n	80083f4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80083cc:	23ff      	movs	r3, #255	@ 0xff
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f930 	bl	8008634 <USBH_Get_StringDesc>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80083d8:	7bbb      	ldrb	r3, [r7, #14]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2207      	movs	r2, #7
 80083e2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80083e4:	e038      	b.n	8008458 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083e6:	7bbb      	ldrb	r3, [r7, #14]
 80083e8:	2b03      	cmp	r3, #3
 80083ea:	d135      	bne.n	8008458 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2207      	movs	r2, #7
 80083f0:	705a      	strb	r2, [r3, #1]
      break;
 80083f2:	e031      	b.n	8008458 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2207      	movs	r2, #7
 80083f8:	705a      	strb	r2, [r3, #1]
      break;
 80083fa:	e02d      	b.n	8008458 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008402:	2b00      	cmp	r3, #0
 8008404:	d017      	beq.n	8008436 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008412:	23ff      	movs	r3, #255	@ 0xff
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f90d 	bl	8008634 <USBH_Get_StringDesc>
 800841a:	4603      	mov	r3, r0
 800841c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800841e:	7bbb      	ldrb	r3, [r7, #14]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d102      	bne.n	800842a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008424:	2300      	movs	r3, #0
 8008426:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008428:	e018      	b.n	800845c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800842a:	7bbb      	ldrb	r3, [r7, #14]
 800842c:	2b03      	cmp	r3, #3
 800842e:	d115      	bne.n	800845c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73fb      	strb	r3, [r7, #15]
      break;
 8008434:	e012      	b.n	800845c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]
      break;
 800843a:	e00f      	b.n	800845c <USBH_HandleEnum+0x3b4>

    default:
      break;
 800843c:	bf00      	nop
 800843e:	e00e      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008440:	bf00      	nop
 8008442:	e00c      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008444:	bf00      	nop
 8008446:	e00a      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008448:	bf00      	nop
 800844a:	e008      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 800844c:	bf00      	nop
 800844e:	e006      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008450:	bf00      	nop
 8008452:	e004      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008454:	bf00      	nop
 8008456:	e002      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 8008458:	bf00      	nop
 800845a:	e000      	b.n	800845e <USBH_HandleEnum+0x3b6>
      break;
 800845c:	bf00      	nop
  }
  return Status;
 800845e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3710      	adds	r7, #16
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008468:	b480      	push	{r7}
 800846a:	b083      	sub	sp, #12
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
 8008470:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	683a      	ldr	r2, [r7, #0]
 8008476:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800847a:	bf00      	nop
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b082      	sub	sp, #8
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008494:	1c5a      	adds	r2, r3, #1
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800849c:	6878      	ldr	r0, [r7, #4]
 800849e:	f000 f804 	bl	80084aa <USBH_HandleSof>
}
 80084a2:	bf00      	nop
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}

080084aa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80084aa:	b580      	push	{r7, lr}
 80084ac:	b082      	sub	sp, #8
 80084ae:	af00      	add	r7, sp, #0
 80084b0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	781b      	ldrb	r3, [r3, #0]
 80084b6:	b2db      	uxtb	r3, r3
 80084b8:	2b0b      	cmp	r3, #11
 80084ba:	d10a      	bne.n	80084d2 <USBH_HandleSof+0x28>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d005      	beq.n	80084d2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084cc:	699b      	ldr	r3, [r3, #24]
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
  }
}
 80084d2:	bf00      	nop
 80084d4:	3708      	adds	r7, #8
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80084da:	b480      	push	{r7}
 80084dc:	b083      	sub	sp, #12
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80084ea:	bf00      	nop
}
 80084ec:	370c      	adds	r7, #12
 80084ee:	46bd      	mov	sp, r7
 80084f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f4:	4770      	bx	lr

080084f6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80084f6:	b480      	push	{r7}
 80084f8:	b083      	sub	sp, #12
 80084fa:	af00      	add	r7, sp, #0
 80084fc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008506:	bf00      	nop
}
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008512:	b480      	push	{r7}
 8008514:	b083      	sub	sp, #12
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr

08008540 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2200      	movs	r2, #0
 8008554:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f001 f8be 	bl	80096e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	791b      	ldrb	r3, [r3, #4]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f000 ff0b 	bl	8009388 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	795b      	ldrb	r3, [r3, #5]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f000 ff05 	bl	8009388 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800857e:	2300      	movs	r3, #0
}
 8008580:	4618      	mov	r0, r3
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}

08008588 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af02      	add	r7, sp, #8
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	460b      	mov	r3, r1
 8008592:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008594:	887b      	ldrh	r3, [r7, #2]
 8008596:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800859a:	d901      	bls.n	80085a0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800859c:	2303      	movs	r3, #3
 800859e:	e01b      	b.n	80085d8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085a6:	887b      	ldrh	r3, [r7, #2]
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	4613      	mov	r3, r2
 80085ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80085b0:	2100      	movs	r1, #0
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f872 	bl	800869c <USBH_GetDescriptor>
 80085b8:	4603      	mov	r3, r0
 80085ba:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d109      	bne.n	80085d6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80085c8:	887a      	ldrh	r2, [r7, #2]
 80085ca:	4619      	mov	r1, r3
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 f929 	bl	8008824 <USBH_ParseDevDesc>
 80085d2:	4603      	mov	r3, r0
 80085d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af02      	add	r7, sp, #8
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	460b      	mov	r3, r1
 80085ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	331c      	adds	r3, #28
 80085f0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80085f8:	d901      	bls.n	80085fe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e016      	b.n	800862c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80085fe:	887b      	ldrh	r3, [r7, #2]
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008608:	2100      	movs	r1, #0
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f846 	bl	800869c <USBH_GetDescriptor>
 8008610:	4603      	mov	r3, r0
 8008612:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008614:	7bfb      	ldrb	r3, [r7, #15]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d107      	bne.n	800862a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800861a:	887b      	ldrh	r3, [r7, #2]
 800861c:	461a      	mov	r2, r3
 800861e:	68b9      	ldr	r1, [r7, #8]
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f9af 	bl	8008984 <USBH_ParseCfgDesc>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800862a:	7bfb      	ldrb	r3, [r7, #15]
}
 800862c:	4618      	mov	r0, r3
 800862e:	3710      	adds	r7, #16
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}

08008634 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b088      	sub	sp, #32
 8008638:	af02      	add	r7, sp, #8
 800863a:	60f8      	str	r0, [r7, #12]
 800863c:	607a      	str	r2, [r7, #4]
 800863e:	461a      	mov	r2, r3
 8008640:	460b      	mov	r3, r1
 8008642:	72fb      	strb	r3, [r7, #11]
 8008644:	4613      	mov	r3, r2
 8008646:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008648:	893b      	ldrh	r3, [r7, #8]
 800864a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800864e:	d802      	bhi.n	8008656 <USBH_Get_StringDesc+0x22>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d101      	bne.n	800865a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008656:	2303      	movs	r3, #3
 8008658:	e01c      	b.n	8008694 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	b29b      	uxth	r3, r3
 800865e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008662:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800866a:	893b      	ldrh	r3, [r7, #8]
 800866c:	9300      	str	r3, [sp, #0]
 800866e:	460b      	mov	r3, r1
 8008670:	2100      	movs	r1, #0
 8008672:	68f8      	ldr	r0, [r7, #12]
 8008674:	f000 f812 	bl	800869c <USBH_GetDescriptor>
 8008678:	4603      	mov	r3, r0
 800867a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800867c:	7dfb      	ldrb	r3, [r7, #23]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d107      	bne.n	8008692 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008688:	893a      	ldrh	r2, [r7, #8]
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4618      	mov	r0, r3
 800868e:	f000 fb8d 	bl	8008dac <USBH_ParseStringDesc>
  }

  return status;
 8008692:	7dfb      	ldrb	r3, [r7, #23]
}
 8008694:	4618      	mov	r0, r3
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b084      	sub	sp, #16
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	60f8      	str	r0, [r7, #12]
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	72fb      	strb	r3, [r7, #11]
 80086aa:	4613      	mov	r3, r2
 80086ac:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	789b      	ldrb	r3, [r3, #2]
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	d11c      	bne.n	80086f0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80086b6:	7afb      	ldrb	r3, [r7, #11]
 80086b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086bc:	b2da      	uxtb	r2, r3
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2206      	movs	r2, #6
 80086c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	893a      	ldrh	r2, [r7, #8]
 80086cc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80086ce:	893b      	ldrh	r3, [r7, #8]
 80086d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80086d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80086d8:	d104      	bne.n	80086e4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f240 4209 	movw	r2, #1033	@ 0x409
 80086e0:	829a      	strh	r2, [r3, #20]
 80086e2:	e002      	b.n	80086ea <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	8b3a      	ldrh	r2, [r7, #24]
 80086ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80086f0:	8b3b      	ldrh	r3, [r7, #24]
 80086f2:	461a      	mov	r2, r3
 80086f4:	6879      	ldr	r1, [r7, #4]
 80086f6:	68f8      	ldr	r0, [r7, #12]
 80086f8:	f000 fba5 	bl	8008e46 <USBH_CtlReq>
 80086fc:	4603      	mov	r3, r0
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}

08008706 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008706:	b580      	push	{r7, lr}
 8008708:	b082      	sub	sp, #8
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	789b      	ldrb	r3, [r3, #2]
 8008716:	2b01      	cmp	r3, #1
 8008718:	d10f      	bne.n	800873a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2205      	movs	r2, #5
 8008724:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008726:	78fb      	ldrb	r3, [r7, #3]
 8008728:	b29a      	uxth	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800873a:	2200      	movs	r2, #0
 800873c:	2100      	movs	r1, #0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fb81 	bl	8008e46 <USBH_CtlReq>
 8008744:	4603      	mov	r3, r0
}
 8008746:	4618      	mov	r0, r3
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b082      	sub	sp, #8
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
 8008756:	460b      	mov	r3, r1
 8008758:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	789b      	ldrb	r3, [r3, #2]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10e      	bne.n	8008780 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2209      	movs	r2, #9
 800876c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	887a      	ldrh	r2, [r7, #2]
 8008772:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008780:	2200      	movs	r2, #0
 8008782:	2100      	movs	r1, #0
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 fb5e 	bl	8008e46 <USBH_CtlReq>
 800878a:	4603      	mov	r3, r0
}
 800878c:	4618      	mov	r0, r3
 800878e:	3708      	adds	r7, #8
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
 800879c:	460b      	mov	r3, r1
 800879e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	789b      	ldrb	r3, [r3, #2]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d10f      	bne.n	80087c8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2203      	movs	r2, #3
 80087b2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 fb3a 	bl	8008e46 <USBH_CtlReq>
 80087d2:	4603      	mov	r3, r0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	460b      	mov	r3, r1
 80087e6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	789b      	ldrb	r3, [r3, #2]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d10f      	bne.n	8008810 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2201      	movs	r2, #1
 80087fa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2200      	movs	r2, #0
 8008800:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008802:	78fb      	ldrb	r3, [r7, #3]
 8008804:	b29a      	uxth	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2200      	movs	r2, #0
 800880e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008810:	2200      	movs	r2, #0
 8008812:	2100      	movs	r1, #0
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fb16 	bl	8008e46 <USBH_CtlReq>
 800881a:	4603      	mov	r3, r0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008824:	b480      	push	{r7}
 8008826:	b087      	sub	sp, #28
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	4613      	mov	r3, r2
 8008830:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008838:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800883a:	2300      	movs	r3, #0
 800883c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008844:	2302      	movs	r3, #2
 8008846:	e094      	b.n	8008972 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	781a      	ldrb	r2, [r3, #0]
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	785a      	ldrb	r2, [r3, #1]
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	3302      	adds	r3, #2
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	461a      	mov	r2, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	3303      	adds	r3, #3
 8008864:	781b      	ldrb	r3, [r3, #0]
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	b29b      	uxth	r3, r3
 800886a:	4313      	orrs	r3, r2
 800886c:	b29a      	uxth	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	791a      	ldrb	r2, [r3, #4]
 8008876:	693b      	ldr	r3, [r7, #16]
 8008878:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	795a      	ldrb	r2, [r3, #5]
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	799a      	ldrb	r2, [r3, #6]
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	79da      	ldrb	r2, [r3, #7]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008898:	2b00      	cmp	r3, #0
 800889a:	d004      	beq.n	80088a6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80088a2:	2b01      	cmp	r3, #1
 80088a4:	d11b      	bne.n	80088de <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	79db      	ldrb	r3, [r3, #7]
 80088aa:	2b20      	cmp	r3, #32
 80088ac:	dc0f      	bgt.n	80088ce <USBH_ParseDevDesc+0xaa>
 80088ae:	2b08      	cmp	r3, #8
 80088b0:	db0f      	blt.n	80088d2 <USBH_ParseDevDesc+0xae>
 80088b2:	3b08      	subs	r3, #8
 80088b4:	4a32      	ldr	r2, [pc, #200]	@ (8008980 <USBH_ParseDevDesc+0x15c>)
 80088b6:	fa22 f303 	lsr.w	r3, r2, r3
 80088ba:	f003 0301 	and.w	r3, r3, #1
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bf14      	ite	ne
 80088c2:	2301      	movne	r3, #1
 80088c4:	2300      	moveq	r3, #0
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d106      	bne.n	80088da <USBH_ParseDevDesc+0xb6>
 80088cc:	e001      	b.n	80088d2 <USBH_ParseDevDesc+0xae>
 80088ce:	2b40      	cmp	r3, #64	@ 0x40
 80088d0:	d003      	beq.n	80088da <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	2208      	movs	r2, #8
 80088d6:	71da      	strb	r2, [r3, #7]
        break;
 80088d8:	e000      	b.n	80088dc <USBH_ParseDevDesc+0xb8>
        break;
 80088da:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80088dc:	e00e      	b.n	80088fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088e4:	2b02      	cmp	r3, #2
 80088e6:	d107      	bne.n	80088f8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	79db      	ldrb	r3, [r3, #7]
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d005      	beq.n	80088fc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	2208      	movs	r2, #8
 80088f4:	71da      	strb	r2, [r3, #7]
 80088f6:	e001      	b.n	80088fc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80088f8:	2303      	movs	r3, #3
 80088fa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	2b08      	cmp	r3, #8
 8008900:	d936      	bls.n	8008970 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	3308      	adds	r3, #8
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	461a      	mov	r2, r3
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	3309      	adds	r3, #9
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	021b      	lsls	r3, r3, #8
 8008912:	b29b      	uxth	r3, r3
 8008914:	4313      	orrs	r3, r2
 8008916:	b29a      	uxth	r2, r3
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	330a      	adds	r3, #10
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	330b      	adds	r3, #11
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	021b      	lsls	r3, r3, #8
 800892c:	b29b      	uxth	r3, r3
 800892e:	4313      	orrs	r3, r2
 8008930:	b29a      	uxth	r2, r3
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	330c      	adds	r3, #12
 800893a:	781b      	ldrb	r3, [r3, #0]
 800893c:	461a      	mov	r2, r3
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	330d      	adds	r3, #13
 8008942:	781b      	ldrb	r3, [r3, #0]
 8008944:	021b      	lsls	r3, r3, #8
 8008946:	b29b      	uxth	r3, r3
 8008948:	4313      	orrs	r3, r2
 800894a:	b29a      	uxth	r2, r3
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	7b9a      	ldrb	r2, [r3, #14]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	7bda      	ldrb	r2, [r3, #15]
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	7c1a      	ldrb	r2, [r3, #16]
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	7c5a      	ldrb	r2, [r3, #17]
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008970:	7dfb      	ldrb	r3, [r7, #23]
}
 8008972:	4618      	mov	r0, r3
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	01000101 	.word	0x01000101

08008984 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b08c      	sub	sp, #48	@ 0x30
 8008988:	af00      	add	r7, sp, #0
 800898a:	60f8      	str	r0, [r7, #12]
 800898c:	60b9      	str	r1, [r7, #8]
 800898e:	4613      	mov	r3, r2
 8008990:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008998:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800899a:	2300      	movs	r3, #0
 800899c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80089a0:	2300      	movs	r3, #0
 80089a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80089a6:	2300      	movs	r3, #0
 80089a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80089b2:	2302      	movs	r3, #2
 80089b4:	e0da      	b.n	8008b6c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80089ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	2b09      	cmp	r3, #9
 80089c0:	d002      	beq.n	80089c8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80089c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c4:	2209      	movs	r2, #9
 80089c6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	781a      	ldrb	r2, [r3, #0]
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	785a      	ldrb	r2, [r3, #1]
 80089d4:	6a3b      	ldr	r3, [r7, #32]
 80089d6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	3302      	adds	r3, #2
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	461a      	mov	r2, r3
 80089e0:	68bb      	ldr	r3, [r7, #8]
 80089e2:	3303      	adds	r3, #3
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	021b      	lsls	r3, r3, #8
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	4313      	orrs	r3, r2
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80089f2:	bf28      	it	cs
 80089f4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80089f8:	b29a      	uxth	r2, r3
 80089fa:	6a3b      	ldr	r3, [r7, #32]
 80089fc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80089fe:	68bb      	ldr	r3, [r7, #8]
 8008a00:	791a      	ldrb	r2, [r3, #4]
 8008a02:	6a3b      	ldr	r3, [r7, #32]
 8008a04:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	795a      	ldrb	r2, [r3, #5]
 8008a0a:	6a3b      	ldr	r3, [r7, #32]
 8008a0c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	799a      	ldrb	r2, [r3, #6]
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	79da      	ldrb	r2, [r3, #7]
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	7a1a      	ldrb	r2, [r3, #8]
 8008a22:	6a3b      	ldr	r3, [r7, #32]
 8008a24:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008a26:	88fb      	ldrh	r3, [r7, #6]
 8008a28:	2b09      	cmp	r3, #9
 8008a2a:	f240 809d 	bls.w	8008b68 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008a2e:	2309      	movs	r3, #9
 8008a30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008a36:	e081      	b.n	8008b3c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a38:	f107 0316 	add.w	r3, r7, #22
 8008a3c:	4619      	mov	r1, r3
 8008a3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a40:	f000 f9e7 	bl	8008e12 <USBH_GetNextDesc>
 8008a44:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a48:	785b      	ldrb	r3, [r3, #1]
 8008a4a:	2b04      	cmp	r3, #4
 8008a4c:	d176      	bne.n	8008b3c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d002      	beq.n	8008a5c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a58:	2209      	movs	r2, #9
 8008a5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a60:	221a      	movs	r2, #26
 8008a62:	fb02 f303 	mul.w	r3, r2, r3
 8008a66:	3308      	adds	r3, #8
 8008a68:	6a3a      	ldr	r2, [r7, #32]
 8008a6a:	4413      	add	r3, r2
 8008a6c:	3302      	adds	r3, #2
 8008a6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008a70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a72:	69f8      	ldr	r0, [r7, #28]
 8008a74:	f000 f87e 	bl	8008b74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a82:	e043      	b.n	8008b0c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008a84:	f107 0316 	add.w	r3, r7, #22
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a8c:	f000 f9c1 	bl	8008e12 <USBH_GetNextDesc>
 8008a90:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b05      	cmp	r3, #5
 8008a98:	d138      	bne.n	8008b0c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	795b      	ldrb	r3, [r3, #5]
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d113      	bne.n	8008aca <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008aa2:	69fb      	ldr	r3, [r7, #28]
 8008aa4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008aa6:	2b02      	cmp	r3, #2
 8008aa8:	d003      	beq.n	8008ab2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	799b      	ldrb	r3, [r3, #6]
 8008aae:	2b03      	cmp	r3, #3
 8008ab0:	d10b      	bne.n	8008aca <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	79db      	ldrb	r3, [r3, #7]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d10b      	bne.n	8008ad2 <USBH_ParseCfgDesc+0x14e>
 8008aba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008abc:	781b      	ldrb	r3, [r3, #0]
 8008abe:	2b09      	cmp	r3, #9
 8008ac0:	d007      	beq.n	8008ad2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac4:	2209      	movs	r2, #9
 8008ac6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ac8:	e003      	b.n	8008ad2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008aca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008acc:	2207      	movs	r2, #7
 8008ace:	701a      	strb	r2, [r3, #0]
 8008ad0:	e000      	b.n	8008ad4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008ad2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ad8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008adc:	3201      	adds	r2, #1
 8008ade:	00d2      	lsls	r2, r2, #3
 8008ae0:	211a      	movs	r1, #26
 8008ae2:	fb01 f303 	mul.w	r3, r1, r3
 8008ae6:	4413      	add	r3, r2
 8008ae8:	3308      	adds	r3, #8
 8008aea:	6a3a      	ldr	r2, [r7, #32]
 8008aec:	4413      	add	r3, r2
 8008aee:	3304      	adds	r3, #4
 8008af0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008af4:	69b9      	ldr	r1, [r7, #24]
 8008af6:	68f8      	ldr	r0, [r7, #12]
 8008af8:	f000 f870 	bl	8008bdc <USBH_ParseEPDesc>
 8008afc:	4603      	mov	r3, r0
 8008afe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008b02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008b06:	3301      	adds	r3, #1
 8008b08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	791b      	ldrb	r3, [r3, #4]
 8008b10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b14:	429a      	cmp	r2, r3
 8008b16:	d204      	bcs.n	8008b22 <USBH_ParseCfgDesc+0x19e>
 8008b18:	6a3b      	ldr	r3, [r7, #32]
 8008b1a:	885a      	ldrh	r2, [r3, #2]
 8008b1c:	8afb      	ldrh	r3, [r7, #22]
 8008b1e:	429a      	cmp	r2, r3
 8008b20:	d8b0      	bhi.n	8008a84 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	791b      	ldrb	r3, [r3, #4]
 8008b26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d201      	bcs.n	8008b32 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008b2e:	2303      	movs	r3, #3
 8008b30:	e01c      	b.n	8008b6c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008b32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b36:	3301      	adds	r3, #1
 8008b38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d805      	bhi.n	8008b50 <USBH_ParseCfgDesc+0x1cc>
 8008b44:	6a3b      	ldr	r3, [r7, #32]
 8008b46:	885a      	ldrh	r2, [r3, #2]
 8008b48:	8afb      	ldrh	r3, [r7, #22]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	f63f af74 	bhi.w	8008a38 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	791b      	ldrb	r3, [r3, #4]
 8008b54:	2b02      	cmp	r3, #2
 8008b56:	bf28      	it	cs
 8008b58:	2302      	movcs	r3, #2
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008b60:	429a      	cmp	r2, r3
 8008b62:	d201      	bcs.n	8008b68 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e001      	b.n	8008b6c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008b68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3730      	adds	r7, #48	@ 0x30
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	781a      	ldrb	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	785a      	ldrb	r2, [r3, #1]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	789a      	ldrb	r2, [r3, #2]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	78da      	ldrb	r2, [r3, #3]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	3304      	adds	r3, #4
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b02      	cmp	r3, #2
 8008ba6:	bf28      	it	cs
 8008ba8:	2302      	movcs	r3, #2
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	795a      	ldrb	r2, [r3, #5]
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	799a      	ldrb	r2, [r3, #6]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008bc0:	683b      	ldr	r3, [r7, #0]
 8008bc2:	79da      	ldrb	r2, [r3, #7]
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	7a1a      	ldrb	r2, [r3, #8]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	721a      	strb	r2, [r3, #8]
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	781a      	ldrb	r2, [r3, #0]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	785a      	ldrb	r2, [r3, #1]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	789a      	ldrb	r2, [r3, #2]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	78da      	ldrb	r2, [r3, #3]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	3304      	adds	r3, #4
 8008c10:	781b      	ldrb	r3, [r3, #0]
 8008c12:	461a      	mov	r2, r3
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	3305      	adds	r3, #5
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	021b      	lsls	r3, r3, #8
 8008c1c:	b29b      	uxth	r3, r3
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	b29a      	uxth	r2, r3
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	799a      	ldrb	r2, [r3, #6]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	889b      	ldrh	r3, [r3, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d009      	beq.n	8008c4a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008c3a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c3e:	d804      	bhi.n	8008c4a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008c44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c48:	d901      	bls.n	8008c4e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d136      	bne.n	8008cc6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	78db      	ldrb	r3, [r3, #3]
 8008c5c:	f003 0303 	and.w	r3, r3, #3
 8008c60:	2b02      	cmp	r3, #2
 8008c62:	d108      	bne.n	8008c76 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	889b      	ldrh	r3, [r3, #4]
 8008c68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c6c:	f240 8097 	bls.w	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c70:	2303      	movs	r3, #3
 8008c72:	75fb      	strb	r3, [r7, #23]
 8008c74:	e093      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	78db      	ldrb	r3, [r3, #3]
 8008c7a:	f003 0303 	and.w	r3, r3, #3
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d107      	bne.n	8008c92 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	889b      	ldrh	r3, [r3, #4]
 8008c86:	2b40      	cmp	r3, #64	@ 0x40
 8008c88:	f240 8089 	bls.w	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c8c:	2303      	movs	r3, #3
 8008c8e:	75fb      	strb	r3, [r7, #23]
 8008c90:	e085      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	78db      	ldrb	r3, [r3, #3]
 8008c96:	f003 0303 	and.w	r3, r3, #3
 8008c9a:	2b01      	cmp	r3, #1
 8008c9c:	d005      	beq.n	8008caa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	78db      	ldrb	r3, [r3, #3]
 8008ca2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008ca6:	2b03      	cmp	r3, #3
 8008ca8:	d10a      	bne.n	8008cc0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	799b      	ldrb	r3, [r3, #6]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <USBH_ParseEPDesc+0xde>
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	799b      	ldrb	r3, [r3, #6]
 8008cb6:	2b10      	cmp	r3, #16
 8008cb8:	d970      	bls.n	8008d9c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008cbe:	e06d      	b.n	8008d9c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cc0:	2303      	movs	r3, #3
 8008cc2:	75fb      	strb	r3, [r7, #23]
 8008cc4:	e06b      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d13c      	bne.n	8008d4a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	78db      	ldrb	r3, [r3, #3]
 8008cd4:	f003 0303 	and.w	r3, r3, #3
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d005      	beq.n	8008ce8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	78db      	ldrb	r3, [r3, #3]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d106      	bne.n	8008cf6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	889b      	ldrh	r3, [r3, #4]
 8008cec:	2b40      	cmp	r3, #64	@ 0x40
 8008cee:	d956      	bls.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008cf4:	e053      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	78db      	ldrb	r3, [r3, #3]
 8008cfa:	f003 0303 	and.w	r3, r3, #3
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	d10e      	bne.n	8008d20 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	799b      	ldrb	r3, [r3, #6]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d007      	beq.n	8008d1a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008d0e:	2b10      	cmp	r3, #16
 8008d10:	d803      	bhi.n	8008d1a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008d16:	2b40      	cmp	r3, #64	@ 0x40
 8008d18:	d941      	bls.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d1a:	2303      	movs	r3, #3
 8008d1c:	75fb      	strb	r3, [r7, #23]
 8008d1e:	e03e      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	78db      	ldrb	r3, [r3, #3]
 8008d24:	f003 0303 	and.w	r3, r3, #3
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d10b      	bne.n	8008d44 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	799b      	ldrb	r3, [r3, #6]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d004      	beq.n	8008d3e <USBH_ParseEPDesc+0x162>
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	889b      	ldrh	r3, [r3, #4]
 8008d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d3c:	d32f      	bcc.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d3e:	2303      	movs	r3, #3
 8008d40:	75fb      	strb	r3, [r7, #23]
 8008d42:	e02c      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d44:	2303      	movs	r3, #3
 8008d46:	75fb      	strb	r3, [r7, #23]
 8008d48:	e029      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d120      	bne.n	8008d96 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	78db      	ldrb	r3, [r3, #3]
 8008d58:	f003 0303 	and.w	r3, r3, #3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d106      	bne.n	8008d6e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	889b      	ldrh	r3, [r3, #4]
 8008d64:	2b08      	cmp	r3, #8
 8008d66:	d01a      	beq.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	75fb      	strb	r3, [r7, #23]
 8008d6c:	e017      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	78db      	ldrb	r3, [r3, #3]
 8008d72:	f003 0303 	and.w	r3, r3, #3
 8008d76:	2b03      	cmp	r3, #3
 8008d78:	d10a      	bne.n	8008d90 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	799b      	ldrb	r3, [r3, #6]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d003      	beq.n	8008d8a <USBH_ParseEPDesc+0x1ae>
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	889b      	ldrh	r3, [r3, #4]
 8008d86:	2b08      	cmp	r3, #8
 8008d88:	d909      	bls.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	75fb      	strb	r3, [r7, #23]
 8008d8e:	e006      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d90:	2303      	movs	r3, #3
 8008d92:	75fb      	strb	r3, [r7, #23]
 8008d94:	e003      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d96:	2303      	movs	r3, #3
 8008d98:	75fb      	strb	r3, [r7, #23]
 8008d9a:	e000      	b.n	8008d9e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d9c:	bf00      	nop
  }

  return status;
 8008d9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	371c      	adds	r7, #28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008dac:	b480      	push	{r7}
 8008dae:	b087      	sub	sp, #28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	60f8      	str	r0, [r7, #12]
 8008db4:	60b9      	str	r1, [r7, #8]
 8008db6:	4613      	mov	r3, r2
 8008db8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3301      	adds	r3, #1
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	2b03      	cmp	r3, #3
 8008dc2:	d120      	bne.n	8008e06 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	1e9a      	subs	r2, r3, #2
 8008dca:	88fb      	ldrh	r3, [r7, #6]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	bf28      	it	cs
 8008dd0:	4613      	movcs	r3, r2
 8008dd2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	3302      	adds	r3, #2
 8008dd8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008dda:	2300      	movs	r3, #0
 8008ddc:	82fb      	strh	r3, [r7, #22]
 8008dde:	e00b      	b.n	8008df8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008de0:	8afb      	ldrh	r3, [r7, #22]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4413      	add	r3, r2
 8008de6:	781a      	ldrb	r2, [r3, #0]
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	3301      	adds	r3, #1
 8008df0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008df2:	8afb      	ldrh	r3, [r7, #22]
 8008df4:	3302      	adds	r3, #2
 8008df6:	82fb      	strh	r3, [r7, #22]
 8008df8:	8afa      	ldrh	r2, [r7, #22]
 8008dfa:	8abb      	ldrh	r3, [r7, #20]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d3ef      	bcc.n	8008de0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2200      	movs	r2, #0
 8008e04:	701a      	strb	r2, [r3, #0]
  }
}
 8008e06:	bf00      	nop
 8008e08:	371c      	adds	r7, #28
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e10:	4770      	bx	lr

08008e12 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008e12:	b480      	push	{r7}
 8008e14:	b085      	sub	sp, #20
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
 8008e1a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	881b      	ldrh	r3, [r3, #0]
 8008e20:	687a      	ldr	r2, [r7, #4]
 8008e22:	7812      	ldrb	r2, [r2, #0]
 8008e24:	4413      	add	r3, r2
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4413      	add	r3, r2
 8008e36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008e38:	68fb      	ldr	r3, [r7, #12]
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr

08008e46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008e46:	b580      	push	{r7, lr}
 8008e48:	b086      	sub	sp, #24
 8008e4a:	af00      	add	r7, sp, #0
 8008e4c:	60f8      	str	r0, [r7, #12]
 8008e4e:	60b9      	str	r1, [r7, #8]
 8008e50:	4613      	mov	r3, r2
 8008e52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008e54:	2301      	movs	r3, #1
 8008e56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	789b      	ldrb	r3, [r3, #2]
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d002      	beq.n	8008e66 <USBH_CtlReq+0x20>
 8008e60:	2b02      	cmp	r3, #2
 8008e62:	d00f      	beq.n	8008e84 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008e64:	e027      	b.n	8008eb6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	68ba      	ldr	r2, [r7, #8]
 8008e6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	88fa      	ldrh	r2, [r7, #6]
 8008e70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2201      	movs	r2, #1
 8008e76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2202      	movs	r2, #2
 8008e7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]
      break;
 8008e82:	e018      	b.n	8008eb6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008e84:	68f8      	ldr	r0, [r7, #12]
 8008e86:	f000 f81b 	bl	8008ec0 <USBH_HandleControl>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e8e:	7dfb      	ldrb	r3, [r7, #23]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <USBH_CtlReq+0x54>
 8008e94:	7dfb      	ldrb	r3, [r7, #23]
 8008e96:	2b03      	cmp	r3, #3
 8008e98:	d106      	bne.n	8008ea8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	761a      	strb	r2, [r3, #24]
      break;
 8008ea6:	e005      	b.n	8008eb4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008ea8:	7dfb      	ldrb	r3, [r7, #23]
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d102      	bne.n	8008eb4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2201      	movs	r2, #1
 8008eb2:	709a      	strb	r2, [r3, #2]
      break;
 8008eb4:	bf00      	nop
  }
  return status;
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b086      	sub	sp, #24
 8008ec4:	af02      	add	r7, sp, #8
 8008ec6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008ec8:	2301      	movs	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	7e1b      	ldrb	r3, [r3, #24]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	2b0a      	cmp	r3, #10
 8008ed8:	f200 8156 	bhi.w	8009188 <USBH_HandleControl+0x2c8>
 8008edc:	a201      	add	r2, pc, #4	@ (adr r2, 8008ee4 <USBH_HandleControl+0x24>)
 8008ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ee2:	bf00      	nop
 8008ee4:	08008f11 	.word	0x08008f11
 8008ee8:	08008f2b 	.word	0x08008f2b
 8008eec:	08008f95 	.word	0x08008f95
 8008ef0:	08008fbb 	.word	0x08008fbb
 8008ef4:	08008ff3 	.word	0x08008ff3
 8008ef8:	0800901d 	.word	0x0800901d
 8008efc:	0800906f 	.word	0x0800906f
 8008f00:	08009091 	.word	0x08009091
 8008f04:	080090cd 	.word	0x080090cd
 8008f08:	080090f3 	.word	0x080090f3
 8008f0c:	08009131 	.word	0x08009131
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f103 0110 	add.w	r1, r3, #16
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	795b      	ldrb	r3, [r3, #5]
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	6878      	ldr	r0, [r7, #4]
 8008f1e:	f000 f943 	bl	80091a8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2202      	movs	r2, #2
 8008f26:	761a      	strb	r2, [r3, #24]
      break;
 8008f28:	e139      	b.n	800919e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	795b      	ldrb	r3, [r3, #5]
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fcc5 	bl	80098c0 <USBH_LL_GetURBState>
 8008f36:	4603      	mov	r3, r0
 8008f38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f3a:	7bbb      	ldrb	r3, [r7, #14]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d11e      	bne.n	8008f7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	7c1b      	ldrb	r3, [r3, #16]
 8008f44:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8adb      	ldrh	r3, [r3, #22]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00a      	beq.n	8008f68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008f52:	7b7b      	ldrb	r3, [r7, #13]
 8008f54:	2b80      	cmp	r3, #128	@ 0x80
 8008f56:	d103      	bne.n	8008f60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2203      	movs	r2, #3
 8008f5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f5e:	e115      	b.n	800918c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2205      	movs	r2, #5
 8008f64:	761a      	strb	r2, [r3, #24]
      break;
 8008f66:	e111      	b.n	800918c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008f68:	7b7b      	ldrb	r3, [r7, #13]
 8008f6a:	2b80      	cmp	r3, #128	@ 0x80
 8008f6c:	d103      	bne.n	8008f76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2209      	movs	r2, #9
 8008f72:	761a      	strb	r2, [r3, #24]
      break;
 8008f74:	e10a      	b.n	800918c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2207      	movs	r2, #7
 8008f7a:	761a      	strb	r2, [r3, #24]
      break;
 8008f7c:	e106      	b.n	800918c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008f7e:	7bbb      	ldrb	r3, [r7, #14]
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d003      	beq.n	8008f8c <USBH_HandleControl+0xcc>
 8008f84:	7bbb      	ldrb	r3, [r7, #14]
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	f040 8100 	bne.w	800918c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	220b      	movs	r2, #11
 8008f90:	761a      	strb	r2, [r3, #24]
      break;
 8008f92:	e0fb      	b.n	800918c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6899      	ldr	r1, [r3, #8]
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	899a      	ldrh	r2, [r3, #12]
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	791b      	ldrb	r3, [r3, #4]
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f93a 	bl	8009226 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2204      	movs	r2, #4
 8008fb6:	761a      	strb	r2, [r3, #24]
      break;
 8008fb8:	e0f1      	b.n	800919e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	791b      	ldrb	r3, [r3, #4]
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f000 fc7d 	bl	80098c0 <USBH_LL_GetURBState>
 8008fc6:	4603      	mov	r3, r0
 8008fc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008fca:	7bbb      	ldrb	r3, [r7, #14]
 8008fcc:	2b01      	cmp	r3, #1
 8008fce:	d102      	bne.n	8008fd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2209      	movs	r2, #9
 8008fd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008fd6:	7bbb      	ldrb	r3, [r7, #14]
 8008fd8:	2b05      	cmp	r3, #5
 8008fda:	d102      	bne.n	8008fe2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fe0:	e0d6      	b.n	8009190 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b04      	cmp	r3, #4
 8008fe6:	f040 80d3 	bne.w	8009190 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	220b      	movs	r2, #11
 8008fee:	761a      	strb	r2, [r3, #24]
      break;
 8008ff0:	e0ce      	b.n	8009190 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6899      	ldr	r1, [r3, #8]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	899a      	ldrh	r2, [r3, #12]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	795b      	ldrb	r3, [r3, #5]
 8008ffe:	2001      	movs	r0, #1
 8009000:	9000      	str	r0, [sp, #0]
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f000 f8ea 	bl	80091dc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800900e:	b29a      	uxth	r2, r3
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	2206      	movs	r2, #6
 8009018:	761a      	strb	r2, [r3, #24]
      break;
 800901a:	e0c0      	b.n	800919e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	795b      	ldrb	r3, [r3, #5]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fc4c 	bl	80098c0 <USBH_LL_GetURBState>
 8009028:	4603      	mov	r3, r0
 800902a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800902c:	7bbb      	ldrb	r3, [r7, #14]
 800902e:	2b01      	cmp	r3, #1
 8009030:	d103      	bne.n	800903a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2207      	movs	r2, #7
 8009036:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009038:	e0ac      	b.n	8009194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800903a:	7bbb      	ldrb	r3, [r7, #14]
 800903c:	2b05      	cmp	r3, #5
 800903e:	d105      	bne.n	800904c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	220c      	movs	r2, #12
 8009044:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009046:	2303      	movs	r3, #3
 8009048:	73fb      	strb	r3, [r7, #15]
      break;
 800904a:	e0a3      	b.n	8009194 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800904c:	7bbb      	ldrb	r3, [r7, #14]
 800904e:	2b02      	cmp	r3, #2
 8009050:	d103      	bne.n	800905a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2205      	movs	r2, #5
 8009056:	761a      	strb	r2, [r3, #24]
      break;
 8009058:	e09c      	b.n	8009194 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800905a:	7bbb      	ldrb	r3, [r7, #14]
 800905c:	2b04      	cmp	r3, #4
 800905e:	f040 8099 	bne.w	8009194 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	220b      	movs	r2, #11
 8009066:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009068:	2302      	movs	r3, #2
 800906a:	73fb      	strb	r3, [r7, #15]
      break;
 800906c:	e092      	b.n	8009194 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	791b      	ldrb	r3, [r3, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	2100      	movs	r1, #0
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f8d5 	bl	8009226 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009082:	b29a      	uxth	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2208      	movs	r2, #8
 800908c:	761a      	strb	r2, [r3, #24]

      break;
 800908e:	e086      	b.n	800919e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	791b      	ldrb	r3, [r3, #4]
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fc12 	bl	80098c0 <USBH_LL_GetURBState>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d105      	bne.n	80090b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	220d      	movs	r2, #13
 80090aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80090ac:	2300      	movs	r3, #0
 80090ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090b0:	e072      	b.n	8009198 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80090b2:	7bbb      	ldrb	r3, [r7, #14]
 80090b4:	2b04      	cmp	r3, #4
 80090b6:	d103      	bne.n	80090c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	220b      	movs	r2, #11
 80090bc:	761a      	strb	r2, [r3, #24]
      break;
 80090be:	e06b      	b.n	8009198 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80090c0:	7bbb      	ldrb	r3, [r7, #14]
 80090c2:	2b05      	cmp	r3, #5
 80090c4:	d168      	bne.n	8009198 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80090c6:	2303      	movs	r3, #3
 80090c8:	73fb      	strb	r3, [r7, #15]
      break;
 80090ca:	e065      	b.n	8009198 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	795b      	ldrb	r3, [r3, #5]
 80090d0:	2201      	movs	r2, #1
 80090d2:	9200      	str	r2, [sp, #0]
 80090d4:	2200      	movs	r2, #0
 80090d6:	2100      	movs	r1, #0
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 f87f 	bl	80091dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	220a      	movs	r2, #10
 80090ee:	761a      	strb	r2, [r3, #24]
      break;
 80090f0:	e055      	b.n	800919e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	795b      	ldrb	r3, [r3, #5]
 80090f6:	4619      	mov	r1, r3
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	f000 fbe1 	bl	80098c0 <USBH_LL_GetURBState>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009102:	7bbb      	ldrb	r3, [r7, #14]
 8009104:	2b01      	cmp	r3, #1
 8009106:	d105      	bne.n	8009114 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	220d      	movs	r2, #13
 8009110:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009112:	e043      	b.n	800919c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009114:	7bbb      	ldrb	r3, [r7, #14]
 8009116:	2b02      	cmp	r3, #2
 8009118:	d103      	bne.n	8009122 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2209      	movs	r2, #9
 800911e:	761a      	strb	r2, [r3, #24]
      break;
 8009120:	e03c      	b.n	800919c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b04      	cmp	r3, #4
 8009126:	d139      	bne.n	800919c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	220b      	movs	r2, #11
 800912c:	761a      	strb	r2, [r3, #24]
      break;
 800912e:	e035      	b.n	800919c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	7e5b      	ldrb	r3, [r3, #25]
 8009134:	3301      	adds	r3, #1
 8009136:	b2da      	uxtb	r2, r3
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	765a      	strb	r2, [r3, #25]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	7e5b      	ldrb	r3, [r3, #25]
 8009140:	2b02      	cmp	r3, #2
 8009142:	d806      	bhi.n	8009152 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2201      	movs	r2, #1
 8009148:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2201      	movs	r2, #1
 800914e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009150:	e025      	b.n	800919e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009158:	2106      	movs	r1, #6
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2200      	movs	r2, #0
 8009162:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	795b      	ldrb	r3, [r3, #5]
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f90c 	bl	8009388 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	791b      	ldrb	r3, [r3, #4]
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f906 	bl	8009388 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2200      	movs	r2, #0
 8009180:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009182:	2302      	movs	r3, #2
 8009184:	73fb      	strb	r3, [r7, #15]
      break;
 8009186:	e00a      	b.n	800919e <USBH_HandleControl+0x2de>

    default:
      break;
 8009188:	bf00      	nop
 800918a:	e008      	b.n	800919e <USBH_HandleControl+0x2de>
      break;
 800918c:	bf00      	nop
 800918e:	e006      	b.n	800919e <USBH_HandleControl+0x2de>
      break;
 8009190:	bf00      	nop
 8009192:	e004      	b.n	800919e <USBH_HandleControl+0x2de>
      break;
 8009194:	bf00      	nop
 8009196:	e002      	b.n	800919e <USBH_HandleControl+0x2de>
      break;
 8009198:	bf00      	nop
 800919a:	e000      	b.n	800919e <USBH_HandleControl+0x2de>
      break;
 800919c:	bf00      	nop
  }

  return status;
 800919e:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af04      	add	r7, sp, #16
 80091ae:	60f8      	str	r0, [r7, #12]
 80091b0:	60b9      	str	r1, [r7, #8]
 80091b2:	4613      	mov	r3, r2
 80091b4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091b6:	79f9      	ldrb	r1, [r7, #7]
 80091b8:	2300      	movs	r3, #0
 80091ba:	9303      	str	r3, [sp, #12]
 80091bc:	2308      	movs	r3, #8
 80091be:	9302      	str	r3, [sp, #8]
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	9301      	str	r3, [sp, #4]
 80091c4:	2300      	movs	r3, #0
 80091c6:	9300      	str	r3, [sp, #0]
 80091c8:	2300      	movs	r3, #0
 80091ca:	2200      	movs	r2, #0
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f000 fb46 	bl	800985e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80091d2:	2300      	movs	r3, #0
}
 80091d4:	4618      	mov	r0, r3
 80091d6:	3710      	adds	r7, #16
 80091d8:	46bd      	mov	sp, r7
 80091da:	bd80      	pop	{r7, pc}

080091dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af04      	add	r7, sp, #16
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	4611      	mov	r1, r2
 80091e8:	461a      	mov	r2, r3
 80091ea:	460b      	mov	r3, r1
 80091ec:	80fb      	strh	r3, [r7, #6]
 80091ee:	4613      	mov	r3, r2
 80091f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d001      	beq.n	8009200 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80091fc:	2300      	movs	r3, #0
 80091fe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009200:	7979      	ldrb	r1, [r7, #5]
 8009202:	7e3b      	ldrb	r3, [r7, #24]
 8009204:	9303      	str	r3, [sp, #12]
 8009206:	88fb      	ldrh	r3, [r7, #6]
 8009208:	9302      	str	r3, [sp, #8]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	9301      	str	r3, [sp, #4]
 800920e:	2301      	movs	r3, #1
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	2300      	movs	r3, #0
 8009214:	2200      	movs	r2, #0
 8009216:	68f8      	ldr	r0, [r7, #12]
 8009218:	f000 fb21 	bl	800985e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3710      	adds	r7, #16
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b088      	sub	sp, #32
 800922a:	af04      	add	r7, sp, #16
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	4611      	mov	r1, r2
 8009232:	461a      	mov	r2, r3
 8009234:	460b      	mov	r3, r1
 8009236:	80fb      	strh	r3, [r7, #6]
 8009238:	4613      	mov	r3, r2
 800923a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800923c:	7979      	ldrb	r1, [r7, #5]
 800923e:	2300      	movs	r3, #0
 8009240:	9303      	str	r3, [sp, #12]
 8009242:	88fb      	ldrh	r3, [r7, #6]
 8009244:	9302      	str	r3, [sp, #8]
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	2301      	movs	r3, #1
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	2300      	movs	r3, #0
 8009250:	2201      	movs	r2, #1
 8009252:	68f8      	ldr	r0, [r7, #12]
 8009254:	f000 fb03 	bl	800985e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009258:	2300      	movs	r3, #0

}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b088      	sub	sp, #32
 8009266:	af04      	add	r7, sp, #16
 8009268:	60f8      	str	r0, [r7, #12]
 800926a:	60b9      	str	r1, [r7, #8]
 800926c:	4611      	mov	r1, r2
 800926e:	461a      	mov	r2, r3
 8009270:	460b      	mov	r3, r1
 8009272:	80fb      	strh	r3, [r7, #6]
 8009274:	4613      	mov	r3, r2
 8009276:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009282:	2300      	movs	r3, #0
 8009284:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009286:	7979      	ldrb	r1, [r7, #5]
 8009288:	7e3b      	ldrb	r3, [r7, #24]
 800928a:	9303      	str	r3, [sp, #12]
 800928c:	88fb      	ldrh	r3, [r7, #6]
 800928e:	9302      	str	r3, [sp, #8]
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	9301      	str	r3, [sp, #4]
 8009294:	2301      	movs	r3, #1
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	2302      	movs	r3, #2
 800929a:	2200      	movs	r2, #0
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f000 fade 	bl	800985e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af04      	add	r7, sp, #16
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4611      	mov	r1, r2
 80092b8:	461a      	mov	r2, r3
 80092ba:	460b      	mov	r3, r1
 80092bc:	80fb      	strh	r3, [r7, #6]
 80092be:	4613      	mov	r3, r2
 80092c0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092c2:	7979      	ldrb	r1, [r7, #5]
 80092c4:	2300      	movs	r3, #0
 80092c6:	9303      	str	r3, [sp, #12]
 80092c8:	88fb      	ldrh	r3, [r7, #6]
 80092ca:	9302      	str	r3, [sp, #8]
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	9301      	str	r3, [sp, #4]
 80092d0:	2301      	movs	r3, #1
 80092d2:	9300      	str	r3, [sp, #0]
 80092d4:	2302      	movs	r3, #2
 80092d6:	2201      	movs	r2, #1
 80092d8:	68f8      	ldr	r0, [r7, #12]
 80092da:	f000 fac0 	bl	800985e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3710      	adds	r7, #16
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b086      	sub	sp, #24
 80092ec:	af04      	add	r7, sp, #16
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	4608      	mov	r0, r1
 80092f2:	4611      	mov	r1, r2
 80092f4:	461a      	mov	r2, r3
 80092f6:	4603      	mov	r3, r0
 80092f8:	70fb      	strb	r3, [r7, #3]
 80092fa:	460b      	mov	r3, r1
 80092fc:	70bb      	strb	r3, [r7, #2]
 80092fe:	4613      	mov	r3, r2
 8009300:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009302:	7878      	ldrb	r0, [r7, #1]
 8009304:	78ba      	ldrb	r2, [r7, #2]
 8009306:	78f9      	ldrb	r1, [r7, #3]
 8009308:	8b3b      	ldrh	r3, [r7, #24]
 800930a:	9302      	str	r3, [sp, #8]
 800930c:	7d3b      	ldrb	r3, [r7, #20]
 800930e:	9301      	str	r3, [sp, #4]
 8009310:	7c3b      	ldrb	r3, [r7, #16]
 8009312:	9300      	str	r3, [sp, #0]
 8009314:	4603      	mov	r3, r0
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fa53 	bl	80097c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800931c:	2300      	movs	r3, #0
}
 800931e:	4618      	mov	r0, r3
 8009320:	3708      	adds	r7, #8
 8009322:	46bd      	mov	sp, r7
 8009324:	bd80      	pop	{r7, pc}

08009326 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009326:	b580      	push	{r7, lr}
 8009328:	b082      	sub	sp, #8
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	460b      	mov	r3, r1
 8009330:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009332:	78fb      	ldrb	r3, [r7, #3]
 8009334:	4619      	mov	r1, r3
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa72 	bl	8009820 <USBH_LL_ClosePipe>

  return USBH_OK;
 800933c:	2300      	movs	r3, #0
}
 800933e:	4618      	mov	r0, r3
 8009340:	3708      	adds	r7, #8
 8009342:	46bd      	mov	sp, r7
 8009344:	bd80      	pop	{r7, pc}

08009346 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009346:	b580      	push	{r7, lr}
 8009348:	b084      	sub	sp, #16
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
 800934e:	460b      	mov	r3, r1
 8009350:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f836 	bl	80093c4 <USBH_GetFreePipe>
 8009358:	4603      	mov	r3, r0
 800935a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800935c:	89fb      	ldrh	r3, [r7, #14]
 800935e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009362:	4293      	cmp	r3, r2
 8009364:	d00a      	beq.n	800937c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009366:	78fa      	ldrb	r2, [r7, #3]
 8009368:	89fb      	ldrh	r3, [r7, #14]
 800936a:	f003 030f 	and.w	r3, r3, #15
 800936e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009372:	6879      	ldr	r1, [r7, #4]
 8009374:	33e0      	adds	r3, #224	@ 0xe0
 8009376:	009b      	lsls	r3, r3, #2
 8009378:	440b      	add	r3, r1
 800937a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800937c:	89fb      	ldrh	r3, [r7, #14]
 800937e:	b2db      	uxtb	r3, r3
}
 8009380:	4618      	mov	r0, r3
 8009382:	3710      	adds	r7, #16
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}

08009388 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
 8009390:	460b      	mov	r3, r1
 8009392:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009394:	78fb      	ldrb	r3, [r7, #3]
 8009396:	2b0f      	cmp	r3, #15
 8009398:	d80d      	bhi.n	80093b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800939a:	78fb      	ldrb	r3, [r7, #3]
 800939c:	687a      	ldr	r2, [r7, #4]
 800939e:	33e0      	adds	r3, #224	@ 0xe0
 80093a0:	009b      	lsls	r3, r3, #2
 80093a2:	4413      	add	r3, r2
 80093a4:	685a      	ldr	r2, [r3, #4]
 80093a6:	78fb      	ldrb	r3, [r7, #3]
 80093a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80093ac:	6879      	ldr	r1, [r7, #4]
 80093ae:	33e0      	adds	r3, #224	@ 0xe0
 80093b0:	009b      	lsls	r3, r3, #2
 80093b2:	440b      	add	r3, r1
 80093b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80093b6:	2300      	movs	r3, #0
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	370c      	adds	r7, #12
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b085      	sub	sp, #20
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
 80093d4:	e00f      	b.n	80093f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80093d6:	7bfb      	ldrb	r3, [r7, #15]
 80093d8:	687a      	ldr	r2, [r7, #4]
 80093da:	33e0      	adds	r3, #224	@ 0xe0
 80093dc:	009b      	lsls	r3, r3, #2
 80093de:	4413      	add	r3, r2
 80093e0:	685b      	ldr	r3, [r3, #4]
 80093e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d102      	bne.n	80093f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80093ea:	7bfb      	ldrb	r3, [r7, #15]
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	e007      	b.n	8009400 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80093f0:	7bfb      	ldrb	r3, [r7, #15]
 80093f2:	3301      	adds	r3, #1
 80093f4:	73fb      	strb	r3, [r7, #15]
 80093f6:	7bfb      	ldrb	r3, [r7, #15]
 80093f8:	2b0f      	cmp	r3, #15
 80093fa:	d9ec      	bls.n	80093d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80093fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009400:	4618      	mov	r0, r3
 8009402:	3714      	adds	r7, #20
 8009404:	46bd      	mov	sp, r7
 8009406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940a:	4770      	bx	lr

0800940c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009410:	2201      	movs	r2, #1
 8009412:	490e      	ldr	r1, [pc, #56]	@ (800944c <MX_USB_HOST_Init+0x40>)
 8009414:	480e      	ldr	r0, [pc, #56]	@ (8009450 <MX_USB_HOST_Init+0x44>)
 8009416:	f7fe fb15 	bl	8007a44 <USBH_Init>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d001      	beq.n	8009424 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009420:	f7f7 ff14 	bl	800124c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009424:	490b      	ldr	r1, [pc, #44]	@ (8009454 <MX_USB_HOST_Init+0x48>)
 8009426:	480a      	ldr	r0, [pc, #40]	@ (8009450 <MX_USB_HOST_Init+0x44>)
 8009428:	f7fe fbb9 	bl	8007b9e <USBH_RegisterClass>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d001      	beq.n	8009436 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009432:	f7f7 ff0b 	bl	800124c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009436:	4806      	ldr	r0, [pc, #24]	@ (8009450 <MX_USB_HOST_Init+0x44>)
 8009438:	f7fe fc3d 	bl	8007cb6 <USBH_Start>
 800943c:	4603      	mov	r3, r0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d001      	beq.n	8009446 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009442:	f7f7 ff03 	bl	800124c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009446:	bf00      	nop
 8009448:	bd80      	pop	{r7, pc}
 800944a:	bf00      	nop
 800944c:	0800946d 	.word	0x0800946d
 8009450:	200001e4 	.word	0x200001e4
 8009454:	2000000c 	.word	0x2000000c

08009458 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800945c:	4802      	ldr	r0, [pc, #8]	@ (8009468 <MX_USB_HOST_Process+0x10>)
 800945e:	f7fe fc3b 	bl	8007cd8 <USBH_Process>
}
 8009462:	bf00      	nop
 8009464:	bd80      	pop	{r7, pc}
 8009466:	bf00      	nop
 8009468:	200001e4 	.word	0x200001e4

0800946c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800946c:	b480      	push	{r7}
 800946e:	b083      	sub	sp, #12
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009478:	78fb      	ldrb	r3, [r7, #3]
 800947a:	3b01      	subs	r3, #1
 800947c:	2b04      	cmp	r3, #4
 800947e:	d819      	bhi.n	80094b4 <USBH_UserProcess+0x48>
 8009480:	a201      	add	r2, pc, #4	@ (adr r2, 8009488 <USBH_UserProcess+0x1c>)
 8009482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009486:	bf00      	nop
 8009488:	080094b5 	.word	0x080094b5
 800948c:	080094a5 	.word	0x080094a5
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094ad 	.word	0x080094ad
 8009498:	0800949d 	.word	0x0800949d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800949c:	4b09      	ldr	r3, [pc, #36]	@ (80094c4 <USBH_UserProcess+0x58>)
 800949e:	2203      	movs	r2, #3
 80094a0:	701a      	strb	r2, [r3, #0]
  break;
 80094a2:	e008      	b.n	80094b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80094a4:	4b07      	ldr	r3, [pc, #28]	@ (80094c4 <USBH_UserProcess+0x58>)
 80094a6:	2202      	movs	r2, #2
 80094a8:	701a      	strb	r2, [r3, #0]
  break;
 80094aa:	e004      	b.n	80094b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80094ac:	4b05      	ldr	r3, [pc, #20]	@ (80094c4 <USBH_UserProcess+0x58>)
 80094ae:	2201      	movs	r2, #1
 80094b0:	701a      	strb	r2, [r3, #0]
  break;
 80094b2:	e000      	b.n	80094b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80094b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr
 80094c2:	bf00      	nop
 80094c4:	200005bc 	.word	0x200005bc

080094c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b08a      	sub	sp, #40	@ 0x28
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094d0:	f107 0314 	add.w	r3, r7, #20
 80094d4:	2200      	movs	r2, #0
 80094d6:	601a      	str	r2, [r3, #0]
 80094d8:	605a      	str	r2, [r3, #4]
 80094da:	609a      	str	r2, [r3, #8]
 80094dc:	60da      	str	r2, [r3, #12]
 80094de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80094e8:	d147      	bne.n	800957a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094ea:	2300      	movs	r3, #0
 80094ec:	613b      	str	r3, [r7, #16]
 80094ee:	4b25      	ldr	r3, [pc, #148]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 80094f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094f2:	4a24      	ldr	r2, [pc, #144]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 80094f4:	f043 0301 	orr.w	r3, r3, #1
 80094f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80094fa:	4b22      	ldr	r3, [pc, #136]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 80094fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	613b      	str	r3, [r7, #16]
 8009504:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8009506:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800950a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800950c:	2300      	movs	r3, #0
 800950e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009510:	2300      	movs	r3, #0
 8009512:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009514:	f107 0314 	add.w	r3, r7, #20
 8009518:	4619      	mov	r1, r3
 800951a:	481b      	ldr	r0, [pc, #108]	@ (8009588 <HAL_HCD_MspInit+0xc0>)
 800951c:	f7f8 fe6c 	bl	80021f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009520:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009524:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009526:	2302      	movs	r3, #2
 8009528:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800952a:	2300      	movs	r3, #0
 800952c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800952e:	2300      	movs	r3, #0
 8009530:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009532:	230a      	movs	r3, #10
 8009534:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009536:	f107 0314 	add.w	r3, r7, #20
 800953a:	4619      	mov	r1, r3
 800953c:	4812      	ldr	r0, [pc, #72]	@ (8009588 <HAL_HCD_MspInit+0xc0>)
 800953e:	f7f8 fe5b 	bl	80021f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009542:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 8009544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009546:	4a0f      	ldr	r2, [pc, #60]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 8009548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800954c:	6353      	str	r3, [r2, #52]	@ 0x34
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	4b0c      	ldr	r3, [pc, #48]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 8009554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009556:	4a0b      	ldr	r2, [pc, #44]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 8009558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800955c:	6453      	str	r3, [r2, #68]	@ 0x44
 800955e:	4b09      	ldr	r3, [pc, #36]	@ (8009584 <HAL_HCD_MspInit+0xbc>)
 8009560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2043      	movs	r0, #67	@ 0x43
 8009570:	f7f8 fe0b 	bl	800218a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009574:	2043      	movs	r0, #67	@ 0x43
 8009576:	f7f8 fe24 	bl	80021c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800957a:	bf00      	nop
 800957c:	3728      	adds	r7, #40	@ 0x28
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	40023800 	.word	0x40023800
 8009588:	40020000 	.word	0x40020000

0800958c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800959a:	4618      	mov	r0, r3
 800959c:	f7fe ff73 	bl	8008486 <USBH_LL_IncTimer>
}
 80095a0:	bf00      	nop
 80095a2:	3708      	adds	r7, #8
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b082      	sub	sp, #8
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fe ffab 	bl	8008512 <USBH_LL_Connect>
}
 80095bc:	bf00      	nop
 80095be:	3708      	adds	r7, #8
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b082      	sub	sp, #8
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7fe ffb4 	bl	8008540 <USBH_LL_Disconnect>
}
 80095d8:	bf00      	nop
 80095da:	3708      	adds	r7, #8
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b083      	sub	sp, #12
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	460b      	mov	r3, r1
 80095ea:	70fb      	strb	r3, [r7, #3]
 80095ec:	4613      	mov	r3, r2
 80095ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800960a:	4618      	mov	r0, r3
 800960c:	f7fe ff65 	bl	80084da <USBH_LL_PortEnabled>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009626:	4618      	mov	r0, r3
 8009628:	f7fe ff65 	bl	80084f6 <USBH_LL_PortDisabled>
}
 800962c:	bf00      	nop
 800962e:	3708      	adds	r7, #8
 8009630:	46bd      	mov	sp, r7
 8009632:	bd80      	pop	{r7, pc}

08009634 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
 800963a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009642:	2b01      	cmp	r3, #1
 8009644:	d12a      	bne.n	800969c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8009646:	4a18      	ldr	r2, [pc, #96]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4a15      	ldr	r2, [pc, #84]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009652:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009656:	4b14      	ldr	r3, [pc, #80]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009658:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800965c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800965e:	4b12      	ldr	r3, [pc, #72]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009660:	2208      	movs	r2, #8
 8009662:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009664:	4b10      	ldr	r3, [pc, #64]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009666:	2201      	movs	r2, #1
 8009668:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800966a:	4b0f      	ldr	r3, [pc, #60]	@ (80096a8 <USBH_LL_Init+0x74>)
 800966c:	2200      	movs	r2, #0
 800966e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009670:	4b0d      	ldr	r3, [pc, #52]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009672:	2202      	movs	r2, #2
 8009674:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009676:	4b0c      	ldr	r3, [pc, #48]	@ (80096a8 <USBH_LL_Init+0x74>)
 8009678:	2200      	movs	r2, #0
 800967a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800967c:	480a      	ldr	r0, [pc, #40]	@ (80096a8 <USBH_LL_Init+0x74>)
 800967e:	f7f8 ff70 	bl	8002562 <HAL_HCD_Init>
 8009682:	4603      	mov	r3, r0
 8009684:	2b00      	cmp	r3, #0
 8009686:	d001      	beq.n	800968c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009688:	f7f7 fde0 	bl	800124c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800968c:	4806      	ldr	r0, [pc, #24]	@ (80096a8 <USBH_LL_Init+0x74>)
 800968e:	f7f9 fbd1 	bl	8002e34 <HAL_HCD_GetCurrentFrame>
 8009692:	4603      	mov	r3, r0
 8009694:	4619      	mov	r1, r3
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7fe fee6 	bl	8008468 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3708      	adds	r7, #8
 80096a2:	46bd      	mov	sp, r7
 80096a4:	bd80      	pop	{r7, pc}
 80096a6:	bf00      	nop
 80096a8:	200005c0 	.word	0x200005c0

080096ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b084      	sub	sp, #16
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096b4:	2300      	movs	r3, #0
 80096b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096b8:	2300      	movs	r3, #0
 80096ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096c2:	4618      	mov	r0, r3
 80096c4:	f7f9 fb3e 	bl	8002d44 <HAL_HCD_Start>
 80096c8:	4603      	mov	r3, r0
 80096ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096cc:	7bfb      	ldrb	r3, [r7, #15]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f000 f95e 	bl	8009990 <USBH_Get_USB_Status>
 80096d4:	4603      	mov	r3, r0
 80096d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b084      	sub	sp, #16
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f7f9 fb46 	bl	8002d8a <HAL_HCD_Stop>
 80096fe:	4603      	mov	r3, r0
 8009700:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009702:	7bfb      	ldrb	r3, [r7, #15]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 f943 	bl	8009990 <USBH_Get_USB_Status>
 800970a:	4603      	mov	r3, r0
 800970c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009710:	4618      	mov	r0, r3
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009720:	2301      	movs	r3, #1
 8009722:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800972a:	4618      	mov	r0, r3
 800972c:	f7f9 fb90 	bl	8002e50 <HAL_HCD_GetCurrentSpeed>
 8009730:	4603      	mov	r3, r0
 8009732:	2b02      	cmp	r3, #2
 8009734:	d00c      	beq.n	8009750 <USBH_LL_GetSpeed+0x38>
 8009736:	2b02      	cmp	r3, #2
 8009738:	d80d      	bhi.n	8009756 <USBH_LL_GetSpeed+0x3e>
 800973a:	2b00      	cmp	r3, #0
 800973c:	d002      	beq.n	8009744 <USBH_LL_GetSpeed+0x2c>
 800973e:	2b01      	cmp	r3, #1
 8009740:	d003      	beq.n	800974a <USBH_LL_GetSpeed+0x32>
 8009742:	e008      	b.n	8009756 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009744:	2300      	movs	r3, #0
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	e008      	b.n	800975c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800974a:	2301      	movs	r3, #1
 800974c:	73fb      	strb	r3, [r7, #15]
    break;
 800974e:	e005      	b.n	800975c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009750:	2302      	movs	r3, #2
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	e002      	b.n	800975c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8009756:	2301      	movs	r3, #1
 8009758:	73fb      	strb	r3, [r7, #15]
    break;
 800975a:	bf00      	nop
  }
  return  speed;
 800975c:	7bfb      	ldrb	r3, [r7, #15]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009772:	2300      	movs	r3, #0
 8009774:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800977c:	4618      	mov	r0, r3
 800977e:	f7f9 fb21 	bl	8002dc4 <HAL_HCD_ResetPort>
 8009782:	4603      	mov	r3, r0
 8009784:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009786:	7bfb      	ldrb	r3, [r7, #15]
 8009788:	4618      	mov	r0, r3
 800978a:	f000 f901 	bl	8009990 <USBH_Get_USB_Status>
 800978e:	4603      	mov	r3, r0
 8009790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009792:	7bbb      	ldrb	r3, [r7, #14]
}
 8009794:	4618      	mov	r0, r3
 8009796:	3710      	adds	r7, #16
 8009798:	46bd      	mov	sp, r7
 800979a:	bd80      	pop	{r7, pc}

0800979c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b082      	sub	sp, #8
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	460b      	mov	r3, r1
 80097a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097ae:	78fa      	ldrb	r2, [r7, #3]
 80097b0:	4611      	mov	r1, r2
 80097b2:	4618      	mov	r0, r3
 80097b4:	f7f9 fb29 	bl	8002e0a <HAL_HCD_HC_GetXferCount>
 80097b8:	4603      	mov	r3, r0
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3708      	adds	r7, #8
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}

080097c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80097c2:	b590      	push	{r4, r7, lr}
 80097c4:	b089      	sub	sp, #36	@ 0x24
 80097c6:	af04      	add	r7, sp, #16
 80097c8:	6078      	str	r0, [r7, #4]
 80097ca:	4608      	mov	r0, r1
 80097cc:	4611      	mov	r1, r2
 80097ce:	461a      	mov	r2, r3
 80097d0:	4603      	mov	r3, r0
 80097d2:	70fb      	strb	r3, [r7, #3]
 80097d4:	460b      	mov	r3, r1
 80097d6:	70bb      	strb	r3, [r7, #2]
 80097d8:	4613      	mov	r3, r2
 80097da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097ea:	787c      	ldrb	r4, [r7, #1]
 80097ec:	78ba      	ldrb	r2, [r7, #2]
 80097ee:	78f9      	ldrb	r1, [r7, #3]
 80097f0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80097f2:	9302      	str	r3, [sp, #8]
 80097f4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097f8:	9301      	str	r3, [sp, #4]
 80097fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	4623      	mov	r3, r4
 8009802:	f7f8 ff15 	bl	8002630 <HAL_HCD_HC_Init>
 8009806:	4603      	mov	r3, r0
 8009808:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800980a:	7bfb      	ldrb	r3, [r7, #15]
 800980c:	4618      	mov	r0, r3
 800980e:	f000 f8bf 	bl	8009990 <USBH_Get_USB_Status>
 8009812:	4603      	mov	r3, r0
 8009814:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009816:	7bbb      	ldrb	r3, [r7, #14]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3714      	adds	r7, #20
 800981c:	46bd      	mov	sp, r7
 800981e:	bd90      	pop	{r4, r7, pc}

08009820 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b084      	sub	sp, #16
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	460b      	mov	r3, r1
 800982a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982c:	2300      	movs	r3, #0
 800982e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009830:	2300      	movs	r3, #0
 8009832:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f7f8 ffae 	bl	80027a0 <HAL_HCD_HC_Halt>
 8009844:	4603      	mov	r3, r0
 8009846:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009848:	7bfb      	ldrb	r3, [r7, #15]
 800984a:	4618      	mov	r0, r3
 800984c:	f000 f8a0 	bl	8009990 <USBH_Get_USB_Status>
 8009850:	4603      	mov	r3, r0
 8009852:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009854:	7bbb      	ldrb	r3, [r7, #14]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3710      	adds	r7, #16
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800985e:	b590      	push	{r4, r7, lr}
 8009860:	b089      	sub	sp, #36	@ 0x24
 8009862:	af04      	add	r7, sp, #16
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	4608      	mov	r0, r1
 8009868:	4611      	mov	r1, r2
 800986a:	461a      	mov	r2, r3
 800986c:	4603      	mov	r3, r0
 800986e:	70fb      	strb	r3, [r7, #3]
 8009870:	460b      	mov	r3, r1
 8009872:	70bb      	strb	r3, [r7, #2]
 8009874:	4613      	mov	r3, r2
 8009876:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009886:	787c      	ldrb	r4, [r7, #1]
 8009888:	78ba      	ldrb	r2, [r7, #2]
 800988a:	78f9      	ldrb	r1, [r7, #3]
 800988c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009890:	9303      	str	r3, [sp, #12]
 8009892:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009894:	9302      	str	r3, [sp, #8]
 8009896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009898:	9301      	str	r3, [sp, #4]
 800989a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	4623      	mov	r3, r4
 80098a2:	f7f8 ffa1 	bl	80027e8 <HAL_HCD_HC_SubmitRequest>
 80098a6:	4603      	mov	r3, r0
 80098a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80098aa:	7bfb      	ldrb	r3, [r7, #15]
 80098ac:	4618      	mov	r0, r3
 80098ae:	f000 f86f 	bl	8009990 <USBH_Get_USB_Status>
 80098b2:	4603      	mov	r3, r0
 80098b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80098b8:	4618      	mov	r0, r3
 80098ba:	3714      	adds	r7, #20
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd90      	pop	{r4, r7, pc}

080098c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098c0:	b580      	push	{r7, lr}
 80098c2:	b082      	sub	sp, #8
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
 80098c8:	460b      	mov	r3, r1
 80098ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098d2:	78fa      	ldrb	r2, [r7, #3]
 80098d4:	4611      	mov	r1, r2
 80098d6:	4618      	mov	r0, r3
 80098d8:	f7f9 fa82 	bl	8002de0 <HAL_HCD_HC_GetURBState>
 80098dc:	4603      	mov	r3, r0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b082      	sub	sp, #8
 80098ea:	af00      	add	r7, sp, #0
 80098ec:	6078      	str	r0, [r7, #4]
 80098ee:	460b      	mov	r3, r1
 80098f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d103      	bne.n	8009904 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80098fc:	78fb      	ldrb	r3, [r7, #3]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f872 	bl	80099e8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009904:	20c8      	movs	r0, #200	@ 0xc8
 8009906:	f7f7 ff41 	bl	800178c <HAL_Delay>
  return USBH_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3708      	adds	r7, #8
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009914:	b480      	push	{r7}
 8009916:	b085      	sub	sp, #20
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
 8009920:	4613      	mov	r3, r2
 8009922:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800992a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	68f9      	ldr	r1, [r7, #12]
 8009930:	4613      	mov	r3, r2
 8009932:	011b      	lsls	r3, r3, #4
 8009934:	1a9b      	subs	r3, r3, r2
 8009936:	009b      	lsls	r3, r3, #2
 8009938:	440b      	add	r3, r1
 800993a:	3317      	adds	r3, #23
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009942:	78fa      	ldrb	r2, [r7, #3]
 8009944:	68f9      	ldr	r1, [r7, #12]
 8009946:	4613      	mov	r3, r2
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	1a9b      	subs	r3, r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	333c      	adds	r3, #60	@ 0x3c
 8009952:	78ba      	ldrb	r2, [r7, #2]
 8009954:	701a      	strb	r2, [r3, #0]
 8009956:	e009      	b.n	800996c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	4613      	mov	r3, r2
 800995e:	011b      	lsls	r3, r3, #4
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	440b      	add	r3, r1
 8009966:	333d      	adds	r3, #61	@ 0x3d
 8009968:	78ba      	ldrb	r2, [r7, #2]
 800996a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr

0800997a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b082      	sub	sp, #8
 800997e:	af00      	add	r7, sp, #0
 8009980:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f7f7 ff02 	bl	800178c <HAL_Delay>
}
 8009988:	bf00      	nop
 800998a:	3708      	adds	r7, #8
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009990:	b480      	push	{r7}
 8009992:	b085      	sub	sp, #20
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800999a:	2300      	movs	r3, #0
 800999c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800999e:	79fb      	ldrb	r3, [r7, #7]
 80099a0:	2b03      	cmp	r3, #3
 80099a2:	d817      	bhi.n	80099d4 <USBH_Get_USB_Status+0x44>
 80099a4:	a201      	add	r2, pc, #4	@ (adr r2, 80099ac <USBH_Get_USB_Status+0x1c>)
 80099a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099aa:	bf00      	nop
 80099ac:	080099bd 	.word	0x080099bd
 80099b0:	080099c3 	.word	0x080099c3
 80099b4:	080099c9 	.word	0x080099c9
 80099b8:	080099cf 	.word	0x080099cf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80099bc:	2300      	movs	r3, #0
 80099be:	73fb      	strb	r3, [r7, #15]
    break;
 80099c0:	e00b      	b.n	80099da <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80099c2:	2302      	movs	r3, #2
 80099c4:	73fb      	strb	r3, [r7, #15]
    break;
 80099c6:	e008      	b.n	80099da <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80099c8:	2301      	movs	r3, #1
 80099ca:	73fb      	strb	r3, [r7, #15]
    break;
 80099cc:	e005      	b.n	80099da <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80099ce:	2302      	movs	r3, #2
 80099d0:	73fb      	strb	r3, [r7, #15]
    break;
 80099d2:	e002      	b.n	80099da <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80099d4:	2302      	movs	r3, #2
 80099d6:	73fb      	strb	r3, [r7, #15]
    break;
 80099d8:	bf00      	nop
  }
  return usb_status;
 80099da:	7bfb      	ldrb	r3, [r7, #15]
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr

080099e8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80099e8:	b580      	push	{r7, lr}
 80099ea:	b084      	sub	sp, #16
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	4603      	mov	r3, r0
 80099f0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80099f6:	79fb      	ldrb	r3, [r7, #7]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d102      	bne.n	8009a02 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80099fc:	2300      	movs	r3, #0
 80099fe:	73fb      	strb	r3, [r7, #15]
 8009a00:	e001      	b.n	8009a06 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009a02:	2301      	movs	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2101      	movs	r1, #1
 8009a0c:	4803      	ldr	r0, [pc, #12]	@ (8009a1c <MX_DriverVbusFS+0x34>)
 8009a0e:	f7f8 fd8f 	bl	8002530 <HAL_GPIO_WritePin>
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	40020800 	.word	0x40020800

08009a20 <malloc>:
 8009a20:	4b02      	ldr	r3, [pc, #8]	@ (8009a2c <malloc+0xc>)
 8009a22:	4601      	mov	r1, r0
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	f000 b82d 	b.w	8009a84 <_malloc_r>
 8009a2a:	bf00      	nop
 8009a2c:	2000002c 	.word	0x2000002c

08009a30 <free>:
 8009a30:	4b02      	ldr	r3, [pc, #8]	@ (8009a3c <free+0xc>)
 8009a32:	4601      	mov	r1, r0
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f000 b8f5 	b.w	8009c24 <_free_r>
 8009a3a:	bf00      	nop
 8009a3c:	2000002c 	.word	0x2000002c

08009a40 <sbrk_aligned>:
 8009a40:	b570      	push	{r4, r5, r6, lr}
 8009a42:	4e0f      	ldr	r6, [pc, #60]	@ (8009a80 <sbrk_aligned+0x40>)
 8009a44:	460c      	mov	r4, r1
 8009a46:	6831      	ldr	r1, [r6, #0]
 8009a48:	4605      	mov	r5, r0
 8009a4a:	b911      	cbnz	r1, 8009a52 <sbrk_aligned+0x12>
 8009a4c:	f000 f8ae 	bl	8009bac <_sbrk_r>
 8009a50:	6030      	str	r0, [r6, #0]
 8009a52:	4621      	mov	r1, r4
 8009a54:	4628      	mov	r0, r5
 8009a56:	f000 f8a9 	bl	8009bac <_sbrk_r>
 8009a5a:	1c43      	adds	r3, r0, #1
 8009a5c:	d103      	bne.n	8009a66 <sbrk_aligned+0x26>
 8009a5e:	f04f 34ff 	mov.w	r4, #4294967295
 8009a62:	4620      	mov	r0, r4
 8009a64:	bd70      	pop	{r4, r5, r6, pc}
 8009a66:	1cc4      	adds	r4, r0, #3
 8009a68:	f024 0403 	bic.w	r4, r4, #3
 8009a6c:	42a0      	cmp	r0, r4
 8009a6e:	d0f8      	beq.n	8009a62 <sbrk_aligned+0x22>
 8009a70:	1a21      	subs	r1, r4, r0
 8009a72:	4628      	mov	r0, r5
 8009a74:	f000 f89a 	bl	8009bac <_sbrk_r>
 8009a78:	3001      	adds	r0, #1
 8009a7a:	d1f2      	bne.n	8009a62 <sbrk_aligned+0x22>
 8009a7c:	e7ef      	b.n	8009a5e <sbrk_aligned+0x1e>
 8009a7e:	bf00      	nop
 8009a80:	200009a0 	.word	0x200009a0

08009a84 <_malloc_r>:
 8009a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a88:	1ccd      	adds	r5, r1, #3
 8009a8a:	f025 0503 	bic.w	r5, r5, #3
 8009a8e:	3508      	adds	r5, #8
 8009a90:	2d0c      	cmp	r5, #12
 8009a92:	bf38      	it	cc
 8009a94:	250c      	movcc	r5, #12
 8009a96:	2d00      	cmp	r5, #0
 8009a98:	4606      	mov	r6, r0
 8009a9a:	db01      	blt.n	8009aa0 <_malloc_r+0x1c>
 8009a9c:	42a9      	cmp	r1, r5
 8009a9e:	d904      	bls.n	8009aaa <_malloc_r+0x26>
 8009aa0:	230c      	movs	r3, #12
 8009aa2:	6033      	str	r3, [r6, #0]
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009aaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009b80 <_malloc_r+0xfc>
 8009aae:	f000 f869 	bl	8009b84 <__malloc_lock>
 8009ab2:	f8d8 3000 	ldr.w	r3, [r8]
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	bb44      	cbnz	r4, 8009b0c <_malloc_r+0x88>
 8009aba:	4629      	mov	r1, r5
 8009abc:	4630      	mov	r0, r6
 8009abe:	f7ff ffbf 	bl	8009a40 <sbrk_aligned>
 8009ac2:	1c43      	adds	r3, r0, #1
 8009ac4:	4604      	mov	r4, r0
 8009ac6:	d158      	bne.n	8009b7a <_malloc_r+0xf6>
 8009ac8:	f8d8 4000 	ldr.w	r4, [r8]
 8009acc:	4627      	mov	r7, r4
 8009ace:	2f00      	cmp	r7, #0
 8009ad0:	d143      	bne.n	8009b5a <_malloc_r+0xd6>
 8009ad2:	2c00      	cmp	r4, #0
 8009ad4:	d04b      	beq.n	8009b6e <_malloc_r+0xea>
 8009ad6:	6823      	ldr	r3, [r4, #0]
 8009ad8:	4639      	mov	r1, r7
 8009ada:	4630      	mov	r0, r6
 8009adc:	eb04 0903 	add.w	r9, r4, r3
 8009ae0:	f000 f864 	bl	8009bac <_sbrk_r>
 8009ae4:	4581      	cmp	r9, r0
 8009ae6:	d142      	bne.n	8009b6e <_malloc_r+0xea>
 8009ae8:	6821      	ldr	r1, [r4, #0]
 8009aea:	1a6d      	subs	r5, r5, r1
 8009aec:	4629      	mov	r1, r5
 8009aee:	4630      	mov	r0, r6
 8009af0:	f7ff ffa6 	bl	8009a40 <sbrk_aligned>
 8009af4:	3001      	adds	r0, #1
 8009af6:	d03a      	beq.n	8009b6e <_malloc_r+0xea>
 8009af8:	6823      	ldr	r3, [r4, #0]
 8009afa:	442b      	add	r3, r5
 8009afc:	6023      	str	r3, [r4, #0]
 8009afe:	f8d8 3000 	ldr.w	r3, [r8]
 8009b02:	685a      	ldr	r2, [r3, #4]
 8009b04:	bb62      	cbnz	r2, 8009b60 <_malloc_r+0xdc>
 8009b06:	f8c8 7000 	str.w	r7, [r8]
 8009b0a:	e00f      	b.n	8009b2c <_malloc_r+0xa8>
 8009b0c:	6822      	ldr	r2, [r4, #0]
 8009b0e:	1b52      	subs	r2, r2, r5
 8009b10:	d420      	bmi.n	8009b54 <_malloc_r+0xd0>
 8009b12:	2a0b      	cmp	r2, #11
 8009b14:	d917      	bls.n	8009b46 <_malloc_r+0xc2>
 8009b16:	1961      	adds	r1, r4, r5
 8009b18:	42a3      	cmp	r3, r4
 8009b1a:	6025      	str	r5, [r4, #0]
 8009b1c:	bf18      	it	ne
 8009b1e:	6059      	strne	r1, [r3, #4]
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	bf08      	it	eq
 8009b24:	f8c8 1000 	streq.w	r1, [r8]
 8009b28:	5162      	str	r2, [r4, r5]
 8009b2a:	604b      	str	r3, [r1, #4]
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f000 f82f 	bl	8009b90 <__malloc_unlock>
 8009b32:	f104 000b 	add.w	r0, r4, #11
 8009b36:	1d23      	adds	r3, r4, #4
 8009b38:	f020 0007 	bic.w	r0, r0, #7
 8009b3c:	1ac2      	subs	r2, r0, r3
 8009b3e:	bf1c      	itt	ne
 8009b40:	1a1b      	subne	r3, r3, r0
 8009b42:	50a3      	strne	r3, [r4, r2]
 8009b44:	e7af      	b.n	8009aa6 <_malloc_r+0x22>
 8009b46:	6862      	ldr	r2, [r4, #4]
 8009b48:	42a3      	cmp	r3, r4
 8009b4a:	bf0c      	ite	eq
 8009b4c:	f8c8 2000 	streq.w	r2, [r8]
 8009b50:	605a      	strne	r2, [r3, #4]
 8009b52:	e7eb      	b.n	8009b2c <_malloc_r+0xa8>
 8009b54:	4623      	mov	r3, r4
 8009b56:	6864      	ldr	r4, [r4, #4]
 8009b58:	e7ae      	b.n	8009ab8 <_malloc_r+0x34>
 8009b5a:	463c      	mov	r4, r7
 8009b5c:	687f      	ldr	r7, [r7, #4]
 8009b5e:	e7b6      	b.n	8009ace <_malloc_r+0x4a>
 8009b60:	461a      	mov	r2, r3
 8009b62:	685b      	ldr	r3, [r3, #4]
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	d1fb      	bne.n	8009b60 <_malloc_r+0xdc>
 8009b68:	2300      	movs	r3, #0
 8009b6a:	6053      	str	r3, [r2, #4]
 8009b6c:	e7de      	b.n	8009b2c <_malloc_r+0xa8>
 8009b6e:	230c      	movs	r3, #12
 8009b70:	6033      	str	r3, [r6, #0]
 8009b72:	4630      	mov	r0, r6
 8009b74:	f000 f80c 	bl	8009b90 <__malloc_unlock>
 8009b78:	e794      	b.n	8009aa4 <_malloc_r+0x20>
 8009b7a:	6005      	str	r5, [r0, #0]
 8009b7c:	e7d6      	b.n	8009b2c <_malloc_r+0xa8>
 8009b7e:	bf00      	nop
 8009b80:	200009a4 	.word	0x200009a4

08009b84 <__malloc_lock>:
 8009b84:	4801      	ldr	r0, [pc, #4]	@ (8009b8c <__malloc_lock+0x8>)
 8009b86:	f000 b84b 	b.w	8009c20 <__retarget_lock_acquire_recursive>
 8009b8a:	bf00      	nop
 8009b8c:	20000ae4 	.word	0x20000ae4

08009b90 <__malloc_unlock>:
 8009b90:	4801      	ldr	r0, [pc, #4]	@ (8009b98 <__malloc_unlock+0x8>)
 8009b92:	f000 b846 	b.w	8009c22 <__retarget_lock_release_recursive>
 8009b96:	bf00      	nop
 8009b98:	20000ae4 	.word	0x20000ae4

08009b9c <memset>:
 8009b9c:	4402      	add	r2, r0
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d100      	bne.n	8009ba6 <memset+0xa>
 8009ba4:	4770      	bx	lr
 8009ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8009baa:	e7f9      	b.n	8009ba0 <memset+0x4>

08009bac <_sbrk_r>:
 8009bac:	b538      	push	{r3, r4, r5, lr}
 8009bae:	4d06      	ldr	r5, [pc, #24]	@ (8009bc8 <_sbrk_r+0x1c>)
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	4604      	mov	r4, r0
 8009bb4:	4608      	mov	r0, r1
 8009bb6:	602b      	str	r3, [r5, #0]
 8009bb8:	f7f7 fd04 	bl	80015c4 <_sbrk>
 8009bbc:	1c43      	adds	r3, r0, #1
 8009bbe:	d102      	bne.n	8009bc6 <_sbrk_r+0x1a>
 8009bc0:	682b      	ldr	r3, [r5, #0]
 8009bc2:	b103      	cbz	r3, 8009bc6 <_sbrk_r+0x1a>
 8009bc4:	6023      	str	r3, [r4, #0]
 8009bc6:	bd38      	pop	{r3, r4, r5, pc}
 8009bc8:	20000ae0 	.word	0x20000ae0

08009bcc <__errno>:
 8009bcc:	4b01      	ldr	r3, [pc, #4]	@ (8009bd4 <__errno+0x8>)
 8009bce:	6818      	ldr	r0, [r3, #0]
 8009bd0:	4770      	bx	lr
 8009bd2:	bf00      	nop
 8009bd4:	2000002c 	.word	0x2000002c

08009bd8 <__libc_init_array>:
 8009bd8:	b570      	push	{r4, r5, r6, lr}
 8009bda:	4d0d      	ldr	r5, [pc, #52]	@ (8009c10 <__libc_init_array+0x38>)
 8009bdc:	4c0d      	ldr	r4, [pc, #52]	@ (8009c14 <__libc_init_array+0x3c>)
 8009bde:	1b64      	subs	r4, r4, r5
 8009be0:	10a4      	asrs	r4, r4, #2
 8009be2:	2600      	movs	r6, #0
 8009be4:	42a6      	cmp	r6, r4
 8009be6:	d109      	bne.n	8009bfc <__libc_init_array+0x24>
 8009be8:	4d0b      	ldr	r5, [pc, #44]	@ (8009c18 <__libc_init_array+0x40>)
 8009bea:	4c0c      	ldr	r4, [pc, #48]	@ (8009c1c <__libc_init_array+0x44>)
 8009bec:	f000 f864 	bl	8009cb8 <_init>
 8009bf0:	1b64      	subs	r4, r4, r5
 8009bf2:	10a4      	asrs	r4, r4, #2
 8009bf4:	2600      	movs	r6, #0
 8009bf6:	42a6      	cmp	r6, r4
 8009bf8:	d105      	bne.n	8009c06 <__libc_init_array+0x2e>
 8009bfa:	bd70      	pop	{r4, r5, r6, pc}
 8009bfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c00:	4798      	blx	r3
 8009c02:	3601      	adds	r6, #1
 8009c04:	e7ee      	b.n	8009be4 <__libc_init_array+0xc>
 8009c06:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c0a:	4798      	blx	r3
 8009c0c:	3601      	adds	r6, #1
 8009c0e:	e7f2      	b.n	8009bf6 <__libc_init_array+0x1e>
 8009c10:	08009cf4 	.word	0x08009cf4
 8009c14:	08009cf4 	.word	0x08009cf4
 8009c18:	08009cf4 	.word	0x08009cf4
 8009c1c:	08009cf8 	.word	0x08009cf8

08009c20 <__retarget_lock_acquire_recursive>:
 8009c20:	4770      	bx	lr

08009c22 <__retarget_lock_release_recursive>:
 8009c22:	4770      	bx	lr

08009c24 <_free_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4605      	mov	r5, r0
 8009c28:	2900      	cmp	r1, #0
 8009c2a:	d041      	beq.n	8009cb0 <_free_r+0x8c>
 8009c2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c30:	1f0c      	subs	r4, r1, #4
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	bfb8      	it	lt
 8009c36:	18e4      	addlt	r4, r4, r3
 8009c38:	f7ff ffa4 	bl	8009b84 <__malloc_lock>
 8009c3c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cb4 <_free_r+0x90>)
 8009c3e:	6813      	ldr	r3, [r2, #0]
 8009c40:	b933      	cbnz	r3, 8009c50 <_free_r+0x2c>
 8009c42:	6063      	str	r3, [r4, #4]
 8009c44:	6014      	str	r4, [r2, #0]
 8009c46:	4628      	mov	r0, r5
 8009c48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c4c:	f7ff bfa0 	b.w	8009b90 <__malloc_unlock>
 8009c50:	42a3      	cmp	r3, r4
 8009c52:	d908      	bls.n	8009c66 <_free_r+0x42>
 8009c54:	6820      	ldr	r0, [r4, #0]
 8009c56:	1821      	adds	r1, r4, r0
 8009c58:	428b      	cmp	r3, r1
 8009c5a:	bf01      	itttt	eq
 8009c5c:	6819      	ldreq	r1, [r3, #0]
 8009c5e:	685b      	ldreq	r3, [r3, #4]
 8009c60:	1809      	addeq	r1, r1, r0
 8009c62:	6021      	streq	r1, [r4, #0]
 8009c64:	e7ed      	b.n	8009c42 <_free_r+0x1e>
 8009c66:	461a      	mov	r2, r3
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	b10b      	cbz	r3, 8009c70 <_free_r+0x4c>
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	d9fa      	bls.n	8009c66 <_free_r+0x42>
 8009c70:	6811      	ldr	r1, [r2, #0]
 8009c72:	1850      	adds	r0, r2, r1
 8009c74:	42a0      	cmp	r0, r4
 8009c76:	d10b      	bne.n	8009c90 <_free_r+0x6c>
 8009c78:	6820      	ldr	r0, [r4, #0]
 8009c7a:	4401      	add	r1, r0
 8009c7c:	1850      	adds	r0, r2, r1
 8009c7e:	4283      	cmp	r3, r0
 8009c80:	6011      	str	r1, [r2, #0]
 8009c82:	d1e0      	bne.n	8009c46 <_free_r+0x22>
 8009c84:	6818      	ldr	r0, [r3, #0]
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	6053      	str	r3, [r2, #4]
 8009c8a:	4408      	add	r0, r1
 8009c8c:	6010      	str	r0, [r2, #0]
 8009c8e:	e7da      	b.n	8009c46 <_free_r+0x22>
 8009c90:	d902      	bls.n	8009c98 <_free_r+0x74>
 8009c92:	230c      	movs	r3, #12
 8009c94:	602b      	str	r3, [r5, #0]
 8009c96:	e7d6      	b.n	8009c46 <_free_r+0x22>
 8009c98:	6820      	ldr	r0, [r4, #0]
 8009c9a:	1821      	adds	r1, r4, r0
 8009c9c:	428b      	cmp	r3, r1
 8009c9e:	bf04      	itt	eq
 8009ca0:	6819      	ldreq	r1, [r3, #0]
 8009ca2:	685b      	ldreq	r3, [r3, #4]
 8009ca4:	6063      	str	r3, [r4, #4]
 8009ca6:	bf04      	itt	eq
 8009ca8:	1809      	addeq	r1, r1, r0
 8009caa:	6021      	streq	r1, [r4, #0]
 8009cac:	6054      	str	r4, [r2, #4]
 8009cae:	e7ca      	b.n	8009c46 <_free_r+0x22>
 8009cb0:	bd38      	pop	{r3, r4, r5, pc}
 8009cb2:	bf00      	nop
 8009cb4:	200009a4 	.word	0x200009a4

08009cb8 <_init>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr

08009cc4 <_fini>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr
