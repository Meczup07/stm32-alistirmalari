
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008658  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080087e0  080087e0  000097e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008840  08008840  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008840  08008840  00009840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008848  08008848  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008848  08008848  00009848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800884c  0800884c  0000984c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008850  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001cfc  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001df8  20001df8  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b7c  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000410b  00000000  00000000  00021ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001370  00000000  00000000  00025db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ed4  00000000  00000000  00027128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006aa0  00000000  00000000  00027ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1c8  00000000  00000000  0002ea9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0033  00000000  00000000  0004cc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012cc97  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f54  00000000  00000000  0012ccdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00131c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080087c8 	.word	0x080087c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080087c8 	.word	0x080087c8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80004c6:	4b0f      	ldr	r3, [pc, #60]	@ (8000504 <MX_DAC_Init+0x4c>)
 80004c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000508 <MX_DAC_Init+0x50>)
 80004ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80004cc:	480d      	ldr	r0, [pc, #52]	@ (8000504 <MX_DAC_Init+0x4c>)
 80004ce:	f000 fdec 	bl	80010aa <HAL_DAC_Init>
 80004d2:	4603      	mov	r3, r0
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d001      	beq.n	80004dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80004d8:	f000 fb2a 	bl	8000b30 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80004dc:	2300      	movs	r3, #0
 80004de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004e0:	2300      	movs	r3, #0
 80004e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80004e4:	463b      	mov	r3, r7
 80004e6:	2210      	movs	r2, #16
 80004e8:	4619      	mov	r1, r3
 80004ea:	4806      	ldr	r0, [pc, #24]	@ (8000504 <MX_DAC_Init+0x4c>)
 80004ec:	f000 fe80 	bl	80011f0 <HAL_DAC_ConfigChannel>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d001      	beq.n	80004fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80004f6:	f000 fb1b 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80004fa:	bf00      	nop
 80004fc:	3708      	adds	r7, #8
 80004fe:	46bd      	mov	sp, r7
 8000500:	bd80      	pop	{r7, pc}
 8000502:	bf00      	nop
 8000504:	20000118 	.word	0x20000118
 8000508:	40007400 	.word	0x40007400

0800050c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08a      	sub	sp, #40	@ 0x28
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	f107 0314 	add.w	r3, r7, #20
 8000518:	2200      	movs	r2, #0
 800051a:	601a      	str	r2, [r3, #0]
 800051c:	605a      	str	r2, [r3, #4]
 800051e:	609a      	str	r2, [r3, #8]
 8000520:	60da      	str	r2, [r3, #12]
 8000522:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a17      	ldr	r2, [pc, #92]	@ (8000588 <HAL_DAC_MspInit+0x7c>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d127      	bne.n	800057e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	4b16      	ldr	r3, [pc, #88]	@ (800058c <HAL_DAC_MspInit+0x80>)
 8000534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000536:	4a15      	ldr	r2, [pc, #84]	@ (800058c <HAL_DAC_MspInit+0x80>)
 8000538:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800053c:	6413      	str	r3, [r2, #64]	@ 0x40
 800053e:	4b13      	ldr	r3, [pc, #76]	@ (800058c <HAL_DAC_MspInit+0x80>)
 8000540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000542:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	60fb      	str	r3, [r7, #12]
 800054e:	4b0f      	ldr	r3, [pc, #60]	@ (800058c <HAL_DAC_MspInit+0x80>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	4a0e      	ldr	r2, [pc, #56]	@ (800058c <HAL_DAC_MspInit+0x80>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	6313      	str	r3, [r2, #48]	@ 0x30
 800055a:	4b0c      	ldr	r3, [pc, #48]	@ (800058c <HAL_DAC_MspInit+0x80>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000566:	2320      	movs	r3, #32
 8000568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800056a:	2303      	movs	r3, #3
 800056c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	4619      	mov	r1, r3
 8000578:	4805      	ldr	r0, [pc, #20]	@ (8000590 <HAL_DAC_MspInit+0x84>)
 800057a:	f000 fe93 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800057e:	bf00      	nop
 8000580:	3728      	adds	r7, #40	@ 0x28
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40007400 	.word	0x40007400
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <MX_GPIO_Init>:
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08c      	sub	sp, #48	@ 0x30
 8000598:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
 80005a6:	60da      	str	r2, [r3, #12]
 80005a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
 80005ae:	4b7a      	ldr	r3, [pc, #488]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a79      	ldr	r2, [pc, #484]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005b4:	f043 0310 	orr.w	r3, r3, #16
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b77      	ldr	r3, [pc, #476]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0310 	and.w	r3, r3, #16
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
 80005ca:	4b73      	ldr	r3, [pc, #460]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	4a72      	ldr	r2, [pc, #456]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005d0:	f043 0304 	orr.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d6:	4b70      	ldr	r3, [pc, #448]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	f003 0304 	and.w	r3, r3, #4
 80005de:	617b      	str	r3, [r7, #20]
 80005e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b6c      	ldr	r3, [pc, #432]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a6b      	ldr	r2, [pc, #428]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b69      	ldr	r3, [pc, #420]	@ (8000798 <MX_GPIO_Init+0x204>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b65      	ldr	r3, [pc, #404]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a64      	ldr	r2, [pc, #400]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000608:	f043 0301 	orr.w	r3, r3, #1
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b62      	ldr	r3, [pc, #392]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0301 	and.w	r3, r3, #1
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b5e      	ldr	r3, [pc, #376]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a5d      	ldr	r2, [pc, #372]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000624:	f043 0302 	orr.w	r3, r3, #2
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b5b      	ldr	r3, [pc, #364]	@ (8000798 <MX_GPIO_Init+0x204>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0302 	and.w	r3, r3, #2
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b57      	ldr	r3, [pc, #348]	@ (8000798 <MX_GPIO_Init+0x204>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a56      	ldr	r2, [pc, #344]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000640:	f043 0308 	orr.w	r3, r3, #8
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b54      	ldr	r3, [pc, #336]	@ (8000798 <MX_GPIO_Init+0x204>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0308 	and.w	r3, r3, #8
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2108      	movs	r1, #8
 8000656:	4851      	ldr	r0, [pc, #324]	@ (800079c <MX_GPIO_Init+0x208>)
 8000658:	f000 ffc0 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	484f      	ldr	r0, [pc, #316]	@ (80007a0 <MX_GPIO_Init+0x20c>)
 8000662:	f000 ffbb 	bl	80015dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|LD4_Pin|LD3_Pin|LD5_Pin
 8000666:	2200      	movs	r2, #0
 8000668:	f24f 1110 	movw	r1, #61712	@ 0xf110
 800066c:	484d      	ldr	r0, [pc, #308]	@ (80007a4 <MX_GPIO_Init+0x210>)
 800066e:	f000 ffb5 	bl	80015dc <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000672:	2308      	movs	r3, #8
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4619      	mov	r1, r3
 8000688:	4844      	ldr	r0, [pc, #272]	@ (800079c <MX_GPIO_Init+0x208>)
 800068a:	f000 fe0b 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800068e:	2301      	movs	r3, #1
 8000690:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000692:	2301      	movs	r3, #1
 8000694:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	4619      	mov	r1, r3
 80006a4:	483e      	ldr	r0, [pc, #248]	@ (80007a0 <MX_GPIO_Init+0x20c>)
 80006a6:	f000 fdfd 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80006aa:	2308      	movs	r3, #8
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ae:	2302      	movs	r3, #2
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2300      	movs	r3, #0
 80006b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80006ba:	2305      	movs	r3, #5
 80006bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	4619      	mov	r1, r3
 80006c4:	4836      	ldr	r0, [pc, #216]	@ (80007a0 <MX_GPIO_Init+0x20c>)
 80006c6:	f000 fded 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ca:	2301      	movs	r3, #1
 80006cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006ce:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80006d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	4619      	mov	r1, r3
 80006de:	4832      	ldr	r0, [pc, #200]	@ (80007a8 <MX_GPIO_Init+0x214>)
 80006e0:	f000 fde0 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80006e4:	23c0      	movs	r3, #192	@ 0xc0
 80006e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006e8:	2302      	movs	r3, #2
 80006ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2300      	movs	r3, #0
 80006f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80006f4:	2305      	movs	r3, #5
 80006f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 031c 	add.w	r3, r7, #28
 80006fc:	4619      	mov	r1, r3
 80006fe:	482a      	ldr	r0, [pc, #168]	@ (80007a8 <MX_GPIO_Init+0x214>)
 8000700:	f000 fdd0 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000704:	2304      	movs	r3, #4
 8000706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000708:	2300      	movs	r3, #0
 800070a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	2300      	movs	r3, #0
 800070e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000710:	f107 031c 	add.w	r3, r7, #28
 8000714:	4619      	mov	r1, r3
 8000716:	4825      	ldr	r0, [pc, #148]	@ (80007ac <MX_GPIO_Init+0x218>)
 8000718:	f000 fdc4 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800071c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000722:	2302      	movs	r3, #2
 8000724:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800072e:	2305      	movs	r3, #5
 8000730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000732:	f107 031c 	add.w	r3, r7, #28
 8000736:	4619      	mov	r1, r3
 8000738:	481c      	ldr	r0, [pc, #112]	@ (80007ac <MX_GPIO_Init+0x218>)
 800073a:	f000 fdb3 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD4_Pin|LD3_Pin|LD5_Pin
 800073e:	f24f 1310 	movw	r3, #61712	@ 0xf110
 8000742:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000744:	2301      	movs	r3, #1
 8000746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	2300      	movs	r3, #0
 800074a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074c:	2300      	movs	r3, #0
 800074e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	4619      	mov	r1, r3
 8000756:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <MX_GPIO_Init+0x210>)
 8000758:	f000 fda4 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800075c:	2320      	movs	r3, #32
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 031c 	add.w	r3, r7, #28
 800076c:	4619      	mov	r1, r3
 800076e:	480d      	ldr	r0, [pc, #52]	@ (80007a4 <MX_GPIO_Init+0x210>)
 8000770:	f000 fd98 	bl	80012a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000774:	2302      	movs	r3, #2
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000778:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000782:	f107 031c 	add.w	r3, r7, #28
 8000786:	4619      	mov	r1, r3
 8000788:	4804      	ldr	r0, [pc, #16]	@ (800079c <MX_GPIO_Init+0x208>)
 800078a:	f000 fd8b 	bl	80012a4 <HAL_GPIO_Init>

}
 800078e:	bf00      	nop
 8000790:	3730      	adds	r7, #48	@ 0x30
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40020800 	.word	0x40020800
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40020000 	.word	0x40020000
 80007ac:	40020400 	.word	0x40020400

080007b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007b6:	4a13      	ldr	r2, [pc, #76]	@ (8000804 <MX_I2C1_Init+0x54>)
 80007b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ba:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007bc:	4a12      	ldr	r2, [pc, #72]	@ (8000808 <MX_I2C1_Init+0x58>)
 80007be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ce:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80007d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007da:	4b09      	ldr	r3, [pc, #36]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007e6:	4b06      	ldr	r3, [pc, #24]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	@ (8000800 <MX_I2C1_Init+0x50>)
 80007ee:	f000 ff0f 	bl	8001610 <HAL_I2C_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007f8:	f000 f99a 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	2000012c 	.word	0x2000012c
 8000804:	40005400 	.word	0x40005400
 8000808:	000186a0 	.word	0x000186a0

0800080c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
 8000822:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a19      	ldr	r2, [pc, #100]	@ (8000890 <HAL_I2C_MspInit+0x84>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d12c      	bne.n	8000888 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	613b      	str	r3, [r7, #16]
 8000832:	4b18      	ldr	r3, [pc, #96]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	4a17      	ldr	r2, [pc, #92]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 8000838:	f043 0302 	orr.w	r3, r3, #2
 800083c:	6313      	str	r3, [r2, #48]	@ 0x30
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	f003 0302 	and.w	r3, r3, #2
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800084a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800084e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000850:	2312      	movs	r3, #18
 8000852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800085c:	2304      	movs	r3, #4
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000860:	f107 0314 	add.w	r3, r7, #20
 8000864:	4619      	mov	r1, r3
 8000866:	480c      	ldr	r0, [pc, #48]	@ (8000898 <HAL_I2C_MspInit+0x8c>)
 8000868:	f000 fd1c 	bl	80012a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000874:	4a07      	ldr	r2, [pc, #28]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 8000876:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800087a:	6413      	str	r3, [r2, #64]	@ 0x40
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_I2C_MspInit+0x88>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000888:	bf00      	nop
 800088a:	3728      	adds	r7, #40	@ 0x28
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40005400 	.word	0x40005400
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400

0800089c <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008a2:	4a14      	ldr	r2, [pc, #80]	@ (80008f4 <MX_I2S3_Init+0x58>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80008a6:	4b12      	ldr	r3, [pc, #72]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008b4:	4b0e      	ldr	r3, [pc, #56]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008c4:	4a0c      	ldr	r2, [pc, #48]	@ (80008f8 <MX_I2S3_Init+0x5c>)
 80008c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008c8:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ce:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_I2S3_Init+0x54>)
 80008dc:	f000 ffdc 	bl	8001898 <HAL_I2S_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008e6:	f000 f923 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000180 	.word	0x20000180
 80008f4:	40003c00 	.word	0x40003c00
 80008f8:	00017700 	.word	0x00017700

080008fc <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08e      	sub	sp, #56	@ 0x38
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
 8000912:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a31      	ldr	r2, [pc, #196]	@ (80009ec <HAL_I2S_MspInit+0xf0>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d15a      	bne.n	80009e2 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800092c:	2301      	movs	r3, #1
 800092e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000930:	23c0      	movs	r3, #192	@ 0xc0
 8000932:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000934:	2302      	movs	r3, #2
 8000936:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4618      	mov	r0, r3
 800093e:	f003 fb35 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000948:	f000 f8f2 	bl	8000b30 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800094c:	2300      	movs	r3, #0
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	4b27      	ldr	r3, [pc, #156]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000954:	4a26      	ldr	r2, [pc, #152]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 8000956:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800095a:	6413      	str	r3, [r2, #64]	@ 0x40
 800095c:	4b24      	ldr	r3, [pc, #144]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000968:	2300      	movs	r3, #0
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 800096e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000970:	4a1f      	ldr	r2, [pc, #124]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	6313      	str	r3, [r2, #48]	@ 0x30
 8000978:	4b1d      	ldr	r3, [pc, #116]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 800097a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b19      	ldr	r3, [pc, #100]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098c:	4a18      	ldr	r2, [pc, #96]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 800098e:	f043 0304 	orr.w	r3, r3, #4
 8000992:	6313      	str	r3, [r2, #48]	@ 0x30
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <HAL_I2S_MspInit+0xf4>)
 8000996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000998:	f003 0304 	and.w	r3, r3, #4
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80009a0:	2310      	movs	r3, #16
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009b0:	2306      	movs	r3, #6
 80009b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80009b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b8:	4619      	mov	r1, r3
 80009ba:	480e      	ldr	r0, [pc, #56]	@ (80009f4 <HAL_I2S_MspInit+0xf8>)
 80009bc:	f000 fc72 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80009c0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	2302      	movs	r3, #2
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009d2:	2306      	movs	r3, #6
 80009d4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4806      	ldr	r0, [pc, #24]	@ (80009f8 <HAL_I2S_MspInit+0xfc>)
 80009de:	f000 fc61 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	@ 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40003c00 	.word	0x40003c00
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020800 	.word	0x40020800

080009fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a00:	f000 f9ac 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a04:	f000 f82a 	bl	8000a5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a08:	f7ff fdc4 	bl	8000594 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a0c:	f7ff fed0 	bl	80007b0 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a10:	f7ff ff44 	bl	800089c <MX_I2S3_Init>
  MX_DAC_Init();
 8000a14:	f7ff fd50 	bl	80004b8 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 f904 	bl	8000c24 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000a1c:	f007 f9a6 	bl	8007d6c <MX_USB_DEVICE_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000a20:	2110      	movs	r1, #16
 8000a22:	480d      	ldr	r0, [pc, #52]	@ (8000a58 <main+0x5c>)
 8000a24:	f000 fb63 	bl	80010ee <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095); //logic analyzerda okuma için 3.2V deneme
 8000a28:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2110      	movs	r1, #16
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <main+0x5c>)
 8000a32:	f000 fbb3 	bl	800119c <HAL_DAC_SetValue>

	  HAL_Delay(2000);
 8000a36:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a3a:	f000 fa01 	bl	8000e40 <HAL_Delay>

	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1);
 8000a3e:	2301      	movs	r3, #1
 8000a40:	2200      	movs	r2, #0
 8000a42:	2110      	movs	r1, #16
 8000a44:	4804      	ldr	r0, [pc, #16]	@ (8000a58 <main+0x5c>)
 8000a46:	f000 fba9 	bl	800119c <HAL_DAC_SetValue>

	  HAL_Delay(2000);
 8000a4a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000a4e:	f000 f9f7 	bl	8000e40 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095); //logic analyzerda okuma için 3.2V deneme
 8000a52:	bf00      	nop
 8000a54:	e7e8      	b.n	8000a28 <main+0x2c>
 8000a56:	bf00      	nop
 8000a58:	20000118 	.word	0x20000118

08000a5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b094      	sub	sp, #80	@ 0x50
 8000a60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a62:	f107 0320 	add.w	r3, r7, #32
 8000a66:	2230      	movs	r2, #48	@ 0x30
 8000a68:	2100      	movs	r1, #0
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f007 fe80 	bl	8008770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a80:	2300      	movs	r3, #0
 8000a82:	60bb      	str	r3, [r7, #8]
 8000a84:	4b28      	ldr	r3, [pc, #160]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a88:	4a27      	ldr	r2, [pc, #156]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a90:	4b25      	ldr	r3, [pc, #148]	@ (8000b28 <SystemClock_Config+0xcc>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	60bb      	str	r3, [r7, #8]
 8000a9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aa6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aaa:	6013      	str	r3, [r2, #0]
 8000aac:	4b1f      	ldr	r3, [pc, #124]	@ (8000b2c <SystemClock_Config+0xd0>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab4:	607b      	str	r3, [r7, #4]
 8000ab6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000abc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000acc:	2308      	movs	r3, #8
 8000ace:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ad0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ada:	2307      	movs	r3, #7
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 0320 	add.w	r3, r7, #32
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fdca 	bl	800367c <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000aee:	f000 f81f 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000afe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b02:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b0a:	f107 030c 	add.w	r3, r7, #12
 8000b0e:	2105      	movs	r1, #5
 8000b10:	4618      	mov	r0, r3
 8000b12:	f003 f82b 	bl	8003b6c <HAL_RCC_ClockConfig>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b1c:	f000 f808 	bl	8000b30 <Error_Handler>
  }
}
 8000b20:	bf00      	nop
 8000b22:	3750      	adds	r7, #80	@ 0x50
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	bf00      	nop
 8000b3a:	e7fd      	b.n	8000b38 <Error_Handler+0x8>

08000b3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	607b      	str	r3, [r7, #4]
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b52:	4b0d      	ldr	r3, [pc, #52]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b5a:	607b      	str	r3, [r7, #4]
 8000b5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	603b      	str	r3, [r7, #0]
 8000b62:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b66:	4a08      	ldr	r2, [pc, #32]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <HAL_MspInit+0x4c>)
 8000b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b76:	603b      	str	r3, [r7, #0]
 8000b78:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b7a:	2007      	movs	r0, #7
 8000b7c:	f000 fa54 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <NMI_Handler+0x4>

08000b94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b98:	bf00      	nop
 8000b9a:	e7fd      	b.n	8000b98 <HardFault_Handler+0x4>

08000b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba0:	bf00      	nop
 8000ba2:	e7fd      	b.n	8000ba0 <MemManage_Handler+0x4>

08000ba4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba8:	bf00      	nop
 8000baa:	e7fd      	b.n	8000ba8 <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	bf00      	nop
 8000bb2:	e7fd      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be2:	f000 f90d 	bl	8000e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
	...

08000bec <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bf0:	4802      	ldr	r0, [pc, #8]	@ (8000bfc <OTG_FS_IRQHandler+0x10>)
 8000bf2:	f001 fc35 	bl	8002460 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200016f4 	.word	0x200016f4

08000c00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <SystemInit+0x20>)
 8000c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c0a:	4a05      	ldr	r2, [pc, #20]	@ (8000c20 <SystemInit+0x20>)
 8000c0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	@ (8000c74 <MX_USART2_UART_Init+0x50>)
 8000c2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2e:	4b10      	ldr	r3, [pc, #64]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c30:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c42:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c48:	4b09      	ldr	r3, [pc, #36]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4e:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c5a:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <MX_USART2_UART_Init+0x4c>)
 8000c5c:	f003 fae8 	bl	8004230 <HAL_UART_Init>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c66:	f7ff ff63 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001c8 	.word	0x200001c8
 8000c74:	40004400 	.word	0x40004400

08000c78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08a      	sub	sp, #40	@ 0x28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a19      	ldr	r2, [pc, #100]	@ (8000cfc <HAL_UART_MspInit+0x84>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d12b      	bne.n	8000cf2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	613b      	str	r3, [r7, #16]
 8000c9e:	4b18      	ldr	r3, [pc, #96]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a17      	ldr	r2, [pc, #92]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b15      	ldr	r3, [pc, #84]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
 8000cba:	4b11      	ldr	r3, [pc, #68]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	4a10      	ldr	r2, [pc, #64]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000d00 <HAL_UART_MspInit+0x88>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ce2:	2307      	movs	r3, #7
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4805      	ldr	r0, [pc, #20]	@ (8000d04 <HAL_UART_MspInit+0x8c>)
 8000cee:	f000 fad9 	bl	80012a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	@ 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d0c:	f7ff ff78 	bl	8000c00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	@ (8000d44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	@ (8000d48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	@ (8000d50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	@ (8000d54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f007 fd23 	bl	8008780 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d3a:	f7ff fe5f 	bl	80009fc <main>
  bx  lr    
 8000d3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000d40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000d4c:	08008850 	.word	0x08008850
  ldr r2, =_sbss
 8000d50:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000d54:	20001df8 	.word	0x20001df8

08000d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d60:	4b0e      	ldr	r3, [pc, #56]	@ (8000d9c <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a0d      	ldr	r2, [pc, #52]	@ (8000d9c <HAL_Init+0x40>)
 8000d66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d9c <HAL_Init+0x40>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_Init+0x40>)
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d78:	4b08      	ldr	r3, [pc, #32]	@ (8000d9c <HAL_Init+0x40>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a07      	ldr	r2, [pc, #28]	@ (8000d9c <HAL_Init+0x40>)
 8000d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f94f 	bl	8001028 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d8a:	2000      	movs	r0, #0
 8000d8c:	f000 f808 	bl	8000da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d90:	f7ff fed4 	bl	8000b3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d94:	2300      	movs	r3, #0
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40023c00 	.word	0x40023c00

08000da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000da8:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <HAL_InitTick+0x54>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_InitTick+0x58>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	4619      	mov	r1, r3
 8000db2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f000 f967 	bl	8001092 <HAL_SYSTICK_Config>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00e      	b.n	8000dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2b0f      	cmp	r3, #15
 8000dd2:	d80a      	bhi.n	8000dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	6879      	ldr	r1, [r7, #4]
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f000 f92f 	bl	800103e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000de0:	4a06      	ldr	r2, [pc, #24]	@ (8000dfc <HAL_InitTick+0x5c>)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
 8000de8:	e000      	b.n	8000dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000
 8000df8:	20000008 	.word	0x20000008
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <HAL_IncTick+0x20>)
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4413      	add	r3, r2
 8000e10:	4a04      	ldr	r2, [pc, #16]	@ (8000e24 <HAL_IncTick+0x24>)
 8000e12:	6013      	str	r3, [r2, #0]
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000210 	.word	0x20000210

08000e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e2c:	4b03      	ldr	r3, [pc, #12]	@ (8000e3c <HAL_GetTick+0x14>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	20000210 	.word	0x20000210

08000e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e48:	f7ff ffee 	bl	8000e28 <HAL_GetTick>
 8000e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e58:	d005      	beq.n	8000e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e84 <HAL_Delay+0x44>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4413      	add	r3, r2
 8000e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e66:	bf00      	nop
 8000e68:	f7ff ffde 	bl	8000e28 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	68bb      	ldr	r3, [r7, #8]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	68fa      	ldr	r2, [r7, #12]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	d8f7      	bhi.n	8000e68 <HAL_Delay+0x28>
  {
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000008 	.word	0x20000008

08000e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f003 0307 	and.w	r3, r3, #7
 8000e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9e:	68ba      	ldr	r2, [r7, #8]
 8000ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eba:	4a04      	ldr	r2, [pc, #16]	@ (8000ecc <__NVIC_SetPriorityGrouping+0x44>)
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	60d3      	str	r3, [r2, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed4:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	0a1b      	lsrs	r3, r3, #8
 8000eda:	f003 0307 	and.w	r3, r3, #7
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr
 8000ee8:	e000ed00 	.word	0xe000ed00

08000eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	db0b      	blt.n	8000f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	f003 021f 	and.w	r2, r3, #31
 8000f04:	4907      	ldr	r1, [pc, #28]	@ (8000f24 <__NVIC_EnableIRQ+0x38>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	095b      	lsrs	r3, r3, #5
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f16:	bf00      	nop
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000e100 	.word	0xe000e100

08000f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	6039      	str	r1, [r7, #0]
 8000f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db0a      	blt.n	8000f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	b2da      	uxtb	r2, r3
 8000f40:	490c      	ldr	r1, [pc, #48]	@ (8000f74 <__NVIC_SetPriority+0x4c>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	0112      	lsls	r2, r2, #4
 8000f48:	b2d2      	uxtb	r2, r2
 8000f4a:	440b      	add	r3, r1
 8000f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f50:	e00a      	b.n	8000f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	b2da      	uxtb	r2, r3
 8000f56:	4908      	ldr	r1, [pc, #32]	@ (8000f78 <__NVIC_SetPriority+0x50>)
 8000f58:	79fb      	ldrb	r3, [r7, #7]
 8000f5a:	f003 030f 	and.w	r3, r3, #15
 8000f5e:	3b04      	subs	r3, #4
 8000f60:	0112      	lsls	r2, r2, #4
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	761a      	strb	r2, [r3, #24]
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000e100 	.word	0xe000e100
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f003 0307 	and.w	r3, r3, #7
 8000f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f90:	69fb      	ldr	r3, [r7, #28]
 8000f92:	f1c3 0307 	rsb	r3, r3, #7
 8000f96:	2b04      	cmp	r3, #4
 8000f98:	bf28      	it	cs
 8000f9a:	2304      	movcs	r3, #4
 8000f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	2b06      	cmp	r3, #6
 8000fa4:	d902      	bls.n	8000fac <NVIC_EncodePriority+0x30>
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3b03      	subs	r3, #3
 8000faa:	e000      	b.n	8000fae <NVIC_EncodePriority+0x32>
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	43da      	mvns	r2, r3
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	fa01 f303 	lsl.w	r3, r1, r3
 8000fce:	43d9      	mvns	r1, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd4:	4313      	orrs	r3, r2
         );
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3724      	adds	r7, #36	@ 0x24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
	...

08000fe4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ff4:	d301      	bcc.n	8000ffa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00f      	b.n	800101a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffa:	4a0a      	ldr	r2, [pc, #40]	@ (8001024 <SysTick_Config+0x40>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	3b01      	subs	r3, #1
 8001000:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001002:	210f      	movs	r1, #15
 8001004:	f04f 30ff 	mov.w	r0, #4294967295
 8001008:	f7ff ff8e 	bl	8000f28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100c:	4b05      	ldr	r3, [pc, #20]	@ (8001024 <SysTick_Config+0x40>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001012:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <SysTick_Config+0x40>)
 8001014:	2207      	movs	r2, #7
 8001016:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	e000e010 	.word	0xe000e010

08001028 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff29 	bl	8000e88 <__NVIC_SetPriorityGrouping>
}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
 800104a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001050:	f7ff ff3e 	bl	8000ed0 <__NVIC_GetPriorityGrouping>
 8001054:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001056:	687a      	ldr	r2, [r7, #4]
 8001058:	68b9      	ldr	r1, [r7, #8]
 800105a:	6978      	ldr	r0, [r7, #20]
 800105c:	f7ff ff8e 	bl	8000f7c <NVIC_EncodePriority>
 8001060:	4602      	mov	r2, r0
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001066:	4611      	mov	r1, r2
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff ff5d 	bl	8000f28 <__NVIC_SetPriority>
}
 800106e:	bf00      	nop
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
 800107c:	4603      	mov	r3, r0
 800107e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff31 	bl	8000eec <__NVIC_EnableIRQ>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	b082      	sub	sp, #8
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff ffa2 	bl	8000fe4 <SysTick_Config>
 80010a0:	4603      	mov	r3, r0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d101      	bne.n	80010bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80010b8:	2301      	movs	r3, #1
 80010ba:	e014      	b.n	80010e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	791b      	ldrb	r3, [r3, #4]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d105      	bne.n	80010d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2200      	movs	r2, #0
 80010ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fa1d 	bl	800050c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2202      	movs	r2, #2
 80010d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2201      	movs	r2, #1
 80010e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80010ee:	b480      	push	{r7}
 80010f0:	b083      	sub	sp, #12
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e046      	b.n	8001190 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	795b      	ldrb	r3, [r3, #5]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d101      	bne.n	800110e <HAL_DAC_Start+0x20>
 800110a:	2302      	movs	r3, #2
 800110c:	e040      	b.n	8001190 <HAL_DAC_Start+0xa2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2201      	movs	r2, #1
 8001112:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	2202      	movs	r2, #2
 8001118:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	f003 0310 	and.w	r3, r3, #16
 8001126:	2201      	movs	r2, #1
 8001128:	409a      	lsls	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d10f      	bne.n	8001158 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001142:	2b3c      	cmp	r3, #60	@ 0x3c
 8001144:	d11d      	bne.n	8001182 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 0201 	orr.w	r2, r2, #1
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	e014      	b.n	8001182 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	f003 0310 	and.w	r3, r3, #16
 8001168:	213c      	movs	r1, #60	@ 0x3c
 800116a:	fa01 f303 	lsl.w	r3, r1, r3
 800116e:	429a      	cmp	r2, r3
 8001170:	d107      	bne.n	8001182 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	685a      	ldr	r2, [r3, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f042 0202 	orr.w	r2, r2, #2
 8001180:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	2201      	movs	r2, #1
 8001186:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2200      	movs	r2, #0
 800118c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800118e:	2300      	movs	r3, #0
}
 8001190:	4618      	mov	r0, r3
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800119c:	b480      	push	{r7}
 800119e:	b087      	sub	sp, #28
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	60f8      	str	r0, [r7, #12]
 80011a4:	60b9      	str	r1, [r7, #8]
 80011a6:	607a      	str	r2, [r7, #4]
 80011a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80011aa:	2300      	movs	r3, #0
 80011ac:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d101      	bne.n	80011b8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80011b4:	2301      	movs	r3, #1
 80011b6:	e015      	b.n	80011e4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80011be:	68bb      	ldr	r3, [r7, #8]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d105      	bne.n	80011d0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	3308      	adds	r3, #8
 80011cc:	617b      	str	r3, [r7, #20]
 80011ce:	e004      	b.n	80011da <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80011d0:	697a      	ldr	r2, [r7, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	3314      	adds	r3, #20
 80011d8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	461a      	mov	r2, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	371c      	adds	r7, #28
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b089      	sub	sp, #36	@ 0x24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <HAL_DAC_ConfigChannel+0x1c>
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e042      	b.n	8001296 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	795b      	ldrb	r3, [r3, #5]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d101      	bne.n	800121c <HAL_DAC_ConfigChannel+0x2c>
 8001218:	2302      	movs	r3, #2
 800121a:	e03c      	b.n	8001296 <HAL_DAC_ConfigChannel+0xa6>
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2201      	movs	r2, #1
 8001220:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2202      	movs	r2, #2
 8001226:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f003 0310 	and.w	r3, r3, #16
 8001236:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800123e:	43db      	mvns	r3, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4013      	ands	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	4313      	orrs	r3, r2
 8001250:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f003 0310 	and.w	r3, r3, #16
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	22c0      	movs	r2, #192	@ 0xc0
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	400a      	ands	r2, r1
 8001286:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2201      	movs	r2, #1
 800128c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	2200      	movs	r2, #0
 8001292:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001294:	7ffb      	ldrb	r3, [r7, #31]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3724      	adds	r7, #36	@ 0x24
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
	...

080012a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b089      	sub	sp, #36	@ 0x24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
 80012be:	e16b      	b.n	8001598 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012c0:	2201      	movs	r2, #1
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	697a      	ldr	r2, [r7, #20]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	429a      	cmp	r2, r3
 80012da:	f040 815a 	bne.w	8001592 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f003 0303 	and.w	r3, r3, #3
 80012e6:	2b01      	cmp	r3, #1
 80012e8:	d005      	beq.n	80012f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d130      	bne.n	8001358 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	2203      	movs	r2, #3
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68da      	ldr	r2, [r3, #12]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4313      	orrs	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800132c:	2201      	movs	r2, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	091b      	lsrs	r3, r3, #4
 8001342:	f003 0201 	and.w	r2, r3, #1
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0303 	and.w	r3, r3, #3
 8001360:	2b03      	cmp	r3, #3
 8001362:	d017      	beq.n	8001394 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	2203      	movs	r2, #3
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	43db      	mvns	r3, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4013      	ands	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	689a      	ldr	r2, [r3, #8]
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	005b      	lsls	r3, r3, #1
 8001384:	fa02 f303 	lsl.w	r3, r2, r3
 8001388:	69ba      	ldr	r2, [r7, #24]
 800138a:	4313      	orrs	r3, r2
 800138c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0303 	and.w	r3, r3, #3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d123      	bne.n	80013e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	08da      	lsrs	r2, r3, #3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3208      	adds	r2, #8
 80013a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	f003 0307 	and.w	r3, r3, #7
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	220f      	movs	r2, #15
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	43db      	mvns	r3, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	009b      	lsls	r3, r3, #2
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	69ba      	ldr	r2, [r7, #24]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	08da      	lsrs	r2, r3, #3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	3208      	adds	r2, #8
 80013e2:	69b9      	ldr	r1, [r7, #24]
 80013e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	2203      	movs	r2, #3
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	69ba      	ldr	r2, [r7, #24]
 80013fc:	4013      	ands	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 0203 	and.w	r2, r3, #3
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	69ba      	ldr	r2, [r7, #24]
 8001412:	4313      	orrs	r3, r2
 8001414:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80b4 	beq.w	8001592 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b60      	ldr	r3, [pc, #384]	@ (80015b0 <HAL_GPIO_Init+0x30c>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a5f      	ldr	r2, [pc, #380]	@ (80015b0 <HAL_GPIO_Init+0x30c>)
 8001434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b5d      	ldr	r3, [pc, #372]	@ (80015b0 <HAL_GPIO_Init+0x30c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001446:	4a5b      	ldr	r2, [pc, #364]	@ (80015b4 <HAL_GPIO_Init+0x310>)
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	089b      	lsrs	r3, r3, #2
 800144c:	3302      	adds	r3, #2
 800144e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001452:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f003 0303 	and.w	r3, r3, #3
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	220f      	movs	r2, #15
 800145e:	fa02 f303 	lsl.w	r3, r2, r3
 8001462:	43db      	mvns	r3, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4013      	ands	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a52      	ldr	r2, [pc, #328]	@ (80015b8 <HAL_GPIO_Init+0x314>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x226>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a51      	ldr	r2, [pc, #324]	@ (80015bc <HAL_GPIO_Init+0x318>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d025      	beq.n	80014c6 <HAL_GPIO_Init+0x222>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a50      	ldr	r2, [pc, #320]	@ (80015c0 <HAL_GPIO_Init+0x31c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x21e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4f      	ldr	r2, [pc, #316]	@ (80015c4 <HAL_GPIO_Init+0x320>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x21a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4e      	ldr	r2, [pc, #312]	@ (80015c8 <HAL_GPIO_Init+0x324>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x216>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a4d      	ldr	r2, [pc, #308]	@ (80015cc <HAL_GPIO_Init+0x328>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x212>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4c      	ldr	r2, [pc, #304]	@ (80015d0 <HAL_GPIO_Init+0x32c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x20e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4b      	ldr	r2, [pc, #300]	@ (80015d4 <HAL_GPIO_Init+0x330>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x20a>
 80014aa:	2307      	movs	r3, #7
 80014ac:	e00e      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014ae:	2308      	movs	r3, #8
 80014b0:	e00c      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014b2:	2306      	movs	r3, #6
 80014b4:	e00a      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014b6:	2305      	movs	r3, #5
 80014b8:	e008      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014ba:	2304      	movs	r3, #4
 80014bc:	e006      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014be:	2303      	movs	r3, #3
 80014c0:	e004      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014c2:	2302      	movs	r3, #2
 80014c4:	e002      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <HAL_GPIO_Init+0x228>
 80014ca:	2300      	movs	r3, #0
 80014cc:	69fa      	ldr	r2, [r7, #28]
 80014ce:	f002 0203 	and.w	r2, r2, #3
 80014d2:	0092      	lsls	r2, r2, #2
 80014d4:	4093      	lsls	r3, r2
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014dc:	4935      	ldr	r1, [pc, #212]	@ (80015b4 <HAL_GPIO_Init+0x310>)
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	089b      	lsrs	r3, r3, #2
 80014e2:	3302      	adds	r3, #2
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014ea:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4013      	ands	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150e:	4a32      	ldr	r2, [pc, #200]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001514:	4b30      	ldr	r3, [pc, #192]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	43db      	mvns	r3, r3
 800151e:	69ba      	ldr	r2, [r7, #24]
 8001520:	4013      	ands	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800152c:	2b00      	cmp	r3, #0
 800152e:	d003      	beq.n	8001538 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	693b      	ldr	r3, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001538:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 800153a:	69bb      	ldr	r3, [r7, #24]
 800153c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800153e:	4b26      	ldr	r3, [pc, #152]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	43db      	mvns	r3, r3
 8001548:	69ba      	ldr	r2, [r7, #24]
 800154a:	4013      	ands	r3, r2
 800154c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d003      	beq.n	8001562 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001562:	4a1d      	ldr	r2, [pc, #116]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 8001564:	69bb      	ldr	r3, [r7, #24]
 8001566:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001568:	4b1b      	ldr	r3, [pc, #108]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	43db      	mvns	r3, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4013      	ands	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	4313      	orrs	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800158c:	4a12      	ldr	r2, [pc, #72]	@ (80015d8 <HAL_GPIO_Init+0x334>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3301      	adds	r3, #1
 8001596:	61fb      	str	r3, [r7, #28]
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	2b0f      	cmp	r3, #15
 800159c:	f67f ae90 	bls.w	80012c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a0:	bf00      	nop
 80015a2:	bf00      	nop
 80015a4:	3724      	adds	r7, #36	@ 0x24
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40013800 	.word	0x40013800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020800 	.word	0x40020800
 80015c4:	40020c00 	.word	0x40020c00
 80015c8:	40021000 	.word	0x40021000
 80015cc:	40021400 	.word	0x40021400
 80015d0:	40021800 	.word	0x40021800
 80015d4:	40021c00 	.word	0x40021c00
 80015d8:	40013c00 	.word	0x40013c00

080015dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	460b      	mov	r3, r1
 80015e6:	807b      	strh	r3, [r7, #2]
 80015e8:	4613      	mov	r3, r2
 80015ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ec:	787b      	ldrb	r3, [r7, #1]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015f8:	e003      	b.n	8001602 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015fa:	887b      	ldrh	r3, [r7, #2]
 80015fc:	041a      	lsls	r2, r3, #16
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	619a      	str	r2, [r3, #24]
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d101      	bne.n	8001622 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e12b      	b.n	800187a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001628:	b2db      	uxtb	r3, r3
 800162a:	2b00      	cmp	r3, #0
 800162c:	d106      	bne.n	800163c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff f8e8 	bl	800080c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	@ 0x24
 8001640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0201 	bic.w	r2, r2, #1
 8001652:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001662:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001672:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001674:	f002 fc72 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 8001678:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a81      	ldr	r2, [pc, #516]	@ (8001884 <HAL_I2C_Init+0x274>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d807      	bhi.n	8001694 <HAL_I2C_Init+0x84>
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	4a80      	ldr	r2, [pc, #512]	@ (8001888 <HAL_I2C_Init+0x278>)
 8001688:	4293      	cmp	r3, r2
 800168a:	bf94      	ite	ls
 800168c:	2301      	movls	r3, #1
 800168e:	2300      	movhi	r3, #0
 8001690:	b2db      	uxtb	r3, r3
 8001692:	e006      	b.n	80016a2 <HAL_I2C_Init+0x92>
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4a7d      	ldr	r2, [pc, #500]	@ (800188c <HAL_I2C_Init+0x27c>)
 8001698:	4293      	cmp	r3, r2
 800169a:	bf94      	ite	ls
 800169c:	2301      	movls	r3, #1
 800169e:	2300      	movhi	r3, #0
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0e7      	b.n	800187a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	4a78      	ldr	r2, [pc, #480]	@ (8001890 <HAL_I2C_Init+0x280>)
 80016ae:	fba2 2303 	umull	r2, r3, r2, r3
 80016b2:	0c9b      	lsrs	r3, r3, #18
 80016b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	430a      	orrs	r2, r1
 80016c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001884 <HAL_I2C_Init+0x274>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d802      	bhi.n	80016e4 <HAL_I2C_Init+0xd4>
 80016de:	68bb      	ldr	r3, [r7, #8]
 80016e0:	3301      	adds	r3, #1
 80016e2:	e009      	b.n	80016f8 <HAL_I2C_Init+0xe8>
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	4a69      	ldr	r2, [pc, #420]	@ (8001894 <HAL_I2C_Init+0x284>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	099b      	lsrs	r3, r3, #6
 80016f6:	3301      	adds	r3, #1
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	430b      	orrs	r3, r1
 80016fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800170a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	495c      	ldr	r1, [pc, #368]	@ (8001884 <HAL_I2C_Init+0x274>)
 8001714:	428b      	cmp	r3, r1
 8001716:	d819      	bhi.n	800174c <HAL_I2C_Init+0x13c>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e59      	subs	r1, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fbb1 f3f3 	udiv	r3, r1, r3
 8001726:	1c59      	adds	r1, r3, #1
 8001728:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800172c:	400b      	ands	r3, r1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d00a      	beq.n	8001748 <HAL_I2C_Init+0x138>
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	1e59      	subs	r1, r3, #1
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001740:	3301      	adds	r3, #1
 8001742:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001746:	e051      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 8001748:	2304      	movs	r3, #4
 800174a:	e04f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d111      	bne.n	8001778 <HAL_I2C_Init+0x168>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	1e58      	subs	r0, r3, #1
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6859      	ldr	r1, [r3, #4]
 800175c:	460b      	mov	r3, r1
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	440b      	add	r3, r1
 8001762:	fbb0 f3f3 	udiv	r3, r0, r3
 8001766:	3301      	adds	r3, #1
 8001768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	e012      	b.n	800179e <HAL_I2C_Init+0x18e>
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1e58      	subs	r0, r3, #1
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	440b      	add	r3, r1
 8001786:	0099      	lsls	r1, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	fbb0 f3f3 	udiv	r3, r0, r3
 800178e:	3301      	adds	r3, #1
 8001790:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001794:	2b00      	cmp	r3, #0
 8001796:	bf0c      	ite	eq
 8001798:	2301      	moveq	r3, #1
 800179a:	2300      	movne	r3, #0
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <HAL_I2C_Init+0x196>
 80017a2:	2301      	movs	r3, #1
 80017a4:	e022      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d10e      	bne.n	80017cc <HAL_I2C_Init+0x1bc>
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	1e58      	subs	r0, r3, #1
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6859      	ldr	r1, [r3, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	440b      	add	r3, r1
 80017bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80017c0:	3301      	adds	r3, #1
 80017c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017ca:	e00f      	b.n	80017ec <HAL_I2C_Init+0x1dc>
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	1e58      	subs	r0, r3, #1
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6859      	ldr	r1, [r3, #4]
 80017d4:	460b      	mov	r3, r1
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	440b      	add	r3, r1
 80017da:	0099      	lsls	r1, r3, #2
 80017dc:	440b      	add	r3, r1
 80017de:	fbb0 f3f3 	udiv	r3, r0, r3
 80017e2:	3301      	adds	r3, #1
 80017e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	6809      	ldr	r1, [r1, #0]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	69da      	ldr	r2, [r3, #28]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a1b      	ldr	r3, [r3, #32]
 8001806:	431a      	orrs	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	430a      	orrs	r2, r1
 800180e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800181a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6911      	ldr	r1, [r2, #16]
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	68d2      	ldr	r2, [r2, #12]
 8001826:	4311      	orrs	r1, r2
 8001828:	687a      	ldr	r2, [r7, #4]
 800182a:	6812      	ldr	r2, [r2, #0]
 800182c:	430b      	orrs	r3, r1
 800182e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	699b      	ldr	r3, [r3, #24]
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f042 0201 	orr.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	000186a0 	.word	0x000186a0
 8001888:	001e847f 	.word	0x001e847f
 800188c:	003d08ff 	.word	0x003d08ff
 8001890:	431bde83 	.word	0x431bde83
 8001894:	10624dd3 	.word	0x10624dd3

08001898 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e128      	b.n	8001afc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a90      	ldr	r2, [pc, #576]	@ (8001b04 <HAL_I2S_Init+0x26c>)
 80018c2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff f819 	bl	80008fc <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80018e0:	f023 030f 	bic.w	r3, r3, #15
 80018e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2202      	movs	r2, #2
 80018ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	695b      	ldr	r3, [r3, #20]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d060      	beq.n	80019b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d102      	bne.n	8001904 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80018fe:	2310      	movs	r3, #16
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e001      	b.n	8001908 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001904:	2320      	movs	r3, #32
 8001906:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	2b20      	cmp	r3, #32
 800190e:	d802      	bhi.n	8001916 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001916:	2001      	movs	r0, #1
 8001918:	f002 fc2a 	bl	8004170 <HAL_RCCEx_GetPeriphCLKFreq>
 800191c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	691b      	ldr	r3, [r3, #16]
 8001922:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001926:	d125      	bne.n	8001974 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d010      	beq.n	8001952 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	fbb2 f2f3 	udiv	r2, r2, r3
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	461a      	mov	r2, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	695b      	ldr	r3, [r3, #20]
 8001948:	fbb2 f3f3 	udiv	r3, r2, r3
 800194c:	3305      	adds	r3, #5
 800194e:	613b      	str	r3, [r7, #16]
 8001950:	e01f      	b.n	8001992 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	fbb2 f2f3 	udiv	r2, r2, r3
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	461a      	mov	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	695b      	ldr	r3, [r3, #20]
 800196a:	fbb2 f3f3 	udiv	r3, r2, r3
 800196e:	3305      	adds	r3, #5
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	e00e      	b.n	8001992 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fbb2 f2f3 	udiv	r2, r2, r3
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	461a      	mov	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	fbb2 f3f3 	udiv	r3, r2, r3
 800198e:	3305      	adds	r3, #5
 8001990:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4a5c      	ldr	r2, [pc, #368]	@ (8001b08 <HAL_I2S_Init+0x270>)
 8001996:	fba2 2303 	umull	r2, r3, r2, r3
 800199a:	08db      	lsrs	r3, r3, #3
 800199c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	f003 0301 	and.w	r3, r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	021b      	lsls	r3, r3, #8
 80019b4:	61bb      	str	r3, [r7, #24]
 80019b6:	e003      	b.n	80019c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80019b8:	2302      	movs	r3, #2
 80019ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d902      	bls.n	80019cc <HAL_I2S_Init+0x134>
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	2bff      	cmp	r3, #255	@ 0xff
 80019ca:	d907      	bls.n	80019dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d0:	f043 0210 	orr.w	r2, r3, #16
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e08f      	b.n	8001afc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	ea42 0103 	orr.w	r1, r2, r3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	69fa      	ldr	r2, [r7, #28]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80019fa:	f023 030f 	bic.w	r3, r3, #15
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6851      	ldr	r1, [r2, #4]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	6892      	ldr	r2, [r2, #8]
 8001a06:	4311      	orrs	r1, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	68d2      	ldr	r2, [r2, #12]
 8001a0c:	4311      	orrs	r1, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6992      	ldr	r2, [r2, #24]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a1e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a1b      	ldr	r3, [r3, #32]
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d161      	bne.n	8001aec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	4a38      	ldr	r2, [pc, #224]	@ (8001b0c <HAL_I2S_Init+0x274>)
 8001a2c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a37      	ldr	r2, [pc, #220]	@ (8001b10 <HAL_I2S_Init+0x278>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d101      	bne.n	8001a3c <HAL_I2S_Init+0x1a4>
 8001a38:	4b36      	ldr	r3, [pc, #216]	@ (8001b14 <HAL_I2S_Init+0x27c>)
 8001a3a:	e001      	b.n	8001a40 <HAL_I2S_Init+0x1a8>
 8001a3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6812      	ldr	r2, [r2, #0]
 8001a46:	4932      	ldr	r1, [pc, #200]	@ (8001b10 <HAL_I2S_Init+0x278>)
 8001a48:	428a      	cmp	r2, r1
 8001a4a:	d101      	bne.n	8001a50 <HAL_I2S_Init+0x1b8>
 8001a4c:	4a31      	ldr	r2, [pc, #196]	@ (8001b14 <HAL_I2S_Init+0x27c>)
 8001a4e:	e001      	b.n	8001a54 <HAL_I2S_Init+0x1bc>
 8001a50:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001a54:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a58:	f023 030f 	bic.w	r3, r3, #15
 8001a5c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a2b      	ldr	r2, [pc, #172]	@ (8001b10 <HAL_I2S_Init+0x278>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_I2S_Init+0x1d4>
 8001a68:	4b2a      	ldr	r3, [pc, #168]	@ (8001b14 <HAL_I2S_Init+0x27c>)
 8001a6a:	e001      	b.n	8001a70 <HAL_I2S_Init+0x1d8>
 8001a6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a70:	2202      	movs	r2, #2
 8001a72:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a25      	ldr	r2, [pc, #148]	@ (8001b10 <HAL_I2S_Init+0x278>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_I2S_Init+0x1ea>
 8001a7e:	4b25      	ldr	r3, [pc, #148]	@ (8001b14 <HAL_I2S_Init+0x27c>)
 8001a80:	e001      	b.n	8001a86 <HAL_I2S_Init+0x1ee>
 8001a82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a92:	d003      	beq.n	8001a9c <HAL_I2S_Init+0x204>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d103      	bne.n	8001aa4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001a9c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001aa0:	613b      	str	r3, [r7, #16]
 8001aa2:	e001      	b.n	8001aa8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001abc:	4313      	orrs	r3, r2
 8001abe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	699b      	ldr	r3, [r3, #24]
 8001ac4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	b29a      	uxth	r2, r3
 8001aca:	897b      	ldrh	r3, [r7, #10]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ad4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a0d      	ldr	r2, [pc, #52]	@ (8001b10 <HAL_I2S_Init+0x278>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d101      	bne.n	8001ae4 <HAL_I2S_Init+0x24c>
 8001ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <HAL_I2S_Init+0x27c>)
 8001ae2:	e001      	b.n	8001ae8 <HAL_I2S_Init+0x250>
 8001ae4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ae8:	897a      	ldrh	r2, [r7, #10]
 8001aea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	08001c0f 	.word	0x08001c0f
 8001b08:	cccccccd 	.word	0xcccccccd
 8001b0c:	08001d25 	.word	0x08001d25
 8001b10:	40003800 	.word	0x40003800
 8001b14:	40003400 	.word	0x40003400

08001b18 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001b34:	bf00      	nop
 8001b36:	370c      	adds	r7, #12
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b083      	sub	sp, #12
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001b48:	bf00      	nop
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6c:	1c9a      	adds	r2, r3, #2
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	3b01      	subs	r3, #1
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b84:	b29b      	uxth	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10e      	bne.n	8001ba8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001b98:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffb8 	bl	8001b18 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	68da      	ldr	r2, [r3, #12]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc2:	b292      	uxth	r2, r2
 8001bc4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bca:	1c9a      	adds	r2, r3, #2
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	b29a      	uxth	r2, r3
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001be2:	b29b      	uxth	r3, r3
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d10e      	bne.n	8001c06 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001bf6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff ff93 	bl	8001b2c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001c06:	bf00      	nop
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d13a      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d109      	bne.n	8001c48 <I2S_IRQHandler+0x3a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c3e:	2b40      	cmp	r3, #64	@ 0x40
 8001c40:	d102      	bne.n	8001c48 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffb4 	bl	8001bb0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4e:	2b40      	cmp	r3, #64	@ 0x40
 8001c50:	d126      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0320 	and.w	r3, r3, #32
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d11f      	bne.n	8001ca0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001c6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001c70:	2300      	movs	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	613b      	str	r3, [r7, #16]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	613b      	str	r3, [r7, #16]
 8001c84:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c92:	f043 0202 	orr.w	r2, r3, #2
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ff50 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	d136      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d109      	bne.n	8001cca <I2S_IRQHandler+0xbc>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cc0:	2b80      	cmp	r3, #128	@ 0x80
 8001cc2:	d102      	bne.n	8001cca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ff45 	bl	8001b54 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d122      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f003 0320 	and.w	r3, r3, #32
 8001cde:	2b20      	cmp	r3, #32
 8001ce0:	d11b      	bne.n	8001d1a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	685a      	ldr	r2, [r3, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001cf0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0c:	f043 0204 	orr.w	r2, r3, #4
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff13 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
	...

08001d24 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b088      	sub	sp, #32
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a92      	ldr	r2, [pc, #584]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001d3e:	4b92      	ldr	r3, [pc, #584]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d40:	e001      	b.n	8001d46 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001d42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a8b      	ldr	r2, [pc, #556]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001d5c:	4b8a      	ldr	r3, [pc, #552]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001d5e:	e001      	b.n	8001d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d70:	d004      	beq.n	8001d7c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f040 8099 	bne.w	8001eae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d107      	bne.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d002      	beq.n	8001d96 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f925 	bl	8001fe0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d107      	bne.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f000 f9c8 	bl	8002140 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001db6:	2b40      	cmp	r3, #64	@ 0x40
 8001db8:	d13a      	bne.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	f003 0320 	and.w	r3, r3, #32
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d035      	beq.n	8001e30 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001dce:	4b6e      	ldr	r3, [pc, #440]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001dd0:	e001      	b.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001dd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4969      	ldr	r1, [pc, #420]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d101      	bne.n	8001de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001de2:	4b69      	ldr	r3, [pc, #420]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001de4:	e001      	b.n	8001dea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001de6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001dea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001dee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	685a      	ldr	r2, [r3, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001dfe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e00:	2300      	movs	r3, #0
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e22:	f043 0202 	orr.w	r2, r3, #2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7ff fe88 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b08      	cmp	r3, #8
 8001e38:	f040 80c3 	bne.w	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f000 80bd 	beq.w	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e56:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a49      	ldr	r2, [pc, #292]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d101      	bne.n	8001e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e62:	4b49      	ldr	r3, [pc, #292]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e64:	e001      	b.n	8001e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001e66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e6a:	685a      	ldr	r2, [r3, #4]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4944      	ldr	r1, [pc, #272]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e72:	428b      	cmp	r3, r1
 8001e74:	d101      	bne.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001e76:	4b44      	ldr	r3, [pc, #272]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e78:	e001      	b.n	8001e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001e7a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e7e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001e82:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	60bb      	str	r3, [r7, #8]
 8001e90:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2201      	movs	r2, #1
 8001e96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e9e:	f043 0204 	orr.w	r2, r3, #4
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7ff fe4a 	bl	8001b40 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001eac:	e089      	b.n	8001fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f8be 	bl	8002044 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d107      	bne.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8fd 	bl	80020dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ee8:	2b40      	cmp	r3, #64	@ 0x40
 8001eea:	d12f      	bne.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f003 0320 	and.w	r3, r3, #32
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d02a      	beq.n	8001f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f04:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d101      	bne.n	8001f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8001f10:	4b1d      	ldr	r3, [pc, #116]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f12:	e001      	b.n	8001f18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8001f14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f18:	685a      	ldr	r2, [r3, #4]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4919      	ldr	r1, [pc, #100]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f20:	428b      	cmp	r3, r1
 8001f22:	d101      	bne.n	8001f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8001f24:	4b18      	ldr	r3, [pc, #96]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f26:	e001      	b.n	8001f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8001f28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f30:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3e:	f043 0202 	orr.w	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fdfa 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001f4c:	69bb      	ldr	r3, [r7, #24]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d136      	bne.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	f003 0320 	and.w	r3, r3, #32
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d031      	beq.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a07      	ldr	r2, [pc, #28]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d101      	bne.n	8001f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8001f6a:	4b07      	ldr	r3, [pc, #28]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f6c:	e001      	b.n	8001f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8001f6e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4902      	ldr	r1, [pc, #8]	@ (8001f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f7a:	428b      	cmp	r3, r1
 8001f7c:	d106      	bne.n	8001f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8001f7e:	4b02      	ldr	r3, [pc, #8]	@ (8001f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f80:	e006      	b.n	8001f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8001f82:	bf00      	nop
 8001f84:	40003800 	.word	0x40003800
 8001f88:	40003400 	.word	0x40003400
 8001f8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f90:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f94:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fa4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	f043 0204 	orr.w	r2, r3, #4
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff fdc0 	bl	8001b40 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001fc0:	e000      	b.n	8001fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fc2:	bf00      	nop
}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fec:	1c99      	adds	r1, r3, #2
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	6251      	str	r1, [r2, #36]	@ 0x24
 8001ff2:	881a      	ldrh	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	3b01      	subs	r3, #1
 8002002:	b29a      	uxth	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800200c:	b29b      	uxth	r3, r3
 800200e:	2b00      	cmp	r3, #0
 8002010:	d113      	bne.n	800203a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002020:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002034:	6878      	ldr	r0, [r7, #4]
 8002036:	f7ff ffc9 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
	...

08002044 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	1c99      	adds	r1, r3, #2
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	6251      	str	r1, [r2, #36]	@ 0x24
 8002056:	8819      	ldrh	r1, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a1d      	ldr	r2, [pc, #116]	@ (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <I2SEx_TxISR_I2SExt+0x22>
 8002062:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002064:	e001      	b.n	800206a <I2SEx_TxISR_I2SExt+0x26>
 8002066:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800206a:	460a      	mov	r2, r1
 800206c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002072:	b29b      	uxth	r3, r3
 8002074:	3b01      	subs	r3, #1
 8002076:	b29a      	uxth	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	d121      	bne.n	80020ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a12      	ldr	r2, [pc, #72]	@ (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d101      	bne.n	8002094 <I2SEx_TxISR_I2SExt+0x50>
 8002090:	4b11      	ldr	r3, [pc, #68]	@ (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002092:	e001      	b.n	8002098 <I2SEx_TxISR_I2SExt+0x54>
 8002094:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	490d      	ldr	r1, [pc, #52]	@ (80020d4 <I2SEx_TxISR_I2SExt+0x90>)
 80020a0:	428b      	cmp	r3, r1
 80020a2:	d101      	bne.n	80020a8 <I2SEx_TxISR_I2SExt+0x64>
 80020a4:	4b0c      	ldr	r3, [pc, #48]	@ (80020d8 <I2SEx_TxISR_I2SExt+0x94>)
 80020a6:	e001      	b.n	80020ac <I2SEx_TxISR_I2SExt+0x68>
 80020a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7ff ff81 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40003800 	.word	0x40003800
 80020d8:	40003400 	.word	0x40003400

080020dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68d8      	ldr	r0, [r3, #12]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	1c99      	adds	r1, r3, #2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80020f4:	b282      	uxth	r2, r0
 80020f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80020fc:	b29b      	uxth	r3, r3
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800210a:	b29b      	uxth	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d113      	bne.n	8002138 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800211e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d106      	bne.n	8002138 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff4a 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a20      	ldr	r2, [pc, #128]	@ (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <I2SEx_RxISR_I2SExt+0x16>
 8002152:	4b20      	ldr	r3, [pc, #128]	@ (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 8002154:	e001      	b.n	800215a <I2SEx_RxISR_I2SExt+0x1a>
 8002156:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800215a:	68d8      	ldr	r0, [r3, #12]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002160:	1c99      	adds	r1, r3, #2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002166:	b282      	uxth	r2, r0
 8002168:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800216e:	b29b      	uxth	r3, r3
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d121      	bne.n	80021c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a12      	ldr	r2, [pc, #72]	@ (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d101      	bne.n	8002190 <I2SEx_RxISR_I2SExt+0x50>
 800218c:	4b11      	ldr	r3, [pc, #68]	@ (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 800218e:	e001      	b.n	8002194 <I2SEx_RxISR_I2SExt+0x54>
 8002190:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002194:	685a      	ldr	r2, [r3, #4]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	490d      	ldr	r1, [pc, #52]	@ (80021d0 <I2SEx_RxISR_I2SExt+0x90>)
 800219c:	428b      	cmp	r3, r1
 800219e:	d101      	bne.n	80021a4 <I2SEx_RxISR_I2SExt+0x64>
 80021a0:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <I2SEx_RxISR_I2SExt+0x94>)
 80021a2:	e001      	b.n	80021a8 <I2SEx_RxISR_I2SExt+0x68>
 80021a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d106      	bne.n	80021c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f7ff ff03 	bl	8001fcc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021c6:	bf00      	nop
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40003800 	.word	0x40003800
 80021d4:	40003400 	.word	0x40003400

080021d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e101      	b.n	80023ee <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d106      	bne.n	800220a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f005 ff91 	bl	800812c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2203      	movs	r2, #3
 800220e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002218:	d102      	bne.n	8002220 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2200      	movs	r2, #0
 800221e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f002 fbde 	bl	80049e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6818      	ldr	r0, [r3, #0]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7c1a      	ldrb	r2, [r3, #16]
 8002232:	f88d 2000 	strb.w	r2, [sp]
 8002236:	3304      	adds	r3, #4
 8002238:	cb0e      	ldmia	r3, {r1, r2, r3}
 800223a:	f002 fabd 	bl	80047b8 <USB_CoreInit>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2202      	movs	r2, #2
 8002248:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0ce      	b.n	80023ee <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2100      	movs	r1, #0
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fbd6 	bl	8004a08 <USB_SetCurrentMode>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d005      	beq.n	800226e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2202      	movs	r2, #2
 8002266:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	e0bf      	b.n	80023ee <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800226e:	2300      	movs	r3, #0
 8002270:	73fb      	strb	r3, [r7, #15]
 8002272:	e04a      	b.n	800230a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002274:	7bfa      	ldrb	r2, [r7, #15]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	00db      	lsls	r3, r3, #3
 800227c:	4413      	add	r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3315      	adds	r3, #21
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002288:	7bfa      	ldrb	r2, [r7, #15]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	3314      	adds	r3, #20
 8002298:	7bfa      	ldrb	r2, [r7, #15]
 800229a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800229c:	7bfa      	ldrb	r2, [r7, #15]
 800229e:	7bfb      	ldrb	r3, [r7, #15]
 80022a0:	b298      	uxth	r0, r3
 80022a2:	6879      	ldr	r1, [r7, #4]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	440b      	add	r3, r1
 80022ae:	332e      	adds	r3, #46	@ 0x2e
 80022b0:	4602      	mov	r2, r0
 80022b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022b4:	7bfa      	ldrb	r2, [r7, #15]
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	4613      	mov	r3, r2
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	440b      	add	r3, r1
 80022c2:	3318      	adds	r3, #24
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022c8:	7bfa      	ldrb	r2, [r7, #15]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	331c      	adds	r3, #28
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022dc:	7bfa      	ldrb	r2, [r7, #15]
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4613      	mov	r3, r2
 80022e2:	00db      	lsls	r3, r3, #3
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	440b      	add	r3, r1
 80022ea:	3320      	adds	r3, #32
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022f0:	7bfa      	ldrb	r2, [r7, #15]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	3324      	adds	r3, #36	@ 0x24
 8002300:	2200      	movs	r2, #0
 8002302:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	3301      	adds	r3, #1
 8002308:	73fb      	strb	r3, [r7, #15]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	791b      	ldrb	r3, [r3, #4]
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	429a      	cmp	r2, r3
 8002312:	d3af      	bcc.n	8002274 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002314:	2300      	movs	r3, #0
 8002316:	73fb      	strb	r3, [r7, #15]
 8002318:	e044      	b.n	80023a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800231a:	7bfa      	ldrb	r2, [r7, #15]
 800231c:	6879      	ldr	r1, [r7, #4]
 800231e:	4613      	mov	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002330:	7bfa      	ldrb	r2, [r7, #15]
 8002332:	6879      	ldr	r1, [r7, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002346:	7bfa      	ldrb	r2, [r7, #15]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4413      	add	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002358:	2200      	movs	r2, #0
 800235a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800235c:	7bfa      	ldrb	r2, [r7, #15]
 800235e:	6879      	ldr	r1, [r7, #4]
 8002360:	4613      	mov	r3, r2
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	4413      	add	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	440b      	add	r3, r1
 800236a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800236e:	2200      	movs	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002388:	7bfa      	ldrb	r2, [r7, #15]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	3301      	adds	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	791b      	ldrb	r3, [r3, #4]
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3b5      	bcc.n	800231a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6818      	ldr	r0, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	7c1a      	ldrb	r2, [r3, #16]
 80023b6:	f88d 2000 	strb.w	r2, [sp]
 80023ba:	3304      	adds	r3, #4
 80023bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023be:	f002 fb6f 	bl	8004aa0 <USB_DevInit>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2202      	movs	r2, #2
 80023cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e00c      	b.n	80023ee <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4618      	mov	r0, r3
 80023e8:	f003 fbb9 	bl	8005b5e <USB_DevDisconnect>

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b084      	sub	sp, #16
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800240a:	2b01      	cmp	r3, #1
 800240c:	d101      	bne.n	8002412 <HAL_PCD_Start+0x1c>
 800240e:	2302      	movs	r3, #2
 8002410:	e022      	b.n	8002458 <HAL_PCD_Start+0x62>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2201      	movs	r2, #1
 8002416:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d009      	beq.n	800243a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800242a:	2b01      	cmp	r3, #1
 800242c:	d105      	bne.n	800243a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002432:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4618      	mov	r0, r3
 8002440:	f002 fac0 	bl	80049c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f003 fb67 	bl	8005b1c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	4618      	mov	r0, r3
 800245a:	3710      	adds	r7, #16
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	b08d      	sub	sp, #52	@ 0x34
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f003 fc25 	bl	8005cc6 <USB_GetMode>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	f040 848c 	bne.w	8002d9c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f003 fb89 	bl	8005ba0 <USB_ReadInterrupts>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 8482 	beq.w	8002d9a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f003 fb76 	bl	8005ba0 <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 0302 	and.w	r3, r3, #2
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d107      	bne.n	80024ce <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f002 0202 	and.w	r2, r2, #2
 80024cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 fb64 	bl	8005ba0 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	f003 0310 	and.w	r3, r3, #16
 80024de:	2b10      	cmp	r3, #16
 80024e0:	d161      	bne.n	80025a6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	699a      	ldr	r2, [r3, #24]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f022 0210 	bic.w	r2, r2, #16
 80024f0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80024f2:	6a3b      	ldr	r3, [r7, #32]
 80024f4:	6a1b      	ldr	r3, [r3, #32]
 80024f6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	f003 020f 	and.w	r2, r3, #15
 80024fe:	4613      	mov	r3, r2
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4413      	add	r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800250a:	687a      	ldr	r2, [r7, #4]
 800250c:	4413      	add	r3, r2
 800250e:	3304      	adds	r3, #4
 8002510:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	0c5b      	lsrs	r3, r3, #17
 8002516:	f003 030f 	and.w	r3, r3, #15
 800251a:	2b02      	cmp	r3, #2
 800251c:	d124      	bne.n	8002568 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800251e:	69ba      	ldr	r2, [r7, #24]
 8002520:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002524:	4013      	ands	r3, r2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d035      	beq.n	8002596 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	091b      	lsrs	r3, r3, #4
 8002532:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002534:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002538:	b29b      	uxth	r3, r3
 800253a:	461a      	mov	r2, r3
 800253c:	6a38      	ldr	r0, [r7, #32]
 800253e:	f003 f99b 	bl	8005878 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	68da      	ldr	r2, [r3, #12]
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	091b      	lsrs	r3, r3, #4
 800254a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800254e:	441a      	add	r2, r3
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	695a      	ldr	r2, [r3, #20]
 8002558:	69bb      	ldr	r3, [r7, #24]
 800255a:	091b      	lsrs	r3, r3, #4
 800255c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002560:	441a      	add	r2, r3
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	615a      	str	r2, [r3, #20]
 8002566:	e016      	b.n	8002596 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	2b06      	cmp	r3, #6
 8002572:	d110      	bne.n	8002596 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800257a:	2208      	movs	r2, #8
 800257c:	4619      	mov	r1, r3
 800257e:	6a38      	ldr	r0, [r7, #32]
 8002580:	f003 f97a 	bl	8005878 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	695a      	ldr	r2, [r3, #20]
 8002588:	69bb      	ldr	r3, [r7, #24]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002590:	441a      	add	r2, r3
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	699a      	ldr	r2, [r3, #24]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f042 0210 	orr.w	r2, r2, #16
 80025a4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 faf8 	bl	8005ba0 <USB_ReadInterrupts>
 80025b0:	4603      	mov	r3, r0
 80025b2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025b6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80025ba:	f040 80a7 	bne.w	800270c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f003 fafd 	bl	8005bc6 <USB_ReadDevAllOutEpInterrupt>
 80025cc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80025ce:	e099      	b.n	8002704 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80025d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 808e 	beq.w	80026f8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 fb21 	bl	8005c2e <USB_ReadDevOutEPInterrupt>
 80025ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d00c      	beq.n	8002612 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	015a      	lsls	r2, r3, #5
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002604:	461a      	mov	r2, r3
 8002606:	2301      	movs	r3, #1
 8002608:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800260a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 fea3 	bl	8003358 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800261c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261e:	015a      	lsls	r2, r3, #5
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002628:	461a      	mov	r2, r3
 800262a:	2308      	movs	r3, #8
 800262c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800262e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 ff79 	bl	8003528 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	d008      	beq.n	8002652 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002642:	015a      	lsls	r2, r3, #5
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800264c:	461a      	mov	r2, r3
 800264e:	2310      	movs	r3, #16
 8002650:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d030      	beq.n	80026be <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b80      	cmp	r3, #128	@ 0x80
 8002666:	d109      	bne.n	800267c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	69fa      	ldr	r2, [r7, #28]
 8002672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002676:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800267a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800267c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267e:	4613      	mov	r3, r2
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4413      	add	r3, r2
 8002684:	009b      	lsls	r3, r3, #2
 8002686:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	3304      	adds	r3, #4
 8002690:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002692:	697b      	ldr	r3, [r7, #20]
 8002694:	78db      	ldrb	r3, [r3, #3]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d108      	bne.n	80026ac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2200      	movs	r2, #0
 800269e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	4619      	mov	r1, r3
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f005 fe54 	bl	8008354 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ae:	015a      	lsls	r2, r3, #5
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	4413      	add	r3, r2
 80026b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026b8:	461a      	mov	r2, r3
 80026ba:	2302      	movs	r3, #2
 80026bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	f003 0320 	and.w	r3, r3, #32
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d008      	beq.n	80026da <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80026c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026d4:	461a      	mov	r2, r3
 80026d6:	2320      	movs	r3, #32
 80026d8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d009      	beq.n	80026f8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80026e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e6:	015a      	lsls	r2, r3, #5
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	4413      	add	r3, r2
 80026ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80026f0:	461a      	mov	r2, r3
 80026f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80026f6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80026f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026fa:	3301      	adds	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80026fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002700:	085b      	lsrs	r3, r3, #1
 8002702:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	2b00      	cmp	r3, #0
 8002708:	f47f af62 	bne.w	80025d0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4618      	mov	r0, r3
 8002712:	f003 fa45 	bl	8005ba0 <USB_ReadInterrupts>
 8002716:	4603      	mov	r3, r0
 8002718:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800271c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002720:	f040 80db 	bne.w	80028da <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4618      	mov	r0, r3
 800272a:	f003 fa66 	bl	8005bfa <USB_ReadDevAllInEpInterrupt>
 800272e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002730:	2300      	movs	r3, #0
 8002732:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002734:	e0cd      	b.n	80028d2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80c2 	beq.w	80028c6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002748:	b2d2      	uxtb	r2, r2
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f003 fa8c 	bl	8005c6a <USB_ReadDevInEPInterrupt>
 8002752:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	f003 0301 	and.w	r3, r3, #1
 800275a:	2b00      	cmp	r3, #0
 800275c:	d057      	beq.n	800280e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800275e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002760:	f003 030f 	and.w	r3, r3, #15
 8002764:	2201      	movs	r2, #1
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002772:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	43db      	mvns	r3, r3
 8002778:	69f9      	ldr	r1, [r7, #28]
 800277a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800277e:	4013      	ands	r3, r2
 8002780:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002784:	015a      	lsls	r2, r3, #5
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	4413      	add	r3, r2
 800278a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800278e:	461a      	mov	r2, r3
 8002790:	2301      	movs	r3, #1
 8002792:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	799b      	ldrb	r3, [r3, #6]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d132      	bne.n	8002802 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027a0:	4613      	mov	r3, r2
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4413      	add	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	3320      	adds	r3, #32
 80027ac:	6819      	ldr	r1, [r3, #0]
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	4403      	add	r3, r0
 80027bc:	331c      	adds	r3, #28
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4419      	add	r1, r3
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4403      	add	r3, r0
 80027d0:	3320      	adds	r3, #32
 80027d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d113      	bne.n	8002802 <HAL_PCD_IRQHandler+0x3a2>
 80027da:	6879      	ldr	r1, [r7, #4]
 80027dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027de:	4613      	mov	r3, r2
 80027e0:	00db      	lsls	r3, r3, #3
 80027e2:	4413      	add	r3, r2
 80027e4:	009b      	lsls	r3, r3, #2
 80027e6:	440b      	add	r3, r1
 80027e8:	3324      	adds	r3, #36	@ 0x24
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80027fa:	461a      	mov	r2, r3
 80027fc:	2101      	movs	r1, #1
 80027fe:	f003 fa93 	bl	8005d28 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002804:	b2db      	uxtb	r3, r3
 8002806:	4619      	mov	r1, r3
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f005 fd1e 	bl	800824a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d008      	beq.n	800282a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002824:	461a      	mov	r2, r3
 8002826:	2308      	movs	r3, #8
 8002828:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002836:	015a      	lsls	r2, r3, #5
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002840:	461a      	mov	r2, r3
 8002842:	2310      	movs	r3, #16
 8002844:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	015a      	lsls	r2, r3, #5
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	4413      	add	r3, r2
 8002858:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800285c:	461a      	mov	r2, r3
 800285e:	2340      	movs	r3, #64	@ 0x40
 8002860:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d023      	beq.n	80028b4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800286c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800286e:	6a38      	ldr	r0, [r7, #32]
 8002870:	f002 fa7a 	bl	8004d68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002876:	4613      	mov	r3, r2
 8002878:	00db      	lsls	r3, r3, #3
 800287a:	4413      	add	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	3310      	adds	r3, #16
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	4413      	add	r3, r2
 8002884:	3304      	adds	r3, #4
 8002886:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	2200      	movs	r2, #0
 8002894:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002898:	b2db      	uxtb	r3, r3
 800289a:	4619      	mov	r1, r3
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f005 fd6b 	bl	8008378 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028ae:	461a      	mov	r2, r3
 80028b0:	2302      	movs	r3, #2
 80028b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80028be:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 fcbd 	bl	8003240 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	3301      	adds	r3, #1
 80028ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80028cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ce:	085b      	lsrs	r3, r3, #1
 80028d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80028d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f47f af2e 	bne.w	8002736 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 f95e 	bl	8005ba0 <USB_ReadInterrupts>
 80028e4:	4603      	mov	r3, r0
 80028e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80028ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80028ee:	d122      	bne.n	8002936 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	69fa      	ldr	r2, [r7, #28]
 80028fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800290a:	2b01      	cmp	r3, #1
 800290c:	d108      	bne.n	8002920 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002916:	2100      	movs	r1, #0
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 fea3 	bl	8003664 <HAL_PCDEx_LPM_Callback>
 800291e:	e002      	b.n	8002926 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f005 fd09 	bl	8008338 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	695a      	ldr	r2, [r3, #20]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f003 f930 	bl	8005ba0 <USB_ReadInterrupts>
 8002940:	4603      	mov	r3, r0
 8002942:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800294a:	d112      	bne.n	8002972 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	2b01      	cmp	r3, #1
 800295a:	d102      	bne.n	8002962 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f005 fcc5 	bl	80082ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695a      	ldr	r2, [r3, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002970:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f003 f912 	bl	8005ba0 <USB_ReadInterrupts>
 800297c:	4603      	mov	r3, r0
 800297e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002986:	f040 80b7 	bne.w	8002af8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2110      	movs	r1, #16
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 f9df 	bl	8004d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029aa:	2300      	movs	r3, #0
 80029ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029ae:	e046      	b.n	8002a3e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b2:	015a      	lsls	r2, r3, #5
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	4413      	add	r3, r2
 80029b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029bc:	461a      	mov	r2, r3
 80029be:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029c2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	015a      	lsls	r2, r3, #5
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80029d4:	0151      	lsls	r1, r2, #5
 80029d6:	69fa      	ldr	r2, [r7, #28]
 80029d8:	440a      	add	r2, r1
 80029da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80029de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80029e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80029e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029f0:	461a      	mov	r2, r3
 80029f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80029f6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80029f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a08:	0151      	lsls	r1, r2, #5
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	440a      	add	r2, r1
 8002a0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002a16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a28:	0151      	lsls	r1, r2, #5
 8002a2a:	69fa      	ldr	r2, [r7, #28]
 8002a2c:	440a      	add	r2, r1
 8002a2e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002a32:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002a36:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	791b      	ldrb	r3, [r3, #4]
 8002a42:	461a      	mov	r2, r3
 8002a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d3b2      	bcc.n	80029b0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	69fa      	ldr	r2, [r7, #28]
 8002a54:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a58:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002a5c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	7bdb      	ldrb	r3, [r3, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d016      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a70:	69fa      	ldr	r2, [r7, #28]
 8002a72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a76:	f043 030b 	orr.w	r3, r3, #11
 8002a7a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	69fa      	ldr	r2, [r7, #28]
 8002a88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a8c:	f043 030b 	orr.w	r3, r3, #11
 8002a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a92:	e015      	b.n	8002ac0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aa2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002aa6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002aaa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	69fa      	ldr	r2, [r7, #28]
 8002ab6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002aba:	f043 030b 	orr.w	r3, r3, #11
 8002abe:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69fa      	ldr	r2, [r7, #28]
 8002aca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ace:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002ad2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	f003 f920 	bl	8005d28 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002af6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4618      	mov	r0, r3
 8002afe:	f003 f84f 	bl	8005ba0 <USB_ReadInterrupts>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b0c:	d123      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f003 f8e5 	bl	8005ce2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f002 f99c 	bl	8004e5a <USB_GetDevSpeed>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681c      	ldr	r4, [r3, #0]
 8002b2e:	f001 fa09 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8002b32:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b38:	461a      	mov	r2, r3
 8002b3a:	4620      	mov	r0, r4
 8002b3c:	f001 fea0 	bl	8004880 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b40:	6878      	ldr	r0, [r7, #4]
 8002b42:	f005 fbaa 	bl	800829a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002b54:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f003 f820 	bl	8005ba0 <USB_ReadInterrupts>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d10a      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f005 fb87 	bl	800827e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f002 0208 	and.w	r2, r2, #8
 8002b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 f80b 	bl	8005ba0 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b90:	2b80      	cmp	r3, #128	@ 0x80
 8002b92:	d123      	bne.n	8002bdc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b9c:	6a3b      	ldr	r3, [r7, #32]
 8002b9e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ba4:	e014      	b.n	8002bd0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d105      	bne.n	8002bca <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bc0:	b2db      	uxtb	r3, r3
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 fb0a 	bl	80031de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bcc:	3301      	adds	r3, #1
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	791b      	ldrb	r3, [r3, #4]
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d3e4      	bcc.n	8002ba6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f002 ffdd 	bl	8005ba0 <USB_ReadInterrupts>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002bf0:	d13c      	bne.n	8002c6c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf6:	e02b      	b.n	8002c50 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	440b      	add	r3, r1
 8002c16:	3318      	adds	r3, #24
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d115      	bne.n	8002c4a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c1e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da12      	bge.n	8002c4a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c28:	4613      	mov	r3, r2
 8002c2a:	00db      	lsls	r3, r3, #3
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	3317      	adds	r3, #23
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	4619      	mov	r1, r3
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 faca 	bl	80031de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	791b      	ldrb	r3, [r3, #4]
 8002c54:	461a      	mov	r2, r3
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d3cd      	bcc.n	8002bf8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	695a      	ldr	r2, [r3, #20]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002c6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 ff95 	bl	8005ba0 <USB_ReadInterrupts>
 8002c76:	4603      	mov	r3, r0
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002c80:	d156      	bne.n	8002d30 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c82:	2301      	movs	r3, #1
 8002c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c86:	e045      	b.n	8002d14 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	4413      	add	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d12e      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cb0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	da2b      	bge.n	8002d0e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002cc2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d121      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cdc:	2201      	movs	r2, #1
 8002cde:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10a      	bne.n	8002d0e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d0a:	6053      	str	r3, [r2, #4]
            break;
 8002d0c:	e008      	b.n	8002d20 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	3301      	adds	r3, #1
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	791b      	ldrb	r3, [r3, #4]
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d3b3      	bcc.n	8002c88 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002d2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 ff33 	bl	8005ba0 <USB_ReadInterrupts>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002d44:	d10a      	bne.n	8002d5c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d46:	6878      	ldr	r0, [r7, #4]
 8002d48:	f005 fb28 	bl	800839c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	695a      	ldr	r2, [r3, #20]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002d5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 ff1d 	bl	8005ba0 <USB_ReadInterrupts>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d115      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	f003 0304 	and.w	r3, r3, #4
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f005 fb18 	bl	80083b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6859      	ldr	r1, [r3, #4]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	430a      	orrs	r2, r1
 8002d96:	605a      	str	r2, [r3, #4]
 8002d98:	e000      	b.n	8002d9c <HAL_PCD_IRQHandler+0x93c>
      return;
 8002d9a:	bf00      	nop
    }
  }
}
 8002d9c:	3734      	adds	r7, #52	@ 0x34
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd90      	pop	{r4, r7, pc}

08002da2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b082      	sub	sp, #8
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_PCD_SetAddress+0x1a>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e012      	b.n	8002de2 <HAL_PCD_SetAddress+0x40>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	78fa      	ldrb	r2, [r7, #3]
 8002dc8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f002 fe7c 	bl	8005ad0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	4608      	mov	r0, r1
 8002df4:	4611      	mov	r1, r2
 8002df6:	461a      	mov	r2, r3
 8002df8:	4603      	mov	r3, r0
 8002dfa:	70fb      	strb	r3, [r7, #3]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	803b      	strh	r3, [r7, #0]
 8002e00:	4613      	mov	r3, r2
 8002e02:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002e04:	2300      	movs	r3, #0
 8002e06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	da0f      	bge.n	8002e30 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	f003 020f 	and.w	r2, r3, #15
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	3310      	adds	r3, #16
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	4413      	add	r3, r2
 8002e24:	3304      	adds	r3, #4
 8002e26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	705a      	strb	r2, [r3, #1]
 8002e2e:	e00f      	b.n	8002e50 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 020f 	and.w	r2, r3, #15
 8002e36:	4613      	mov	r3, r2
 8002e38:	00db      	lsls	r3, r3, #3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3304      	adds	r3, #4
 8002e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	f003 030f 	and.w	r3, r3, #15
 8002e56:	b2da      	uxtb	r2, r3
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002e5c:	883b      	ldrh	r3, [r7, #0]
 8002e5e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	78ba      	ldrb	r2, [r7, #2]
 8002e6a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	785b      	ldrb	r3, [r3, #1]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d004      	beq.n	8002e7e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002e7e:	78bb      	ldrb	r3, [r7, #2]
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d102      	bne.n	8002e8a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d101      	bne.n	8002e98 <HAL_PCD_EP_Open+0xae>
 8002e94:	2302      	movs	r3, #2
 8002e96:	e00e      	b.n	8002eb6 <HAL_PCD_EP_Open+0xcc>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	68f9      	ldr	r1, [r7, #12]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f001 fffc 	bl	8004ea4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002eb4:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002eca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	da0f      	bge.n	8002ef2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed2:	78fb      	ldrb	r3, [r7, #3]
 8002ed4:	f003 020f 	and.w	r2, r3, #15
 8002ed8:	4613      	mov	r3, r2
 8002eda:	00db      	lsls	r3, r3, #3
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	3310      	adds	r3, #16
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2201      	movs	r2, #1
 8002eee:	705a      	strb	r2, [r3, #1]
 8002ef0:	e00f      	b.n	8002f12 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef2:	78fb      	ldrb	r3, [r7, #3]
 8002ef4:	f003 020f 	and.w	r2, r3, #15
 8002ef8:	4613      	mov	r3, r2
 8002efa:	00db      	lsls	r3, r3, #3
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f04:	687a      	ldr	r2, [r7, #4]
 8002f06:	4413      	add	r3, r2
 8002f08:	3304      	adds	r3, #4
 8002f0a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f12:	78fb      	ldrb	r3, [r7, #3]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d101      	bne.n	8002f2c <HAL_PCD_EP_Close+0x6e>
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e00e      	b.n	8002f4a <HAL_PCD_EP_Close+0x8c>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68f9      	ldr	r1, [r7, #12]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 f83a 	bl	8004fb4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b086      	sub	sp, #24
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	60f8      	str	r0, [r7, #12]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f62:	7afb      	ldrb	r3, [r7, #11]
 8002f64:	f003 020f 	and.w	r2, r3, #15
 8002f68:	4613      	mov	r3, r2
 8002f6a:	00db      	lsls	r3, r3, #3
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4413      	add	r3, r2
 8002f78:	3304      	adds	r3, #4
 8002f7a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2200      	movs	r2, #0
 8002f92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f94:	7afb      	ldrb	r3, [r7, #11]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	799b      	ldrb	r3, [r3, #6]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d102      	bne.n	8002fae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	799b      	ldrb	r3, [r3, #6]
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	6979      	ldr	r1, [r7, #20]
 8002fba:	f002 f8d7 	bl	800516c <USB_EPStartXfer>

  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	f003 020f 	and.w	r2, r3, #15
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	00db      	lsls	r3, r3, #3
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002fea:	681b      	ldr	r3, [r3, #0]
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	460b      	mov	r3, r1
 8003006:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003008:	7afb      	ldrb	r3, [r7, #11]
 800300a:	f003 020f 	and.w	r2, r3, #15
 800300e:	4613      	mov	r3, r2
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	3310      	adds	r3, #16
 8003018:	68fa      	ldr	r2, [r7, #12]
 800301a:	4413      	add	r3, r2
 800301c:	3304      	adds	r3, #4
 800301e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	683a      	ldr	r2, [r7, #0]
 800302a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	2200      	movs	r2, #0
 8003030:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2201      	movs	r2, #1
 8003036:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003038:	7afb      	ldrb	r3, [r7, #11]
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	b2da      	uxtb	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	799b      	ldrb	r3, [r3, #6]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d102      	bne.n	8003052 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	799b      	ldrb	r3, [r3, #6]
 800305a:	461a      	mov	r2, r3
 800305c:	6979      	ldr	r1, [r7, #20]
 800305e:	f002 f885 	bl	800516c <USB_EPStartXfer>

  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3718      	adds	r7, #24
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	460b      	mov	r3, r1
 8003076:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003078:	78fb      	ldrb	r3, [r7, #3]
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	7912      	ldrb	r2, [r2, #4]
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e04f      	b.n	800312a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800308a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800308e:	2b00      	cmp	r3, #0
 8003090:	da0f      	bge.n	80030b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	f003 020f 	and.w	r2, r3, #15
 8003098:	4613      	mov	r3, r2
 800309a:	00db      	lsls	r3, r3, #3
 800309c:	4413      	add	r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	3310      	adds	r3, #16
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	4413      	add	r3, r2
 80030a6:	3304      	adds	r3, #4
 80030a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2201      	movs	r2, #1
 80030ae:	705a      	strb	r2, [r3, #1]
 80030b0:	e00d      	b.n	80030ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	4613      	mov	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	3304      	adds	r3, #4
 80030c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	f003 030f 	and.w	r3, r3, #15
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_PCD_EP_SetStall+0x82>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e01d      	b.n	800312a <HAL_PCD_EP_SetStall+0xbe>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68f9      	ldr	r1, [r7, #12]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f002 fc13 	bl	8005928 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	2b00      	cmp	r3, #0
 800310a:	d109      	bne.n	8003120 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7999      	ldrb	r1, [r3, #6]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800311a:	461a      	mov	r2, r3
 800311c:	f002 fe04 	bl	8005d28 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b084      	sub	sp, #16
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	460b      	mov	r3, r1
 800313c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800313e:	78fb      	ldrb	r3, [r7, #3]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	7912      	ldrb	r2, [r2, #4]
 8003148:	4293      	cmp	r3, r2
 800314a:	d901      	bls.n	8003150 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e042      	b.n	80031d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0f      	bge.n	8003178 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 020f 	and.w	r2, r3, #15
 800315e:	4613      	mov	r3, r2
 8003160:	00db      	lsls	r3, r3, #3
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	3310      	adds	r3, #16
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	3304      	adds	r3, #4
 800316e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2201      	movs	r2, #1
 8003174:	705a      	strb	r2, [r3, #1]
 8003176:	e00f      	b.n	8003198 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	f003 020f 	and.w	r2, r3, #15
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	3304      	adds	r3, #4
 8003190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2200      	movs	r2, #0
 800319c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	f003 030f 	and.w	r3, r3, #15
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d101      	bne.n	80031b8 <HAL_PCD_EP_ClrStall+0x86>
 80031b4:	2302      	movs	r3, #2
 80031b6:	e00e      	b.n	80031d6 <HAL_PCD_EP_ClrStall+0xa4>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68f9      	ldr	r1, [r7, #12]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f002 fc1c 	bl	8005a04 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
 80031e6:	460b      	mov	r3, r1
 80031e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80031ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	da0c      	bge.n	800320c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	f003 020f 	and.w	r2, r3, #15
 80031f8:	4613      	mov	r3, r2
 80031fa:	00db      	lsls	r3, r3, #3
 80031fc:	4413      	add	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	3310      	adds	r3, #16
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	3304      	adds	r3, #4
 8003208:	60fb      	str	r3, [r7, #12]
 800320a:	e00c      	b.n	8003226 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800320c:	78fb      	ldrb	r3, [r7, #3]
 800320e:	f003 020f 	and.w	r2, r3, #15
 8003212:	4613      	mov	r3, r2
 8003214:	00db      	lsls	r3, r3, #3
 8003216:	4413      	add	r3, r2
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	3304      	adds	r3, #4
 8003224:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68f9      	ldr	r1, [r7, #12]
 800322c:	4618      	mov	r0, r3
 800322e:	f002 fa3b 	bl	80056a8 <USB_EPStopXfer>
 8003232:	4603      	mov	r3, r0
 8003234:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003236:	7afb      	ldrb	r3, [r7, #11]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08a      	sub	sp, #40	@ 0x28
 8003244:	af02      	add	r7, sp, #8
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003254:	683a      	ldr	r2, [r7, #0]
 8003256:	4613      	mov	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	3310      	adds	r3, #16
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4413      	add	r3, r2
 8003264:	3304      	adds	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	691b      	ldr	r3, [r3, #16]
 8003270:	429a      	cmp	r2, r3
 8003272:	d901      	bls.n	8003278 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e06b      	b.n	8003350 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	691a      	ldr	r2, [r3, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	69fa      	ldr	r2, [r7, #28]
 800328a:	429a      	cmp	r2, r3
 800328c:	d902      	bls.n	8003294 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	3303      	adds	r3, #3
 8003298:	089b      	lsrs	r3, r3, #2
 800329a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800329c:	e02a      	b.n	80032f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	69fa      	ldr	r2, [r7, #28]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d902      	bls.n	80032ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3303      	adds	r3, #3
 80032be:	089b      	lsrs	r3, r3, #2
 80032c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	68d9      	ldr	r1, [r3, #12]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4603      	mov	r3, r0
 80032d6:	6978      	ldr	r0, [r7, #20]
 80032d8:	f002 fa90 	bl	80057fc <USB_WritePacket>

    ep->xfer_buff  += len;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	68da      	ldr	r2, [r3, #12]
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	441a      	add	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	695a      	ldr	r2, [r3, #20]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	441a      	add	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	015a      	lsls	r2, r3, #5
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	4413      	add	r3, r2
 80032fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	429a      	cmp	r2, r3
 8003308:	d809      	bhi.n	800331e <PCD_WriteEmptyTxFifo+0xde>
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	695a      	ldr	r2, [r3, #20]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003312:	429a      	cmp	r2, r3
 8003314:	d203      	bcs.n	800331e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1bf      	bne.n	800329e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691a      	ldr	r2, [r3, #16]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	429a      	cmp	r2, r3
 8003328:	d811      	bhi.n	800334e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	2201      	movs	r2, #1
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800333e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	43db      	mvns	r3, r3
 8003344:	6939      	ldr	r1, [r7, #16]
 8003346:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800334a:	4013      	ands	r3, r2
 800334c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3720      	adds	r7, #32
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b088      	sub	sp, #32
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	333c      	adds	r3, #60	@ 0x3c
 8003370:	3304      	adds	r3, #4
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	4413      	add	r3, r2
 800337e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	799b      	ldrb	r3, [r3, #6]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d17b      	bne.n	8003486 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d015      	beq.n	80033c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	4a61      	ldr	r2, [pc, #388]	@ (8003520 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	f240 80b9 	bls.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80b3 	beq.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	015a      	lsls	r2, r3, #5
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	4413      	add	r3, r2
 80033b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033ba:	461a      	mov	r2, r3
 80033bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033c0:	6093      	str	r3, [r2, #8]
 80033c2:	e0a7      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d009      	beq.n	80033e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2320      	movs	r3, #32
 80033de:	6093      	str	r3, [r2, #8]
 80033e0:	e098      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8093 	bne.w	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003520 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d90f      	bls.n	8003416 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	015a      	lsls	r2, r3, #5
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	4413      	add	r3, r2
 8003408:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800340c:	461a      	mov	r2, r3
 800340e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003412:	6093      	str	r3, [r2, #8]
 8003414:	e07e      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	4613      	mov	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	4413      	add	r3, r2
 8003428:	3304      	adds	r3, #4
 800342a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	0159      	lsls	r1, r3, #5
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	440b      	add	r3, r1
 8003438:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003442:	1ad2      	subs	r2, r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d114      	bne.n	8003478 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d109      	bne.n	800346a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003460:	461a      	mov	r2, r3
 8003462:	2101      	movs	r1, #1
 8003464:	f002 fc60 	bl	8005d28 <USB_EP0_OutStart>
 8003468:	e006      	b.n	8003478 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	441a      	add	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2db      	uxtb	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f004 fec8 	bl	8008214 <HAL_PCD_DataOutStageCallback>
 8003484:	e046      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a26      	ldr	r2, [pc, #152]	@ (8003524 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d124      	bne.n	80034d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d00a      	beq.n	80034ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a4:	461a      	mov	r2, r3
 80034a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034aa:	6093      	str	r3, [r2, #8]
 80034ac:	e032      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80034ae:	693b      	ldr	r3, [r7, #16]
 80034b0:	f003 0320 	and.w	r3, r3, #32
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d008      	beq.n	80034ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034c4:	461a      	mov	r2, r3
 80034c6:	2320      	movs	r3, #32
 80034c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	4619      	mov	r1, r3
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f004 fe9f 	bl	8008214 <HAL_PCD_DataOutStageCallback>
 80034d6:	e01d      	b.n	8003514 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d114      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x1b0>
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	683a      	ldr	r2, [r7, #0]
 80034e2:	4613      	mov	r3, r2
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003500:	461a      	mov	r2, r3
 8003502:	2100      	movs	r1, #0
 8003504:	f002 fc10 	bl	8005d28 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	b2db      	uxtb	r3, r3
 800350c:	4619      	mov	r1, r3
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f004 fe80 	bl	8008214 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	4f54300a 	.word	0x4f54300a
 8003524:	4f54310a 	.word	0x4f54310a

08003528 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	333c      	adds	r3, #60	@ 0x3c
 8003540:	3304      	adds	r3, #4
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	015a      	lsls	r2, r3, #5
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	4413      	add	r3, r2
 800354e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4a15      	ldr	r2, [pc, #84]	@ (80035b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d90e      	bls.n	800357c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	015a      	lsls	r2, r3, #5
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	4413      	add	r3, r2
 8003570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003574:	461a      	mov	r2, r3
 8003576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800357a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f004 fe37 	bl	80081f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4a0a      	ldr	r2, [pc, #40]	@ (80035b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d90c      	bls.n	80035a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	799b      	ldrb	r3, [r3, #6]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d108      	bne.n	80035a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800359c:	461a      	mov	r2, r3
 800359e:	2101      	movs	r1, #1
 80035a0:	f002 fbc2 	bl	8005d28 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	4f54300a 	.word	0x4f54300a

080035b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
 80035c0:	4613      	mov	r3, r2
 80035c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d107      	bne.n	80035e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80035d2:	883b      	ldrh	r3, [r7, #0]
 80035d4:	0419      	lsls	r1, r3, #16
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68ba      	ldr	r2, [r7, #8]
 80035dc:	430a      	orrs	r2, r1
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e0:	e028      	b.n	8003634 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	0c1b      	lsrs	r3, r3, #16
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	4413      	add	r3, r2
 80035ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
 80035f4:	e00d      	b.n	8003612 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	3340      	adds	r3, #64	@ 0x40
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	4413      	add	r3, r2
 800360a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800360c:	7bfb      	ldrb	r3, [r7, #15]
 800360e:	3301      	adds	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
 8003612:	7bfa      	ldrb	r2, [r7, #15]
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	3b01      	subs	r3, #1
 8003618:	429a      	cmp	r2, r3
 800361a:	d3ec      	bcc.n	80035f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800361c:	883b      	ldrh	r3, [r7, #0]
 800361e:	0418      	lsls	r0, r3, #16
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6819      	ldr	r1, [r3, #0]
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	3b01      	subs	r3, #1
 8003628:	68ba      	ldr	r2, [r7, #8]
 800362a:	4302      	orrs	r2, r0
 800362c:	3340      	adds	r3, #64	@ 0x40
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
 800364a:	460b      	mov	r3, r1
 800364c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003656:	2300      	movs	r3, #0
}
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	460b      	mov	r3, r1
 800366e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e267      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	2b00      	cmp	r3, #0
 8003698:	d075      	beq.n	8003786 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800369a:	4b88      	ldr	r3, [pc, #544]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d00c      	beq.n	80036c0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b85      	ldr	r3, [pc, #532]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d112      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036b2:	4b82      	ldr	r3, [pc, #520]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036be:	d10b      	bne.n	80036d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c0:	4b7e      	ldr	r3, [pc, #504]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d05b      	beq.n	8003784 <HAL_RCC_OscConfig+0x108>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d157      	bne.n	8003784 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e242      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d106      	bne.n	80036f0 <HAL_RCC_OscConfig+0x74>
 80036e2:	4b76      	ldr	r3, [pc, #472]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a75      	ldr	r2, [pc, #468]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e01d      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036f8:	d10c      	bne.n	8003714 <HAL_RCC_OscConfig+0x98>
 80036fa:	4b70      	ldr	r3, [pc, #448]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a6f      	ldr	r2, [pc, #444]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003700:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	4b6d      	ldr	r3, [pc, #436]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6c      	ldr	r2, [pc, #432]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e00b      	b.n	800372c <HAL_RCC_OscConfig+0xb0>
 8003714:	4b69      	ldr	r3, [pc, #420]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a68      	ldr	r2, [pc, #416]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800371a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800371e:	6013      	str	r3, [r2, #0]
 8003720:	4b66      	ldr	r3, [pc, #408]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a65      	ldr	r2, [pc, #404]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003726:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800372a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d013      	beq.n	800375c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fb78 	bl	8000e28 <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800373c:	f7fd fb74 	bl	8000e28 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b64      	cmp	r3, #100	@ 0x64
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e207      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374e:	4b5b      	ldr	r3, [pc, #364]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0xc0>
 800375a:	e014      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fd fb64 	bl	8000e28 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003764:	f7fd fb60 	bl	8000e28 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b64      	cmp	r3, #100	@ 0x64
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e1f3      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003776:	4b51      	ldr	r3, [pc, #324]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1f0      	bne.n	8003764 <HAL_RCC_OscConfig+0xe8>
 8003782:	e000      	b.n	8003786 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003784:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d063      	beq.n	800385a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003792:	4b4a      	ldr	r3, [pc, #296]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800379e:	4b47      	ldr	r3, [pc, #284]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d11c      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b44      	ldr	r3, [pc, #272]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d116      	bne.n	80037e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b6:	4b41      	ldr	r3, [pc, #260]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d001      	beq.n	80037ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e1c7      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ce:	4b3b      	ldr	r3, [pc, #236]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	691b      	ldr	r3, [r3, #16]
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	4937      	ldr	r1, [pc, #220]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 80037de:	4313      	orrs	r3, r2
 80037e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037e2:	e03a      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d020      	beq.n	800382e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037ec:	4b34      	ldr	r3, [pc, #208]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 80037ee:	2201      	movs	r2, #1
 80037f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037f2:	f7fd fb19 	bl	8000e28 <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037f8:	e008      	b.n	800380c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037fa:	f7fd fb15 	bl	8000e28 <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d901      	bls.n	800380c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e1a8      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	4b2b      	ldr	r3, [pc, #172]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d0f0      	beq.n	80037fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003818:	4b28      	ldr	r3, [pc, #160]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	00db      	lsls	r3, r3, #3
 8003826:	4925      	ldr	r1, [pc, #148]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003828:	4313      	orrs	r3, r2
 800382a:	600b      	str	r3, [r1, #0]
 800382c:	e015      	b.n	800385a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800382e:	4b24      	ldr	r3, [pc, #144]	@ (80038c0 <HAL_RCC_OscConfig+0x244>)
 8003830:	2200      	movs	r2, #0
 8003832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003834:	f7fd faf8 	bl	8000e28 <HAL_GetTick>
 8003838:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800383a:	e008      	b.n	800384e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383c:	f7fd faf4 	bl	8000e28 <HAL_GetTick>
 8003840:	4602      	mov	r2, r0
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	2b02      	cmp	r3, #2
 8003848:	d901      	bls.n	800384e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e187      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	4b1b      	ldr	r3, [pc, #108]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1f0      	bne.n	800383c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d036      	beq.n	80038d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d016      	beq.n	800389c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b15      	ldr	r3, [pc, #84]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 8003870:	2201      	movs	r2, #1
 8003872:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003874:	f7fd fad8 	bl	8000e28 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800387c:	f7fd fad4 	bl	8000e28 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e167      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	4b0b      	ldr	r3, [pc, #44]	@ (80038bc <HAL_RCC_OscConfig+0x240>)
 8003890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003892:	f003 0302 	and.w	r3, r3, #2
 8003896:	2b00      	cmp	r3, #0
 8003898:	d0f0      	beq.n	800387c <HAL_RCC_OscConfig+0x200>
 800389a:	e01b      	b.n	80038d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800389c:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <HAL_RCC_OscConfig+0x248>)
 800389e:	2200      	movs	r2, #0
 80038a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038a2:	f7fd fac1 	bl	8000e28 <HAL_GetTick>
 80038a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038a8:	e00e      	b.n	80038c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038aa:	f7fd fabd 	bl	8000e28 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	693b      	ldr	r3, [r7, #16]
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d907      	bls.n	80038c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e150      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 80038bc:	40023800 	.word	0x40023800
 80038c0:	42470000 	.word	0x42470000
 80038c4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	4b88      	ldr	r3, [pc, #544]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1ea      	bne.n	80038aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0304 	and.w	r3, r3, #4
 80038dc:	2b00      	cmp	r3, #0
 80038de:	f000 8097 	beq.w	8003a10 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038e6:	4b81      	ldr	r3, [pc, #516]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10f      	bne.n	8003912 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	4b7d      	ldr	r3, [pc, #500]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038fa:	4a7c      	ldr	r2, [pc, #496]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003900:	6413      	str	r3, [r2, #64]	@ 0x40
 8003902:	4b7a      	ldr	r3, [pc, #488]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003906:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800390a:	60bb      	str	r3, [r7, #8]
 800390c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800390e:	2301      	movs	r3, #1
 8003910:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003912:	4b77      	ldr	r3, [pc, #476]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800391a:	2b00      	cmp	r3, #0
 800391c:	d118      	bne.n	8003950 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800391e:	4b74      	ldr	r3, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a73      	ldr	r2, [pc, #460]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003928:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800392a:	f7fd fa7d 	bl	8000e28 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003932:	f7fd fa79 	bl	8000e28 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e10c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	4b6a      	ldr	r3, [pc, #424]	@ (8003af0 <HAL_RCC_OscConfig+0x474>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0f0      	beq.n	8003932 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d106      	bne.n	8003966 <HAL_RCC_OscConfig+0x2ea>
 8003958:	4b64      	ldr	r3, [pc, #400]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395c:	4a63      	ldr	r2, [pc, #396]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800395e:	f043 0301 	orr.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	@ 0x70
 8003964:	e01c      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	2b05      	cmp	r3, #5
 800396c:	d10c      	bne.n	8003988 <HAL_RCC_OscConfig+0x30c>
 800396e:	4b5f      	ldr	r3, [pc, #380]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003972:	4a5e      	ldr	r2, [pc, #376]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003974:	f043 0304 	orr.w	r3, r3, #4
 8003978:	6713      	str	r3, [r2, #112]	@ 0x70
 800397a:	4b5c      	ldr	r3, [pc, #368]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397e:	4a5b      	ldr	r2, [pc, #364]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6713      	str	r3, [r2, #112]	@ 0x70
 8003986:	e00b      	b.n	80039a0 <HAL_RCC_OscConfig+0x324>
 8003988:	4b58      	ldr	r3, [pc, #352]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398c:	4a57      	ldr	r2, [pc, #348]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800398e:	f023 0301 	bic.w	r3, r3, #1
 8003992:	6713      	str	r3, [r2, #112]	@ 0x70
 8003994:	4b55      	ldr	r3, [pc, #340]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003998:	4a54      	ldr	r2, [pc, #336]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 800399a:	f023 0304 	bic.w	r3, r3, #4
 800399e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d015      	beq.n	80039d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fa3e 	bl	8000e28 <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ae:	e00a      	b.n	80039c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b0:	f7fd fa3a 	bl	8000e28 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e0cb      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c6:	4b49      	ldr	r3, [pc, #292]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0ee      	beq.n	80039b0 <HAL_RCC_OscConfig+0x334>
 80039d2:	e014      	b.n	80039fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d4:	f7fd fa28 	bl	8000e28 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039da:	e00a      	b.n	80039f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039dc:	f7fd fa24 	bl	8000e28 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e0b5      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039f2:	4b3e      	ldr	r3, [pc, #248]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 80039f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f6:	f003 0302 	and.w	r3, r3, #2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d1ee      	bne.n	80039dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039fe:	7dfb      	ldrb	r3, [r7, #23]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d105      	bne.n	8003a10 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a04:	4b39      	ldr	r3, [pc, #228]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a08:	4a38      	ldr	r2, [pc, #224]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a0a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 80a1 	beq.w	8003b5c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a1a:	4b34      	ldr	r3, [pc, #208]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d05c      	beq.n	8003ae0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d141      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a2e:	4b31      	ldr	r3, [pc, #196]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a34:	f7fd f9f8 	bl	8000e28 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a3c:	f7fd f9f4 	bl	8000e28 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e087      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d1f0      	bne.n	8003a3c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69da      	ldr	r2, [r3, #28]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a68:	019b      	lsls	r3, r3, #6
 8003a6a:	431a      	orrs	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a70:	085b      	lsrs	r3, r3, #1
 8003a72:	3b01      	subs	r3, #1
 8003a74:	041b      	lsls	r3, r3, #16
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	061b      	lsls	r3, r3, #24
 8003a7e:	491b      	ldr	r1, [pc, #108]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003a86:	2201      	movs	r2, #1
 8003a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8a:	f7fd f9cd 	bl	8000e28 <HAL_GetTick>
 8003a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a90:	e008      	b.n	8003aa4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a92:	f7fd f9c9 	bl	8000e28 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d901      	bls.n	8003aa4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003aa0:	2303      	movs	r3, #3
 8003aa2:	e05c      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	4b11      	ldr	r3, [pc, #68]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0f0      	beq.n	8003a92 <HAL_RCC_OscConfig+0x416>
 8003ab0:	e054      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab2:	4b10      	ldr	r3, [pc, #64]	@ (8003af4 <HAL_RCC_OscConfig+0x478>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fd f9b6 	bl	8000e28 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003abe:	e008      	b.n	8003ad2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac0:	f7fd f9b2 	bl	8000e28 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d901      	bls.n	8003ad2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e045      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	4b06      	ldr	r3, [pc, #24]	@ (8003aec <HAL_RCC_OscConfig+0x470>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f0      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x444>
 8003ade:	e03d      	b.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d107      	bne.n	8003af8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e038      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
 8003aec:	40023800 	.word	0x40023800
 8003af0:	40007000 	.word	0x40007000
 8003af4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4ec>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	699b      	ldr	r3, [r3, #24]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d028      	beq.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d121      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d11a      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003b28:	4013      	ands	r3, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d111      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b3e:	085b      	lsrs	r3, r3, #1
 8003b40:	3b01      	subs	r3, #1
 8003b42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b54:	429a      	cmp	r2, r3
 8003b56:	d001      	beq.n	8003b5c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3718      	adds	r7, #24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023800 	.word	0x40023800

08003b6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d101      	bne.n	8003b80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e0cc      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b80:	4b68      	ldr	r3, [pc, #416]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d90c      	bls.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b8e:	4b65      	ldr	r3, [pc, #404]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	683a      	ldr	r2, [r7, #0]
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b96:	4b63      	ldr	r3, [pc, #396]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	683a      	ldr	r2, [r7, #0]
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0b8      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f003 0302 	and.w	r3, r3, #2
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d020      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d005      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bc0:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	4a58      	ldr	r2, [pc, #352]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003bca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0308 	and.w	r3, r3, #8
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d005      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003bd8:	4b53      	ldr	r3, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	4a52      	ldr	r2, [pc, #328]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bde:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003be2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003be4:	4b50      	ldr	r3, [pc, #320]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	494d      	ldr	r1, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d044      	beq.n	8003c8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b47      	ldr	r3, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d119      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e07f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d003      	beq.n	8003c2a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	d107      	bne.n	8003c3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d109      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e06f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e067      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f023 0203 	bic.w	r2, r3, #3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4934      	ldr	r1, [pc, #208]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c5c:	f7fd f8e4 	bl	8000e28 <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c62:	e00a      	b.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c64:	f7fd f8e0 	bl	8000e28 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d901      	bls.n	8003c7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003c76:	2303      	movs	r3, #3
 8003c78:	e04f      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c7a:	4b2b      	ldr	r3, [pc, #172]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f003 020c 	and.w	r2, r3, #12
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d1eb      	bne.n	8003c64 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c8c:	4b25      	ldr	r3, [pc, #148]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d20c      	bcs.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca2:	4b20      	ldr	r3, [pc, #128]	@ (8003d24 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d001      	beq.n	8003cb4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e032      	b.n	8003d1a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d008      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cc0:	4b19      	ldr	r3, [pc, #100]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4916      	ldr	r1, [pc, #88]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d009      	beq.n	8003cf2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cde:	4b12      	ldr	r3, [pc, #72]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003cf2:	f000 f821 	bl	8003d38 <HAL_RCC_GetSysClockFreq>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8003d28 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	490a      	ldr	r1, [pc, #40]	@ (8003d2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d04:	5ccb      	ldrb	r3, [r1, r3]
 8003d06:	fa22 f303 	lsr.w	r3, r2, r3
 8003d0a:	4a09      	ldr	r2, [pc, #36]	@ (8003d30 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003d0e:	4b09      	ldr	r3, [pc, #36]	@ (8003d34 <HAL_RCC_ClockConfig+0x1c8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f7fd f844 	bl	8000da0 <HAL_InitTick>

  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3710      	adds	r7, #16
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40023c00 	.word	0x40023c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	08008828 	.word	0x08008828
 8003d30:	20000000 	.word	0x20000000
 8003d34:	20000004 	.word	0x20000004

08003d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d3c:	b094      	sub	sp, #80	@ 0x50
 8003d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d50:	4b79      	ldr	r3, [pc, #484]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	f003 030c 	and.w	r3, r3, #12
 8003d58:	2b08      	cmp	r3, #8
 8003d5a:	d00d      	beq.n	8003d78 <HAL_RCC_GetSysClockFreq+0x40>
 8003d5c:	2b08      	cmp	r3, #8
 8003d5e:	f200 80e1 	bhi.w	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_RCC_GetSysClockFreq+0x34>
 8003d66:	2b04      	cmp	r3, #4
 8003d68:	d003      	beq.n	8003d72 <HAL_RCC_GetSysClockFreq+0x3a>
 8003d6a:	e0db      	b.n	8003f24 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4b73      	ldr	r3, [pc, #460]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d70:	e0db      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d72:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_GetSysClockFreq+0x208>)
 8003d74:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d78:	4b6f      	ldr	r3, [pc, #444]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d80:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d82:	4b6d      	ldr	r3, [pc, #436]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d063      	beq.n	8003e56 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d8e:	4b6a      	ldr	r3, [pc, #424]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	099b      	lsrs	r3, r3, #6
 8003d94:	2200      	movs	r2, #0
 8003d96:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d98:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003da2:	2300      	movs	r3, #0
 8003da4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003da6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003daa:	4622      	mov	r2, r4
 8003dac:	462b      	mov	r3, r5
 8003dae:	f04f 0000 	mov.w	r0, #0
 8003db2:	f04f 0100 	mov.w	r1, #0
 8003db6:	0159      	lsls	r1, r3, #5
 8003db8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dbc:	0150      	lsls	r0, r2, #5
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4621      	mov	r1, r4
 8003dc4:	1a51      	subs	r1, r2, r1
 8003dc6:	6139      	str	r1, [r7, #16]
 8003dc8:	4629      	mov	r1, r5
 8003dca:	eb63 0301 	sbc.w	r3, r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	018b      	lsls	r3, r1, #6
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003de6:	4651      	mov	r1, sl
 8003de8:	018a      	lsls	r2, r1, #6
 8003dea:	4651      	mov	r1, sl
 8003dec:	ebb2 0801 	subs.w	r8, r2, r1
 8003df0:	4659      	mov	r1, fp
 8003df2:	eb63 0901 	sbc.w	r9, r3, r1
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e0a:	4690      	mov	r8, r2
 8003e0c:	4699      	mov	r9, r3
 8003e0e:	4623      	mov	r3, r4
 8003e10:	eb18 0303 	adds.w	r3, r8, r3
 8003e14:	60bb      	str	r3, [r7, #8]
 8003e16:	462b      	mov	r3, r5
 8003e18:	eb49 0303 	adc.w	r3, r9, r3
 8003e1c:	60fb      	str	r3, [r7, #12]
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	024b      	lsls	r3, r1, #9
 8003e2e:	4621      	mov	r1, r4
 8003e30:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e34:	4621      	mov	r1, r4
 8003e36:	024a      	lsls	r2, r1, #9
 8003e38:	4610      	mov	r0, r2
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e3e:	2200      	movs	r2, #0
 8003e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003e44:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003e48:	f7fc f9be 	bl	80001c8 <__aeabi_uldivmod>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4613      	mov	r3, r2
 8003e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003e54:	e058      	b.n	8003f08 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e56:	4b38      	ldr	r3, [pc, #224]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	099b      	lsrs	r3, r3, #6
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	4611      	mov	r1, r2
 8003e62:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003e66:	623b      	str	r3, [r7, #32]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e6c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	f04f 0000 	mov.w	r0, #0
 8003e78:	f04f 0100 	mov.w	r1, #0
 8003e7c:	0159      	lsls	r1, r3, #5
 8003e7e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e82:	0150      	lsls	r0, r2, #5
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4641      	mov	r1, r8
 8003e8a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003e8e:	4649      	mov	r1, r9
 8003e90:	eb63 0b01 	sbc.w	fp, r3, r1
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	f04f 0300 	mov.w	r3, #0
 8003e9c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ea0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ea4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ea8:	ebb2 040a 	subs.w	r4, r2, sl
 8003eac:	eb63 050b 	sbc.w	r5, r3, fp
 8003eb0:	f04f 0200 	mov.w	r2, #0
 8003eb4:	f04f 0300 	mov.w	r3, #0
 8003eb8:	00eb      	lsls	r3, r5, #3
 8003eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ebe:	00e2      	lsls	r2, r4, #3
 8003ec0:	4614      	mov	r4, r2
 8003ec2:	461d      	mov	r5, r3
 8003ec4:	4643      	mov	r3, r8
 8003ec6:	18e3      	adds	r3, r4, r3
 8003ec8:	603b      	str	r3, [r7, #0]
 8003eca:	464b      	mov	r3, r9
 8003ecc:	eb45 0303 	adc.w	r3, r5, r3
 8003ed0:	607b      	str	r3, [r7, #4]
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	f04f 0300 	mov.w	r3, #0
 8003eda:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003ede:	4629      	mov	r1, r5
 8003ee0:	028b      	lsls	r3, r1, #10
 8003ee2:	4621      	mov	r1, r4
 8003ee4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ee8:	4621      	mov	r1, r4
 8003eea:	028a      	lsls	r2, r1, #10
 8003eec:	4610      	mov	r0, r2
 8003eee:	4619      	mov	r1, r3
 8003ef0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
 8003ef6:	61fa      	str	r2, [r7, #28]
 8003ef8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003efc:	f7fc f964 	bl	80001c8 <__aeabi_uldivmod>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4613      	mov	r3, r2
 8003f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f08:	4b0b      	ldr	r3, [pc, #44]	@ (8003f38 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	3301      	adds	r3, #1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003f18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f22:	e002      	b.n	8003f2a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <HAL_RCC_GetSysClockFreq+0x204>)
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3750      	adds	r7, #80	@ 0x50
 8003f30:	46bd      	mov	sp, r7
 8003f32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f36:	bf00      	nop
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	00f42400 	.word	0x00f42400
 8003f40:	007a1200 	.word	0x007a1200

08003f44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f44:	b480      	push	{r7}
 8003f46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f48:	4b03      	ldr	r3, [pc, #12]	@ (8003f58 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
}
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	20000000 	.word	0x20000000

08003f5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f60:	f7ff fff0 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f64:	4602      	mov	r2, r0
 8003f66:	4b05      	ldr	r3, [pc, #20]	@ (8003f7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	0a9b      	lsrs	r3, r3, #10
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	4903      	ldr	r1, [pc, #12]	@ (8003f80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f72:	5ccb      	ldrb	r3, [r1, r3]
 8003f74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	40023800 	.word	0x40023800
 8003f80:	08008838 	.word	0x08008838

08003f84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f88:	f7ff ffdc 	bl	8003f44 <HAL_RCC_GetHCLKFreq>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	4b05      	ldr	r3, [pc, #20]	@ (8003fa4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	0b5b      	lsrs	r3, r3, #13
 8003f94:	f003 0307 	and.w	r3, r3, #7
 8003f98:	4903      	ldr	r1, [pc, #12]	@ (8003fa8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f9a:	5ccb      	ldrb	r3, [r1, r3]
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40023800 	.word	0x40023800
 8003fa8:	08008838 	.word	0x08008838

08003fac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d035      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fd4:	4b62      	ldr	r3, [pc, #392]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003fda:	f7fc ff25 	bl	8000e28 <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fe0:	e008      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fe2:	f7fc ff21 	bl	8000e28 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d901      	bls.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e0b0      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ff4:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1f0      	bne.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	019a      	lsls	r2, r3, #6
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	071b      	lsls	r3, r3, #28
 800400c:	4955      	ldr	r1, [pc, #340]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004014:	4b52      	ldr	r3, [pc, #328]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800401a:	f7fc ff05 	bl	8000e28 <HAL_GetTick>
 800401e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004020:	e008      	b.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004022:	f7fc ff01 	bl	8000e28 <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e090      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004034:	4b4b      	ldr	r3, [pc, #300]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800403c:	2b00      	cmp	r3, #0
 800403e:	d0f0      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8083 	beq.w	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
 8004052:	4b44      	ldr	r3, [pc, #272]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004054:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004056:	4a43      	ldr	r2, [pc, #268]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004058:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800405c:	6413      	str	r3, [r2, #64]	@ 0x40
 800405e:	4b41      	ldr	r3, [pc, #260]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800406a:	4b3f      	ldr	r3, [pc, #252]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a3e      	ldr	r2, [pc, #248]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004074:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004076:	f7fc fed7 	bl	8000e28 <HAL_GetTick>
 800407a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800407c:	e008      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fc fed3 	bl	8000e28 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e062      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004090:	4b35      	ldr	r3, [pc, #212]	@ (8004168 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800409c:	4b31      	ldr	r3, [pc, #196]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d02f      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040b4:	693a      	ldr	r2, [r7, #16]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d028      	beq.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80040ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80040c4:	4b29      	ldr	r3, [pc, #164]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80040ca:	4b28      	ldr	r3, [pc, #160]	@ (800416c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80040d0:	4a24      	ldr	r2, [pc, #144]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80040d6:	4b23      	ldr	r3, [pc, #140]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80040d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d114      	bne.n	800410c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fc fea1 	bl	8000e28 <HAL_GetTick>
 80040e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e8:	e00a      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040ea:	f7fc fe9d 	bl	8000e28 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d901      	bls.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80040fc:	2303      	movs	r3, #3
 80040fe:	e02a      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004100:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b00      	cmp	r3, #0
 800410a:	d0ee      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004114:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004118:	d10d      	bne.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800411a:	4b12      	ldr	r3, [pc, #72]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	68db      	ldr	r3, [r3, #12]
 8004126:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800412a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800412e:	490d      	ldr	r1, [pc, #52]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004130:	4313      	orrs	r3, r2
 8004132:	608b      	str	r3, [r1, #8]
 8004134:	e005      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004136:	4b0b      	ldr	r3, [pc, #44]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	4a0a      	ldr	r2, [pc, #40]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800413c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004140:	6093      	str	r3, [r2, #8]
 8004142:	4b08      	ldr	r3, [pc, #32]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004144:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800414e:	4905      	ldr	r1, [pc, #20]	@ (8004164 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004150:	4313      	orrs	r3, r2
 8004152:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}
 800415e:	bf00      	nop
 8004160:	42470068 	.word	0x42470068
 8004164:	40023800 	.word	0x40023800
 8004168:	40007000 	.word	0x40007000
 800416c:	42470e40 	.word	0x42470e40

08004170 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004170:	b480      	push	{r7}
 8004172:	b087      	sub	sp, #28
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d13f      	bne.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800418e:	4b24      	ldr	r3, [pc, #144]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d006      	beq.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80041a4:	d12f      	bne.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80041a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004224 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80041a8:	617b      	str	r3, [r7, #20]
          break;
 80041aa:	e02f      	b.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80041ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b8:	d108      	bne.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041ba:	4b19      	ldr	r3, [pc, #100]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041c2:	4a19      	ldr	r2, [pc, #100]	@ (8004228 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	613b      	str	r3, [r7, #16]
 80041ca:	e007      	b.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80041cc:	4b14      	ldr	r3, [pc, #80]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041d4:	4a15      	ldr	r2, [pc, #84]	@ (800422c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80041d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80041dc:	4b10      	ldr	r3, [pc, #64]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e2:	099b      	lsrs	r3, r3, #6
 80041e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80041f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041f6:	0f1b      	lsrs	r3, r3, #28
 80041f8:	f003 0307 	and.w	r3, r3, #7
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004202:	617b      	str	r3, [r7, #20]
          break;
 8004204:	e002      	b.n	800420c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
          break;
 800420a:	bf00      	nop
        }
      }
      break;
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800420e:	bf00      	nop
    }
  }
  return frequency;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	4618      	mov	r0, r3
 8004214:	371c      	adds	r7, #28
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	40023800 	.word	0x40023800
 8004224:	00bb8000 	.word	0x00bb8000
 8004228:	007a1200 	.word	0x007a1200
 800422c:	00f42400 	.word	0x00f42400

08004230 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e042      	b.n	80042c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fc fd0e 	bl	8000c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2224      	movs	r2, #36	@ 0x24
 8004260:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004272:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f82b 	bl	80042d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004288:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	695a      	ldr	r2, [r3, #20]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004298:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68da      	ldr	r2, [r3, #12]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2200      	movs	r2, #0
 80042ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2220      	movs	r2, #32
 80042b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3708      	adds	r7, #8
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042d4:	b0c0      	sub	sp, #256	@ 0x100
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	68d9      	ldr	r1, [r3, #12]
 80042ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	ea40 0301 	orr.w	r3, r0, r1
 80042f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042fe:	689a      	ldr	r2, [r3, #8]
 8004300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	431a      	orrs	r2, r3
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	431a      	orrs	r2, r3
 8004310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004314:	69db      	ldr	r3, [r3, #28]
 8004316:	4313      	orrs	r3, r2
 8004318:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004328:	f021 010c 	bic.w	r1, r1, #12
 800432c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004336:	430b      	orrs	r3, r1
 8004338:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800433a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434a:	6999      	ldr	r1, [r3, #24]
 800434c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	ea40 0301 	orr.w	r3, r0, r1
 8004356:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	4b8f      	ldr	r3, [pc, #572]	@ (800459c <UART_SetConfig+0x2cc>)
 8004360:	429a      	cmp	r2, r3
 8004362:	d005      	beq.n	8004370 <UART_SetConfig+0xa0>
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	4b8d      	ldr	r3, [pc, #564]	@ (80045a0 <UART_SetConfig+0x2d0>)
 800436c:	429a      	cmp	r2, r3
 800436e:	d104      	bne.n	800437a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004370:	f7ff fe08 	bl	8003f84 <HAL_RCC_GetPCLK2Freq>
 8004374:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004378:	e003      	b.n	8004382 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800437a:	f7ff fdef 	bl	8003f5c <HAL_RCC_GetPCLK1Freq>
 800437e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	69db      	ldr	r3, [r3, #28]
 8004388:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800438c:	f040 810c 	bne.w	80045a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004390:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004394:	2200      	movs	r2, #0
 8004396:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800439a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800439e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	1891      	adds	r1, r2, r2
 80043a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043aa:	415b      	adcs	r3, r3
 80043ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043b2:	4621      	mov	r1, r4
 80043b4:	eb12 0801 	adds.w	r8, r2, r1
 80043b8:	4629      	mov	r1, r5
 80043ba:	eb43 0901 	adc.w	r9, r3, r1
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043d2:	4690      	mov	r8, r2
 80043d4:	4699      	mov	r9, r3
 80043d6:	4623      	mov	r3, r4
 80043d8:	eb18 0303 	adds.w	r3, r8, r3
 80043dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80043e0:	462b      	mov	r3, r5
 80043e2:	eb49 0303 	adc.w	r3, r9, r3
 80043e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80043ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80043f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80043fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80043fe:	460b      	mov	r3, r1
 8004400:	18db      	adds	r3, r3, r3
 8004402:	653b      	str	r3, [r7, #80]	@ 0x50
 8004404:	4613      	mov	r3, r2
 8004406:	eb42 0303 	adc.w	r3, r2, r3
 800440a:	657b      	str	r3, [r7, #84]	@ 0x54
 800440c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004410:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004414:	f7fb fed8 	bl	80001c8 <__aeabi_uldivmod>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4b61      	ldr	r3, [pc, #388]	@ (80045a4 <UART_SetConfig+0x2d4>)
 800441e:	fba3 2302 	umull	r2, r3, r3, r2
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	011c      	lsls	r4, r3, #4
 8004426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442a:	2200      	movs	r2, #0
 800442c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004430:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004434:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004440:	415b      	adcs	r3, r3
 8004442:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004444:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004448:	4641      	mov	r1, r8
 800444a:	eb12 0a01 	adds.w	sl, r2, r1
 800444e:	4649      	mov	r1, r9
 8004450:	eb43 0b01 	adc.w	fp, r3, r1
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004460:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004464:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004468:	4692      	mov	sl, r2
 800446a:	469b      	mov	fp, r3
 800446c:	4643      	mov	r3, r8
 800446e:	eb1a 0303 	adds.w	r3, sl, r3
 8004472:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004476:	464b      	mov	r3, r9
 8004478:	eb4b 0303 	adc.w	r3, fp, r3
 800447c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800448c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004490:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004494:	460b      	mov	r3, r1
 8004496:	18db      	adds	r3, r3, r3
 8004498:	643b      	str	r3, [r7, #64]	@ 0x40
 800449a:	4613      	mov	r3, r2
 800449c:	eb42 0303 	adc.w	r3, r2, r3
 80044a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80044a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044aa:	f7fb fe8d 	bl	80001c8 <__aeabi_uldivmod>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	4b3b      	ldr	r3, [pc, #236]	@ (80045a4 <UART_SetConfig+0x2d4>)
 80044b6:	fba3 2301 	umull	r2, r3, r3, r1
 80044ba:	095b      	lsrs	r3, r3, #5
 80044bc:	2264      	movs	r2, #100	@ 0x64
 80044be:	fb02 f303 	mul.w	r3, r2, r3
 80044c2:	1acb      	subs	r3, r1, r3
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80044ca:	4b36      	ldr	r3, [pc, #216]	@ (80045a4 <UART_SetConfig+0x2d4>)
 80044cc:	fba3 2302 	umull	r2, r3, r3, r2
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80044d8:	441c      	add	r4, r3
 80044da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80044e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80044ec:	4642      	mov	r2, r8
 80044ee:	464b      	mov	r3, r9
 80044f0:	1891      	adds	r1, r2, r2
 80044f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80044f4:	415b      	adcs	r3, r3
 80044f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80044fc:	4641      	mov	r1, r8
 80044fe:	1851      	adds	r1, r2, r1
 8004500:	6339      	str	r1, [r7, #48]	@ 0x30
 8004502:	4649      	mov	r1, r9
 8004504:	414b      	adcs	r3, r1
 8004506:	637b      	str	r3, [r7, #52]	@ 0x34
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004514:	4659      	mov	r1, fp
 8004516:	00cb      	lsls	r3, r1, #3
 8004518:	4651      	mov	r1, sl
 800451a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451e:	4651      	mov	r1, sl
 8004520:	00ca      	lsls	r2, r1, #3
 8004522:	4610      	mov	r0, r2
 8004524:	4619      	mov	r1, r3
 8004526:	4603      	mov	r3, r0
 8004528:	4642      	mov	r2, r8
 800452a:	189b      	adds	r3, r3, r2
 800452c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004530:	464b      	mov	r3, r9
 8004532:	460a      	mov	r2, r1
 8004534:	eb42 0303 	adc.w	r3, r2, r3
 8004538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004548:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800454c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004550:	460b      	mov	r3, r1
 8004552:	18db      	adds	r3, r3, r3
 8004554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004556:	4613      	mov	r3, r2
 8004558:	eb42 0303 	adc.w	r3, r2, r3
 800455c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004562:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004566:	f7fb fe2f 	bl	80001c8 <__aeabi_uldivmod>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4b0d      	ldr	r3, [pc, #52]	@ (80045a4 <UART_SetConfig+0x2d4>)
 8004570:	fba3 1302 	umull	r1, r3, r3, r2
 8004574:	095b      	lsrs	r3, r3, #5
 8004576:	2164      	movs	r1, #100	@ 0x64
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	00db      	lsls	r3, r3, #3
 8004580:	3332      	adds	r3, #50	@ 0x32
 8004582:	4a08      	ldr	r2, [pc, #32]	@ (80045a4 <UART_SetConfig+0x2d4>)
 8004584:	fba2 2303 	umull	r2, r3, r2, r3
 8004588:	095b      	lsrs	r3, r3, #5
 800458a:	f003 0207 	and.w	r2, r3, #7
 800458e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4422      	add	r2, r4
 8004596:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004598:	e106      	b.n	80047a8 <UART_SetConfig+0x4d8>
 800459a:	bf00      	nop
 800459c:	40011000 	.word	0x40011000
 80045a0:	40011400 	.word	0x40011400
 80045a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ac:	2200      	movs	r2, #0
 80045ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80045ba:	4642      	mov	r2, r8
 80045bc:	464b      	mov	r3, r9
 80045be:	1891      	adds	r1, r2, r2
 80045c0:	6239      	str	r1, [r7, #32]
 80045c2:	415b      	adcs	r3, r3
 80045c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80045c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045ca:	4641      	mov	r1, r8
 80045cc:	1854      	adds	r4, r2, r1
 80045ce:	4649      	mov	r1, r9
 80045d0:	eb43 0501 	adc.w	r5, r3, r1
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80045f0:	464b      	mov	r3, r9
 80045f2:	eb45 0303 	adc.w	r3, r5, r3
 80045f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80045fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004606:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800460a:	f04f 0200 	mov.w	r2, #0
 800460e:	f04f 0300 	mov.w	r3, #0
 8004612:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004616:	4629      	mov	r1, r5
 8004618:	008b      	lsls	r3, r1, #2
 800461a:	4621      	mov	r1, r4
 800461c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004620:	4621      	mov	r1, r4
 8004622:	008a      	lsls	r2, r1, #2
 8004624:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004628:	f7fb fdce 	bl	80001c8 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4b60      	ldr	r3, [pc, #384]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	011c      	lsls	r4, r3, #4
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004644:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004648:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	61b9      	str	r1, [r7, #24]
 8004654:	415b      	adcs	r3, r3
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465c:	4641      	mov	r1, r8
 800465e:	1851      	adds	r1, r2, r1
 8004660:	6139      	str	r1, [r7, #16]
 8004662:	4649      	mov	r1, r9
 8004664:	414b      	adcs	r3, r1
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004674:	4659      	mov	r1, fp
 8004676:	00cb      	lsls	r3, r1, #3
 8004678:	4651      	mov	r1, sl
 800467a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800467e:	4651      	mov	r1, sl
 8004680:	00ca      	lsls	r2, r1, #3
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	4603      	mov	r3, r0
 8004688:	4642      	mov	r2, r8
 800468a:	189b      	adds	r3, r3, r2
 800468c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004690:	464b      	mov	r3, r9
 8004692:	460a      	mov	r2, r1
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046a8:	f04f 0200 	mov.w	r2, #0
 80046ac:	f04f 0300 	mov.w	r3, #0
 80046b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046b4:	4649      	mov	r1, r9
 80046b6:	008b      	lsls	r3, r1, #2
 80046b8:	4641      	mov	r1, r8
 80046ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046be:	4641      	mov	r1, r8
 80046c0:	008a      	lsls	r2, r1, #2
 80046c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80046c6:	f7fb fd7f 	bl	80001c8 <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4611      	mov	r1, r2
 80046d0:	4b38      	ldr	r3, [pc, #224]	@ (80047b4 <UART_SetConfig+0x4e4>)
 80046d2:	fba3 2301 	umull	r2, r3, r3, r1
 80046d6:	095b      	lsrs	r3, r3, #5
 80046d8:	2264      	movs	r2, #100	@ 0x64
 80046da:	fb02 f303 	mul.w	r3, r2, r3
 80046de:	1acb      	subs	r3, r1, r3
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	3332      	adds	r3, #50	@ 0x32
 80046e4:	4a33      	ldr	r2, [pc, #204]	@ (80047b4 <UART_SetConfig+0x4e4>)
 80046e6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ea:	095b      	lsrs	r3, r3, #5
 80046ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80046f0:	441c      	add	r4, r3
 80046f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046f6:	2200      	movs	r2, #0
 80046f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80046fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80046fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	415b      	adcs	r3, r3
 800470a:	60fb      	str	r3, [r7, #12]
 800470c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004742:	464b      	mov	r3, r9
 8004744:	460a      	mov	r2, r1
 8004746:	eb42 0303 	adc.w	r3, r2, r3
 800474a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	663b      	str	r3, [r7, #96]	@ 0x60
 8004756:	667a      	str	r2, [r7, #100]	@ 0x64
 8004758:	f04f 0200 	mov.w	r2, #0
 800475c:	f04f 0300 	mov.w	r3, #0
 8004760:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004764:	4649      	mov	r1, r9
 8004766:	008b      	lsls	r3, r1, #2
 8004768:	4641      	mov	r1, r8
 800476a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800476e:	4641      	mov	r1, r8
 8004770:	008a      	lsls	r2, r1, #2
 8004772:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004776:	f7fb fd27 	bl	80001c8 <__aeabi_uldivmod>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4b0d      	ldr	r3, [pc, #52]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004780:	fba3 1302 	umull	r1, r3, r3, r2
 8004784:	095b      	lsrs	r3, r3, #5
 8004786:	2164      	movs	r1, #100	@ 0x64
 8004788:	fb01 f303 	mul.w	r3, r1, r3
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	3332      	adds	r3, #50	@ 0x32
 8004792:	4a08      	ldr	r2, [pc, #32]	@ (80047b4 <UART_SetConfig+0x4e4>)
 8004794:	fba2 2303 	umull	r2, r3, r2, r3
 8004798:	095b      	lsrs	r3, r3, #5
 800479a:	f003 020f 	and.w	r2, r3, #15
 800479e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4422      	add	r2, r4
 80047a6:	609a      	str	r2, [r3, #8]
}
 80047a8:	bf00      	nop
 80047aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047ae:	46bd      	mov	sp, r7
 80047b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047b4:	51eb851f 	.word	0x51eb851f

080047b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047b8:	b084      	sub	sp, #16
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
 80047c2:	f107 001c 	add.w	r0, r7, #28
 80047c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d123      	bne.n	800481a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80047e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fae8 	bl	8005de4 <USB_CoreReset>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e01b      	b.n	8004852 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f001 fadc 	bl	8005de4 <USB_CoreReset>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004830:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004834:	2b00      	cmp	r3, #0
 8004836:	d106      	bne.n	8004846 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800483c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	639a      	str	r2, [r3, #56]	@ 0x38
 8004844:	e005      	b.n	8004852 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800484a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004852:	7fbb      	ldrb	r3, [r7, #30]
 8004854:	2b01      	cmp	r3, #1
 8004856:	d10b      	bne.n	8004870 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	689b      	ldr	r3, [r3, #8]
 800485c:	f043 0206 	orr.w	r2, r3, #6
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004870:	7bfb      	ldrb	r3, [r7, #15]
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800487c:	b004      	add	sp, #16
 800487e:	4770      	bx	lr

08004880 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	4613      	mov	r3, r2
 800488c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800488e:	79fb      	ldrb	r3, [r7, #7]
 8004890:	2b02      	cmp	r3, #2
 8004892:	d165      	bne.n	8004960 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4a41      	ldr	r2, [pc, #260]	@ (800499c <USB_SetTurnaroundTime+0x11c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d906      	bls.n	80048aa <USB_SetTurnaroundTime+0x2a>
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	4a40      	ldr	r2, [pc, #256]	@ (80049a0 <USB_SetTurnaroundTime+0x120>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d202      	bcs.n	80048aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80048a4:	230f      	movs	r3, #15
 80048a6:	617b      	str	r3, [r7, #20]
 80048a8:	e062      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a3c      	ldr	r2, [pc, #240]	@ (80049a0 <USB_SetTurnaroundTime+0x120>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d306      	bcc.n	80048c0 <USB_SetTurnaroundTime+0x40>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	4a3b      	ldr	r2, [pc, #236]	@ (80049a4 <USB_SetTurnaroundTime+0x124>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d202      	bcs.n	80048c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80048ba:	230e      	movs	r3, #14
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e057      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	4a38      	ldr	r2, [pc, #224]	@ (80049a4 <USB_SetTurnaroundTime+0x124>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d306      	bcc.n	80048d6 <USB_SetTurnaroundTime+0x56>
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a37      	ldr	r2, [pc, #220]	@ (80049a8 <USB_SetTurnaroundTime+0x128>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d202      	bcs.n	80048d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80048d0:	230d      	movs	r3, #13
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	e04c      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	4a33      	ldr	r2, [pc, #204]	@ (80049a8 <USB_SetTurnaroundTime+0x128>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d306      	bcc.n	80048ec <USB_SetTurnaroundTime+0x6c>
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a32      	ldr	r2, [pc, #200]	@ (80049ac <USB_SetTurnaroundTime+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d802      	bhi.n	80048ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80048e6:	230c      	movs	r3, #12
 80048e8:	617b      	str	r3, [r7, #20]
 80048ea:	e041      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	4a2f      	ldr	r2, [pc, #188]	@ (80049ac <USB_SetTurnaroundTime+0x12c>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d906      	bls.n	8004902 <USB_SetTurnaroundTime+0x82>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a2e      	ldr	r2, [pc, #184]	@ (80049b0 <USB_SetTurnaroundTime+0x130>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d802      	bhi.n	8004902 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80048fc:	230b      	movs	r3, #11
 80048fe:	617b      	str	r3, [r7, #20]
 8004900:	e036      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a2a      	ldr	r2, [pc, #168]	@ (80049b0 <USB_SetTurnaroundTime+0x130>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d906      	bls.n	8004918 <USB_SetTurnaroundTime+0x98>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	4a29      	ldr	r2, [pc, #164]	@ (80049b4 <USB_SetTurnaroundTime+0x134>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d802      	bhi.n	8004918 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004912:	230a      	movs	r3, #10
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e02b      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4a26      	ldr	r2, [pc, #152]	@ (80049b4 <USB_SetTurnaroundTime+0x134>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d906      	bls.n	800492e <USB_SetTurnaroundTime+0xae>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	4a25      	ldr	r2, [pc, #148]	@ (80049b8 <USB_SetTurnaroundTime+0x138>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d202      	bcs.n	800492e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004928:	2309      	movs	r3, #9
 800492a:	617b      	str	r3, [r7, #20]
 800492c:	e020      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4a21      	ldr	r2, [pc, #132]	@ (80049b8 <USB_SetTurnaroundTime+0x138>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d306      	bcc.n	8004944 <USB_SetTurnaroundTime+0xc4>
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	4a20      	ldr	r2, [pc, #128]	@ (80049bc <USB_SetTurnaroundTime+0x13c>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d802      	bhi.n	8004944 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800493e:	2308      	movs	r3, #8
 8004940:	617b      	str	r3, [r7, #20]
 8004942:	e015      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <USB_SetTurnaroundTime+0x13c>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d906      	bls.n	800495a <USB_SetTurnaroundTime+0xda>
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4a1c      	ldr	r2, [pc, #112]	@ (80049c0 <USB_SetTurnaroundTime+0x140>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d202      	bcs.n	800495a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004954:	2307      	movs	r3, #7
 8004956:	617b      	str	r3, [r7, #20]
 8004958:	e00a      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800495a:	2306      	movs	r3, #6
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e007      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004960:	79fb      	ldrb	r3, [r7, #7]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004966:	2309      	movs	r3, #9
 8004968:	617b      	str	r3, [r7, #20]
 800496a:	e001      	b.n	8004970 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800496c:	2309      	movs	r3, #9
 800496e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	029b      	lsls	r3, r3, #10
 8004984:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004988:	431a      	orrs	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	371c      	adds	r7, #28
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	00d8acbf 	.word	0x00d8acbf
 80049a0:	00e4e1c0 	.word	0x00e4e1c0
 80049a4:	00f42400 	.word	0x00f42400
 80049a8:	01067380 	.word	0x01067380
 80049ac:	011a499f 	.word	0x011a499f
 80049b0:	01312cff 	.word	0x01312cff
 80049b4:	014ca43f 	.word	0x014ca43f
 80049b8:	016e3600 	.word	0x016e3600
 80049bc:	01a6ab1f 	.word	0x01a6ab1f
 80049c0:	01e84800 	.word	0x01e84800

080049c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f043 0201 	orr.w	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049d8:	2300      	movs	r3, #0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	f023 0201 	bic.w	r2, r3, #1
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004a24:	78fb      	ldrb	r3, [r7, #3]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d115      	bne.n	8004a56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a36:	200a      	movs	r0, #10
 8004a38:	f7fc fa02 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	330a      	adds	r3, #10
 8004a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f001 f93f 	bl	8005cc6 <USB_GetMode>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d01e      	beq.n	8004a8c <USB_SetCurrentMode+0x84>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a52:	d9f0      	bls.n	8004a36 <USB_SetCurrentMode+0x2e>
 8004a54:	e01a      	b.n	8004a8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004a56:	78fb      	ldrb	r3, [r7, #3]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d115      	bne.n	8004a88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004a68:	200a      	movs	r0, #10
 8004a6a:	f7fc f9e9 	bl	8000e40 <HAL_Delay>
      ms += 10U;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	330a      	adds	r3, #10
 8004a72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 f926 	bl	8005cc6 <USB_GetMode>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <USB_SetCurrentMode+0x84>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2bc7      	cmp	r3, #199	@ 0xc7
 8004a84:	d9f0      	bls.n	8004a68 <USB_SetCurrentMode+0x60>
 8004a86:	e001      	b.n	8004a8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e005      	b.n	8004a98 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2bc8      	cmp	r3, #200	@ 0xc8
 8004a90:	d101      	bne.n	8004a96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004aa0:	b084      	sub	sp, #16
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b086      	sub	sp, #24
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004aba:	2300      	movs	r3, #0
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e009      	b.n	8004ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	3340      	adds	r3, #64	@ 0x40
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	2200      	movs	r2, #0
 8004acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	2b0e      	cmp	r3, #14
 8004ad8:	d9f2      	bls.n	8004ac0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004ada:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d11c      	bne.n	8004b1c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004afa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b06:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b12:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	639a      	str	r2, [r3, #56]	@ 0x38
 8004b1a:	e00b      	b.n	8004b34 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b20:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004b3a:	461a      	mov	r2, r3
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004b40:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d10d      	bne.n	8004b64 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004b48:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004b50:	2100      	movs	r1, #0
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 f968 	bl	8004e28 <USB_SetDevSpeed>
 8004b58:	e008      	b.n	8004b6c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f963 	bl	8004e28 <USB_SetDevSpeed>
 8004b62:	e003      	b.n	8004b6c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004b64:	2103      	movs	r1, #3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f95e 	bl	8004e28 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b6c:	2110      	movs	r1, #16
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8fa 	bl	8004d68 <USB_FlushTxFifo>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d001      	beq.n	8004b7e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f924 	bl	8004dcc <USB_FlushRxFifo>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b94:	461a      	mov	r2, r3
 8004b96:	2300      	movs	r3, #0
 8004b98:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bac:	461a      	mov	r2, r3
 8004bae:	2300      	movs	r3, #0
 8004bb0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	613b      	str	r3, [r7, #16]
 8004bb6:	e043      	b.n	8004c40 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bce:	d118      	bne.n	8004c02 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d10a      	bne.n	8004bec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004be2:	461a      	mov	r2, r3
 8004be4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004be8:	6013      	str	r3, [r2, #0]
 8004bea:	e013      	b.n	8004c14 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	015a      	lsls	r2, r3, #5
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	4413      	add	r3, r2
 8004bf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	e008      	b.n	8004c14 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	015a      	lsls	r2, r3, #5
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	4413      	add	r3, r2
 8004c0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c0e:	461a      	mov	r2, r3
 8004c10:	2300      	movs	r3, #0
 8004c12:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c20:	461a      	mov	r2, r3
 8004c22:	2300      	movs	r3, #0
 8004c24:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	015a      	lsls	r2, r3, #5
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c32:	461a      	mov	r2, r3
 8004c34:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004c38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004c44:	461a      	mov	r2, r3
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d3b5      	bcc.n	8004bb8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	e043      	b.n	8004cda <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c64:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c68:	d118      	bne.n	8004c9c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10a      	bne.n	8004c86 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	015a      	lsls	r2, r3, #5
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4413      	add	r3, r2
 8004c78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004c82:	6013      	str	r3, [r2, #0]
 8004c84:	e013      	b.n	8004cae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	015a      	lsls	r2, r3, #5
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c92:	461a      	mov	r2, r3
 8004c94:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	e008      	b.n	8004cae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2300      	movs	r3, #0
 8004cac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	015a      	lsls	r2, r3, #5
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cba:	461a      	mov	r2, r3
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004cd2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	613b      	str	r3, [r7, #16]
 8004cda:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004cde:	461a      	mov	r2, r3
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d3b5      	bcc.n	8004c52 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cf4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cf8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004d06:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004d08:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d105      	bne.n	8004d1c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	699b      	ldr	r3, [r3, #24]
 8004d14:	f043 0210 	orr.w	r2, r3, #16
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <USB_DevInit+0x2c4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004d28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d005      	beq.n	8004d3c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	699b      	ldr	r3, [r3, #24]
 8004d34:	f043 0208 	orr.w	r2, r3, #8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004d3c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d107      	bne.n	8004d54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d4c:	f043 0304 	orr.w	r3, r3, #4
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3718      	adds	r7, #24
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004d60:	b004      	add	sp, #16
 8004d62:	4770      	bx	lr
 8004d64:	803c3800 	.word	0x803c3800

08004d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004d72:	2300      	movs	r3, #0
 8004d74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d82:	d901      	bls.n	8004d88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e01b      	b.n	8004dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	daf2      	bge.n	8004d76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004d90:	2300      	movs	r3, #0
 8004d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	019b      	lsls	r3, r3, #6
 8004d98:	f043 0220 	orr.w	r2, r3, #32
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	3301      	adds	r3, #1
 8004da4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004dac:	d901      	bls.n	8004db2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e006      	b.n	8004dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0320 	and.w	r3, r3, #32
 8004dba:	2b20      	cmp	r3, #32
 8004dbc:	d0f0      	beq.n	8004da0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004dbe:	2300      	movs	r3, #0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3714      	adds	r7, #20
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b085      	sub	sp, #20
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004de4:	d901      	bls.n	8004dea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e018      	b.n	8004e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	daf2      	bge.n	8004dd8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004df2:	2300      	movs	r3, #0
 8004df4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2210      	movs	r2, #16
 8004dfa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	3301      	adds	r3, #1
 8004e00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e08:	d901      	bls.n	8004e0e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e006      	b.n	8004e1c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	f003 0310 	and.w	r3, r3, #16
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d0f0      	beq.n	8004dfc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	3714      	adds	r7, #20
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	460b      	mov	r3, r1
 8004e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	78fb      	ldrb	r3, [r7, #3]
 8004e42:	68f9      	ldr	r1, [r7, #12]
 8004e44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr

08004e5a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004e5a:	b480      	push	{r7}
 8004e5c:	b087      	sub	sp, #28
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f003 0306 	and.w	r3, r3, #6
 8004e72:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d102      	bne.n	8004e80 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	75fb      	strb	r3, [r7, #23]
 8004e7e:	e00a      	b.n	8004e96 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2b02      	cmp	r3, #2
 8004e84:	d002      	beq.n	8004e8c <USB_GetDevSpeed+0x32>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2b06      	cmp	r3, #6
 8004e8a:	d102      	bne.n	8004e92 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	75fb      	strb	r3, [r7, #23]
 8004e90:	e001      	b.n	8004e96 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004e92:	230f      	movs	r3, #15
 8004e94:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004e96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	781b      	ldrb	r3, [r3, #0]
 8004eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	785b      	ldrb	r3, [r3, #1]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d13a      	bne.n	8004f36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec6:	69da      	ldr	r2, [r3, #28]
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d155      	bne.n	8004fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	791b      	ldrb	r3, [r3, #4]
 8004f12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	059b      	lsls	r3, r3, #22
 8004f1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	0151      	lsls	r1, r2, #5
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	440a      	add	r2, r1
 8004f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f32:	6013      	str	r3, [r2, #0]
 8004f34:	e036      	b.n	8004fa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	2101      	movs	r1, #1
 8004f48:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4c:	041b      	lsls	r3, r3, #16
 8004f4e:	68f9      	ldr	r1, [r7, #12]
 8004f50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d11a      	bne.n	8004fa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	791b      	ldrb	r3, [r3, #4]
 8004f88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004f8a:	430b      	orrs	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	0151      	lsls	r1, r2, #5
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	440a      	add	r2, r1
 8004f96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004fa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d161      	bne.n	8005094 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fe2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fe6:	d11f      	bne.n	8005028 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	0151      	lsls	r1, r2, #5
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	440a      	add	r2, r1
 8004ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005002:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005006:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	0151      	lsls	r1, r2, #5
 800501a:	68fa      	ldr	r2, [r7, #12]
 800501c:	440a      	add	r2, r1
 800501e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005026:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800502e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	2101      	movs	r1, #1
 800503a:	fa01 f303 	lsl.w	r3, r1, r3
 800503e:	b29b      	uxth	r3, r3
 8005040:	43db      	mvns	r3, r3
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005048:	4013      	ands	r3, r2
 800504a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005052:	69da      	ldr	r2, [r3, #28]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	781b      	ldrb	r3, [r3, #0]
 8005058:	f003 030f 	and.w	r3, r3, #15
 800505c:	2101      	movs	r1, #1
 800505e:	fa01 f303 	lsl.w	r3, r1, r3
 8005062:	b29b      	uxth	r3, r3
 8005064:	43db      	mvns	r3, r3
 8005066:	68f9      	ldr	r1, [r7, #12]
 8005068:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800506c:	4013      	ands	r3, r2
 800506e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	015a      	lsls	r2, r3, #5
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4413      	add	r3, r2
 8005078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	0159      	lsls	r1, r3, #5
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	440b      	add	r3, r1
 8005086:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800508a:	4619      	mov	r1, r3
 800508c:	4b35      	ldr	r3, [pc, #212]	@ (8005164 <USB_DeactivateEndpoint+0x1b0>)
 800508e:	4013      	ands	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
 8005092:	e060      	b.n	8005156 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80050a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80050aa:	d11f      	bne.n	80050ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	68ba      	ldr	r2, [r7, #8]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80050ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80050ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	f003 030f 	and.w	r3, r3, #15
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	041b      	lsls	r3, r3, #16
 8005104:	43db      	mvns	r3, r3
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800510c:	4013      	ands	r3, r2
 800510e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	f003 030f 	and.w	r3, r3, #15
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f303 	lsl.w	r3, r1, r3
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	43db      	mvns	r3, r3
 800512a:	68f9      	ldr	r1, [r7, #12]
 800512c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005130:	4013      	ands	r3, r2
 8005132:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	015a      	lsls	r2, r3, #5
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	4413      	add	r3, r2
 800513c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	0159      	lsls	r1, r3, #5
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	440b      	add	r3, r1
 800514a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800514e:	4619      	mov	r1, r3
 8005150:	4b05      	ldr	r3, [pc, #20]	@ (8005168 <USB_DeactivateEndpoint+0x1b4>)
 8005152:	4013      	ands	r3, r2
 8005154:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	ec337800 	.word	0xec337800
 8005168:	eff37800 	.word	0xeff37800

0800516c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b08a      	sub	sp, #40	@ 0x28
 8005170:	af02      	add	r7, sp, #8
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	4613      	mov	r3, r2
 8005178:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b01      	cmp	r3, #1
 800518a:	f040 817f 	bne.w	800548c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d132      	bne.n	80051fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005196:	69bb      	ldr	r3, [r7, #24]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	4413      	add	r3, r2
 800519e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051a2:	691b      	ldr	r3, [r3, #16]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	69fa      	ldr	r2, [r7, #28]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c6:	691b      	ldr	r3, [r3, #16]
 80051c8:	69ba      	ldr	r2, [r7, #24]
 80051ca:	0151      	lsls	r1, r2, #5
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	440a      	add	r2, r1
 80051d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	015a      	lsls	r2, r3, #5
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	4413      	add	r3, r2
 80051e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	69ba      	ldr	r2, [r7, #24]
 80051ea:	0151      	lsls	r1, r2, #5
 80051ec:	69fa      	ldr	r2, [r7, #28]
 80051ee:	440a      	add	r2, r1
 80051f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80051f4:	0cdb      	lsrs	r3, r3, #19
 80051f6:	04db      	lsls	r3, r3, #19
 80051f8:	6113      	str	r3, [r2, #16]
 80051fa:	e097      	b.n	800532c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	015a      	lsls	r2, r3, #5
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	4413      	add	r3, r2
 8005204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	69ba      	ldr	r2, [r7, #24]
 800520c:	0151      	lsls	r1, r2, #5
 800520e:	69fa      	ldr	r2, [r7, #28]
 8005210:	440a      	add	r2, r1
 8005212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005216:	0cdb      	lsrs	r3, r3, #19
 8005218:	04db      	lsls	r3, r3, #19
 800521a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	015a      	lsls	r2, r3, #5
 8005220:	69fb      	ldr	r3, [r7, #28]
 8005222:	4413      	add	r3, r2
 8005224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	69ba      	ldr	r2, [r7, #24]
 800522c:	0151      	lsls	r1, r2, #5
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	440a      	add	r2, r1
 8005232:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005236:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800523a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800523e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d11a      	bne.n	800527c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	691a      	ldr	r2, [r3, #16]
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	429a      	cmp	r2, r3
 8005250:	d903      	bls.n	800525a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	689a      	ldr	r2, [r3, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	69ba      	ldr	r2, [r7, #24]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005274:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005278:	6113      	str	r3, [r2, #16]
 800527a:	e044      	b.n	8005306 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	4413      	add	r3, r2
 8005286:	1e5a      	subs	r2, r3, #1
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005290:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	8afb      	ldrh	r3, [r7, #22]
 80052a2:	04d9      	lsls	r1, r3, #19
 80052a4:	4ba4      	ldr	r3, [pc, #656]	@ (8005538 <USB_EPStartXfer+0x3cc>)
 80052a6:	400b      	ands	r3, r1
 80052a8:	69b9      	ldr	r1, [r7, #24]
 80052aa:	0148      	lsls	r0, r1, #5
 80052ac:	69f9      	ldr	r1, [r7, #28]
 80052ae:	4401      	add	r1, r0
 80052b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80052b4:	4313      	orrs	r3, r2
 80052b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	791b      	ldrb	r3, [r3, #4]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d122      	bne.n	8005306 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	69ba      	ldr	r2, [r7, #24]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80052de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	8afb      	ldrh	r3, [r7, #22]
 80052f0:	075b      	lsls	r3, r3, #29
 80052f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80052f6:	69b9      	ldr	r1, [r7, #24]
 80052f8:	0148      	lsls	r0, r1, #5
 80052fa:	69f9      	ldr	r1, [r7, #28]
 80052fc:	4401      	add	r1, r0
 80052fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005302:	4313      	orrs	r3, r2
 8005304:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	015a      	lsls	r2, r3, #5
 800530a:	69fb      	ldr	r3, [r7, #28]
 800530c:	4413      	add	r3, r2
 800530e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800531c:	69b9      	ldr	r1, [r7, #24]
 800531e:	0148      	lsls	r0, r1, #5
 8005320:	69f9      	ldr	r1, [r7, #28]
 8005322:	4401      	add	r1, r0
 8005324:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005328:	4313      	orrs	r3, r2
 800532a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800532c:	79fb      	ldrb	r3, [r7, #7]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d14b      	bne.n	80053ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	69db      	ldr	r3, [r3, #28]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d009      	beq.n	800534e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	015a      	lsls	r2, r3, #5
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	4413      	add	r3, r2
 8005342:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005346:	461a      	mov	r2, r3
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	69db      	ldr	r3, [r3, #28]
 800534c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	791b      	ldrb	r3, [r3, #4]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d128      	bne.n	80053a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800535c:	689b      	ldr	r3, [r3, #8]
 800535e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005362:	2b00      	cmp	r3, #0
 8005364:	d110      	bne.n	8005388 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	015a      	lsls	r2, r3, #5
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	4413      	add	r3, r2
 800536e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	69ba      	ldr	r2, [r7, #24]
 8005376:	0151      	lsls	r1, r2, #5
 8005378:	69fa      	ldr	r2, [r7, #28]
 800537a:	440a      	add	r2, r1
 800537c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005380:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00f      	b.n	80053a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	015a      	lsls	r2, r3, #5
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	4413      	add	r3, r2
 8005390:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	69ba      	ldr	r2, [r7, #24]
 8005398:	0151      	lsls	r1, r2, #5
 800539a:	69fa      	ldr	r2, [r7, #28]
 800539c:	440a      	add	r2, r1
 800539e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	015a      	lsls	r2, r3, #5
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	4413      	add	r3, r2
 80053b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	69ba      	ldr	r2, [r7, #24]
 80053b8:	0151      	lsls	r1, r2, #5
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	440a      	add	r2, r1
 80053be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053c6:	6013      	str	r3, [r2, #0]
 80053c8:	e166      	b.n	8005698 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	015a      	lsls	r2, r3, #5
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	4413      	add	r3, r2
 80053d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69ba      	ldr	r2, [r7, #24]
 80053da:	0151      	lsls	r1, r2, #5
 80053dc:	69fa      	ldr	r2, [r7, #28]
 80053de:	440a      	add	r2, r1
 80053e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	791b      	ldrb	r3, [r3, #4]
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d015      	beq.n	800541e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 814e 	beq.w	8005698 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	f003 030f 	and.w	r3, r3, #15
 800540c:	2101      	movs	r1, #1
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	69f9      	ldr	r1, [r7, #28]
 8005414:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005418:	4313      	orrs	r3, r2
 800541a:	634b      	str	r3, [r1, #52]	@ 0x34
 800541c:	e13c      	b.n	8005698 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d110      	bne.n	8005450 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	015a      	lsls	r2, r3, #5
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	4413      	add	r3, r2
 8005436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	69fa      	ldr	r2, [r7, #28]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005448:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	e00f      	b.n	8005470 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	015a      	lsls	r2, r3, #5
 8005454:	69fb      	ldr	r3, [r7, #28]
 8005456:	4413      	add	r3, r2
 8005458:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	0151      	lsls	r1, r2, #5
 8005462:	69fa      	ldr	r2, [r7, #28]
 8005464:	440a      	add	r2, r1
 8005466:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800546a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800546e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	68d9      	ldr	r1, [r3, #12]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	781a      	ldrb	r2, [r3, #0]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	b298      	uxth	r0, r3
 800547e:	79fb      	ldrb	r3, [r7, #7]
 8005480:	9300      	str	r3, [sp, #0]
 8005482:	4603      	mov	r3, r0
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f9b9 	bl	80057fc <USB_WritePacket>
 800548a:	e105      	b.n	8005698 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	015a      	lsls	r2, r3, #5
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	4413      	add	r3, r2
 8005494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	0151      	lsls	r1, r2, #5
 800549e:	69fa      	ldr	r2, [r7, #28]
 80054a0:	440a      	add	r2, r1
 80054a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054a6:	0cdb      	lsrs	r3, r3, #19
 80054a8:	04db      	lsls	r3, r3, #19
 80054aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	69ba      	ldr	r2, [r7, #24]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	69fa      	ldr	r2, [r7, #28]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80054ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80054ce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d132      	bne.n	800553c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	689a      	ldr	r2, [r3, #8]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	689a      	ldr	r2, [r3, #8]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	015a      	lsls	r2, r3, #5
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	4413      	add	r3, r2
 80054f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005504:	69b9      	ldr	r1, [r7, #24]
 8005506:	0148      	lsls	r0, r1, #5
 8005508:	69f9      	ldr	r1, [r7, #28]
 800550a:	4401      	add	r1, r0
 800550c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005510:	4313      	orrs	r3, r2
 8005512:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005514:	69bb      	ldr	r3, [r7, #24]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005520:	691b      	ldr	r3, [r3, #16]
 8005522:	69ba      	ldr	r2, [r7, #24]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	69fa      	ldr	r2, [r7, #28]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800552e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005532:	6113      	str	r3, [r2, #16]
 8005534:	e062      	b.n	80055fc <USB_EPStartXfer+0x490>
 8005536:	bf00      	nop
 8005538:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d123      	bne.n	800558c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	015a      	lsls	r2, r3, #5
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005550:	691a      	ldr	r2, [r3, #16]
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800555a:	69b9      	ldr	r1, [r7, #24]
 800555c:	0148      	lsls	r0, r1, #5
 800555e:	69f9      	ldr	r1, [r7, #28]
 8005560:	4401      	add	r1, r0
 8005562:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800556a:	69bb      	ldr	r3, [r7, #24]
 800556c:	015a      	lsls	r2, r3, #5
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	4413      	add	r3, r2
 8005572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	69ba      	ldr	r2, [r7, #24]
 800557a:	0151      	lsls	r1, r2, #5
 800557c:	69fa      	ldr	r2, [r7, #28]
 800557e:	440a      	add	r2, r1
 8005580:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005584:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005588:	6113      	str	r3, [r2, #16]
 800558a:	e037      	b.n	80055fc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	691a      	ldr	r2, [r3, #16]
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	4413      	add	r3, r2
 8005596:	1e5a      	subs	r2, r3, #1
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	fbb2 f3f3 	udiv	r3, r2, r3
 80055a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	8afa      	ldrh	r2, [r7, #22]
 80055a8:	fb03 f202 	mul.w	r2, r3, r2
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	015a      	lsls	r2, r3, #5
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	4413      	add	r3, r2
 80055b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	8afb      	ldrh	r3, [r7, #22]
 80055c0:	04d9      	lsls	r1, r3, #19
 80055c2:	4b38      	ldr	r3, [pc, #224]	@ (80056a4 <USB_EPStartXfer+0x538>)
 80055c4:	400b      	ands	r3, r1
 80055c6:	69b9      	ldr	r1, [r7, #24]
 80055c8:	0148      	lsls	r0, r1, #5
 80055ca:	69f9      	ldr	r1, [r7, #28]
 80055cc:	4401      	add	r1, r0
 80055ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055d2:	4313      	orrs	r3, r2
 80055d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	6a1b      	ldr	r3, [r3, #32]
 80055e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055ec:	69b9      	ldr	r1, [r7, #24]
 80055ee:	0148      	lsls	r0, r1, #5
 80055f0:	69f9      	ldr	r1, [r7, #28]
 80055f2:	4401      	add	r1, r0
 80055f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80055f8:	4313      	orrs	r3, r2
 80055fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80055fc:	79fb      	ldrb	r3, [r7, #7]
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d10d      	bne.n	800561e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	69fb      	ldr	r3, [r7, #28]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561a:	460a      	mov	r2, r1
 800561c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	791b      	ldrb	r3, [r3, #4]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d128      	bne.n	8005678 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005632:	2b00      	cmp	r3, #0
 8005634:	d110      	bne.n	8005658 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	0151      	lsls	r1, r2, #5
 8005648:	69fa      	ldr	r2, [r7, #28]
 800564a:	440a      	add	r2, r1
 800564c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005650:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005654:	6013      	str	r3, [r2, #0]
 8005656:	e00f      	b.n	8005678 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	0151      	lsls	r1, r2, #5
 800566a:	69fa      	ldr	r2, [r7, #28]
 800566c:	440a      	add	r2, r1
 800566e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005676:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	0151      	lsls	r1, r2, #5
 800568a:	69fa      	ldr	r2, [r7, #28]
 800568c:	440a      	add	r2, r1
 800568e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005692:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	1ff80000 	.word	0x1ff80000

080056a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	785b      	ldrb	r3, [r3, #1]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d14a      	bne.n	800575c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	015a      	lsls	r2, r3, #5
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	4413      	add	r3, r2
 80056d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056de:	f040 8086 	bne.w	80057ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	7812      	ldrb	r2, [r2, #0]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	693a      	ldr	r2, [r7, #16]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005700:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005704:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	015a      	lsls	r2, r3, #5
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	4413      	add	r3, r2
 8005710:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	7812      	ldrb	r2, [r2, #0]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	440a      	add	r2, r1
 8005720:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005724:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005728:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	3301      	adds	r3, #1
 800572e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005736:	4293      	cmp	r3, r2
 8005738:	d902      	bls.n	8005740 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	75fb      	strb	r3, [r7, #23]
          break;
 800573e:	e056      	b.n	80057ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005754:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005758:	d0e7      	beq.n	800572a <USB_EPStopXfer+0x82>
 800575a:	e048      	b.n	80057ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005774:	d13b      	bne.n	80057ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	4413      	add	r3, r2
 8005780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	683a      	ldr	r2, [r7, #0]
 8005788:	7812      	ldrb	r2, [r2, #0]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	440a      	add	r2, r1
 8005790:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005794:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005798:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	015a      	lsls	r2, r3, #5
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	4413      	add	r3, r2
 80057a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	7812      	ldrb	r2, [r2, #0]
 80057ae:	0151      	lsls	r1, r2, #5
 80057b0:	693a      	ldr	r2, [r7, #16]
 80057b2:	440a      	add	r2, r1
 80057b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80057bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	3301      	adds	r3, #1
 80057c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d902      	bls.n	80057d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	75fb      	strb	r3, [r7, #23]
          break;
 80057d2:	e00c      	b.n	80057ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80057e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80057ec:	d0e7      	beq.n	80057be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	371c      	adds	r7, #28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b089      	sub	sp, #36	@ 0x24
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	4611      	mov	r1, r2
 8005808:	461a      	mov	r2, r3
 800580a:	460b      	mov	r3, r1
 800580c:	71fb      	strb	r3, [r7, #7]
 800580e:	4613      	mov	r3, r2
 8005810:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800581a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800581e:	2b00      	cmp	r3, #0
 8005820:	d123      	bne.n	800586a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005822:	88bb      	ldrh	r3, [r7, #4]
 8005824:	3303      	adds	r3, #3
 8005826:	089b      	lsrs	r3, r3, #2
 8005828:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800582a:	2300      	movs	r3, #0
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	e018      	b.n	8005862 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	031a      	lsls	r2, r3, #12
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800583c:	461a      	mov	r2, r3
 800583e:	69fb      	ldr	r3, [r7, #28]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	3301      	adds	r3, #1
 800584e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	3301      	adds	r3, #1
 8005854:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	3301      	adds	r3, #1
 800585a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800585c:	69bb      	ldr	r3, [r7, #24]
 800585e:	3301      	adds	r3, #1
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	429a      	cmp	r2, r3
 8005868:	d3e2      	bcc.n	8005830 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800586a:	2300      	movs	r3, #0
}
 800586c:	4618      	mov	r0, r3
 800586e:	3724      	adds	r7, #36	@ 0x24
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005878:	b480      	push	{r7}
 800587a:	b08b      	sub	sp, #44	@ 0x2c
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	4613      	mov	r3, r2
 8005884:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800588e:	88fb      	ldrh	r3, [r7, #6]
 8005890:	089b      	lsrs	r3, r3, #2
 8005892:	b29b      	uxth	r3, r3
 8005894:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	f003 0303 	and.w	r3, r3, #3
 800589c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800589e:	2300      	movs	r3, #0
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	e014      	b.n	80058ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	601a      	str	r2, [r3, #0]
    pDest++;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b2:	3301      	adds	r3, #1
 80058b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	3301      	adds	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058be:	3301      	adds	r3, #1
 80058c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80058c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c4:	3301      	adds	r3, #1
 80058c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	3301      	adds	r3, #1
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	6a3a      	ldr	r2, [r7, #32]
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d3e6      	bcc.n	80058a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058d6:	8bfb      	ldrh	r3, [r7, #30]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01e      	beq.n	800591a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058dc:	2300      	movs	r3, #0
 80058de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058e6:	461a      	mov	r2, r3
 80058e8:	f107 0310 	add.w	r3, r7, #16
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058f0:	693a      	ldr	r2, [r7, #16]
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	fa22 f303 	lsr.w	r3, r2, r3
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005900:	701a      	strb	r2, [r3, #0]
      i++;
 8005902:	6a3b      	ldr	r3, [r7, #32]
 8005904:	3301      	adds	r3, #1
 8005906:	623b      	str	r3, [r7, #32]
      pDest++;
 8005908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800590a:	3301      	adds	r3, #1
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800590e:	8bfb      	ldrh	r3, [r7, #30]
 8005910:	3b01      	subs	r3, #1
 8005912:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005914:	8bfb      	ldrh	r3, [r7, #30]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ea      	bne.n	80058f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800591a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800591c:	4618      	mov	r0, r3
 800591e:	372c      	adds	r7, #44	@ 0x2c
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr

08005928 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
 8005930:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	785b      	ldrb	r3, [r3, #1]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d12c      	bne.n	800599e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	015a      	lsls	r2, r3, #5
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	db12      	blt.n	800597c <USB_EPSetStall+0x54>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00f      	beq.n	800597c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	015a      	lsls	r2, r3, #5
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	4413      	add	r3, r2
 8005964:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	0151      	lsls	r1, r2, #5
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	440a      	add	r2, r1
 8005972:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005976:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800597a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	015a      	lsls	r2, r3, #5
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	0151      	lsls	r1, r2, #5
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	440a      	add	r2, r1
 8005992:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005996:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800599a:	6013      	str	r3, [r2, #0]
 800599c:	e02b      	b.n	80059f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	db12      	blt.n	80059d6 <USB_EPSetStall+0xae>
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00f      	beq.n	80059d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68ba      	ldr	r2, [r7, #8]
 80059c6:	0151      	lsls	r1, r2, #5
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	440a      	add	r2, r1
 80059cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	0151      	lsls	r1, r2, #5
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	440a      	add	r2, r1
 80059ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80059f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80059f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b085      	sub	sp, #20
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
 8005a0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	781b      	ldrb	r3, [r3, #0]
 8005a16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d128      	bne.n	8005a72 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68ba      	ldr	r2, [r7, #8]
 8005a30:	0151      	lsls	r1, r2, #5
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	440a      	add	r2, r1
 8005a36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a3a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a3e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	791b      	ldrb	r3, [r3, #4]
 8005a44:	2b03      	cmp	r3, #3
 8005a46:	d003      	beq.n	8005a50 <USB_EPClearStall+0x4c>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	791b      	ldrb	r3, [r3, #4]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d138      	bne.n	8005ac2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e027      	b.n	8005ac2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	68ba      	ldr	r2, [r7, #8]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a90:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	791b      	ldrb	r3, [r3, #4]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d003      	beq.n	8005aa2 <USB_EPClearStall+0x9e>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	791b      	ldrb	r3, [r3, #4]
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d10f      	bne.n	8005ac2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	0151      	lsls	r1, r2, #5
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	440a      	add	r2, r1
 8005ab8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005abc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005ac2:	2300      	movs	r3, #0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr

08005ad0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b085      	sub	sp, #20
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005af2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	78fb      	ldrb	r3, [r7, #3]
 8005afe:	011b      	lsls	r3, r3, #4
 8005b00:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005b04:	68f9      	ldr	r1, [r7, #12]
 8005b06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3714      	adds	r7, #20
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b36:	f023 0303 	bic.w	r3, r3, #3
 8005b3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b4a:	f023 0302 	bic.w	r3, r3, #2
 8005b4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3714      	adds	r7, #20
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr

08005b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b085      	sub	sp, #20
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68fa      	ldr	r2, [r7, #12]
 8005b74:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005b78:	f023 0303 	bic.w	r3, r3, #3
 8005b7c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	68fa      	ldr	r2, [r7, #12]
 8005b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b8c:	f043 0302 	orr.w	r3, r3, #2
 8005b90:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3714      	adds	r7, #20
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	68fa      	ldr	r2, [r7, #12]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	0c1b      	lsrs	r3, r3, #16
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c0c:	699b      	ldr	r3, [r3, #24]
 8005c0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c16:	69db      	ldr	r3, [r3, #28]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	b29b      	uxth	r3, r3
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c2e:	b480      	push	{r7}
 8005c30:	b085      	sub	sp, #20
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
 8005c36:	460b      	mov	r3, r1
 8005c38:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c5c:	68bb      	ldr	r3, [r7, #8]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b087      	sub	sp, #28
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c8c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c8e:	78fb      	ldrb	r3, [r7, #3]
 8005c90:	f003 030f 	and.w	r3, r3, #15
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	fa22 f303 	lsr.w	r3, r2, r3
 8005c9a:	01db      	lsls	r3, r3, #7
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005ca4:	78fb      	ldrb	r3, [r7, #3]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	693a      	ldr	r2, [r7, #16]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cb8:	68bb      	ldr	r3, [r7, #8]
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	371c      	adds	r7, #28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr

08005cc6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cc6:	b480      	push	{r7}
 8005cc8:	b083      	sub	sp, #12
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b085      	sub	sp, #20
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005cfc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005d00:	f023 0307 	bic.w	r3, r3, #7
 8005d04:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d18:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3714      	adds	r7, #20
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr

08005d28 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	460b      	mov	r3, r1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	333c      	adds	r3, #60	@ 0x3c
 8005d3e:	3304      	adds	r3, #4
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4a26      	ldr	r2, [pc, #152]	@ (8005de0 <USB_EP0_OutStart+0xb8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d90a      	bls.n	8005d62 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d5c:	d101      	bne.n	8005d62 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	e037      	b.n	8005dd2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d7c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	697a      	ldr	r2, [r7, #20]
 8005d8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d90:	f043 0318 	orr.w	r3, r3, #24
 8005d94:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005da4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005da8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005daa:	7afb      	ldrb	r3, [r7, #11]
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d10f      	bne.n	8005dd0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005db6:	461a      	mov	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	697a      	ldr	r2, [r7, #20]
 8005dc6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005dca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005dce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	371c      	adds	r7, #28
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	4f54300a 	.word	0x4f54300a

08005de4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	3301      	adds	r3, #1
 8005df4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dfc:	d901      	bls.n	8005e02 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e01b      	b.n	8005e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	daf2      	bge.n	8005df0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	691b      	ldr	r3, [r3, #16]
 8005e12:	f043 0201 	orr.w	r2, r3, #1
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005e26:	d901      	bls.n	8005e2c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005e28:	2303      	movs	r3, #3
 8005e2a:	e006      	b.n	8005e3a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d0f0      	beq.n	8005e1a <USB_CoreReset+0x36>

  return HAL_OK;
 8005e38:	2300      	movs	r3, #0
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
	...

08005e48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005e54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005e58:	f002 fc46 	bl	80086e8 <USBD_static_malloc>
 8005e5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d109      	bne.n	8005e78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	32b0      	adds	r2, #176	@ 0xb0
 8005e6e:	2100      	movs	r1, #0
 8005e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e74:	2302      	movs	r3, #2
 8005e76:	e0d4      	b.n	8006022 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005e78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005e7c:	2100      	movs	r1, #0
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f002 fc76 	bl	8008770 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	32b0      	adds	r2, #176	@ 0xb0
 8005e8e:	68f9      	ldr	r1, [r7, #12]
 8005e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	32b0      	adds	r2, #176	@ 0xb0
 8005e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	7c1b      	ldrb	r3, [r3, #16]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d138      	bne.n	8005f22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800602c <USBD_CDC_Init+0x1e4>)
 8005eb2:	7819      	ldrb	r1, [r3, #0]
 8005eb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005eb8:	2202      	movs	r2, #2
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f002 faf1 	bl	80084a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800602c <USBD_CDC_Init+0x1e4>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	6879      	ldr	r1, [r7, #4]
 8005eca:	4613      	mov	r3, r2
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3324      	adds	r3, #36	@ 0x24
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005eda:	4b55      	ldr	r3, [pc, #340]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8005edc:	7819      	ldrb	r1, [r3, #0]
 8005ede:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005ee2:	2202      	movs	r2, #2
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f002 fadc 	bl	80084a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005eea:	4b51      	ldr	r3, [pc, #324]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	f003 020f 	and.w	r2, r3, #15
 8005ef2:	6879      	ldr	r1, [r7, #4]
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	440b      	add	r3, r1
 8005efe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f02:	2201      	movs	r2, #1
 8005f04:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005f06:	4b4b      	ldr	r3, [pc, #300]	@ (8006034 <USBD_CDC_Init+0x1ec>)
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	3326      	adds	r3, #38	@ 0x26
 8005f1c:	2210      	movs	r2, #16
 8005f1e:	801a      	strh	r2, [r3, #0]
 8005f20:	e035      	b.n	8005f8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005f22:	4b42      	ldr	r3, [pc, #264]	@ (800602c <USBD_CDC_Init+0x1e4>)
 8005f24:	7819      	ldrb	r1, [r3, #0]
 8005f26:	2340      	movs	r3, #64	@ 0x40
 8005f28:	2202      	movs	r2, #2
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f002 fab9 	bl	80084a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005f30:	4b3e      	ldr	r3, [pc, #248]	@ (800602c <USBD_CDC_Init+0x1e4>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	6879      	ldr	r1, [r7, #4]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	4413      	add	r3, r2
 8005f40:	009b      	lsls	r3, r3, #2
 8005f42:	440b      	add	r3, r1
 8005f44:	3324      	adds	r3, #36	@ 0x24
 8005f46:	2201      	movs	r2, #1
 8005f48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005f4a:	4b39      	ldr	r3, [pc, #228]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8005f4c:	7819      	ldrb	r1, [r3, #0]
 8005f4e:	2340      	movs	r3, #64	@ 0x40
 8005f50:	2202      	movs	r2, #2
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f002 faa5 	bl	80084a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005f58:	4b35      	ldr	r3, [pc, #212]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	f003 020f 	and.w	r2, r3, #15
 8005f60:	6879      	ldr	r1, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	4413      	add	r3, r2
 8005f68:	009b      	lsls	r3, r3, #2
 8005f6a:	440b      	add	r3, r1
 8005f6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005f70:	2201      	movs	r2, #1
 8005f72:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005f74:	4b2f      	ldr	r3, [pc, #188]	@ (8006034 <USBD_CDC_Init+0x1ec>)
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	f003 020f 	and.w	r2, r3, #15
 8005f7c:	6879      	ldr	r1, [r7, #4]
 8005f7e:	4613      	mov	r3, r2
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	3326      	adds	r3, #38	@ 0x26
 8005f8a:	2210      	movs	r2, #16
 8005f8c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005f8e:	4b29      	ldr	r3, [pc, #164]	@ (8006034 <USBD_CDC_Init+0x1ec>)
 8005f90:	7819      	ldrb	r1, [r3, #0]
 8005f92:	2308      	movs	r3, #8
 8005f94:	2203      	movs	r2, #3
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f002 fa83 	bl	80084a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005f9c:	4b25      	ldr	r3, [pc, #148]	@ (8006034 <USBD_CDC_Init+0x1ec>)
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 020f 	and.w	r2, r3, #15
 8005fa4:	6879      	ldr	r1, [r7, #4]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	440b      	add	r3, r1
 8005fb0:	3324      	adds	r3, #36	@ 0x24
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	33b0      	adds	r3, #176	@ 0xb0
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d101      	bne.n	8005ff0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005fec:	2302      	movs	r3, #2
 8005fee:	e018      	b.n	8006022 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	7c1b      	ldrb	r3, [r3, #16]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d10a      	bne.n	800600e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ff8:	4b0d      	ldr	r3, [pc, #52]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8005ffa:	7819      	ldrb	r1, [r3, #0]
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006002:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f002 fb3a 	bl	8008680 <USBD_LL_PrepareReceive>
 800600c:	e008      	b.n	8006020 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800600e:	4b08      	ldr	r3, [pc, #32]	@ (8006030 <USBD_CDC_Init+0x1e8>)
 8006010:	7819      	ldrb	r1, [r3, #0]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006018:	2340      	movs	r3, #64	@ 0x40
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f002 fb30 	bl	8008680 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3710      	adds	r7, #16
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}
 800602a:	bf00      	nop
 800602c:	20000093 	.word	0x20000093
 8006030:	20000094 	.word	0x20000094
 8006034:	20000095 	.word	0x20000095

08006038 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	460b      	mov	r3, r1
 8006042:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006044:	4b3a      	ldr	r3, [pc, #232]	@ (8006130 <USBD_CDC_DeInit+0xf8>)
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	4619      	mov	r1, r3
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f002 fa4f 	bl	80084ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006050:	4b37      	ldr	r3, [pc, #220]	@ (8006130 <USBD_CDC_DeInit+0xf8>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	009b      	lsls	r3, r3, #2
 800605e:	4413      	add	r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	3324      	adds	r3, #36	@ 0x24
 8006066:	2200      	movs	r2, #0
 8006068:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800606a:	4b32      	ldr	r3, [pc, #200]	@ (8006134 <USBD_CDC_DeInit+0xfc>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	4619      	mov	r1, r3
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f002 fa3c 	bl	80084ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006076:	4b2f      	ldr	r3, [pc, #188]	@ (8006134 <USBD_CDC_DeInit+0xfc>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800608e:	2200      	movs	r2, #0
 8006090:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006092:	4b29      	ldr	r3, [pc, #164]	@ (8006138 <USBD_CDC_DeInit+0x100>)
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f002 fa28 	bl	80084ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800609e:	4b26      	ldr	r3, [pc, #152]	@ (8006138 <USBD_CDC_DeInit+0x100>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	f003 020f 	and.w	r2, r3, #15
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	3324      	adds	r3, #36	@ 0x24
 80060b4:	2200      	movs	r2, #0
 80060b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80060b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006138 <USBD_CDC_DeInit+0x100>)
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	009b      	lsls	r3, r3, #2
 80060c6:	4413      	add	r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	440b      	add	r3, r1
 80060cc:	3326      	adds	r3, #38	@ 0x26
 80060ce:	2200      	movs	r2, #0
 80060d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	32b0      	adds	r2, #176	@ 0xb0
 80060dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d01f      	beq.n	8006124 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	33b0      	adds	r3, #176	@ 0xb0
 80060ee:	009b      	lsls	r3, r3, #2
 80060f0:	4413      	add	r3, r2
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	32b0      	adds	r2, #176	@ 0xb0
 8006102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006106:	4618      	mov	r0, r3
 8006108:	f002 fafc 	bl	8008704 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	32b0      	adds	r2, #176	@ 0xb0
 8006116:	2100      	movs	r1, #0
 8006118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006124:	2300      	movs	r3, #0
}
 8006126:	4618      	mov	r0, r3
 8006128:	3708      	adds	r7, #8
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	20000093 	.word	0x20000093
 8006134:	20000094 	.word	0x20000094
 8006138:	20000095 	.word	0x20000095

0800613c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	32b0      	adds	r2, #176	@ 0xb0
 8006150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006154:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800615e:	2300      	movs	r3, #0
 8006160:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d101      	bne.n	800616c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006168:	2303      	movs	r3, #3
 800616a:	e0bf      	b.n	80062ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006174:	2b00      	cmp	r3, #0
 8006176:	d050      	beq.n	800621a <USBD_CDC_Setup+0xde>
 8006178:	2b20      	cmp	r3, #32
 800617a:	f040 80af 	bne.w	80062dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	88db      	ldrh	r3, [r3, #6]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d03a      	beq.n	80061fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	b25b      	sxtb	r3, r3
 800618c:	2b00      	cmp	r3, #0
 800618e:	da1b      	bge.n	80061c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	33b0      	adds	r3, #176	@ 0xb0
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	683a      	ldr	r2, [r7, #0]
 80061a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80061a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061a8:	683a      	ldr	r2, [r7, #0]
 80061aa:	88d2      	ldrh	r2, [r2, #6]
 80061ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	88db      	ldrh	r3, [r3, #6]
 80061b2:	2b07      	cmp	r3, #7
 80061b4:	bf28      	it	cs
 80061b6:	2307      	movcs	r3, #7
 80061b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	89fa      	ldrh	r2, [r7, #14]
 80061be:	4619      	mov	r1, r3
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f001 fd53 	bl	8007c6c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80061c6:	e090      	b.n	80062ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	785a      	ldrb	r2, [r3, #1]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	88db      	ldrh	r3, [r3, #6]
 80061d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80061d8:	d803      	bhi.n	80061e2 <USBD_CDC_Setup+0xa6>
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	88db      	ldrh	r3, [r3, #6]
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	e000      	b.n	80061e4 <USBD_CDC_Setup+0xa8>
 80061e2:	2240      	movs	r2, #64	@ 0x40
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80061ea:	6939      	ldr	r1, [r7, #16]
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80061f2:	461a      	mov	r2, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f001 fd65 	bl	8007cc4 <USBD_CtlPrepareRx>
      break;
 80061fa:	e076      	b.n	80062ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	33b0      	adds	r3, #176	@ 0xb0
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	7850      	ldrb	r0, [r2, #1]
 8006212:	2200      	movs	r2, #0
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	4798      	blx	r3
      break;
 8006218:	e067      	b.n	80062ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	785b      	ldrb	r3, [r3, #1]
 800621e:	2b0b      	cmp	r3, #11
 8006220:	d851      	bhi.n	80062c6 <USBD_CDC_Setup+0x18a>
 8006222:	a201      	add	r2, pc, #4	@ (adr r2, 8006228 <USBD_CDC_Setup+0xec>)
 8006224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006228:	08006259 	.word	0x08006259
 800622c:	080062d5 	.word	0x080062d5
 8006230:	080062c7 	.word	0x080062c7
 8006234:	080062c7 	.word	0x080062c7
 8006238:	080062c7 	.word	0x080062c7
 800623c:	080062c7 	.word	0x080062c7
 8006240:	080062c7 	.word	0x080062c7
 8006244:	080062c7 	.word	0x080062c7
 8006248:	080062c7 	.word	0x080062c7
 800624c:	080062c7 	.word	0x080062c7
 8006250:	08006283 	.word	0x08006283
 8006254:	080062ad 	.word	0x080062ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800625e:	b2db      	uxtb	r3, r3
 8006260:	2b03      	cmp	r3, #3
 8006262:	d107      	bne.n	8006274 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006264:	f107 030a 	add.w	r3, r7, #10
 8006268:	2202      	movs	r2, #2
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f001 fcfd 	bl	8007c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006272:	e032      	b.n	80062da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006274:	6839      	ldr	r1, [r7, #0]
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f001 fc7b 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 800627c:	2303      	movs	r3, #3
 800627e:	75fb      	strb	r3, [r7, #23]
          break;
 8006280:	e02b      	b.n	80062da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d107      	bne.n	800629e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800628e:	f107 030d 	add.w	r3, r7, #13
 8006292:	2201      	movs	r2, #1
 8006294:	4619      	mov	r1, r3
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f001 fce8 	bl	8007c6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800629c:	e01d      	b.n	80062da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 fc66 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 80062a6:	2303      	movs	r3, #3
 80062a8:	75fb      	strb	r3, [r7, #23]
          break;
 80062aa:	e016      	b.n	80062da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	2b03      	cmp	r3, #3
 80062b6:	d00f      	beq.n	80062d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 fc59 	bl	8007b72 <USBD_CtlError>
            ret = USBD_FAIL;
 80062c0:	2303      	movs	r3, #3
 80062c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80062c4:	e008      	b.n	80062d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80062c6:	6839      	ldr	r1, [r7, #0]
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f001 fc52 	bl	8007b72 <USBD_CtlError>
          ret = USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	75fb      	strb	r3, [r7, #23]
          break;
 80062d2:	e002      	b.n	80062da <USBD_CDC_Setup+0x19e>
          break;
 80062d4:	bf00      	nop
 80062d6:	e008      	b.n	80062ea <USBD_CDC_Setup+0x1ae>
          break;
 80062d8:	bf00      	nop
      }
      break;
 80062da:	e006      	b.n	80062ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80062dc:	6839      	ldr	r1, [r7, #0]
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f001 fc47 	bl	8007b72 <USBD_CtlError>
      ret = USBD_FAIL;
 80062e4:	2303      	movs	r3, #3
 80062e6:	75fb      	strb	r3, [r7, #23]
      break;
 80062e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80062ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	460b      	mov	r3, r1
 80062fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006306:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32b0      	adds	r2, #176	@ 0xb0
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d101      	bne.n	800631e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800631a:	2303      	movs	r3, #3
 800631c:	e065      	b.n	80063ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	32b0      	adds	r2, #176	@ 0xb0
 8006328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800632c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800632e:	78fb      	ldrb	r3, [r7, #3]
 8006330:	f003 020f 	and.w	r2, r3, #15
 8006334:	6879      	ldr	r1, [r7, #4]
 8006336:	4613      	mov	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4413      	add	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	440b      	add	r3, r1
 8006340:	3318      	adds	r3, #24
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d02f      	beq.n	80063a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006348:	78fb      	ldrb	r3, [r7, #3]
 800634a:	f003 020f 	and.w	r2, r3, #15
 800634e:	6879      	ldr	r1, [r7, #4]
 8006350:	4613      	mov	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	4413      	add	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	440b      	add	r3, r1
 800635a:	3318      	adds	r3, #24
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	78fb      	ldrb	r3, [r7, #3]
 8006360:	f003 010f 	and.w	r1, r3, #15
 8006364:	68f8      	ldr	r0, [r7, #12]
 8006366:	460b      	mov	r3, r1
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	440b      	add	r3, r1
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4403      	add	r3, r0
 8006370:	331c      	adds	r3, #28
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	fbb2 f1f3 	udiv	r1, r2, r3
 8006378:	fb01 f303 	mul.w	r3, r1, r3
 800637c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800637e:	2b00      	cmp	r3, #0
 8006380:	d112      	bne.n	80063a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006382:	78fb      	ldrb	r3, [r7, #3]
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	6879      	ldr	r1, [r7, #4]
 800638a:	4613      	mov	r3, r2
 800638c:	009b      	lsls	r3, r3, #2
 800638e:	4413      	add	r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	440b      	add	r3, r1
 8006394:	3318      	adds	r3, #24
 8006396:	2200      	movs	r2, #0
 8006398:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800639a:	78f9      	ldrb	r1, [r7, #3]
 800639c:	2300      	movs	r3, #0
 800639e:	2200      	movs	r2, #0
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f002 f94c 	bl	800863e <USBD_LL_Transmit>
 80063a6:	e01f      	b.n	80063e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	33b0      	adds	r3, #176	@ 0xb0
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d010      	beq.n	80063e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	33b0      	adds	r3, #176	@ 0xb0
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	4413      	add	r3, r2
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	68ba      	ldr	r2, [r7, #8]
 80063da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80063de:	68ba      	ldr	r2, [r7, #8]
 80063e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80063e8:	2300      	movs	r3, #0
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	32b0      	adds	r2, #176	@ 0xb0
 8006408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800640c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	32b0      	adds	r2, #176	@ 0xb0
 8006418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006420:	2303      	movs	r3, #3
 8006422:	e01a      	b.n	800645a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006424:	78fb      	ldrb	r3, [r7, #3]
 8006426:	4619      	mov	r1, r3
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f002 f94a 	bl	80086c2 <USBD_LL_GetRxDataSize>
 800642e:	4602      	mov	r2, r0
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800643c:	687a      	ldr	r2, [r7, #4]
 800643e:	33b0      	adds	r3, #176	@ 0xb0
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	4413      	add	r3, r2
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	68db      	ldr	r3, [r3, #12]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006454:	4611      	mov	r1, r2
 8006456:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	32b0      	adds	r2, #176	@ 0xb0
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d101      	bne.n	8006484 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006480:	2303      	movs	r3, #3
 8006482:	e024      	b.n	80064ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	33b0      	adds	r3, #176	@ 0xb0
 800648e:	009b      	lsls	r3, r3, #2
 8006490:	4413      	add	r3, r2
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d019      	beq.n	80064cc <USBD_CDC_EP0_RxReady+0x6a>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800649e:	2bff      	cmp	r3, #255	@ 0xff
 80064a0:	d014      	beq.n	80064cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	33b0      	adds	r3, #176	@ 0xb0
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	4413      	add	r3, r2
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80064ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80064c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	22ff      	movs	r2, #255	@ 0xff
 80064c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b086      	sub	sp, #24
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80064e0:	2182      	movs	r1, #130	@ 0x82
 80064e2:	4818      	ldr	r0, [pc, #96]	@ (8006544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064e4:	f000 fd0f 	bl	8006f06 <USBD_GetEpDesc>
 80064e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80064ea:	2101      	movs	r1, #1
 80064ec:	4815      	ldr	r0, [pc, #84]	@ (8006544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064ee:	f000 fd0a 	bl	8006f06 <USBD_GetEpDesc>
 80064f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80064f4:	2181      	movs	r1, #129	@ 0x81
 80064f6:	4813      	ldr	r0, [pc, #76]	@ (8006544 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80064f8:	f000 fd05 	bl	8006f06 <USBD_GetEpDesc>
 80064fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d002      	beq.n	800650a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	2210      	movs	r2, #16
 8006508:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	2200      	movs	r2, #0
 8006514:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006518:	711a      	strb	r2, [r3, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d006      	beq.n	8006532 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800652c:	711a      	strb	r2, [r3, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2243      	movs	r2, #67	@ 0x43
 8006536:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006538:	4b02      	ldr	r3, [pc, #8]	@ (8006544 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	20000050 	.word	0x20000050

08006548 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006550:	2182      	movs	r1, #130	@ 0x82
 8006552:	4818      	ldr	r0, [pc, #96]	@ (80065b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006554:	f000 fcd7 	bl	8006f06 <USBD_GetEpDesc>
 8006558:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800655a:	2101      	movs	r1, #1
 800655c:	4815      	ldr	r0, [pc, #84]	@ (80065b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800655e:	f000 fcd2 	bl	8006f06 <USBD_GetEpDesc>
 8006562:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006564:	2181      	movs	r1, #129	@ 0x81
 8006566:	4813      	ldr	r0, [pc, #76]	@ (80065b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006568:	f000 fccd 	bl	8006f06 <USBD_GetEpDesc>
 800656c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	2210      	movs	r2, #16
 8006578:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d006      	beq.n	800658e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	2200      	movs	r2, #0
 8006584:	711a      	strb	r2, [r3, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f042 0202 	orr.w	r2, r2, #2
 800658c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d006      	beq.n	80065a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	711a      	strb	r2, [r3, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	f042 0202 	orr.w	r2, r2, #2
 80065a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2243      	movs	r2, #67	@ 0x43
 80065a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80065a8:	4b02      	ldr	r3, [pc, #8]	@ (80065b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3718      	adds	r7, #24
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20000050 	.word	0x20000050

080065b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80065c0:	2182      	movs	r1, #130	@ 0x82
 80065c2:	4818      	ldr	r0, [pc, #96]	@ (8006624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065c4:	f000 fc9f 	bl	8006f06 <USBD_GetEpDesc>
 80065c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80065ca:	2101      	movs	r1, #1
 80065cc:	4815      	ldr	r0, [pc, #84]	@ (8006624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065ce:	f000 fc9a 	bl	8006f06 <USBD_GetEpDesc>
 80065d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80065d4:	2181      	movs	r1, #129	@ 0x81
 80065d6:	4813      	ldr	r0, [pc, #76]	@ (8006624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80065d8:	f000 fc95 	bl	8006f06 <USBD_GetEpDesc>
 80065dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2210      	movs	r2, #16
 80065e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d006      	beq.n	80065fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	2200      	movs	r2, #0
 80065f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80065f8:	711a      	strb	r2, [r3, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d006      	beq.n	8006612 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800660c:	711a      	strb	r2, [r3, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2243      	movs	r2, #67	@ 0x43
 8006616:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006618:	4b02      	ldr	r3, [pc, #8]	@ (8006624 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800661a:	4618      	mov	r0, r3
 800661c:	3718      	adds	r7, #24
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}
 8006622:	bf00      	nop
 8006624:	20000050 	.word	0x20000050

08006628 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	220a      	movs	r2, #10
 8006634:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006636:	4b03      	ldr	r3, [pc, #12]	@ (8006644 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006638:	4618      	mov	r0, r3
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr
 8006644:	2000000c 	.word	0x2000000c

08006648 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006658:	2303      	movs	r3, #3
 800665a:	e009      	b.n	8006670 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	33b0      	adds	r3, #176	@ 0xb0
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	4413      	add	r3, r2
 800666a:	683a      	ldr	r2, [r7, #0]
 800666c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800667c:	b480      	push	{r7}
 800667e:	b087      	sub	sp, #28
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	32b0      	adds	r2, #176	@ 0xb0
 8006692:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006696:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800669e:	2303      	movs	r3, #3
 80066a0:	e008      	b.n	80066b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80066b2:	2300      	movs	r3, #0
}
 80066b4:	4618      	mov	r0, r3
 80066b6:	371c      	adds	r7, #28
 80066b8:	46bd      	mov	sp, r7
 80066ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066be:	4770      	bx	lr

080066c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	32b0      	adds	r2, #176	@ 0xb0
 80066d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d101      	bne.n	80066e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	e004      	b.n	80066ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3714      	adds	r7, #20
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
	...

080066fc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b084      	sub	sp, #16
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	32b0      	adds	r2, #176	@ 0xb0
 800670e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006712:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	32b0      	adds	r2, #176	@ 0xb0
 800671e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006726:	2303      	movs	r3, #3
 8006728:	e018      	b.n	800675c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	7c1b      	ldrb	r3, [r3, #16]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d10a      	bne.n	8006748 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006732:	4b0c      	ldr	r3, [pc, #48]	@ (8006764 <USBD_CDC_ReceivePacket+0x68>)
 8006734:	7819      	ldrb	r1, [r3, #0]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800673c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f001 ff9d 	bl	8008680 <USBD_LL_PrepareReceive>
 8006746:	e008      	b.n	800675a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006748:	4b06      	ldr	r3, [pc, #24]	@ (8006764 <USBD_CDC_ReceivePacket+0x68>)
 800674a:	7819      	ldrb	r1, [r3, #0]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006752:	2340      	movs	r3, #64	@ 0x40
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f001 ff93 	bl	8008680 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	20000094 	.word	0x20000094

08006768 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800677c:	2303      	movs	r3, #3
 800677e:	e01f      	b.n	80067c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d003      	beq.n	80067a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2201      	movs	r2, #1
 80067aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	79fa      	ldrb	r2, [r7, #7]
 80067b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f001 fe0d 	bl	80083d4 <USBD_LL_Init>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c0:	4618      	mov	r0, r3
 80067c2:	3718      	adds	r7, #24
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80067d2:	2300      	movs	r3, #0
 80067d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d101      	bne.n	80067e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80067dc:	2303      	movs	r3, #3
 80067de:	e025      	b.n	800682c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	32ae      	adds	r2, #174	@ 0xae
 80067f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d00f      	beq.n	800681c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	32ae      	adds	r2, #174	@ 0xae
 8006806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680c:	f107 020e 	add.w	r2, r7, #14
 8006810:	4610      	mov	r0, r2
 8006812:	4798      	blx	r3
 8006814:	4602      	mov	r2, r0
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006822:	1c5a      	adds	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f001 fe15 	bl	800846c <USBD_LL_Start>
 8006842:	4603      	mov	r3, r0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006854:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006856:	4618      	mov	r0, r3
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr

08006862 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	6078      	str	r0, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800686e:	2300      	movs	r3, #0
 8006870:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006878:	2b00      	cmp	r3, #0
 800687a:	d009      	beq.n	8006890 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	78fa      	ldrb	r2, [r7, #3]
 8006886:	4611      	mov	r1, r2
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006890:	7bfb      	ldrb	r3, [r7, #15]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	460b      	mov	r3, r1
 80068a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	4611      	mov	r1, r2
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	4798      	blx	r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}

080068ce <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b084      	sub	sp, #16
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
 80068d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	4618      	mov	r0, r3
 80068e2:	f001 f90c 	bl	8007afe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80068f4:	461a      	mov	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006902:	f003 031f 	and.w	r3, r3, #31
 8006906:	2b02      	cmp	r3, #2
 8006908:	d01a      	beq.n	8006940 <USBD_LL_SetupStage+0x72>
 800690a:	2b02      	cmp	r3, #2
 800690c:	d822      	bhi.n	8006954 <USBD_LL_SetupStage+0x86>
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <USBD_LL_SetupStage+0x4a>
 8006912:	2b01      	cmp	r3, #1
 8006914:	d00a      	beq.n	800692c <USBD_LL_SetupStage+0x5e>
 8006916:	e01d      	b.n	8006954 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fb63 	bl	8006fec <USBD_StdDevReq>
 8006926:	4603      	mov	r3, r0
 8006928:	73fb      	strb	r3, [r7, #15]
      break;
 800692a:	e020      	b.n	800696e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fbcb 	bl	80070d0 <USBD_StdItfReq>
 800693a:	4603      	mov	r3, r0
 800693c:	73fb      	strb	r3, [r7, #15]
      break;
 800693e:	e016      	b.n	800696e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006946:	4619      	mov	r1, r3
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fc2d 	bl	80071a8 <USBD_StdEPReq>
 800694e:	4603      	mov	r3, r0
 8006950:	73fb      	strb	r3, [r7, #15]
      break;
 8006952:	e00c      	b.n	800696e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800695a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800695e:	b2db      	uxtb	r3, r3
 8006960:	4619      	mov	r1, r3
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f001 fde2 	bl	800852c <USBD_LL_StallEP>
 8006968:	4603      	mov	r3, r0
 800696a:	73fb      	strb	r3, [r7, #15]
      break;
 800696c:	bf00      	nop
  }

  return ret;
 800696e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3710      	adds	r7, #16
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b086      	sub	sp, #24
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	460b      	mov	r3, r1
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006986:	2300      	movs	r3, #0
 8006988:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800698a:	7afb      	ldrb	r3, [r7, #11]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d16e      	bne.n	8006a6e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006996:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800699e:	2b03      	cmp	r3, #3
 80069a0:	f040 8098 	bne.w	8006ad4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d913      	bls.n	80069d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	68db      	ldr	r3, [r3, #12]
 80069b8:	1ad2      	subs	r2, r2, r3
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	4293      	cmp	r3, r2
 80069c8:	bf28      	it	cs
 80069ca:	4613      	movcs	r3, r2
 80069cc:	461a      	mov	r2, r3
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f001 f994 	bl	8007cfe <USBD_CtlContinueRx>
 80069d6:	e07d      	b.n	8006ad4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80069de:	f003 031f 	and.w	r3, r3, #31
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d014      	beq.n	8006a10 <USBD_LL_DataOutStage+0x98>
 80069e6:	2b02      	cmp	r3, #2
 80069e8:	d81d      	bhi.n	8006a26 <USBD_LL_DataOutStage+0xae>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d002      	beq.n	80069f4 <USBD_LL_DataOutStage+0x7c>
 80069ee:	2b01      	cmp	r3, #1
 80069f0:	d003      	beq.n	80069fa <USBD_LL_DataOutStage+0x82>
 80069f2:	e018      	b.n	8006a26 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	75bb      	strb	r3, [r7, #22]
            break;
 80069f8:	e018      	b.n	8006a2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	4619      	mov	r1, r3
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fa64 	bl	8006ed2 <USBD_CoreFindIF>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	75bb      	strb	r3, [r7, #22]
            break;
 8006a0e:	e00d      	b.n	8006a2c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fa66 	bl	8006eec <USBD_CoreFindEP>
 8006a20:	4603      	mov	r3, r0
 8006a22:	75bb      	strb	r3, [r7, #22]
            break;
 8006a24:	e002      	b.n	8006a2c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75bb      	strb	r3, [r7, #22]
            break;
 8006a2a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006a2c:	7dbb      	ldrb	r3, [r7, #22]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d119      	bne.n	8006a66 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b03      	cmp	r3, #3
 8006a3c:	d113      	bne.n	8006a66 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006a3e:	7dba      	ldrb	r2, [r7, #22]
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	32ae      	adds	r2, #174	@ 0xae
 8006a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006a4e:	7dba      	ldrb	r2, [r7, #22]
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006a56:	7dba      	ldrb	r2, [r7, #22]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	32ae      	adds	r2, #174	@ 0xae
 8006a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a60:	691b      	ldr	r3, [r3, #16]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006a66:	68f8      	ldr	r0, [r7, #12]
 8006a68:	f001 f95a 	bl	8007d20 <USBD_CtlSendStatus>
 8006a6c:	e032      	b.n	8006ad4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006a6e:	7afb      	ldrb	r3, [r7, #11]
 8006a70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	4619      	mov	r1, r3
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa37 	bl	8006eec <USBD_CoreFindEP>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a82:	7dbb      	ldrb	r3, [r7, #22]
 8006a84:	2bff      	cmp	r3, #255	@ 0xff
 8006a86:	d025      	beq.n	8006ad4 <USBD_LL_DataOutStage+0x15c>
 8006a88:	7dbb      	ldrb	r3, [r7, #22]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d122      	bne.n	8006ad4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a94:	b2db      	uxtb	r3, r3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d117      	bne.n	8006aca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006a9a:	7dba      	ldrb	r2, [r7, #22]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	32ae      	adds	r2, #174	@ 0xae
 8006aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00f      	beq.n	8006aca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006aaa:	7dba      	ldrb	r2, [r7, #22]
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006ab2:	7dba      	ldrb	r2, [r7, #22]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	32ae      	adds	r2, #174	@ 0xae
 8006ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	7afa      	ldrb	r2, [r7, #11]
 8006ac0:	4611      	mov	r1, r2
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	4798      	blx	r3
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	e000      	b.n	8006ad6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3718      	adds	r7, #24
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b086      	sub	sp, #24
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006aec:	7afb      	ldrb	r3, [r7, #11]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d16f      	bne.n	8006bd2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3314      	adds	r3, #20
 8006af6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006afe:	2b02      	cmp	r3, #2
 8006b00:	d15a      	bne.n	8006bb8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	689a      	ldr	r2, [r3, #8]
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d914      	bls.n	8006b38 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	689a      	ldr	r2, [r3, #8]
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	1ad2      	subs	r2, r2, r3
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	461a      	mov	r2, r3
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	68f8      	ldr	r0, [r7, #12]
 8006b26:	f001 f8bc 	bl	8007ca2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2100      	movs	r1, #0
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f001 fda5 	bl	8008680 <USBD_LL_PrepareReceive>
 8006b36:	e03f      	b.n	8006bb8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	68da      	ldr	r2, [r3, #12]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d11c      	bne.n	8006b7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d316      	bcc.n	8006b7e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d20f      	bcs.n	8006b7e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2100      	movs	r1, #0
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f001 f89d 	bl	8007ca2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	2100      	movs	r1, #0
 8006b76:	68f8      	ldr	r0, [r7, #12]
 8006b78:	f001 fd82 	bl	8008680 <USBD_LL_PrepareReceive>
 8006b7c:	e01c      	b.n	8006bb8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b84:	b2db      	uxtb	r3, r3
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	d10f      	bne.n	8006baa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d009      	beq.n	8006baa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ba4:	68db      	ldr	r3, [r3, #12]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006baa:	2180      	movs	r1, #128	@ 0x80
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f001 fcbd 	bl	800852c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006bb2:	68f8      	ldr	r0, [r7, #12]
 8006bb4:	f001 f8c7 	bl	8007d46 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d03a      	beq.n	8006c38 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006bc2:	68f8      	ldr	r0, [r7, #12]
 8006bc4:	f7ff fe42 	bl	800684c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	2200      	movs	r2, #0
 8006bcc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006bd0:	e032      	b.n	8006c38 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006bd2:	7afb      	ldrb	r3, [r7, #11]
 8006bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006bd8:	b2db      	uxtb	r3, r3
 8006bda:	4619      	mov	r1, r3
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 f985 	bl	8006eec <USBD_CoreFindEP>
 8006be2:	4603      	mov	r3, r0
 8006be4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006be6:	7dfb      	ldrb	r3, [r7, #23]
 8006be8:	2bff      	cmp	r3, #255	@ 0xff
 8006bea:	d025      	beq.n	8006c38 <USBD_LL_DataInStage+0x15a>
 8006bec:	7dfb      	ldrb	r3, [r7, #23]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d122      	bne.n	8006c38 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b03      	cmp	r3, #3
 8006bfc:	d11c      	bne.n	8006c38 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006bfe:	7dfa      	ldrb	r2, [r7, #23]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	32ae      	adds	r2, #174	@ 0xae
 8006c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d014      	beq.n	8006c38 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006c0e:	7dfa      	ldrb	r2, [r7, #23]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006c16:	7dfa      	ldrb	r2, [r7, #23]
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	32ae      	adds	r2, #174	@ 0xae
 8006c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	7afa      	ldrb	r2, [r7, #11]
 8006c24:	4611      	mov	r1, r2
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006c2e:	7dbb      	ldrb	r3, [r7, #22]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d001      	beq.n	8006c38 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006c34:	7dbb      	ldrb	r3, [r7, #22]
 8006c36:	e000      	b.n	8006c3a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3718      	adds	r7, #24
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2200      	movs	r2, #0
 8006c68:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d014      	beq.n	8006ca8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00e      	beq.n	8006ca8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	6852      	ldr	r2, [r2, #4]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	4611      	mov	r1, r2
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	4798      	blx	r3
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ca4:	2303      	movs	r3, #3
 8006ca6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ca8:	2340      	movs	r3, #64	@ 0x40
 8006caa:	2200      	movs	r2, #0
 8006cac:	2100      	movs	r1, #0
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f001 fbf7 	bl	80084a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2240      	movs	r2, #64	@ 0x40
 8006cc0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cc4:	2340      	movs	r3, #64	@ 0x40
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	2180      	movs	r1, #128	@ 0x80
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fbe9 	bl	80084a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2240      	movs	r2, #64	@ 0x40
 8006cda:	621a      	str	r2, [r3, #32]

  return ret;
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	460b      	mov	r3, r1
 8006cf0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	78fa      	ldrb	r2, [r7, #3]
 8006cf6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	370c      	adds	r7, #12
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b083      	sub	sp, #12
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d006      	beq.n	8006d28 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d20:	b2da      	uxtb	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2204      	movs	r2, #4
 8006d2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d106      	bne.n	8006d60 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	2b03      	cmp	r3, #3
 8006d80:	d110      	bne.n	8006da4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00b      	beq.n	8006da4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d92:	69db      	ldr	r3, [r3, #28]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d005      	beq.n	8006da4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d9e:	69db      	ldr	r3, [r3, #28]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3708      	adds	r7, #8
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	6078      	str	r0, [r7, #4]
 8006db6:	460b      	mov	r3, r1
 8006db8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	32ae      	adds	r2, #174	@ 0xae
 8006dc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d101      	bne.n	8006dd0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e01c      	b.n	8006e0a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b03      	cmp	r3, #3
 8006dda:	d115      	bne.n	8006e08 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	32ae      	adds	r2, #174	@ 0xae
 8006de6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00b      	beq.n	8006e08 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	32ae      	adds	r2, #174	@ 0xae
 8006dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfe:	6a1b      	ldr	r3, [r3, #32]
 8006e00:	78fa      	ldrb	r2, [r7, #3]
 8006e02:	4611      	mov	r1, r2
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e08:	2300      	movs	r3, #0
}
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	32ae      	adds	r2, #174	@ 0xae
 8006e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e01c      	b.n	8006e6e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d115      	bne.n	8006e6c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	32ae      	adds	r2, #174	@ 0xae
 8006e4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00b      	beq.n	8006e6c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	32ae      	adds	r2, #174	@ 0xae
 8006e5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	4611      	mov	r1, r2
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b083      	sub	sp, #12
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	370c      	adds	r7, #12
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6852      	ldr	r2, [r2, #4]
 8006eb6:	b2d2      	uxtb	r2, r2
 8006eb8:	4611      	mov	r1, r2
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	4798      	blx	r3
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d001      	beq.n	8006ec8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006ec4:	2303      	movs	r3, #3
 8006ec6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	3710      	adds	r7, #16
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bd80      	pop	{r7, pc}

08006ed2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
 8006eda:	460b      	mov	r3, r1
 8006edc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ede:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	370c      	adds	r7, #12
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006ef8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr

08006f06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b086      	sub	sp, #24
 8006f0a:	af00      	add	r7, sp, #0
 8006f0c:	6078      	str	r0, [r7, #4]
 8006f0e:	460b      	mov	r3, r1
 8006f10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	885b      	ldrh	r3, [r3, #2]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	68fa      	ldr	r2, [r7, #12]
 8006f26:	7812      	ldrb	r2, [r2, #0]
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d91f      	bls.n	8006f6c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006f32:	e013      	b.n	8006f5c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006f34:	f107 030a 	add.w	r3, r7, #10
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6978      	ldr	r0, [r7, #20]
 8006f3c:	f000 f81b 	bl	8006f76 <USBD_GetNextDesc>
 8006f40:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	785b      	ldrb	r3, [r3, #1]
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d108      	bne.n	8006f5c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	789b      	ldrb	r3, [r3, #2]
 8006f52:	78fa      	ldrb	r2, [r7, #3]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d008      	beq.n	8006f6a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	885b      	ldrh	r3, [r3, #2]
 8006f60:	b29a      	uxth	r2, r3
 8006f62:	897b      	ldrh	r3, [r7, #10]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d8e5      	bhi.n	8006f34 <USBD_GetEpDesc+0x2e>
 8006f68:	e000      	b.n	8006f6c <USBD_GetEpDesc+0x66>
          break;
 8006f6a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006f6c:	693b      	ldr	r3, [r7, #16]
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}

08006f76 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b085      	sub	sp, #20
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
 8006f7e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	4413      	add	r3, r2
 8006f8e:	b29a      	uxth	r2, r3
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3714      	adds	r7, #20
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr

08006fae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006fae:	b480      	push	{r7}
 8006fb0:	b087      	sub	sp, #28
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	781b      	ldrb	r3, [r3, #0]
 8006fbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006fcc:	8a3b      	ldrh	r3, [r7, #16]
 8006fce:	021b      	lsls	r3, r3, #8
 8006fd0:	b21a      	sxth	r2, r3
 8006fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	b21b      	sxth	r3, r3
 8006fda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
	...

08006fec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b084      	sub	sp, #16
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007002:	2b40      	cmp	r3, #64	@ 0x40
 8007004:	d005      	beq.n	8007012 <USBD_StdDevReq+0x26>
 8007006:	2b40      	cmp	r3, #64	@ 0x40
 8007008:	d857      	bhi.n	80070ba <USBD_StdDevReq+0xce>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d00f      	beq.n	800702e <USBD_StdDevReq+0x42>
 800700e:	2b20      	cmp	r3, #32
 8007010:	d153      	bne.n	80070ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	32ae      	adds	r2, #174	@ 0xae
 800701c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	6839      	ldr	r1, [r7, #0]
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	4798      	blx	r3
 8007028:	4603      	mov	r3, r0
 800702a:	73fb      	strb	r3, [r7, #15]
      break;
 800702c:	e04a      	b.n	80070c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b09      	cmp	r3, #9
 8007034:	d83b      	bhi.n	80070ae <USBD_StdDevReq+0xc2>
 8007036:	a201      	add	r2, pc, #4	@ (adr r2, 800703c <USBD_StdDevReq+0x50>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	08007091 	.word	0x08007091
 8007040:	080070a5 	.word	0x080070a5
 8007044:	080070af 	.word	0x080070af
 8007048:	0800709b 	.word	0x0800709b
 800704c:	080070af 	.word	0x080070af
 8007050:	0800706f 	.word	0x0800706f
 8007054:	08007065 	.word	0x08007065
 8007058:	080070af 	.word	0x080070af
 800705c:	08007087 	.word	0x08007087
 8007060:	08007079 	.word	0x08007079
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fa3c 	bl	80074e4 <USBD_GetDescriptor>
          break;
 800706c:	e024      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fba1 	bl	80077b8 <USBD_SetAddress>
          break;
 8007076:	e01f      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 fbe0 	bl	8007840 <USBD_SetConfig>
 8007080:	4603      	mov	r3, r0
 8007082:	73fb      	strb	r3, [r7, #15]
          break;
 8007084:	e018      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007086:	6839      	ldr	r1, [r7, #0]
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fc83 	bl	8007994 <USBD_GetConfig>
          break;
 800708e:	e013      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 fcb4 	bl	8007a00 <USBD_GetStatus>
          break;
 8007098:	e00e      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fce3 	bl	8007a68 <USBD_SetFeature>
          break;
 80070a2:	e009      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fd07 	bl	8007aba <USBD_ClrFeature>
          break;
 80070ac:	e004      	b.n	80070b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fd5e 	bl	8007b72 <USBD_CtlError>
          break;
 80070b6:	bf00      	nop
      }
      break;
 80070b8:	e004      	b.n	80070c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80070ba:	6839      	ldr	r1, [r7, #0]
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 fd58 	bl	8007b72 <USBD_CtlError>
      break;
 80070c2:	bf00      	nop
  }

  return ret;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop

080070d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b084      	sub	sp, #16
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80070da:	2300      	movs	r3, #0
 80070dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80070e6:	2b40      	cmp	r3, #64	@ 0x40
 80070e8:	d005      	beq.n	80070f6 <USBD_StdItfReq+0x26>
 80070ea:	2b40      	cmp	r3, #64	@ 0x40
 80070ec:	d852      	bhi.n	8007194 <USBD_StdItfReq+0xc4>
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <USBD_StdItfReq+0x26>
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	d14e      	bne.n	8007194 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	2b02      	cmp	r3, #2
 8007102:	d840      	bhi.n	8007186 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	889b      	ldrh	r3, [r3, #4]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	2b01      	cmp	r3, #1
 800710c:	d836      	bhi.n	800717c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	889b      	ldrh	r3, [r3, #4]
 8007112:	b2db      	uxtb	r3, r3
 8007114:	4619      	mov	r1, r3
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff fedb 	bl	8006ed2 <USBD_CoreFindIF>
 800711c:	4603      	mov	r3, r0
 800711e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007120:	7bbb      	ldrb	r3, [r7, #14]
 8007122:	2bff      	cmp	r3, #255	@ 0xff
 8007124:	d01d      	beq.n	8007162 <USBD_StdItfReq+0x92>
 8007126:	7bbb      	ldrb	r3, [r7, #14]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d11a      	bne.n	8007162 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800712c:	7bba      	ldrb	r2, [r7, #14]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	32ae      	adds	r2, #174	@ 0xae
 8007132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00f      	beq.n	800715c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800713c:	7bba      	ldrb	r2, [r7, #14]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007144:	7bba      	ldrb	r2, [r7, #14]
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	32ae      	adds	r2, #174	@ 0xae
 800714a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	4798      	blx	r3
 8007156:	4603      	mov	r3, r0
 8007158:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800715a:	e004      	b.n	8007166 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007160:	e001      	b.n	8007166 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007162:	2303      	movs	r3, #3
 8007164:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	88db      	ldrh	r3, [r3, #6]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d110      	bne.n	8007190 <USBD_StdItfReq+0xc0>
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d10d      	bne.n	8007190 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 fdd3 	bl	8007d20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800717a:	e009      	b.n	8007190 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800717c:	6839      	ldr	r1, [r7, #0]
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fcf7 	bl	8007b72 <USBD_CtlError>
          break;
 8007184:	e004      	b.n	8007190 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007186:	6839      	ldr	r1, [r7, #0]
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f000 fcf2 	bl	8007b72 <USBD_CtlError>
          break;
 800718e:	e000      	b.n	8007192 <USBD_StdItfReq+0xc2>
          break;
 8007190:	bf00      	nop
      }
      break;
 8007192:	e004      	b.n	800719e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fceb 	bl	8007b72 <USBD_CtlError>
      break;
 800719c:	bf00      	nop
  }

  return ret;
 800719e:	7bfb      	ldrb	r3, [r7, #15]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	889b      	ldrh	r3, [r3, #4]
 80071ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071c4:	2b40      	cmp	r3, #64	@ 0x40
 80071c6:	d007      	beq.n	80071d8 <USBD_StdEPReq+0x30>
 80071c8:	2b40      	cmp	r3, #64	@ 0x40
 80071ca:	f200 817f 	bhi.w	80074cc <USBD_StdEPReq+0x324>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d02a      	beq.n	8007228 <USBD_StdEPReq+0x80>
 80071d2:	2b20      	cmp	r3, #32
 80071d4:	f040 817a 	bne.w	80074cc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80071d8:	7bbb      	ldrb	r3, [r7, #14]
 80071da:	4619      	mov	r1, r3
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	f7ff fe85 	bl	8006eec <USBD_CoreFindEP>
 80071e2:	4603      	mov	r3, r0
 80071e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071e6:	7b7b      	ldrb	r3, [r7, #13]
 80071e8:	2bff      	cmp	r3, #255	@ 0xff
 80071ea:	f000 8174 	beq.w	80074d6 <USBD_StdEPReq+0x32e>
 80071ee:	7b7b      	ldrb	r3, [r7, #13]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f040 8170 	bne.w	80074d6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80071f6:	7b7a      	ldrb	r2, [r7, #13]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80071fe:	7b7a      	ldrb	r2, [r7, #13]
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	32ae      	adds	r2, #174	@ 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	f000 8163 	beq.w	80074d6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007210:	7b7a      	ldrb	r2, [r7, #13]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	32ae      	adds	r2, #174	@ 0xae
 8007216:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	4798      	blx	r3
 8007222:	4603      	mov	r3, r0
 8007224:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007226:	e156      	b.n	80074d6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	785b      	ldrb	r3, [r3, #1]
 800722c:	2b03      	cmp	r3, #3
 800722e:	d008      	beq.n	8007242 <USBD_StdEPReq+0x9a>
 8007230:	2b03      	cmp	r3, #3
 8007232:	f300 8145 	bgt.w	80074c0 <USBD_StdEPReq+0x318>
 8007236:	2b00      	cmp	r3, #0
 8007238:	f000 809b 	beq.w	8007372 <USBD_StdEPReq+0x1ca>
 800723c:	2b01      	cmp	r3, #1
 800723e:	d03c      	beq.n	80072ba <USBD_StdEPReq+0x112>
 8007240:	e13e      	b.n	80074c0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007248:	b2db      	uxtb	r3, r3
 800724a:	2b02      	cmp	r3, #2
 800724c:	d002      	beq.n	8007254 <USBD_StdEPReq+0xac>
 800724e:	2b03      	cmp	r3, #3
 8007250:	d016      	beq.n	8007280 <USBD_StdEPReq+0xd8>
 8007252:	e02c      	b.n	80072ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007254:	7bbb      	ldrb	r3, [r7, #14]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00d      	beq.n	8007276 <USBD_StdEPReq+0xce>
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	2b80      	cmp	r3, #128	@ 0x80
 800725e:	d00a      	beq.n	8007276 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007260:	7bbb      	ldrb	r3, [r7, #14]
 8007262:	4619      	mov	r1, r3
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f001 f961 	bl	800852c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800726a:	2180      	movs	r1, #128	@ 0x80
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f001 f95d 	bl	800852c <USBD_LL_StallEP>
 8007272:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007274:	e020      	b.n	80072b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007276:	6839      	ldr	r1, [r7, #0]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 fc7a 	bl	8007b72 <USBD_CtlError>
              break;
 800727e:	e01b      	b.n	80072b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	885b      	ldrh	r3, [r3, #2]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10e      	bne.n	80072a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <USBD_StdEPReq+0xfe>
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b80      	cmp	r3, #128	@ 0x80
 8007292:	d008      	beq.n	80072a6 <USBD_StdEPReq+0xfe>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	88db      	ldrh	r3, [r3, #6]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d104      	bne.n	80072a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f943 	bl	800852c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 fd3a 	bl	8007d20 <USBD_CtlSendStatus>

              break;
 80072ac:	e004      	b.n	80072b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc5e 	bl	8007b72 <USBD_CtlError>
              break;
 80072b6:	bf00      	nop
          }
          break;
 80072b8:	e107      	b.n	80074ca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b02      	cmp	r3, #2
 80072c4:	d002      	beq.n	80072cc <USBD_StdEPReq+0x124>
 80072c6:	2b03      	cmp	r3, #3
 80072c8:	d016      	beq.n	80072f8 <USBD_StdEPReq+0x150>
 80072ca:	e04b      	b.n	8007364 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072cc:	7bbb      	ldrb	r3, [r7, #14]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d00d      	beq.n	80072ee <USBD_StdEPReq+0x146>
 80072d2:	7bbb      	ldrb	r3, [r7, #14]
 80072d4:	2b80      	cmp	r3, #128	@ 0x80
 80072d6:	d00a      	beq.n	80072ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80072d8:	7bbb      	ldrb	r3, [r7, #14]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f001 f925 	bl	800852c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80072e2:	2180      	movs	r1, #128	@ 0x80
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f001 f921 	bl	800852c <USBD_LL_StallEP>
 80072ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80072ec:	e040      	b.n	8007370 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fc3e 	bl	8007b72 <USBD_CtlError>
              break;
 80072f6:	e03b      	b.n	8007370 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	885b      	ldrh	r3, [r3, #2]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d136      	bne.n	800736e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007306:	2b00      	cmp	r3, #0
 8007308:	d004      	beq.n	8007314 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800730a:	7bbb      	ldrb	r3, [r7, #14]
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 f92b 	bl	800856a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 fd03 	bl	8007d20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	4619      	mov	r1, r3
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f7ff fde4 	bl	8006eec <USBD_CoreFindEP>
 8007324:	4603      	mov	r3, r0
 8007326:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007328:	7b7b      	ldrb	r3, [r7, #13]
 800732a:	2bff      	cmp	r3, #255	@ 0xff
 800732c:	d01f      	beq.n	800736e <USBD_StdEPReq+0x1c6>
 800732e:	7b7b      	ldrb	r3, [r7, #13]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d11c      	bne.n	800736e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007334:	7b7a      	ldrb	r2, [r7, #13]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800733c:	7b7a      	ldrb	r2, [r7, #13]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	32ae      	adds	r2, #174	@ 0xae
 8007342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d010      	beq.n	800736e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800734c:	7b7a      	ldrb	r2, [r7, #13]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	32ae      	adds	r2, #174	@ 0xae
 8007352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	4798      	blx	r3
 800735e:	4603      	mov	r3, r0
 8007360:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007362:	e004      	b.n	800736e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fc03 	bl	8007b72 <USBD_CtlError>
              break;
 800736c:	e000      	b.n	8007370 <USBD_StdEPReq+0x1c8>
              break;
 800736e:	bf00      	nop
          }
          break;
 8007370:	e0ab      	b.n	80074ca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007378:	b2db      	uxtb	r3, r3
 800737a:	2b02      	cmp	r3, #2
 800737c:	d002      	beq.n	8007384 <USBD_StdEPReq+0x1dc>
 800737e:	2b03      	cmp	r3, #3
 8007380:	d032      	beq.n	80073e8 <USBD_StdEPReq+0x240>
 8007382:	e097      	b.n	80074b4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007384:	7bbb      	ldrb	r3, [r7, #14]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d007      	beq.n	800739a <USBD_StdEPReq+0x1f2>
 800738a:	7bbb      	ldrb	r3, [r7, #14]
 800738c:	2b80      	cmp	r3, #128	@ 0x80
 800738e:	d004      	beq.n	800739a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007390:	6839      	ldr	r1, [r7, #0]
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fbed 	bl	8007b72 <USBD_CtlError>
                break;
 8007398:	e091      	b.n	80074be <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800739a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	da0b      	bge.n	80073ba <USBD_StdEPReq+0x212>
 80073a2:	7bbb      	ldrb	r3, [r7, #14]
 80073a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80073a8:	4613      	mov	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	3310      	adds	r3, #16
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	4413      	add	r3, r2
 80073b6:	3304      	adds	r3, #4
 80073b8:	e00b      	b.n	80073d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80073ba:	7bbb      	ldrb	r3, [r7, #14]
 80073bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80073c0:	4613      	mov	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80073cc:	687a      	ldr	r2, [r7, #4]
 80073ce:	4413      	add	r3, r2
 80073d0:	3304      	adds	r3, #4
 80073d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2202      	movs	r2, #2
 80073de:	4619      	mov	r1, r3
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f000 fc43 	bl	8007c6c <USBD_CtlSendData>
              break;
 80073e6:	e06a      	b.n	80074be <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80073e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	da11      	bge.n	8007414 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	f003 020f 	and.w	r2, r3, #15
 80073f6:	6879      	ldr	r1, [r7, #4]
 80073f8:	4613      	mov	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	4413      	add	r3, r2
 80073fe:	009b      	lsls	r3, r3, #2
 8007400:	440b      	add	r3, r1
 8007402:	3324      	adds	r3, #36	@ 0x24
 8007404:	881b      	ldrh	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d117      	bne.n	800743a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fbb0 	bl	8007b72 <USBD_CtlError>
                  break;
 8007412:	e054      	b.n	80074be <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	f003 020f 	and.w	r2, r3, #15
 800741a:	6879      	ldr	r1, [r7, #4]
 800741c:	4613      	mov	r3, r2
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	4413      	add	r3, r2
 8007422:	009b      	lsls	r3, r3, #2
 8007424:	440b      	add	r3, r1
 8007426:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800742a:	881b      	ldrh	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d104      	bne.n	800743a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fb9d 	bl	8007b72 <USBD_CtlError>
                  break;
 8007438:	e041      	b.n	80074be <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800743a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	da0b      	bge.n	800745a <USBD_StdEPReq+0x2b2>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007448:	4613      	mov	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	4413      	add	r3, r2
 800744e:	009b      	lsls	r3, r3, #2
 8007450:	3310      	adds	r3, #16
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	4413      	add	r3, r2
 8007456:	3304      	adds	r3, #4
 8007458:	e00b      	b.n	8007472 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800745a:	7bbb      	ldrb	r3, [r7, #14]
 800745c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	4413      	add	r3, r2
 8007470:	3304      	adds	r3, #4
 8007472:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d002      	beq.n	8007480 <USBD_StdEPReq+0x2d8>
 800747a:	7bbb      	ldrb	r3, [r7, #14]
 800747c:	2b80      	cmp	r3, #128	@ 0x80
 800747e:	d103      	bne.n	8007488 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007480:	68bb      	ldr	r3, [r7, #8]
 8007482:	2200      	movs	r2, #0
 8007484:	601a      	str	r2, [r3, #0]
 8007486:	e00e      	b.n	80074a6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007488:	7bbb      	ldrb	r3, [r7, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 f88b 	bl	80085a8 <USBD_LL_IsStallEP>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d003      	beq.n	80074a0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2201      	movs	r2, #1
 800749c:	601a      	str	r2, [r3, #0]
 800749e:	e002      	b.n	80074a6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	2200      	movs	r2, #0
 80074a4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	2202      	movs	r2, #2
 80074aa:	4619      	mov	r1, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 fbdd 	bl	8007c6c <USBD_CtlSendData>
              break;
 80074b2:	e004      	b.n	80074be <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80074b4:	6839      	ldr	r1, [r7, #0]
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 fb5b 	bl	8007b72 <USBD_CtlError>
              break;
 80074bc:	bf00      	nop
          }
          break;
 80074be:	e004      	b.n	80074ca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80074c0:	6839      	ldr	r1, [r7, #0]
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f000 fb55 	bl	8007b72 <USBD_CtlError>
          break;
 80074c8:	bf00      	nop
      }
      break;
 80074ca:	e005      	b.n	80074d8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80074cc:	6839      	ldr	r1, [r7, #0]
 80074ce:	6878      	ldr	r0, [r7, #4]
 80074d0:	f000 fb4f 	bl	8007b72 <USBD_CtlError>
      break;
 80074d4:	e000      	b.n	80074d8 <USBD_StdEPReq+0x330>
      break;
 80074d6:	bf00      	nop
  }

  return ret;
 80074d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3710      	adds	r7, #16
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}
	...

080074e4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80074f6:	2300      	movs	r3, #0
 80074f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	885b      	ldrh	r3, [r3, #2]
 80074fe:	0a1b      	lsrs	r3, r3, #8
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	2b06      	cmp	r3, #6
 8007506:	f200 8128 	bhi.w	800775a <USBD_GetDescriptor+0x276>
 800750a:	a201      	add	r2, pc, #4	@ (adr r2, 8007510 <USBD_GetDescriptor+0x2c>)
 800750c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007510:	0800752d 	.word	0x0800752d
 8007514:	08007545 	.word	0x08007545
 8007518:	08007585 	.word	0x08007585
 800751c:	0800775b 	.word	0x0800775b
 8007520:	0800775b 	.word	0x0800775b
 8007524:	080076fb 	.word	0x080076fb
 8007528:	08007727 	.word	0x08007727
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	7c12      	ldrb	r2, [r2, #16]
 8007538:	f107 0108 	add.w	r1, r7, #8
 800753c:	4610      	mov	r0, r2
 800753e:	4798      	blx	r3
 8007540:	60f8      	str	r0, [r7, #12]
      break;
 8007542:	e112      	b.n	800776a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	7c1b      	ldrb	r3, [r3, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10d      	bne.n	8007568 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007554:	f107 0208 	add.w	r2, r7, #8
 8007558:	4610      	mov	r0, r2
 800755a:	4798      	blx	r3
 800755c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	3301      	adds	r3, #1
 8007562:	2202      	movs	r2, #2
 8007564:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007566:	e100      	b.n	800776a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	f107 0208 	add.w	r2, r7, #8
 8007574:	4610      	mov	r0, r2
 8007576:	4798      	blx	r3
 8007578:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	3301      	adds	r3, #1
 800757e:	2202      	movs	r2, #2
 8007580:	701a      	strb	r2, [r3, #0]
      break;
 8007582:	e0f2      	b.n	800776a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	885b      	ldrh	r3, [r3, #2]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b05      	cmp	r3, #5
 800758c:	f200 80ac 	bhi.w	80076e8 <USBD_GetDescriptor+0x204>
 8007590:	a201      	add	r2, pc, #4	@ (adr r2, 8007598 <USBD_GetDescriptor+0xb4>)
 8007592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007596:	bf00      	nop
 8007598:	080075b1 	.word	0x080075b1
 800759c:	080075e5 	.word	0x080075e5
 80075a0:	08007619 	.word	0x08007619
 80075a4:	0800764d 	.word	0x0800764d
 80075a8:	08007681 	.word	0x08007681
 80075ac:	080076b5 	.word	0x080076b5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d00b      	beq.n	80075d4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075c2:	685b      	ldr	r3, [r3, #4]
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	7c12      	ldrb	r2, [r2, #16]
 80075c8:	f107 0108 	add.w	r1, r7, #8
 80075cc:	4610      	mov	r0, r2
 80075ce:	4798      	blx	r3
 80075d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075d2:	e091      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075d4:	6839      	ldr	r1, [r7, #0]
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	f000 facb 	bl	8007b72 <USBD_CtlError>
            err++;
 80075dc:	7afb      	ldrb	r3, [r7, #11]
 80075de:	3301      	adds	r3, #1
 80075e0:	72fb      	strb	r3, [r7, #11]
          break;
 80075e2:	e089      	b.n	80076f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d00b      	beq.n	8007608 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	7c12      	ldrb	r2, [r2, #16]
 80075fc:	f107 0108 	add.w	r1, r7, #8
 8007600:	4610      	mov	r0, r2
 8007602:	4798      	blx	r3
 8007604:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007606:	e077      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007608:	6839      	ldr	r1, [r7, #0]
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 fab1 	bl	8007b72 <USBD_CtlError>
            err++;
 8007610:	7afb      	ldrb	r3, [r7, #11]
 8007612:	3301      	adds	r3, #1
 8007614:	72fb      	strb	r3, [r7, #11]
          break;
 8007616:	e06f      	b.n	80076f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800761e:	68db      	ldr	r3, [r3, #12]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00b      	beq.n	800763c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	7c12      	ldrb	r2, [r2, #16]
 8007630:	f107 0108 	add.w	r1, r7, #8
 8007634:	4610      	mov	r0, r2
 8007636:	4798      	blx	r3
 8007638:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800763a:	e05d      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800763c:	6839      	ldr	r1, [r7, #0]
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fa97 	bl	8007b72 <USBD_CtlError>
            err++;
 8007644:	7afb      	ldrb	r3, [r7, #11]
 8007646:	3301      	adds	r3, #1
 8007648:	72fb      	strb	r3, [r7, #11]
          break;
 800764a:	e055      	b.n	80076f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	2b00      	cmp	r3, #0
 8007656:	d00b      	beq.n	8007670 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	7c12      	ldrb	r2, [r2, #16]
 8007664:	f107 0108 	add.w	r1, r7, #8
 8007668:	4610      	mov	r0, r2
 800766a:	4798      	blx	r3
 800766c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800766e:	e043      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007670:	6839      	ldr	r1, [r7, #0]
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 fa7d 	bl	8007b72 <USBD_CtlError>
            err++;
 8007678:	7afb      	ldrb	r3, [r7, #11]
 800767a:	3301      	adds	r3, #1
 800767c:	72fb      	strb	r3, [r7, #11]
          break;
 800767e:	e03b      	b.n	80076f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007686:	695b      	ldr	r3, [r3, #20]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d00b      	beq.n	80076a4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007692:	695b      	ldr	r3, [r3, #20]
 8007694:	687a      	ldr	r2, [r7, #4]
 8007696:	7c12      	ldrb	r2, [r2, #16]
 8007698:	f107 0108 	add.w	r1, r7, #8
 800769c:	4610      	mov	r0, r2
 800769e:	4798      	blx	r3
 80076a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076a2:	e029      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fa63 	bl	8007b72 <USBD_CtlError>
            err++;
 80076ac:	7afb      	ldrb	r3, [r7, #11]
 80076ae:	3301      	adds	r3, #1
 80076b0:	72fb      	strb	r3, [r7, #11]
          break;
 80076b2:	e021      	b.n	80076f8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d00b      	beq.n	80076d8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	7c12      	ldrb	r2, [r2, #16]
 80076cc:	f107 0108 	add.w	r1, r7, #8
 80076d0:	4610      	mov	r0, r2
 80076d2:	4798      	blx	r3
 80076d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80076d6:	e00f      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80076d8:	6839      	ldr	r1, [r7, #0]
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fa49 	bl	8007b72 <USBD_CtlError>
            err++;
 80076e0:	7afb      	ldrb	r3, [r7, #11]
 80076e2:	3301      	adds	r3, #1
 80076e4:	72fb      	strb	r3, [r7, #11]
          break;
 80076e6:	e007      	b.n	80076f8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80076e8:	6839      	ldr	r1, [r7, #0]
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fa41 	bl	8007b72 <USBD_CtlError>
          err++;
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	3301      	adds	r3, #1
 80076f4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80076f6:	bf00      	nop
      }
      break;
 80076f8:	e037      	b.n	800776a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7c1b      	ldrb	r3, [r3, #16]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d109      	bne.n	8007716 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800770a:	f107 0208 	add.w	r2, r7, #8
 800770e:	4610      	mov	r0, r2
 8007710:	4798      	blx	r3
 8007712:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007714:	e029      	b.n	800776a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fa2a 	bl	8007b72 <USBD_CtlError>
        err++;
 800771e:	7afb      	ldrb	r3, [r7, #11]
 8007720:	3301      	adds	r3, #1
 8007722:	72fb      	strb	r3, [r7, #11]
      break;
 8007724:	e021      	b.n	800776a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7c1b      	ldrb	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10d      	bne.n	800774a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007736:	f107 0208 	add.w	r2, r7, #8
 800773a:	4610      	mov	r0, r2
 800773c:	4798      	blx	r3
 800773e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	3301      	adds	r3, #1
 8007744:	2207      	movs	r2, #7
 8007746:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007748:	e00f      	b.n	800776a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 fa10 	bl	8007b72 <USBD_CtlError>
        err++;
 8007752:	7afb      	ldrb	r3, [r7, #11]
 8007754:	3301      	adds	r3, #1
 8007756:	72fb      	strb	r3, [r7, #11]
      break;
 8007758:	e007      	b.n	800776a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fa08 	bl	8007b72 <USBD_CtlError>
      err++;
 8007762:	7afb      	ldrb	r3, [r7, #11]
 8007764:	3301      	adds	r3, #1
 8007766:	72fb      	strb	r3, [r7, #11]
      break;
 8007768:	bf00      	nop
  }

  if (err != 0U)
 800776a:	7afb      	ldrb	r3, [r7, #11]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11e      	bne.n	80077ae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	88db      	ldrh	r3, [r3, #6]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d016      	beq.n	80077a6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007778:	893b      	ldrh	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00e      	beq.n	800779c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	88da      	ldrh	r2, [r3, #6]
 8007782:	893b      	ldrh	r3, [r7, #8]
 8007784:	4293      	cmp	r3, r2
 8007786:	bf28      	it	cs
 8007788:	4613      	movcs	r3, r2
 800778a:	b29b      	uxth	r3, r3
 800778c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800778e:	893b      	ldrh	r3, [r7, #8]
 8007790:	461a      	mov	r2, r3
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	6878      	ldr	r0, [r7, #4]
 8007796:	f000 fa69 	bl	8007c6c <USBD_CtlSendData>
 800779a:	e009      	b.n	80077b0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 f9e7 	bl	8007b72 <USBD_CtlError>
 80077a4:	e004      	b.n	80077b0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 faba 	bl	8007d20 <USBD_CtlSendStatus>
 80077ac:	e000      	b.n	80077b0 <USBD_GetDescriptor+0x2cc>
    return;
 80077ae:	bf00      	nop
  }
}
 80077b0:	3710      	adds	r7, #16
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop

080077b8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b084      	sub	sp, #16
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80077c2:	683b      	ldr	r3, [r7, #0]
 80077c4:	889b      	ldrh	r3, [r3, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d131      	bne.n	800782e <USBD_SetAddress+0x76>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	88db      	ldrh	r3, [r3, #6]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d12d      	bne.n	800782e <USBD_SetAddress+0x76>
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	885b      	ldrh	r3, [r3, #2]
 80077d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d8:	d829      	bhi.n	800782e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	885b      	ldrh	r3, [r3, #2]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80077e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80077ec:	b2db      	uxtb	r3, r3
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d104      	bne.n	80077fc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80077f2:	6839      	ldr	r1, [r7, #0]
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 f9bc 	bl	8007b72 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80077fa:	e01d      	b.n	8007838 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007804:	7bfb      	ldrb	r3, [r7, #15]
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fef9 	bl	8008600 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fa86 	bl	8007d20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007814:	7bfb      	ldrb	r3, [r7, #15]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d004      	beq.n	8007824 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2202      	movs	r2, #2
 800781e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007822:	e009      	b.n	8007838 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800782c:	e004      	b.n	8007838 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800782e:	6839      	ldr	r1, [r7, #0]
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	f000 f99e 	bl	8007b72 <USBD_CtlError>
  }
}
 8007836:	bf00      	nop
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b084      	sub	sp, #16
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	885b      	ldrh	r3, [r3, #2]
 8007852:	b2da      	uxtb	r2, r3
 8007854:	4b4e      	ldr	r3, [pc, #312]	@ (8007990 <USBD_SetConfig+0x150>)
 8007856:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007858:	4b4d      	ldr	r3, [pc, #308]	@ (8007990 <USBD_SetConfig+0x150>)
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d905      	bls.n	800786c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007860:	6839      	ldr	r1, [r7, #0]
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f985 	bl	8007b72 <USBD_CtlError>
    return USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	e08c      	b.n	8007986 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007872:	b2db      	uxtb	r3, r3
 8007874:	2b02      	cmp	r3, #2
 8007876:	d002      	beq.n	800787e <USBD_SetConfig+0x3e>
 8007878:	2b03      	cmp	r3, #3
 800787a:	d029      	beq.n	80078d0 <USBD_SetConfig+0x90>
 800787c:	e075      	b.n	800796a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800787e:	4b44      	ldr	r3, [pc, #272]	@ (8007990 <USBD_SetConfig+0x150>)
 8007880:	781b      	ldrb	r3, [r3, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d020      	beq.n	80078c8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007886:	4b42      	ldr	r3, [pc, #264]	@ (8007990 <USBD_SetConfig+0x150>)
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	461a      	mov	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007890:	4b3f      	ldr	r3, [pc, #252]	@ (8007990 <USBD_SetConfig+0x150>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	4619      	mov	r1, r3
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fe ffe3 	bl	8006862 <USBD_SetClassConfig>
 800789c:	4603      	mov	r3, r0
 800789e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d008      	beq.n	80078b8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f962 	bl	8007b72 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2202      	movs	r2, #2
 80078b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078b6:	e065      	b.n	8007984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 fa31 	bl	8007d20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2203      	movs	r2, #3
 80078c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80078c6:	e05d      	b.n	8007984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fa29 	bl	8007d20 <USBD_CtlSendStatus>
      break;
 80078ce:	e059      	b.n	8007984 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80078d0:	4b2f      	ldr	r3, [pc, #188]	@ (8007990 <USBD_SetConfig+0x150>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d112      	bne.n	80078fe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2202      	movs	r2, #2
 80078dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80078e0:	4b2b      	ldr	r3, [pc, #172]	@ (8007990 <USBD_SetConfig+0x150>)
 80078e2:	781b      	ldrb	r3, [r3, #0]
 80078e4:	461a      	mov	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80078ea:	4b29      	ldr	r3, [pc, #164]	@ (8007990 <USBD_SetConfig+0x150>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe ffd2 	bl	800689a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa12 	bl	8007d20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80078fc:	e042      	b.n	8007984 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80078fe:	4b24      	ldr	r3, [pc, #144]	@ (8007990 <USBD_SetConfig+0x150>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d02a      	beq.n	8007962 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f7fe ffc0 	bl	800689a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800791a:	4b1d      	ldr	r3, [pc, #116]	@ (8007990 <USBD_SetConfig+0x150>)
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007924:	4b1a      	ldr	r3, [pc, #104]	@ (8007990 <USBD_SetConfig+0x150>)
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	4619      	mov	r1, r3
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f7fe ff99 	bl	8006862 <USBD_SetClassConfig>
 8007930:	4603      	mov	r3, r0
 8007932:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d00f      	beq.n	800795a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f918 	bl	8007b72 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	685b      	ldr	r3, [r3, #4]
 8007946:	b2db      	uxtb	r3, r3
 8007948:	4619      	mov	r1, r3
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fe ffa5 	bl	800689a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007958:	e014      	b.n	8007984 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 f9e0 	bl	8007d20 <USBD_CtlSendStatus>
      break;
 8007960:	e010      	b.n	8007984 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f9dc 	bl	8007d20 <USBD_CtlSendStatus>
      break;
 8007968:	e00c      	b.n	8007984 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800796a:	6839      	ldr	r1, [r7, #0]
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f000 f900 	bl	8007b72 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007972:	4b07      	ldr	r3, [pc, #28]	@ (8007990 <USBD_SetConfig+0x150>)
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	4619      	mov	r1, r3
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f7fe ff8e 	bl	800689a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800797e:	2303      	movs	r3, #3
 8007980:	73fb      	strb	r3, [r7, #15]
      break;
 8007982:	bf00      	nop
  }

  return ret;
 8007984:	7bfb      	ldrb	r3, [r7, #15]
}
 8007986:	4618      	mov	r0, r3
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
 800798e:	bf00      	nop
 8007990:	20000214 	.word	0x20000214

08007994 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	88db      	ldrh	r3, [r3, #6]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d004      	beq.n	80079b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f8e2 	bl	8007b72 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80079ae:	e023      	b.n	80079f8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	2b02      	cmp	r3, #2
 80079ba:	dc02      	bgt.n	80079c2 <USBD_GetConfig+0x2e>
 80079bc:	2b00      	cmp	r3, #0
 80079be:	dc03      	bgt.n	80079c8 <USBD_GetConfig+0x34>
 80079c0:	e015      	b.n	80079ee <USBD_GetConfig+0x5a>
 80079c2:	2b03      	cmp	r3, #3
 80079c4:	d00b      	beq.n	80079de <USBD_GetConfig+0x4a>
 80079c6:	e012      	b.n	80079ee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2200      	movs	r2, #0
 80079cc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	3308      	adds	r3, #8
 80079d2:	2201      	movs	r2, #1
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f948 	bl	8007c6c <USBD_CtlSendData>
        break;
 80079dc:	e00c      	b.n	80079f8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	2201      	movs	r2, #1
 80079e4:	4619      	mov	r1, r3
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 f940 	bl	8007c6c <USBD_CtlSendData>
        break;
 80079ec:	e004      	b.n	80079f8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80079ee:	6839      	ldr	r1, [r7, #0]
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f8be 	bl	8007b72 <USBD_CtlError>
        break;
 80079f6:	bf00      	nop
}
 80079f8:	bf00      	nop
 80079fa:	3708      	adds	r7, #8
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	3b01      	subs	r3, #1
 8007a14:	2b02      	cmp	r3, #2
 8007a16:	d81e      	bhi.n	8007a56 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	2b02      	cmp	r3, #2
 8007a1e:	d004      	beq.n	8007a2a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007a20:	6839      	ldr	r1, [r7, #0]
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 f8a5 	bl	8007b72 <USBD_CtlError>
        break;
 8007a28:	e01a      	b.n	8007a60 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	f043 0202 	orr.w	r2, r3, #2
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	330c      	adds	r3, #12
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 f90c 	bl	8007c6c <USBD_CtlSendData>
      break;
 8007a54:	e004      	b.n	8007a60 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007a56:	6839      	ldr	r1, [r7, #0]
 8007a58:	6878      	ldr	r0, [r7, #4]
 8007a5a:	f000 f88a 	bl	8007b72 <USBD_CtlError>
      break;
 8007a5e:	bf00      	nop
  }
}
 8007a60:	bf00      	nop
 8007a62:	3708      	adds	r7, #8
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
 8007a70:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	885b      	ldrh	r3, [r3, #2]
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d107      	bne.n	8007a8a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2201      	movs	r2, #1
 8007a7e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f94c 	bl	8007d20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007a88:	e013      	b.n	8007ab2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	885b      	ldrh	r3, [r3, #2]
 8007a8e:	2b02      	cmp	r3, #2
 8007a90:	d10b      	bne.n	8007aaa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	889b      	ldrh	r3, [r3, #4]
 8007a96:	0a1b      	lsrs	r3, r3, #8
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	b2da      	uxtb	r2, r3
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f000 f93c 	bl	8007d20 <USBD_CtlSendStatus>
}
 8007aa8:	e003      	b.n	8007ab2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f860 	bl	8007b72 <USBD_CtlError>
}
 8007ab2:	bf00      	nop
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
 8007ac2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	3b01      	subs	r3, #1
 8007ace:	2b02      	cmp	r3, #2
 8007ad0:	d80b      	bhi.n	8007aea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	885b      	ldrh	r3, [r3, #2]
 8007ad6:	2b01      	cmp	r3, #1
 8007ad8:	d10c      	bne.n	8007af4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 f91c 	bl	8007d20 <USBD_CtlSendStatus>
      }
      break;
 8007ae8:	e004      	b.n	8007af4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007aea:	6839      	ldr	r1, [r7, #0]
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f840 	bl	8007b72 <USBD_CtlError>
      break;
 8007af2:	e000      	b.n	8007af6 <USBD_ClrFeature+0x3c>
      break;
 8007af4:	bf00      	nop
  }
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	781a      	ldrb	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	3301      	adds	r3, #1
 8007b18:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	781a      	ldrb	r2, [r3, #0]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	3301      	adds	r3, #1
 8007b26:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff fa40 	bl	8006fae <SWAPBYTE>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	461a      	mov	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3301      	adds	r3, #1
 8007b3a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	3301      	adds	r3, #1
 8007b40:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff fa33 	bl	8006fae <SWAPBYTE>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3301      	adds	r3, #1
 8007b54:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3301      	adds	r3, #1
 8007b5a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f7ff fa26 	bl	8006fae <SWAPBYTE>
 8007b62:	4603      	mov	r3, r0
 8007b64:	461a      	mov	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	80da      	strh	r2, [r3, #6]
}
 8007b6a:	bf00      	nop
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b082      	sub	sp, #8
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
 8007b7a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007b7c:	2180      	movs	r1, #128	@ 0x80
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fcd4 	bl	800852c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007b84:	2100      	movs	r1, #0
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fcd0 	bl	800852c <USBD_LL_StallEP>
}
 8007b8c:	bf00      	nop
 8007b8e:	3708      	adds	r7, #8
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d042      	beq.n	8007c30 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007bae:	6938      	ldr	r0, [r7, #16]
 8007bb0:	f000 f842 	bl	8007c38 <USBD_GetLen>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bbe:	d808      	bhi.n	8007bd2 <USBD_GetString+0x3e>
 8007bc0:	6938      	ldr	r0, [r7, #16]
 8007bc2:	f000 f839 	bl	8007c38 <USBD_GetLen>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	3301      	adds	r3, #1
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	005b      	lsls	r3, r3, #1
 8007bce:	b29a      	uxth	r2, r3
 8007bd0:	e001      	b.n	8007bd6 <USBD_GetString+0x42>
 8007bd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007bda:	7dfb      	ldrb	r3, [r7, #23]
 8007bdc:	68ba      	ldr	r2, [r7, #8]
 8007bde:	4413      	add	r3, r2
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	7812      	ldrb	r2, [r2, #0]
 8007be4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007be6:	7dfb      	ldrb	r3, [r7, #23]
 8007be8:	3301      	adds	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007bec:	7dfb      	ldrb	r3, [r7, #23]
 8007bee:	68ba      	ldr	r2, [r7, #8]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	2203      	movs	r2, #3
 8007bf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8007bf6:	7dfb      	ldrb	r3, [r7, #23]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007bfc:	e013      	b.n	8007c26 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	68ba      	ldr	r2, [r7, #8]
 8007c02:	4413      	add	r3, r2
 8007c04:	693a      	ldr	r2, [r7, #16]
 8007c06:	7812      	ldrb	r2, [r2, #0]
 8007c08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	613b      	str	r3, [r7, #16]
    idx++;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	3301      	adds	r3, #1
 8007c14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007c16:	7dfb      	ldrb	r3, [r7, #23]
 8007c18:	68ba      	ldr	r2, [r7, #8]
 8007c1a:	4413      	add	r3, r2
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007c20:	7dfb      	ldrb	r3, [r7, #23]
 8007c22:	3301      	adds	r3, #1
 8007c24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e7      	bne.n	8007bfe <USBD_GetString+0x6a>
 8007c2e:	e000      	b.n	8007c32 <USBD_GetString+0x9e>
    return;
 8007c30:	bf00      	nop
  }
}
 8007c32:	3718      	adds	r7, #24
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}

08007c38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007c48:	e005      	b.n	8007c56 <USBD_GetLen+0x1e>
  {
    len++;
 8007c4a:	7bfb      	ldrb	r3, [r7, #15]
 8007c4c:	3301      	adds	r3, #1
 8007c4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	3301      	adds	r3, #1
 8007c54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	781b      	ldrb	r3, [r3, #0]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f5      	bne.n	8007c4a <USBD_GetLen+0x12>
  }

  return len;
 8007c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	3714      	adds	r7, #20
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	687a      	ldr	r2, [r7, #4]
 8007c8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	68ba      	ldr	r2, [r7, #8]
 8007c90:	2100      	movs	r1, #0
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fcd3 	bl	800863e <USBD_LL_Transmit>

  return USBD_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	60f8      	str	r0, [r7, #12]
 8007caa:	60b9      	str	r1, [r7, #8]
 8007cac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68ba      	ldr	r2, [r7, #8]
 8007cb2:	2100      	movs	r1, #0
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 fcc2 	bl	800863e <USBD_LL_Transmit>

  return USBD_OK;
 8007cba:	2300      	movs	r3, #0
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2203      	movs	r2, #3
 8007cd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	687a      	ldr	r2, [r7, #4]
 8007cdc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68ba      	ldr	r2, [r7, #8]
 8007cec:	2100      	movs	r1, #0
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f000 fcc6 	bl	8008680 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3710      	adds	r7, #16
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}

08007cfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b084      	sub	sp, #16
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	2100      	movs	r1, #0
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 fcb5 	bl	8008680 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d16:	2300      	movs	r3, #0
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	3710      	adds	r7, #16
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	bd80      	pop	{r7, pc}

08007d20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b082      	sub	sp, #8
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2204      	movs	r2, #4
 8007d2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007d30:	2300      	movs	r3, #0
 8007d32:	2200      	movs	r2, #0
 8007d34:	2100      	movs	r1, #0
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 fc81 	bl	800863e <USBD_LL_Transmit>

  return USBD_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3708      	adds	r7, #8
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2205      	movs	r2, #5
 8007d52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007d56:	2300      	movs	r3, #0
 8007d58:	2200      	movs	r2, #0
 8007d5a:	2100      	movs	r1, #0
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fc8f 	bl	8008680 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007d62:	2300      	movs	r3, #0
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3708      	adds	r7, #8
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007d70:	2200      	movs	r2, #0
 8007d72:	4912      	ldr	r1, [pc, #72]	@ (8007dbc <MX_USB_DEVICE_Init+0x50>)
 8007d74:	4812      	ldr	r0, [pc, #72]	@ (8007dc0 <MX_USB_DEVICE_Init+0x54>)
 8007d76:	f7fe fcf7 	bl	8006768 <USBD_Init>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007d80:	f7f8 fed6 	bl	8000b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007d84:	490f      	ldr	r1, [pc, #60]	@ (8007dc4 <MX_USB_DEVICE_Init+0x58>)
 8007d86:	480e      	ldr	r0, [pc, #56]	@ (8007dc0 <MX_USB_DEVICE_Init+0x54>)
 8007d88:	f7fe fd1e 	bl	80067c8 <USBD_RegisterClass>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007d92:	f7f8 fecd 	bl	8000b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007d96:	490c      	ldr	r1, [pc, #48]	@ (8007dc8 <MX_USB_DEVICE_Init+0x5c>)
 8007d98:	4809      	ldr	r0, [pc, #36]	@ (8007dc0 <MX_USB_DEVICE_Init+0x54>)
 8007d9a:	f7fe fc55 	bl	8006648 <USBD_CDC_RegisterInterface>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007da4:	f7f8 fec4 	bl	8000b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007da8:	4805      	ldr	r0, [pc, #20]	@ (8007dc0 <MX_USB_DEVICE_Init+0x54>)
 8007daa:	f7fe fd43 	bl	8006834 <USBD_Start>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007db4:	f7f8 febc 	bl	8000b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007db8:	bf00      	nop
 8007dba:	bd80      	pop	{r7, pc}
 8007dbc:	200000ac 	.word	0x200000ac
 8007dc0:	20000218 	.word	0x20000218
 8007dc4:	20000018 	.word	0x20000018
 8007dc8:	20000098 	.word	0x20000098

08007dcc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007dcc:	b580      	push	{r7, lr}
 8007dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4905      	ldr	r1, [pc, #20]	@ (8007de8 <CDC_Init_FS+0x1c>)
 8007dd4:	4805      	ldr	r0, [pc, #20]	@ (8007dec <CDC_Init_FS+0x20>)
 8007dd6:	f7fe fc51 	bl	800667c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007dda:	4905      	ldr	r1, [pc, #20]	@ (8007df0 <CDC_Init_FS+0x24>)
 8007ddc:	4803      	ldr	r0, [pc, #12]	@ (8007dec <CDC_Init_FS+0x20>)
 8007dde:	f7fe fc6f 	bl	80066c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007de2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	20000cf4 	.word	0x20000cf4
 8007dec:	20000218 	.word	0x20000218
 8007df0:	200004f4 	.word	0x200004f4

08007df4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007df4:	b480      	push	{r7}
 8007df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007df8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	6039      	str	r1, [r7, #0]
 8007e0e:	71fb      	strb	r3, [r7, #7]
 8007e10:	4613      	mov	r3, r2
 8007e12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007e14:	79fb      	ldrb	r3, [r7, #7]
 8007e16:	2b23      	cmp	r3, #35	@ 0x23
 8007e18:	d84a      	bhi.n	8007eb0 <CDC_Control_FS+0xac>
 8007e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e20 <CDC_Control_FS+0x1c>)
 8007e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e20:	08007eb1 	.word	0x08007eb1
 8007e24:	08007eb1 	.word	0x08007eb1
 8007e28:	08007eb1 	.word	0x08007eb1
 8007e2c:	08007eb1 	.word	0x08007eb1
 8007e30:	08007eb1 	.word	0x08007eb1
 8007e34:	08007eb1 	.word	0x08007eb1
 8007e38:	08007eb1 	.word	0x08007eb1
 8007e3c:	08007eb1 	.word	0x08007eb1
 8007e40:	08007eb1 	.word	0x08007eb1
 8007e44:	08007eb1 	.word	0x08007eb1
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007eb1 	.word	0x08007eb1
 8007e50:	08007eb1 	.word	0x08007eb1
 8007e54:	08007eb1 	.word	0x08007eb1
 8007e58:	08007eb1 	.word	0x08007eb1
 8007e5c:	08007eb1 	.word	0x08007eb1
 8007e60:	08007eb1 	.word	0x08007eb1
 8007e64:	08007eb1 	.word	0x08007eb1
 8007e68:	08007eb1 	.word	0x08007eb1
 8007e6c:	08007eb1 	.word	0x08007eb1
 8007e70:	08007eb1 	.word	0x08007eb1
 8007e74:	08007eb1 	.word	0x08007eb1
 8007e78:	08007eb1 	.word	0x08007eb1
 8007e7c:	08007eb1 	.word	0x08007eb1
 8007e80:	08007eb1 	.word	0x08007eb1
 8007e84:	08007eb1 	.word	0x08007eb1
 8007e88:	08007eb1 	.word	0x08007eb1
 8007e8c:	08007eb1 	.word	0x08007eb1
 8007e90:	08007eb1 	.word	0x08007eb1
 8007e94:	08007eb1 	.word	0x08007eb1
 8007e98:	08007eb1 	.word	0x08007eb1
 8007e9c:	08007eb1 	.word	0x08007eb1
 8007ea0:	08007eb1 	.word	0x08007eb1
 8007ea4:	08007eb1 	.word	0x08007eb1
 8007ea8:	08007eb1 	.word	0x08007eb1
 8007eac:	08007eb1 	.word	0x08007eb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007eb0:	bf00      	nop
  }

  return (USBD_OK);
 8007eb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	370c      	adds	r7, #12
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebe:	4770      	bx	lr

08007ec0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4805      	ldr	r0, [pc, #20]	@ (8007ee4 <CDC_Receive_FS+0x24>)
 8007ece:	f7fe fbf7 	bl	80066c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ed2:	4804      	ldr	r0, [pc, #16]	@ (8007ee4 <CDC_Receive_FS+0x24>)
 8007ed4:	f7fe fc12 	bl	80066fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007ed8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3708      	adds	r7, #8
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000218 	.word	0x20000218

08007ee8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	60b9      	str	r1, [r7, #8]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007efa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
	...

08007f0c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	4603      	mov	r3, r0
 8007f14:	6039      	str	r1, [r7, #0]
 8007f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2212      	movs	r2, #18
 8007f1c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f1e:	4b03      	ldr	r3, [pc, #12]	@ (8007f2c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	200000c8 	.word	0x200000c8

08007f30 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	6039      	str	r1, [r7, #0]
 8007f3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2204      	movs	r2, #4
 8007f40:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f42:	4b03      	ldr	r3, [pc, #12]	@ (8007f50 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr
 8007f50:	200000dc 	.word	0x200000dc

08007f54 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f60:	79fb      	ldrb	r3, [r7, #7]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d105      	bne.n	8007f72 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f66:	683a      	ldr	r2, [r7, #0]
 8007f68:	4907      	ldr	r1, [pc, #28]	@ (8007f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f6a:	4808      	ldr	r0, [pc, #32]	@ (8007f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f6c:	f7ff fe12 	bl	8007b94 <USBD_GetString>
 8007f70:	e004      	b.n	8007f7c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f72:	683a      	ldr	r2, [r7, #0]
 8007f74:	4904      	ldr	r1, [pc, #16]	@ (8007f88 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f76:	4805      	ldr	r0, [pc, #20]	@ (8007f8c <USBD_FS_ProductStrDescriptor+0x38>)
 8007f78:	f7ff fe0c 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f7c:	4b02      	ldr	r3, [pc, #8]	@ (8007f88 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	200014f4 	.word	0x200014f4
 8007f8c:	080087e0 	.word	0x080087e0

08007f90 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b082      	sub	sp, #8
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	4603      	mov	r3, r0
 8007f98:	6039      	str	r1, [r7, #0]
 8007f9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007f9c:	683a      	ldr	r2, [r7, #0]
 8007f9e:	4904      	ldr	r1, [pc, #16]	@ (8007fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fa0:	4804      	ldr	r0, [pc, #16]	@ (8007fb4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fa2:	f7ff fdf7 	bl	8007b94 <USBD_GetString>
  return USBD_StrDesc;
 8007fa6:	4b02      	ldr	r3, [pc, #8]	@ (8007fb0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	200014f4 	.word	0x200014f4
 8007fb4:	080087f8 	.word	0x080087f8

08007fb8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	221a      	movs	r2, #26
 8007fc8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fca:	f000 f843 	bl	8008054 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fce:	4b02      	ldr	r3, [pc, #8]	@ (8007fd8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3708      	adds	r7, #8
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	200000e0 	.word	0x200000e0

08007fdc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	6039      	str	r1, [r7, #0]
 8007fe6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007fe8:	79fb      	ldrb	r3, [r7, #7]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d105      	bne.n	8007ffa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007fee:	683a      	ldr	r2, [r7, #0]
 8007ff0:	4907      	ldr	r1, [pc, #28]	@ (8008010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ff2:	4808      	ldr	r0, [pc, #32]	@ (8008014 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ff4:	f7ff fdce 	bl	8007b94 <USBD_GetString>
 8007ff8:	e004      	b.n	8008004 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007ffa:	683a      	ldr	r2, [r7, #0]
 8007ffc:	4904      	ldr	r1, [pc, #16]	@ (8008010 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ffe:	4805      	ldr	r0, [pc, #20]	@ (8008014 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008000:	f7ff fdc8 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008004:	4b02      	ldr	r3, [pc, #8]	@ (8008010 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008006:	4618      	mov	r0, r3
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	200014f4 	.word	0x200014f4
 8008014:	0800880c 	.word	0x0800880c

08008018 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	6039      	str	r1, [r7, #0]
 8008022:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008024:	79fb      	ldrb	r3, [r7, #7]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800802a:	683a      	ldr	r2, [r7, #0]
 800802c:	4907      	ldr	r1, [pc, #28]	@ (800804c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800802e:	4808      	ldr	r0, [pc, #32]	@ (8008050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008030:	f7ff fdb0 	bl	8007b94 <USBD_GetString>
 8008034:	e004      	b.n	8008040 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008036:	683a      	ldr	r2, [r7, #0]
 8008038:	4904      	ldr	r1, [pc, #16]	@ (800804c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800803a:	4805      	ldr	r0, [pc, #20]	@ (8008050 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800803c:	f7ff fdaa 	bl	8007b94 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008040:	4b02      	ldr	r3, [pc, #8]	@ (800804c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008042:	4618      	mov	r0, r3
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	200014f4 	.word	0x200014f4
 8008050:	08008818 	.word	0x08008818

08008054 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800805a:	4b0f      	ldr	r3, [pc, #60]	@ (8008098 <Get_SerialNum+0x44>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008060:	4b0e      	ldr	r3, [pc, #56]	@ (800809c <Get_SerialNum+0x48>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008066:	4b0e      	ldr	r3, [pc, #56]	@ (80080a0 <Get_SerialNum+0x4c>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	4413      	add	r3, r2
 8008072:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800807a:	2208      	movs	r2, #8
 800807c:	4909      	ldr	r1, [pc, #36]	@ (80080a4 <Get_SerialNum+0x50>)
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 f814 	bl	80080ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008084:	2204      	movs	r2, #4
 8008086:	4908      	ldr	r1, [pc, #32]	@ (80080a8 <Get_SerialNum+0x54>)
 8008088:	68b8      	ldr	r0, [r7, #8]
 800808a:	f000 f80f 	bl	80080ac <IntToUnicode>
  }
}
 800808e:	bf00      	nop
 8008090:	3710      	adds	r7, #16
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	1fff7a10 	.word	0x1fff7a10
 800809c:	1fff7a14 	.word	0x1fff7a14
 80080a0:	1fff7a18 	.word	0x1fff7a18
 80080a4:	200000e2 	.word	0x200000e2
 80080a8:	200000f2 	.word	0x200000f2

080080ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b087      	sub	sp, #28
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	60f8      	str	r0, [r7, #12]
 80080b4:	60b9      	str	r1, [r7, #8]
 80080b6:	4613      	mov	r3, r2
 80080b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080ba:	2300      	movs	r3, #0
 80080bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080be:	2300      	movs	r3, #0
 80080c0:	75fb      	strb	r3, [r7, #23]
 80080c2:	e027      	b.n	8008114 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	0f1b      	lsrs	r3, r3, #28
 80080c8:	2b09      	cmp	r3, #9
 80080ca:	d80b      	bhi.n	80080e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	0f1b      	lsrs	r3, r3, #28
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4619      	mov	r1, r3
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	440b      	add	r3, r1
 80080dc:	3230      	adds	r2, #48	@ 0x30
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	e00a      	b.n	80080fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0f1b      	lsrs	r3, r3, #28
 80080e8:	b2da      	uxtb	r2, r3
 80080ea:	7dfb      	ldrb	r3, [r7, #23]
 80080ec:	005b      	lsls	r3, r3, #1
 80080ee:	4619      	mov	r1, r3
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	440b      	add	r3, r1
 80080f4:	3237      	adds	r2, #55	@ 0x37
 80080f6:	b2d2      	uxtb	r2, r2
 80080f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	011b      	lsls	r3, r3, #4
 80080fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	3301      	adds	r3, #1
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4413      	add	r3, r2
 800810a:	2200      	movs	r2, #0
 800810c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800810e:	7dfb      	ldrb	r3, [r7, #23]
 8008110:	3301      	adds	r3, #1
 8008112:	75fb      	strb	r3, [r7, #23]
 8008114:	7dfa      	ldrb	r2, [r7, #23]
 8008116:	79fb      	ldrb	r3, [r7, #7]
 8008118:	429a      	cmp	r2, r3
 800811a:	d3d3      	bcc.n	80080c4 <IntToUnicode+0x18>
  }
}
 800811c:	bf00      	nop
 800811e:	bf00      	nop
 8008120:	371c      	adds	r7, #28
 8008122:	46bd      	mov	sp, r7
 8008124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008128:	4770      	bx	lr
	...

0800812c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b08a      	sub	sp, #40	@ 0x28
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008134:	f107 0314 	add.w	r3, r7, #20
 8008138:	2200      	movs	r2, #0
 800813a:	601a      	str	r2, [r3, #0]
 800813c:	605a      	str	r2, [r3, #4]
 800813e:	609a      	str	r2, [r3, #8]
 8008140:	60da      	str	r2, [r3, #12]
 8008142:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800814c:	d147      	bne.n	80081de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800814e:	2300      	movs	r3, #0
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	4b25      	ldr	r3, [pc, #148]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 8008154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008156:	4a24      	ldr	r2, [pc, #144]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 8008158:	f043 0301 	orr.w	r3, r3, #1
 800815c:	6313      	str	r3, [r2, #48]	@ 0x30
 800815e:	4b22      	ldr	r3, [pc, #136]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 8008160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008162:	f003 0301 	and.w	r3, r3, #1
 8008166:	613b      	str	r3, [r7, #16]
 8008168:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800816a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800816e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008174:	2300      	movs	r3, #0
 8008176:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008178:	f107 0314 	add.w	r3, r7, #20
 800817c:	4619      	mov	r1, r3
 800817e:	481b      	ldr	r0, [pc, #108]	@ (80081ec <HAL_PCD_MspInit+0xc0>)
 8008180:	f7f9 f890 	bl	80012a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008184:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800818a:	2302      	movs	r3, #2
 800818c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800818e:	2300      	movs	r3, #0
 8008190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008192:	2300      	movs	r3, #0
 8008194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008196:	230a      	movs	r3, #10
 8008198:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800819a:	f107 0314 	add.w	r3, r7, #20
 800819e:	4619      	mov	r1, r3
 80081a0:	4812      	ldr	r0, [pc, #72]	@ (80081ec <HAL_PCD_MspInit+0xc0>)
 80081a2:	f7f9 f87f 	bl	80012a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80081a6:	4b10      	ldr	r3, [pc, #64]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 80081a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081aa:	4a0f      	ldr	r2, [pc, #60]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 80081ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80081b2:	2300      	movs	r3, #0
 80081b4:	60fb      	str	r3, [r7, #12]
 80081b6:	4b0c      	ldr	r3, [pc, #48]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 80081b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081ba:	4a0b      	ldr	r2, [pc, #44]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 80081bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80081c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80081c2:	4b09      	ldr	r3, [pc, #36]	@ (80081e8 <HAL_PCD_MspInit+0xbc>)
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80081ce:	2200      	movs	r2, #0
 80081d0:	2100      	movs	r1, #0
 80081d2:	2043      	movs	r0, #67	@ 0x43
 80081d4:	f7f8 ff33 	bl	800103e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80081d8:	2043      	movs	r0, #67	@ 0x43
 80081da:	f7f8 ff4c 	bl	8001076 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80081de:	bf00      	nop
 80081e0:	3728      	adds	r7, #40	@ 0x28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	40023800 	.word	0x40023800
 80081ec:	40020000 	.word	0x40020000

080081f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7fe fb61 	bl	80068ce <USBD_LL_SetupStage>
}
 800820c:	bf00      	nop
 800820e:	3708      	adds	r7, #8
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b082      	sub	sp, #8
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	460b      	mov	r3, r1
 800821e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	00db      	lsls	r3, r3, #3
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	78fb      	ldrb	r3, [r7, #3]
 800823c:	4619      	mov	r1, r3
 800823e:	f7fe fb9b 	bl	8006978 <USBD_LL_DataOutStage>
}
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}

0800824a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b580      	push	{r7, lr}
 800824c:	b082      	sub	sp, #8
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800825c:	78fa      	ldrb	r2, [r7, #3]
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	4613      	mov	r3, r2
 8008262:	00db      	lsls	r3, r3, #3
 8008264:	4413      	add	r3, r2
 8008266:	009b      	lsls	r3, r3, #2
 8008268:	440b      	add	r3, r1
 800826a:	3320      	adds	r3, #32
 800826c:	681a      	ldr	r2, [r3, #0]
 800826e:	78fb      	ldrb	r3, [r7, #3]
 8008270:	4619      	mov	r1, r3
 8008272:	f7fe fc34 	bl	8006ade <USBD_LL_DataInStage>
}
 8008276:	bf00      	nop
 8008278:	3708      	adds	r7, #8
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b082      	sub	sp, #8
 8008282:	af00      	add	r7, sp, #0
 8008284:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800828c:	4618      	mov	r0, r3
 800828e:	f7fe fd6e 	bl	8006d6e <USBD_LL_SOF>
}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80082a2:	2301      	movs	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	79db      	ldrb	r3, [r3, #7]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d102      	bne.n	80082b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80082ae:	2300      	movs	r3, #0
 80082b0:	73fb      	strb	r3, [r7, #15]
 80082b2:	e008      	b.n	80082c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	79db      	ldrb	r3, [r3, #7]
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	d102      	bne.n	80082c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80082bc:	2301      	movs	r3, #1
 80082be:	73fb      	strb	r3, [r7, #15]
 80082c0:	e001      	b.n	80082c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80082c2:	f7f8 fc35 	bl	8000b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082cc:	7bfa      	ldrb	r2, [r7, #15]
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7fe fd08 	bl	8006ce6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fe fcb0 	bl	8006c42 <USBD_LL_Reset>
}
 80082e2:	bf00      	nop
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}
	...

080082ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b082      	sub	sp, #8
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80082fa:	4618      	mov	r0, r3
 80082fc:	f7fe fd03 	bl	8006d06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	6812      	ldr	r2, [r2, #0]
 800830e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008312:	f043 0301 	orr.w	r3, r3, #1
 8008316:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	7adb      	ldrb	r3, [r3, #11]
 800831c:	2b00      	cmp	r3, #0
 800831e:	d005      	beq.n	800832c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008320:	4b04      	ldr	r3, [pc, #16]	@ (8008334 <HAL_PCD_SuspendCallback+0x48>)
 8008322:	691b      	ldr	r3, [r3, #16]
 8008324:	4a03      	ldr	r2, [pc, #12]	@ (8008334 <HAL_PCD_SuspendCallback+0x48>)
 8008326:	f043 0306 	orr.w	r3, r3, #6
 800832a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800832c:	bf00      	nop
 800832e:	3708      	adds	r7, #8
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	e000ed00 	.word	0xe000ed00

08008338 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b082      	sub	sp, #8
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008346:	4618      	mov	r0, r3
 8008348:	f7fe fcf9 	bl	8006d3e <USBD_LL_Resume>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	4611      	mov	r1, r2
 800836a:	4618      	mov	r0, r3
 800836c:	f7fe fd51 	bl	8006e12 <USBD_LL_IsoOUTIncomplete>
}
 8008370:	bf00      	nop
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7fe fd0d 	bl	8006dae <USBD_LL_IsoINIncomplete>
}
 8008394:	bf00      	nop
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fe fd63 	bl	8006e76 <USBD_LL_DevConnected>
}
 80083b0:	bf00      	nop
 80083b2:	3708      	adds	r7, #8
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7fe fd60 	bl	8006e8c <USBD_LL_DevDisconnected>
}
 80083cc:	bf00      	nop
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}

080083d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d13c      	bne.n	800845e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80083e4:	4a20      	ldr	r2, [pc, #128]	@ (8008468 <USBD_LL_Init+0x94>)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008468 <USBD_LL_Init+0x94>)
 80083f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80083f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008468 <USBD_LL_Init+0x94>)
 80083f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80083fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80083fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008468 <USBD_LL_Init+0x94>)
 80083fe:	2204      	movs	r2, #4
 8008400:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008402:	4b19      	ldr	r3, [pc, #100]	@ (8008468 <USBD_LL_Init+0x94>)
 8008404:	2202      	movs	r2, #2
 8008406:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008408:	4b17      	ldr	r3, [pc, #92]	@ (8008468 <USBD_LL_Init+0x94>)
 800840a:	2200      	movs	r2, #0
 800840c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800840e:	4b16      	ldr	r3, [pc, #88]	@ (8008468 <USBD_LL_Init+0x94>)
 8008410:	2202      	movs	r2, #2
 8008412:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008414:	4b14      	ldr	r3, [pc, #80]	@ (8008468 <USBD_LL_Init+0x94>)
 8008416:	2200      	movs	r2, #0
 8008418:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800841a:	4b13      	ldr	r3, [pc, #76]	@ (8008468 <USBD_LL_Init+0x94>)
 800841c:	2200      	movs	r2, #0
 800841e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008420:	4b11      	ldr	r3, [pc, #68]	@ (8008468 <USBD_LL_Init+0x94>)
 8008422:	2200      	movs	r2, #0
 8008424:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008426:	4b10      	ldr	r3, [pc, #64]	@ (8008468 <USBD_LL_Init+0x94>)
 8008428:	2201      	movs	r2, #1
 800842a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800842c:	4b0e      	ldr	r3, [pc, #56]	@ (8008468 <USBD_LL_Init+0x94>)
 800842e:	2200      	movs	r2, #0
 8008430:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008432:	480d      	ldr	r0, [pc, #52]	@ (8008468 <USBD_LL_Init+0x94>)
 8008434:	f7f9 fed0 	bl	80021d8 <HAL_PCD_Init>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800843e:	f7f8 fb77 	bl	8000b30 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008442:	2180      	movs	r1, #128	@ 0x80
 8008444:	4808      	ldr	r0, [pc, #32]	@ (8008468 <USBD_LL_Init+0x94>)
 8008446:	f7fb f8fc 	bl	8003642 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800844a:	2240      	movs	r2, #64	@ 0x40
 800844c:	2100      	movs	r1, #0
 800844e:	4806      	ldr	r0, [pc, #24]	@ (8008468 <USBD_LL_Init+0x94>)
 8008450:	f7fb f8b0 	bl	80035b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008454:	2280      	movs	r2, #128	@ 0x80
 8008456:	2101      	movs	r1, #1
 8008458:	4803      	ldr	r0, [pc, #12]	@ (8008468 <USBD_LL_Init+0x94>)
 800845a:	f7fb f8ab 	bl	80035b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}
 8008468:	200016f4 	.word	0x200016f4

0800846c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008474:	2300      	movs	r3, #0
 8008476:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008482:	4618      	mov	r0, r3
 8008484:	f7f9 ffb7 	bl	80023f6 <HAL_PCD_Start>
 8008488:	4603      	mov	r3, r0
 800848a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 f942 	bl	8008718 <USBD_Get_USB_Status>
 8008494:	4603      	mov	r3, r0
 8008496:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008498:	7bbb      	ldrb	r3, [r7, #14]
}
 800849a:	4618      	mov	r0, r3
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b084      	sub	sp, #16
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	4608      	mov	r0, r1
 80084ac:	4611      	mov	r1, r2
 80084ae:	461a      	mov	r2, r3
 80084b0:	4603      	mov	r3, r0
 80084b2:	70fb      	strb	r3, [r7, #3]
 80084b4:	460b      	mov	r3, r1
 80084b6:	70bb      	strb	r3, [r7, #2]
 80084b8:	4613      	mov	r3, r2
 80084ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084bc:	2300      	movs	r3, #0
 80084be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80084ca:	78bb      	ldrb	r3, [r7, #2]
 80084cc:	883a      	ldrh	r2, [r7, #0]
 80084ce:	78f9      	ldrb	r1, [r7, #3]
 80084d0:	f7fa fc8b 	bl	8002dea <HAL_PCD_EP_Open>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084d8:	7bfb      	ldrb	r3, [r7, #15]
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f91c 	bl	8008718 <USBD_Get_USB_Status>
 80084e0:	4603      	mov	r3, r0
 80084e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3710      	adds	r7, #16
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}

080084ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	b084      	sub	sp, #16
 80084f2:	af00      	add	r7, sp, #0
 80084f4:	6078      	str	r0, [r7, #4]
 80084f6:	460b      	mov	r3, r1
 80084f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fa:	2300      	movs	r3, #0
 80084fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80084fe:	2300      	movs	r3, #0
 8008500:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	4611      	mov	r1, r2
 800850c:	4618      	mov	r0, r3
 800850e:	f7fa fcd6 	bl	8002ebe <HAL_PCD_EP_Close>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	4618      	mov	r0, r3
 800851a:	f000 f8fd 	bl	8008718 <USBD_Get_USB_Status>
 800851e:	4603      	mov	r3, r0
 8008520:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008522:	7bbb      	ldrb	r3, [r7, #14]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3710      	adds	r7, #16
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	460b      	mov	r3, r1
 8008536:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008538:	2300      	movs	r3, #0
 800853a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	4611      	mov	r1, r2
 800854a:	4618      	mov	r0, r3
 800854c:	f7fa fd8e 	bl	800306c <HAL_PCD_EP_SetStall>
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 f8de 	bl	8008718 <USBD_Get_USB_Status>
 800855c:	4603      	mov	r3, r0
 800855e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008560:	7bbb      	ldrb	r3, [r7, #14]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}

0800856a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b084      	sub	sp, #16
 800856e:	af00      	add	r7, sp, #0
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008576:	2300      	movs	r3, #0
 8008578:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800857a:	2300      	movs	r3, #0
 800857c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008584:	78fa      	ldrb	r2, [r7, #3]
 8008586:	4611      	mov	r1, r2
 8008588:	4618      	mov	r0, r3
 800858a:	f7fa fdd2 	bl	8003132 <HAL_PCD_EP_ClrStall>
 800858e:	4603      	mov	r3, r0
 8008590:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008592:	7bfb      	ldrb	r3, [r7, #15]
 8008594:	4618      	mov	r0, r3
 8008596:	f000 f8bf 	bl	8008718 <USBD_Get_USB_Status>
 800859a:	4603      	mov	r3, r0
 800859c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800859e:	7bbb      	ldrb	r3, [r7, #14]
}
 80085a0:	4618      	mov	r0, r3
 80085a2:	3710      	adds	r7, #16
 80085a4:	46bd      	mov	sp, r7
 80085a6:	bd80      	pop	{r7, pc}

080085a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085a8:	b480      	push	{r7}
 80085aa:	b085      	sub	sp, #20
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	460b      	mov	r3, r1
 80085b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80085ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80085bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	da0b      	bge.n	80085dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80085c4:	78fb      	ldrb	r3, [r7, #3]
 80085c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	4613      	mov	r3, r2
 80085ce:	00db      	lsls	r3, r3, #3
 80085d0:	4413      	add	r3, r2
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	440b      	add	r3, r1
 80085d6:	3316      	adds	r3, #22
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	e00b      	b.n	80085f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80085dc:	78fb      	ldrb	r3, [r7, #3]
 80085de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80085e2:	68f9      	ldr	r1, [r7, #12]
 80085e4:	4613      	mov	r3, r2
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	009b      	lsls	r3, r3, #2
 80085ec:	440b      	add	r3, r1
 80085ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80085f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b084      	sub	sp, #16
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	460b      	mov	r3, r1
 800860a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800860c:	2300      	movs	r3, #0
 800860e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008610:	2300      	movs	r3, #0
 8008612:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800861a:	78fa      	ldrb	r2, [r7, #3]
 800861c:	4611      	mov	r1, r2
 800861e:	4618      	mov	r0, r3
 8008620:	f7fa fbbf 	bl	8002da2 <HAL_PCD_SetAddress>
 8008624:	4603      	mov	r3, r0
 8008626:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008628:	7bfb      	ldrb	r3, [r7, #15]
 800862a:	4618      	mov	r0, r3
 800862c:	f000 f874 	bl	8008718 <USBD_Get_USB_Status>
 8008630:	4603      	mov	r3, r0
 8008632:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008634:	7bbb      	ldrb	r3, [r7, #14]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b086      	sub	sp, #24
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	607a      	str	r2, [r7, #4]
 8008648:	603b      	str	r3, [r7, #0]
 800864a:	460b      	mov	r3, r1
 800864c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008652:	2300      	movs	r3, #0
 8008654:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800865c:	7af9      	ldrb	r1, [r7, #11]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	f7fa fcc9 	bl	8002ff8 <HAL_PCD_EP_Transmit>
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800866a:	7dfb      	ldrb	r3, [r7, #23]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 f853 	bl	8008718 <USBD_Get_USB_Status>
 8008672:	4603      	mov	r3, r0
 8008674:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008676:	7dbb      	ldrb	r3, [r7, #22]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	607a      	str	r2, [r7, #4]
 800868a:	603b      	str	r3, [r7, #0]
 800868c:	460b      	mov	r3, r1
 800868e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800869e:	7af9      	ldrb	r1, [r7, #11]
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	f7fa fc55 	bl	8002f52 <HAL_PCD_EP_Receive>
 80086a8:	4603      	mov	r3, r0
 80086aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086ac:	7dfb      	ldrb	r3, [r7, #23]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 f832 	bl	8008718 <USBD_Get_USB_Status>
 80086b4:	4603      	mov	r3, r0
 80086b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80086b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
 80086ca:	460b      	mov	r3, r1
 80086cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80086d4:	78fa      	ldrb	r2, [r7, #3]
 80086d6:	4611      	mov	r1, r2
 80086d8:	4618      	mov	r0, r3
 80086da:	f7fa fc75 	bl	8002fc8 <HAL_PCD_EP_GetRxCount>
 80086de:	4603      	mov	r3, r0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80086f0:	4b03      	ldr	r3, [pc, #12]	@ (8008700 <USBD_static_malloc+0x18>)
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	370c      	adds	r7, #12
 80086f6:	46bd      	mov	sp, r7
 80086f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fc:	4770      	bx	lr
 80086fe:	bf00      	nop
 8008700:	20001bd8 	.word	0x20001bd8

08008704 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]

}
 800870c:	bf00      	nop
 800870e:	370c      	adds	r7, #12
 8008710:	46bd      	mov	sp, r7
 8008712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008716:	4770      	bx	lr

08008718 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	4603      	mov	r3, r0
 8008720:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008726:	79fb      	ldrb	r3, [r7, #7]
 8008728:	2b03      	cmp	r3, #3
 800872a:	d817      	bhi.n	800875c <USBD_Get_USB_Status+0x44>
 800872c:	a201      	add	r2, pc, #4	@ (adr r2, 8008734 <USBD_Get_USB_Status+0x1c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	0800874b 	.word	0x0800874b
 800873c:	08008751 	.word	0x08008751
 8008740:	08008757 	.word	0x08008757
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008744:	2300      	movs	r3, #0
 8008746:	73fb      	strb	r3, [r7, #15]
    break;
 8008748:	e00b      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800874a:	2303      	movs	r3, #3
 800874c:	73fb      	strb	r3, [r7, #15]
    break;
 800874e:	e008      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
    break;
 8008754:	e005      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008756:	2303      	movs	r3, #3
 8008758:	73fb      	strb	r3, [r7, #15]
    break;
 800875a:	e002      	b.n	8008762 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800875c:	2303      	movs	r3, #3
 800875e:	73fb      	strb	r3, [r7, #15]
    break;
 8008760:	bf00      	nop
  }
  return usb_status;
 8008762:	7bfb      	ldrb	r3, [r7, #15]
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <memset>:
 8008770:	4402      	add	r2, r0
 8008772:	4603      	mov	r3, r0
 8008774:	4293      	cmp	r3, r2
 8008776:	d100      	bne.n	800877a <memset+0xa>
 8008778:	4770      	bx	lr
 800877a:	f803 1b01 	strb.w	r1, [r3], #1
 800877e:	e7f9      	b.n	8008774 <memset+0x4>

08008780 <__libc_init_array>:
 8008780:	b570      	push	{r4, r5, r6, lr}
 8008782:	4d0d      	ldr	r5, [pc, #52]	@ (80087b8 <__libc_init_array+0x38>)
 8008784:	4c0d      	ldr	r4, [pc, #52]	@ (80087bc <__libc_init_array+0x3c>)
 8008786:	1b64      	subs	r4, r4, r5
 8008788:	10a4      	asrs	r4, r4, #2
 800878a:	2600      	movs	r6, #0
 800878c:	42a6      	cmp	r6, r4
 800878e:	d109      	bne.n	80087a4 <__libc_init_array+0x24>
 8008790:	4d0b      	ldr	r5, [pc, #44]	@ (80087c0 <__libc_init_array+0x40>)
 8008792:	4c0c      	ldr	r4, [pc, #48]	@ (80087c4 <__libc_init_array+0x44>)
 8008794:	f000 f818 	bl	80087c8 <_init>
 8008798:	1b64      	subs	r4, r4, r5
 800879a:	10a4      	asrs	r4, r4, #2
 800879c:	2600      	movs	r6, #0
 800879e:	42a6      	cmp	r6, r4
 80087a0:	d105      	bne.n	80087ae <__libc_init_array+0x2e>
 80087a2:	bd70      	pop	{r4, r5, r6, pc}
 80087a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80087a8:	4798      	blx	r3
 80087aa:	3601      	adds	r6, #1
 80087ac:	e7ee      	b.n	800878c <__libc_init_array+0xc>
 80087ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80087b2:	4798      	blx	r3
 80087b4:	3601      	adds	r6, #1
 80087b6:	e7f2      	b.n	800879e <__libc_init_array+0x1e>
 80087b8:	08008848 	.word	0x08008848
 80087bc:	08008848 	.word	0x08008848
 80087c0:	08008848 	.word	0x08008848
 80087c4:	0800884c 	.word	0x0800884c

080087c8 <_init>:
 80087c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ca:	bf00      	nop
 80087cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087ce:	bc08      	pop	{r3}
 80087d0:	469e      	mov	lr, r3
 80087d2:	4770      	bx	lr

080087d4 <_fini>:
 80087d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087d6:	bf00      	nop
 80087d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087da:	bc08      	pop	{r3}
 80087dc:	469e      	mov	lr, r3
 80087de:	4770      	bx	lr
