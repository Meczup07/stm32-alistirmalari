
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c58  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08008de0  08008de0  00009de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e40  08008e40  0000a0fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e48  08008e48  0000a0fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e48  08008e48  00009e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e4c  08008e4c  00009e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  08008e50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a0fc  2**0
                  CONTENTS
 10 .bss          00001d48  200000fc  200000fc  0000a0fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e44  20001e44  0000a0fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a0fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00019204  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004550  00000000  00000000  00023330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  00027880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000faa  00000000  00000000  00028d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c0d  00000000  00000000  00029cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f86a  00000000  00000000  000508bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d93b5  00000000  00000000  00070129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001494de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053cc  00000000  00000000  00149524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014e8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008dc8 	.word	0x08008dc8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008dc8 	.word	0x08008dc8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004be:	463b      	mov	r3, r7
 80004c0:	2200      	movs	r2, #0
 80004c2:	601a      	str	r2, [r3, #0]
 80004c4:	605a      	str	r2, [r3, #4]
 80004c6:	609a      	str	r2, [r3, #8]
 80004c8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004ca:	4b21      	ldr	r3, [pc, #132]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004cc:	4a21      	ldr	r2, [pc, #132]	@ (8000554 <MX_ADC1_Init+0x9c>)
 80004ce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004d2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80004d6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80004de:	4b1c      	ldr	r3, [pc, #112]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80004e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004ea:	4b19      	ldr	r3, [pc, #100]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004f2:	4b17      	ldr	r3, [pc, #92]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f8:	4b15      	ldr	r3, [pc, #84]	@ (8000550 <MX_ADC1_Init+0x98>)
 80004fa:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <MX_ADC1_Init+0xa0>)
 80004fc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004fe:	4b14      	ldr	r3, [pc, #80]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000500:	2200      	movs	r2, #0
 8000502:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000504:	4b12      	ldr	r3, [pc, #72]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000506:	2201      	movs	r2, #1
 8000508:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800050a:	4b11      	ldr	r3, [pc, #68]	@ (8000550 <MX_ADC1_Init+0x98>)
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000512:	4b0f      	ldr	r3, [pc, #60]	@ (8000550 <MX_ADC1_Init+0x98>)
 8000514:	2201      	movs	r2, #1
 8000516:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000518:	480d      	ldr	r0, [pc, #52]	@ (8000550 <MX_ADC1_Init+0x98>)
 800051a:	f000 fd53 	bl	8000fc4 <HAL_ADC_Init>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000524:	f000 fba2 	bl	8000c6c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000528:	2301      	movs	r3, #1
 800052a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800052c:	2301      	movs	r3, #1
 800052e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000534:	463b      	mov	r3, r7
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	@ (8000550 <MX_ADC1_Init+0x98>)
 800053a:	f000 fd87 	bl	800104c <HAL_ADC_ConfigChannel>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000544:	f000 fb92 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	20000118 	.word	0x20000118
 8000554:	40012000 	.word	0x40012000
 8000558:	0f000001 	.word	0x0f000001

0800055c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	@ 0x28
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000564:	f107 0314 	add.w	r3, r7, #20
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]
 800056e:	609a      	str	r2, [r3, #8]
 8000570:	60da      	str	r2, [r3, #12]
 8000572:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <HAL_ADC_MspInit+0x7c>)
 800057a:	4293      	cmp	r3, r2
 800057c:	d127      	bne.n	80005ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
 8000582:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 8000584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000586:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 8000588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800058c:	6453      	str	r3, [r2, #68]	@ 0x44
 800058e:	4b13      	ldr	r3, [pc, #76]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 8000590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000596:	613b      	str	r3, [r7, #16]
 8000598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a2:	4a0e      	ldr	r2, [pc, #56]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005aa:	4b0c      	ldr	r3, [pc, #48]	@ (80005dc <HAL_ADC_MspInit+0x80>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60fb      	str	r3, [r7, #12]
 80005b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005b6:	2302      	movs	r3, #2
 80005b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ba:	2303      	movs	r3, #3
 80005bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005be:	2300      	movs	r3, #0
 80005c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	4619      	mov	r1, r3
 80005c8:	4805      	ldr	r0, [pc, #20]	@ (80005e0 <HAL_ADC_MspInit+0x84>)
 80005ca:	f001 f96b 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005ce:	bf00      	nop
 80005d0:	3728      	adds	r7, #40	@ 0x28
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40012000 	.word	0x40012000
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40020000 	.word	0x40020000

080005e4 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80005f2:	4b0f      	ldr	r3, [pc, #60]	@ (8000630 <MX_DAC_Init+0x4c>)
 80005f4:	4a0f      	ldr	r2, [pc, #60]	@ (8000634 <MX_DAC_Init+0x50>)
 80005f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <MX_DAC_Init+0x4c>)
 80005fa:	f001 f856 	bl	80016aa <HAL_DAC_Init>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000604:	f000 fb32 	bl	8000c6c <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000608:	2300      	movs	r3, #0
 800060a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000610:	463b      	mov	r3, r7
 8000612:	2210      	movs	r2, #16
 8000614:	4619      	mov	r1, r3
 8000616:	4806      	ldr	r0, [pc, #24]	@ (8000630 <MX_DAC_Init+0x4c>)
 8000618:	f001 f8ea 	bl	80017f0 <HAL_DAC_ConfigChannel>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000622:	f000 fb23 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	3708      	adds	r7, #8
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000160 	.word	0x20000160
 8000634:	40007400 	.word	0x40007400

08000638 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b08a      	sub	sp, #40	@ 0x28
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000640:	f107 0314 	add.w	r3, r7, #20
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	4a17      	ldr	r2, [pc, #92]	@ (80006b4 <HAL_DAC_MspInit+0x7c>)
 8000656:	4293      	cmp	r3, r2
 8000658:	d127      	bne.n	80006aa <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	613b      	str	r3, [r7, #16]
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 8000660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 8000664:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000668:	6413      	str	r3, [r2, #64]	@ 0x40
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 800066c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800066e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000672:	613b      	str	r3, [r7, #16]
 8000674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	4a0e      	ldr	r2, [pc, #56]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 8000680:	f043 0301 	orr.w	r3, r3, #1
 8000684:	6313      	str	r3, [r2, #48]	@ 0x30
 8000686:	4b0c      	ldr	r3, [pc, #48]	@ (80006b8 <HAL_DAC_MspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	60fb      	str	r3, [r7, #12]
 8000690:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000692:	2320      	movs	r3, #32
 8000694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000696:	2303      	movs	r3, #3
 8000698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	f107 0314 	add.w	r3, r7, #20
 80006a2:	4619      	mov	r1, r3
 80006a4:	4805      	ldr	r0, [pc, #20]	@ (80006bc <HAL_DAC_MspInit+0x84>)
 80006a6:	f001 f8fd 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80006aa:	bf00      	nop
 80006ac:	3728      	adds	r7, #40	@ 0x28
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40007400 	.word	0x40007400
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40020000 	.word	0x40020000

080006c0 <MX_GPIO_Init>:
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	@ 0x30
 80006c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
 80006da:	4b7a      	ldr	r3, [pc, #488]	@ (80008c4 <MX_GPIO_Init+0x204>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a79      	ldr	r2, [pc, #484]	@ (80008c4 <MX_GPIO_Init+0x204>)
 80006e0:	f043 0310 	orr.w	r3, r3, #16
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b77      	ldr	r3, [pc, #476]	@ (80008c4 <MX_GPIO_Init+0x204>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	617b      	str	r3, [r7, #20]
 80006f6:	4b73      	ldr	r3, [pc, #460]	@ (80008c4 <MX_GPIO_Init+0x204>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a72      	ldr	r2, [pc, #456]	@ (80008c4 <MX_GPIO_Init+0x204>)
 80006fc:	f043 0304 	orr.w	r3, r3, #4
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b70      	ldr	r3, [pc, #448]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0304 	and.w	r3, r3, #4
 800070a:	617b      	str	r3, [r7, #20]
 800070c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	613b      	str	r3, [r7, #16]
 8000712:	4b6c      	ldr	r3, [pc, #432]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a6b      	ldr	r2, [pc, #428]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000718:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b69      	ldr	r3, [pc, #420]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000726:	613b      	str	r3, [r7, #16]
 8000728:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
 800072e:	4b65      	ldr	r3, [pc, #404]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a64      	ldr	r2, [pc, #400]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000734:	f043 0301 	orr.w	r3, r3, #1
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b62      	ldr	r3, [pc, #392]	@ (80008c4 <MX_GPIO_Init+0x204>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	4b5e      	ldr	r3, [pc, #376]	@ (80008c4 <MX_GPIO_Init+0x204>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a5d      	ldr	r2, [pc, #372]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b5b      	ldr	r3, [pc, #364]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	607b      	str	r3, [r7, #4]
 8000766:	4b57      	ldr	r3, [pc, #348]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a56      	ldr	r2, [pc, #344]	@ (80008c4 <MX_GPIO_Init+0x204>)
 800076c:	f043 0308 	orr.w	r3, r3, #8
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b54      	ldr	r3, [pc, #336]	@ (80008c4 <MX_GPIO_Init+0x204>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0308 	and.w	r3, r3, #8
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800077e:	2200      	movs	r2, #0
 8000780:	2108      	movs	r1, #8
 8000782:	4851      	ldr	r0, [pc, #324]	@ (80008c8 <MX_GPIO_Init+0x208>)
 8000784:	f001 fa2a 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2101      	movs	r1, #1
 800078c:	484f      	ldr	r0, [pc, #316]	@ (80008cc <MX_GPIO_Init+0x20c>)
 800078e:	f001 fa25 	bl	8001bdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|LD4_Pin|LD3_Pin|LD5_Pin
 8000792:	2200      	movs	r2, #0
 8000794:	f24f 1110 	movw	r1, #61712	@ 0xf110
 8000798:	484d      	ldr	r0, [pc, #308]	@ (80008d0 <MX_GPIO_Init+0x210>)
 800079a:	f001 fa1f 	bl	8001bdc <HAL_GPIO_WritePin>
                          |LD6_Pin|Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800079e:	2308      	movs	r3, #8
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a2:	2301      	movs	r3, #1
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007aa:	2300      	movs	r3, #0
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ae:	f107 031c 	add.w	r3, r7, #28
 80007b2:	4619      	mov	r1, r3
 80007b4:	4844      	ldr	r0, [pc, #272]	@ (80008c8 <MX_GPIO_Init+0x208>)
 80007b6:	f001 f875 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	483e      	ldr	r0, [pc, #248]	@ (80008cc <MX_GPIO_Init+0x20c>)
 80007d2:	f001 f867 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007d6:	2308      	movs	r3, #8
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007da:	2302      	movs	r3, #2
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007e6:	2305      	movs	r3, #5
 80007e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4836      	ldr	r0, [pc, #216]	@ (80008cc <MX_GPIO_Init+0x20c>)
 80007f2:	f001 f857 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007f6:	2301      	movs	r3, #1
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007fa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 031c 	add.w	r3, r7, #28
 8000808:	4619      	mov	r1, r3
 800080a:	4832      	ldr	r0, [pc, #200]	@ (80008d4 <MX_GPIO_Init+0x214>)
 800080c:	f001 f84a 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000810:	23c0      	movs	r3, #192	@ 0xc0
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000820:	2305      	movs	r3, #5
 8000822:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000824:	f107 031c 	add.w	r3, r7, #28
 8000828:	4619      	mov	r1, r3
 800082a:	482a      	ldr	r0, [pc, #168]	@ (80008d4 <MX_GPIO_Init+0x214>)
 800082c:	f001 f83a 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000830:	2304      	movs	r3, #4
 8000832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000834:	2300      	movs	r3, #0
 8000836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	4825      	ldr	r0, [pc, #148]	@ (80008d8 <MX_GPIO_Init+0x218>)
 8000844:	f001 f82e 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084e:	2302      	movs	r3, #2
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800085a:	2305      	movs	r3, #5
 800085c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800085e:	f107 031c 	add.w	r3, r7, #28
 8000862:	4619      	mov	r1, r3
 8000864:	481c      	ldr	r0, [pc, #112]	@ (80008d8 <MX_GPIO_Init+0x218>)
 8000866:	f001 f81d 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|LD4_Pin|LD3_Pin|LD5_Pin
 800086a:	f24f 1310 	movw	r3, #61712	@ 0xf110
 800086e:	61fb      	str	r3, [r7, #28]
                          |LD6_Pin|Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000870:	2301      	movs	r3, #1
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800087c:	f107 031c 	add.w	r3, r7, #28
 8000880:	4619      	mov	r1, r3
 8000882:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <MX_GPIO_Init+0x210>)
 8000884:	f001 f80e 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	@ (80008d0 <MX_GPIO_Init+0x210>)
 800089c:	f001 f802 	bl	80018a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80008a0:	2302      	movs	r3, #2
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0x208>)
 80008b6:	f000 fff5 	bl	80018a4 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	@ 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40020000 	.word	0x40020000
 80008d8:	40020400 	.word	0x40020400

080008dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_I2C1_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_I2C1_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_I2C1_Init+0x50>)
 80008e8:	4a12      	ldr	r2, [pc, #72]	@ (8000934 <MX_I2C1_Init+0x58>)
 80008ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_I2C1_Init+0x50>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <MX_I2C1_Init+0x50>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008f8:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_I2C1_Init+0x50>)
 80008fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_I2C1_Init+0x50>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_I2C1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_I2C1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_I2C1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_I2C1_Init+0x50>)
 800091a:	f001 f979 	bl	8001c10 <HAL_I2C_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f9a2 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000174 	.word	0x20000174
 8000930:	40005400 	.word	0x40005400
 8000934:	000186a0 	.word	0x000186a0

08000938 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b08a      	sub	sp, #40	@ 0x28
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a19      	ldr	r2, [pc, #100]	@ (80009bc <HAL_I2C_MspInit+0x84>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d12c      	bne.n	80009b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	4b18      	ldr	r3, [pc, #96]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	4a17      	ldr	r2, [pc, #92]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 8000964:	f043 0302 	orr.w	r3, r3, #2
 8000968:	6313      	str	r3, [r2, #48]	@ 0x30
 800096a:	4b15      	ldr	r3, [pc, #84]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	613b      	str	r3, [r7, #16]
 8000974:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000976:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800097a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800097c:	2312      	movs	r3, #18
 800097e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000980:	2301      	movs	r3, #1
 8000982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000988:	2304      	movs	r3, #4
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <HAL_I2C_MspInit+0x8c>)
 8000994:	f000 ff86 	bl	80018a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000998:	2300      	movs	r3, #0
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 800099e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 80009a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a8:	4b05      	ldr	r3, [pc, #20]	@ (80009c0 <HAL_I2C_MspInit+0x88>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80009b4:	bf00      	nop
 80009b6:	3728      	adds	r7, #40	@ 0x28
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	40005400 	.word	0x40005400
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40020400 	.word	0x40020400

080009c8 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80009cc:	4b13      	ldr	r3, [pc, #76]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009ce:	4a14      	ldr	r2, [pc, #80]	@ (8000a20 <MX_I2S3_Init+0x58>)
 80009d0:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80009d2:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009d8:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80009da:	4b10      	ldr	r3, [pc, #64]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80009e0:	4b0e      	ldr	r3, [pc, #56]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80009e6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ec:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a24 <MX_I2S3_Init+0x5c>)
 80009f2:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80009f4:	4b09      	ldr	r3, [pc, #36]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80009fa:	4b08      	ldr	r3, [pc, #32]	@ (8000a1c <MX_I2S3_Init+0x54>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <MX_I2S3_Init+0x54>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <MX_I2S3_Init+0x54>)
 8000a08:	f001 fa46 	bl	8001e98 <HAL_I2S_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000a12:	f000 f92b 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000a16:	bf00      	nop
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200001c8 	.word	0x200001c8
 8000a20:	40003c00 	.word	0x40003c00
 8000a24:	00017700 	.word	0x00017700

08000a28 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08e      	sub	sp, #56	@ 0x38
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4a31      	ldr	r2, [pc, #196]	@ (8000b18 <HAL_I2S_MspInit+0xf0>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d15a      	bne.n	8000b0e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a5c:	23c0      	movs	r3, #192	@ 0xc0
 8000a5e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4618      	mov	r0, r3
 8000a6a:	f003 fd9f 	bl	80045ac <HAL_RCCEx_PeriphCLKConfig>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a74:	f000 f8fa 	bl	8000c6c <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	613b      	str	r3, [r7, #16]
 8000a7c:	4b27      	ldr	r3, [pc, #156]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a26      	ldr	r2, [pc, #152]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b24      	ldr	r3, [pc, #144]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a90:	613b      	str	r3, [r7, #16]
 8000a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60fb      	str	r3, [r7, #12]
 8000a98:	4b20      	ldr	r3, [pc, #128]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aa4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	4b19      	ldr	r3, [pc, #100]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab8:	4a18      	ldr	r2, [pc, #96]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000aba:	f043 0304 	orr.w	r3, r3, #4
 8000abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac0:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <HAL_I2S_MspInit+0xf4>)
 8000ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac4:	f003 0304 	and.w	r3, r3, #4
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000acc:	2310      	movs	r3, #16
 8000ace:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000adc:	2306      	movs	r3, #6
 8000ade:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480e      	ldr	r0, [pc, #56]	@ (8000b20 <HAL_I2S_MspInit+0xf8>)
 8000ae8:	f000 fedc 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000aec:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000af0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af2:	2302      	movs	r3, #2
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af6:	2300      	movs	r3, #0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afa:	2300      	movs	r3, #0
 8000afc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000afe:	2306      	movs	r3, #6
 8000b00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b06:	4619      	mov	r1, r3
 8000b08:	4806      	ldr	r0, [pc, #24]	@ (8000b24 <HAL_I2S_MspInit+0xfc>)
 8000b0a:	f000 fecb 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000b0e:	bf00      	nop
 8000b10:	3738      	adds	r7, #56	@ 0x38
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40003c00 	.word	0x40003c00
 8000b1c:	40023800 	.word	0x40023800
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800

08000b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 f9b4 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f832 	bl	8000b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f7ff fdc4 	bl	80006c0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b38:	f7ff fed0 	bl	80008dc <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b3c:	f7ff ff44 	bl	80009c8 <MX_I2S3_Init>
  MX_DAC_Init();
 8000b40:	f7ff fd50 	bl	80005e4 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000b44:	f000 f90c 	bl	8000d60 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000b48:	f007 fc10 	bl	800836c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000b4c:	f7ff fcb4 	bl	80004b8 <MX_ADC1_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000b50:	2110      	movs	r1, #16
 8000b52:	480f      	ldr	r0, [pc, #60]	@ (8000b90 <main+0x68>)
 8000b54:	f000 fdcb 	bl	80016ee <HAL_DAC_Start>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 4095); //logic analyzerda okuma için deneme
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_L, dac_value);
 8000b58:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <main+0x6c>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	2204      	movs	r2, #4
 8000b5e:	2110      	movs	r1, #16
 8000b60:	480b      	ldr	r0, [pc, #44]	@ (8000b90 <main+0x68>)
 8000b62:	f000 fe1b 	bl	800179c <HAL_DAC_SetValue>

	  if (dac_value < 4095) {
 8000b66:	4b0b      	ldr	r3, [pc, #44]	@ (8000b94 <main+0x6c>)
 8000b68:	881b      	ldrh	r3, [r3, #0]
 8000b6a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d806      	bhi.n	8000b80 <main+0x58>

		  dac_value ++;
 8000b72:	4b08      	ldr	r3, [pc, #32]	@ (8000b94 <main+0x6c>)
 8000b74:	881b      	ldrh	r3, [r3, #0]
 8000b76:	3301      	adds	r3, #1
 8000b78:	b29a      	uxth	r2, r3
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <main+0x6c>)
 8000b7c:	801a      	strh	r2, [r3, #0]
 8000b7e:	e002      	b.n	8000b86 <main+0x5e>
	  }

	  else {

		  dac_value = 0;
 8000b80:	4b04      	ldr	r3, [pc, #16]	@ (8000b94 <main+0x6c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
	  }

	  HAL_Delay(10);
 8000b86:	200a      	movs	r0, #10
 8000b88:	f000 f9f8 	bl	8000f7c <HAL_Delay>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_L, dac_value);
 8000b8c:	e7e4      	b.n	8000b58 <main+0x30>
 8000b8e:	bf00      	nop
 8000b90:	20000160 	.word	0x20000160
 8000b94:	20000210 	.word	0x20000210

08000b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b094      	sub	sp, #80	@ 0x50
 8000b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	2230      	movs	r2, #48	@ 0x30
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f008 f8e2 	bl	8008d70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	4b28      	ldr	r3, [pc, #160]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc4:	4a27      	ldr	r2, [pc, #156]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000bc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bcc:	4b25      	ldr	r3, [pc, #148]	@ (8000c64 <SystemClock_Config+0xcc>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd8:	2300      	movs	r3, #0
 8000bda:	607b      	str	r3, [r7, #4]
 8000bdc:	4b22      	ldr	r3, [pc, #136]	@ (8000c68 <SystemClock_Config+0xd0>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a21      	ldr	r2, [pc, #132]	@ (8000c68 <SystemClock_Config+0xd0>)
 8000be2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <SystemClock_Config+0xd0>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bf0:	607b      	str	r3, [r7, #4]
 8000bf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c02:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000c08:	2308      	movs	r3, #8
 8000c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c0c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c12:	2302      	movs	r3, #2
 8000c14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c16:	2307      	movs	r3, #7
 8000c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1a:	f107 0320 	add.w	r3, r7, #32
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f003 f82c 	bl	8003c7c <HAL_RCC_OscConfig>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000c2a:	f000 f81f 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c2e:	230f      	movs	r3, #15
 8000c30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c32:	2302      	movs	r3, #2
 8000c34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c3a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2105      	movs	r1, #5
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fa8d 	bl	800416c <HAL_RCC_ClockConfig>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c58:	f000 f808 	bl	8000c6c <Error_Handler>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3750      	adds	r7, #80	@ 0x50
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40007000 	.word	0x40007000

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cb6:	2007      	movs	r0, #7
 8000cb8:	f000 fcb6 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <NMI_Handler+0x4>

08000cd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <HardFault_Handler+0x4>

08000cd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <MemManage_Handler+0x4>

08000ce0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <BusFault_Handler+0x4>

08000ce8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cec:	bf00      	nop
 8000cee:	e7fd      	b.n	8000cec <UsageFault_Handler+0x4>

08000cf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d10:	bf00      	nop
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr

08000d1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d1e:	f000 f90d 	bl	8000f3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d2c:	4802      	ldr	r0, [pc, #8]	@ (8000d38 <OTG_FS_IRQHandler+0x10>)
 8000d2e:	f001 fe97 	bl	8002a60 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20001740 	.word	0x20001740

08000d3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d40:	4b06      	ldr	r3, [pc, #24]	@ (8000d5c <SystemInit+0x20>)
 8000d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <SystemInit+0x20>)
 8000d48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d50:	bf00      	nop
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
 8000d5a:	bf00      	nop
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <MX_USART2_UART_Init+0x50>)
 8000d68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d6c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d78:	4b0c      	ldr	r3, [pc, #48]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d84:	4b09      	ldr	r3, [pc, #36]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d86:	220c      	movs	r2, #12
 8000d88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8a:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d90:	4b06      	ldr	r3, [pc, #24]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d96:	4805      	ldr	r0, [pc, #20]	@ (8000dac <MX_USART2_UART_Init+0x4c>)
 8000d98:	f003 fd4a 	bl	8004830 <HAL_UART_Init>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000da2:	f7ff ff63 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	20000214 	.word	0x20000214
 8000db0:	40004400 	.word	0x40004400

08000db4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	@ 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a19      	ldr	r2, [pc, #100]	@ (8000e38 <HAL_UART_MspInit+0x84>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d12b      	bne.n	8000e2e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	613b      	str	r3, [r7, #16]
 8000dda:	4b18      	ldr	r3, [pc, #96]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dde:	4a17      	ldr	r2, [pc, #92]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000de4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de6:	4b15      	ldr	r3, [pc, #84]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	4b11      	ldr	r3, [pc, #68]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a10      	ldr	r2, [pc, #64]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b0e      	ldr	r3, [pc, #56]	@ (8000e3c <HAL_UART_MspInit+0x88>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e0e:	230c      	movs	r3, #12
 8000e10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1e:	2307      	movs	r3, #7
 8000e20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e22:	f107 0314 	add.w	r3, r7, #20
 8000e26:	4619      	mov	r1, r3
 8000e28:	4805      	ldr	r0, [pc, #20]	@ (8000e40 <HAL_UART_MspInit+0x8c>)
 8000e2a:	f000 fd3b 	bl	80018a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e2e:	bf00      	nop
 8000e30:	3728      	adds	r7, #40	@ 0x28
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40004400 	.word	0x40004400
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40020000 	.word	0x40020000

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e7c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e48:	f7ff ff78 	bl	8000d3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480c      	ldr	r0, [pc, #48]	@ (8000e80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4e:	490d      	ldr	r1, [pc, #52]	@ (8000e84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e50:	4a0d      	ldr	r2, [pc, #52]	@ (8000e88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0a      	ldr	r2, [pc, #40]	@ (8000e8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e64:	4c0a      	ldr	r4, [pc, #40]	@ (8000e90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e72:	f007 ff85 	bl	8008d80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fe57 	bl	8000b28 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e84:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e88:	08008e50 	.word	0x08008e50
  ldr r2, =_sbss
 8000e8c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e90:	20001e44 	.word	0x20001e44

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	@ (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	@ (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fbb1 	bl	8001628 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f000 f808 	bl	8000edc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fed4 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee4:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <HAL_InitTick+0x54>)
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_InitTick+0x58>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	4619      	mov	r1, r3
 8000eee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ef2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efa:	4618      	mov	r0, r3
 8000efc:	f000 fbc9 	bl	8001692 <HAL_SYSTICK_Config>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f06:	2301      	movs	r3, #1
 8000f08:	e00e      	b.n	8000f28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2b0f      	cmp	r3, #15
 8000f0e:	d80a      	bhi.n	8000f26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f10:	2200      	movs	r2, #0
 8000f12:	6879      	ldr	r1, [r7, #4]
 8000f14:	f04f 30ff 	mov.w	r0, #4294967295
 8000f18:	f000 fb91 	bl	800163e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f1c:	4a06      	ldr	r2, [pc, #24]	@ (8000f38 <HAL_InitTick+0x5c>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	e000      	b.n	8000f28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000000 	.word	0x20000000
 8000f34:	20000008 	.word	0x20000008
 8000f38:	20000004 	.word	0x20000004

08000f3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f40:	4b06      	ldr	r3, [pc, #24]	@ (8000f5c <HAL_IncTick+0x20>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	4b06      	ldr	r3, [pc, #24]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_IncTick+0x24>)
 8000f4e:	6013      	str	r3, [r2, #0]
}
 8000f50:	bf00      	nop
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	2000025c 	.word	0x2000025c

08000f64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  return uwTick;
 8000f68:	4b03      	ldr	r3, [pc, #12]	@ (8000f78 <HAL_GetTick+0x14>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	2000025c 	.word	0x2000025c

08000f7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f84:	f7ff ffee 	bl	8000f64 <HAL_GetTick>
 8000f88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f94:	d005      	beq.n	8000fa2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f96:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc0 <HAL_Delay+0x44>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	4413      	add	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa2:	bf00      	nop
 8000fa4:	f7ff ffde 	bl	8000f64 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	68fa      	ldr	r2, [r7, #12]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d8f7      	bhi.n	8000fa4 <HAL_Delay+0x28>
  {
  }
}
 8000fb4:	bf00      	nop
 8000fb6:	bf00      	nop
 8000fb8:	3710      	adds	r7, #16
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000008 	.word	0x20000008

08000fc4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d101      	bne.n	8000fda <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e033      	b.n	8001042 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d109      	bne.n	8000ff6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff faba 	bl	800055c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800100a:	f023 0302 	bic.w	r3, r3, #2
 800100e:	f043 0202 	orr.w	r2, r3, #2
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f000 f93a 	bl	8001290 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	f023 0303 	bic.w	r3, r3, #3
 800102a:	f043 0201 	orr.w	r2, r3, #1
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	@ 0x40
 8001032:	e001      	b.n	8001038 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001040:	7bfb      	ldrb	r3, [r7, #15]
}
 8001042:	4618      	mov	r0, r3
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001056:	2300      	movs	r3, #0
 8001058:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001060:	2b01      	cmp	r3, #1
 8001062:	d101      	bne.n	8001068 <HAL_ADC_ConfigChannel+0x1c>
 8001064:	2302      	movs	r3, #2
 8001066:	e105      	b.n	8001274 <HAL_ADC_ConfigChannel+0x228>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2201      	movs	r2, #1
 800106c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	2b09      	cmp	r3, #9
 8001076:	d925      	bls.n	80010c4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	68d9      	ldr	r1, [r3, #12]
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b29b      	uxth	r3, r3
 8001084:	461a      	mov	r2, r3
 8001086:	4613      	mov	r3, r2
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	4413      	add	r3, r2
 800108c:	3b1e      	subs	r3, #30
 800108e:	2207      	movs	r2, #7
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43da      	mvns	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	400a      	ands	r2, r1
 800109c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	68d9      	ldr	r1, [r3, #12]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	b29b      	uxth	r3, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	4603      	mov	r3, r0
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4403      	add	r3, r0
 80010b6:	3b1e      	subs	r3, #30
 80010b8:	409a      	lsls	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	e022      	b.n	800110a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6919      	ldr	r1, [r3, #16]
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	b29b      	uxth	r3, r3
 80010d0:	461a      	mov	r2, r3
 80010d2:	4613      	mov	r3, r2
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	4413      	add	r3, r2
 80010d8:	2207      	movs	r2, #7
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43da      	mvns	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	400a      	ands	r2, r1
 80010e6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6919      	ldr	r1, [r3, #16]
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	689a      	ldr	r2, [r3, #8]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b29b      	uxth	r3, r3
 80010f8:	4618      	mov	r0, r3
 80010fa:	4603      	mov	r3, r0
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	4403      	add	r3, r0
 8001100:	409a      	lsls	r2, r3
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	430a      	orrs	r2, r1
 8001108:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	2b06      	cmp	r3, #6
 8001110:	d824      	bhi.n	800115c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685a      	ldr	r2, [r3, #4]
 800111c:	4613      	mov	r3, r2
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	4413      	add	r3, r2
 8001122:	3b05      	subs	r3, #5
 8001124:	221f      	movs	r2, #31
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
 800112a:	43da      	mvns	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	400a      	ands	r2, r1
 8001132:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4618      	mov	r0, r3
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685a      	ldr	r2, [r3, #4]
 8001146:	4613      	mov	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	4413      	add	r3, r2
 800114c:	3b05      	subs	r3, #5
 800114e:	fa00 f203 	lsl.w	r2, r0, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	635a      	str	r2, [r3, #52]	@ 0x34
 800115a:	e04c      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b0c      	cmp	r3, #12
 8001162:	d824      	bhi.n	80011ae <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	3b23      	subs	r3, #35	@ 0x23
 8001176:	221f      	movs	r2, #31
 8001178:	fa02 f303 	lsl.w	r3, r2, r3
 800117c:	43da      	mvns	r2, r3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	400a      	ands	r2, r1
 8001184:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	b29b      	uxth	r3, r3
 8001192:	4618      	mov	r0, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	4413      	add	r3, r2
 800119e:	3b23      	subs	r3, #35	@ 0x23
 80011a0:	fa00 f203 	lsl.w	r2, r0, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	430a      	orrs	r2, r1
 80011aa:	631a      	str	r2, [r3, #48]	@ 0x30
 80011ac:	e023      	b.n	80011f6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	4413      	add	r3, r2
 80011be:	3b41      	subs	r3, #65	@ 0x41
 80011c0:	221f      	movs	r2, #31
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43da      	mvns	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	400a      	ands	r2, r1
 80011ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	b29b      	uxth	r3, r3
 80011dc:	4618      	mov	r0, r3
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	3b41      	subs	r3, #65	@ 0x41
 80011ea:	fa00 f203 	lsl.w	r2, r0, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011f6:	4b22      	ldr	r3, [pc, #136]	@ (8001280 <HAL_ADC_ConfigChannel+0x234>)
 80011f8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a21      	ldr	r2, [pc, #132]	@ (8001284 <HAL_ADC_ConfigChannel+0x238>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d109      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1cc>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	2b12      	cmp	r3, #18
 800120a:	d105      	bne.n	8001218 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	@ (8001284 <HAL_ADC_ConfigChannel+0x238>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d123      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b10      	cmp	r3, #16
 8001228:	d003      	beq.n	8001232 <HAL_ADC_ConfigChannel+0x1e6>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	2b11      	cmp	r3, #17
 8001230:	d11b      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2b10      	cmp	r3, #16
 8001244:	d111      	bne.n	800126a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <HAL_ADC_ConfigChannel+0x23c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a10      	ldr	r2, [pc, #64]	@ (800128c <HAL_ADC_ConfigChannel+0x240>)
 800124c:	fba2 2303 	umull	r2, r3, r2, r3
 8001250:	0c9a      	lsrs	r2, r3, #18
 8001252:	4613      	mov	r3, r2
 8001254:	009b      	lsls	r3, r3, #2
 8001256:	4413      	add	r3, r2
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800125c:	e002      	b.n	8001264 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	3b01      	subs	r3, #1
 8001262:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d1f9      	bne.n	800125e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	40012300 	.word	0x40012300
 8001284:	40012000 	.word	0x40012000
 8001288:	20000000 	.word	0x20000000
 800128c:	431bde83 	.word	0x431bde83

08001290 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001298:	4b79      	ldr	r3, [pc, #484]	@ (8001480 <ADC_Init+0x1f0>)
 800129a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	431a      	orrs	r2, r3
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80012c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	021a      	lsls	r2, r3, #8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	430a      	orrs	r2, r1
 80012d8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80012e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	6859      	ldr	r1, [r3, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	430a      	orrs	r2, r1
 80012fa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800130a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	6899      	ldr	r1, [r3, #8]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	68da      	ldr	r2, [r3, #12]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	430a      	orrs	r2, r1
 800131c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001322:	4a58      	ldr	r2, [pc, #352]	@ (8001484 <ADC_Init+0x1f4>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d022      	beq.n	800136e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	689a      	ldr	r2, [r3, #8]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001336:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	6899      	ldr	r1, [r3, #8]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001358:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6899      	ldr	r1, [r3, #8]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	430a      	orrs	r2, r1
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	e00f      	b.n	800138e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800137c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	689a      	ldr	r2, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800138c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	689a      	ldr	r2, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f022 0202 	bic.w	r2, r2, #2
 800139c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	6899      	ldr	r1, [r3, #8]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7e1b      	ldrb	r3, [r3, #24]
 80013a8:	005a      	lsls	r2, r3, #1
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	430a      	orrs	r2, r1
 80013b0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d01b      	beq.n	80013f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013ca:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	685a      	ldr	r2, [r3, #4]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80013da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e6:	3b01      	subs	r3, #1
 80013e8:	035a      	lsls	r2, r3, #13
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	e007      	b.n	8001404 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001402:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	3b01      	subs	r3, #1
 8001420:	051a      	lsls	r2, r3, #20
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001438:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	6899      	ldr	r1, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001446:	025a      	lsls	r2, r3, #9
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800145e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	6899      	ldr	r1, [r3, #8]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	029a      	lsls	r2, r3, #10
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	430a      	orrs	r2, r1
 8001472:	609a      	str	r2, [r3, #8]
}
 8001474:	bf00      	nop
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40012300 	.word	0x40012300
 8001484:	0f000001 	.word	0x0f000001

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4907      	ldr	r1, [pc, #28]	@ (8001524 <__NVIC_EnableIRQ+0x38>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	e000e100 	.word	0xe000e100

08001528 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	6039      	str	r1, [r7, #0]
 8001532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001538:	2b00      	cmp	r3, #0
 800153a:	db0a      	blt.n	8001552 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	b2da      	uxtb	r2, r3
 8001540:	490c      	ldr	r1, [pc, #48]	@ (8001574 <__NVIC_SetPriority+0x4c>)
 8001542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001546:	0112      	lsls	r2, r2, #4
 8001548:	b2d2      	uxtb	r2, r2
 800154a:	440b      	add	r3, r1
 800154c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001550:	e00a      	b.n	8001568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	b2da      	uxtb	r2, r3
 8001556:	4908      	ldr	r1, [pc, #32]	@ (8001578 <__NVIC_SetPriority+0x50>)
 8001558:	79fb      	ldrb	r3, [r7, #7]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	3b04      	subs	r3, #4
 8001560:	0112      	lsls	r2, r2, #4
 8001562:	b2d2      	uxtb	r2, r2
 8001564:	440b      	add	r3, r1
 8001566:	761a      	strb	r2, [r3, #24]
}
 8001568:	bf00      	nop
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b480      	push	{r7}
 800157e:	b089      	sub	sp, #36	@ 0x24
 8001580:	af00      	add	r7, sp, #0
 8001582:	60f8      	str	r0, [r7, #12]
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	f1c3 0307 	rsb	r3, r3, #7
 8001596:	2b04      	cmp	r3, #4
 8001598:	bf28      	it	cs
 800159a:	2304      	movcs	r3, #4
 800159c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	3304      	adds	r3, #4
 80015a2:	2b06      	cmp	r3, #6
 80015a4:	d902      	bls.n	80015ac <NVIC_EncodePriority+0x30>
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	3b03      	subs	r3, #3
 80015aa:	e000      	b.n	80015ae <NVIC_EncodePriority+0x32>
 80015ac:	2300      	movs	r3, #0
 80015ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b0:	f04f 32ff 	mov.w	r2, #4294967295
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43da      	mvns	r2, r3
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	401a      	ands	r2, r3
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c4:	f04f 31ff 	mov.w	r1, #4294967295
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa01 f303 	lsl.w	r3, r1, r3
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	4313      	orrs	r3, r2
         );
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3724      	adds	r7, #36	@ 0x24
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f4:	d301      	bcc.n	80015fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00f      	b.n	800161a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001624 <SysTick_Config+0x40>)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3b01      	subs	r3, #1
 8001600:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001602:	210f      	movs	r1, #15
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f7ff ff8e 	bl	8001528 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <SysTick_Config+0x40>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <SysTick_Config+0x40>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f7ff ff29 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800163e:	b580      	push	{r7, lr}
 8001640:	b086      	sub	sp, #24
 8001642:	af00      	add	r7, sp, #0
 8001644:	4603      	mov	r3, r0
 8001646:	60b9      	str	r1, [r7, #8]
 8001648:	607a      	str	r2, [r7, #4]
 800164a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff3e 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff8e 	bl	800157c <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5d 	bl	8001528 <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	4603      	mov	r3, r0
 800167e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001680:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff ff31 	bl	80014ec <__NVIC_EnableIRQ>
}
 800168a:	bf00      	nop
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b082      	sub	sp, #8
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f7ff ffa2 	bl	80015e4 <SysTick_Config>
 80016a0:	4603      	mov	r3, r0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}

080016aa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	b082      	sub	sp, #8
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e014      	b.n	80016e6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	791b      	ldrb	r3, [r3, #4]
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d105      	bne.n	80016d2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7fe ffb3 	bl	8000638 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2202      	movs	r2, #2
 80016d6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2201      	movs	r2, #1
 80016e2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80016ee:	b480      	push	{r7}
 80016f0:	b083      	sub	sp, #12
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
 80016f6:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e046      	b.n	8001790 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	795b      	ldrb	r3, [r3, #5]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_DAC_Start+0x20>
 800170a:	2302      	movs	r3, #2
 800170c:	e040      	b.n	8001790 <HAL_DAC_Start+0xa2>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2202      	movs	r2, #2
 8001718:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6819      	ldr	r1, [r3, #0]
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	f003 0310 	and.w	r3, r3, #16
 8001726:	2201      	movs	r2, #1
 8001728:	409a      	lsls	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	2b00      	cmp	r3, #0
 8001736:	d10f      	bne.n	8001758 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001742:	2b3c      	cmp	r3, #60	@ 0x3c
 8001744:	d11d      	bne.n	8001782 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0201 	orr.w	r2, r2, #1
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	e014      	b.n	8001782 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	213c      	movs	r1, #60	@ 0x3c
 800176a:	fa01 f303 	lsl.w	r3, r1, r3
 800176e:	429a      	cmp	r2, r3
 8001770:	d107      	bne.n	8001782 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	685a      	ldr	r2, [r3, #4]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f042 0202 	orr.w	r2, r2, #2
 8001780:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2201      	movs	r2, #1
 8001786:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
}
 8001790:	4618      	mov	r0, r3
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
 80017a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e015      	b.n	80017e4 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d105      	bne.n	80017d0 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	3308      	adds	r3, #8
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	e004      	b.n	80017da <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80017d0:	697a      	ldr	r2, [r7, #20]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	3314      	adds	r3, #20
 80017d8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	461a      	mov	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	371c      	adds	r7, #28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b089      	sub	sp, #36	@ 0x24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d002      	beq.n	800180c <HAL_DAC_ConfigChannel+0x1c>
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d101      	bne.n	8001810 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e042      	b.n	8001896 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	795b      	ldrb	r3, [r3, #5]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_DAC_ConfigChannel+0x2c>
 8001818:	2302      	movs	r3, #2
 800181a:	e03c      	b.n	8001896 <HAL_DAC_ConfigChannel+0xa6>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2202      	movs	r2, #2
 8001826:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f003 0310 	and.w	r3, r3, #16
 8001836:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	681a      	ldr	r2, [r3, #0]
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4313      	orrs	r3, r2
 8001850:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f003 0310 	and.w	r3, r3, #16
 8001858:	697a      	ldr	r2, [r7, #20]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4313      	orrs	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6819      	ldr	r1, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f003 0310 	and.w	r3, r3, #16
 8001878:	22c0      	movs	r2, #192	@ 0xc0
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2201      	movs	r2, #1
 800188c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001894:	7ffb      	ldrb	r3, [r7, #31]
}
 8001896:	4618      	mov	r0, r3
 8001898:	3724      	adds	r7, #36	@ 0x24
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b089      	sub	sp, #36	@ 0x24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018b6:	2300      	movs	r3, #0
 80018b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
 80018be:	e16b      	b.n	8001b98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018c0:	2201      	movs	r2, #1
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	697a      	ldr	r2, [r7, #20]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	429a      	cmp	r2, r3
 80018da:	f040 815a 	bne.w	8001b92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d005      	beq.n	80018f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d130      	bne.n	8001958 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	2203      	movs	r2, #3
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	4013      	ands	r3, r2
 800190c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	68da      	ldr	r2, [r3, #12]
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	091b      	lsrs	r3, r3, #4
 8001942:	f003 0201 	and.w	r2, r3, #1
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	69ba      	ldr	r2, [r7, #24]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0303 	and.w	r3, r3, #3
 8001960:	2b03      	cmp	r3, #3
 8001962:	d017      	beq.n	8001994 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	2203      	movs	r2, #3
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	43db      	mvns	r3, r3
 8001976:	69ba      	ldr	r2, [r7, #24]
 8001978:	4013      	ands	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f003 0303 	and.w	r3, r3, #3
 800199c:	2b02      	cmp	r3, #2
 800199e:	d123      	bne.n	80019e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	08da      	lsrs	r2, r3, #3
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3208      	adds	r2, #8
 80019a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	220f      	movs	r2, #15
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	691a      	ldr	r2, [r3, #16]
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	08da      	lsrs	r2, r3, #3
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	3208      	adds	r2, #8
 80019e2:	69b9      	ldr	r1, [r7, #24]
 80019e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	4013      	ands	r3, r2
 80019fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0203 	and.w	r2, r3, #3
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	69ba      	ldr	r2, [r7, #24]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 80b4 	beq.w	8001b92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	4b60      	ldr	r3, [pc, #384]	@ (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	4a5f      	ldr	r2, [pc, #380]	@ (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a3a:	4b5d      	ldr	r3, [pc, #372]	@ (8001bb0 <HAL_GPIO_Init+0x30c>)
 8001a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a46:	4a5b      	ldr	r2, [pc, #364]	@ (8001bb4 <HAL_GPIO_Init+0x310>)
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	089b      	lsrs	r3, r3, #2
 8001a4c:	3302      	adds	r3, #2
 8001a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0303 	and.w	r3, r3, #3
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	4a52      	ldr	r2, [pc, #328]	@ (8001bb8 <HAL_GPIO_Init+0x314>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d02b      	beq.n	8001aca <HAL_GPIO_Init+0x226>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a51      	ldr	r2, [pc, #324]	@ (8001bbc <HAL_GPIO_Init+0x318>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d025      	beq.n	8001ac6 <HAL_GPIO_Init+0x222>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a50      	ldr	r2, [pc, #320]	@ (8001bc0 <HAL_GPIO_Init+0x31c>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d01f      	beq.n	8001ac2 <HAL_GPIO_Init+0x21e>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	@ (8001bc4 <HAL_GPIO_Init+0x320>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d019      	beq.n	8001abe <HAL_GPIO_Init+0x21a>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc8 <HAL_GPIO_Init+0x324>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d013      	beq.n	8001aba <HAL_GPIO_Init+0x216>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	@ (8001bcc <HAL_GPIO_Init+0x328>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d00d      	beq.n	8001ab6 <HAL_GPIO_Init+0x212>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	@ (8001bd0 <HAL_GPIO_Init+0x32c>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d007      	beq.n	8001ab2 <HAL_GPIO_Init+0x20e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	@ (8001bd4 <HAL_GPIO_Init+0x330>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d101      	bne.n	8001aae <HAL_GPIO_Init+0x20a>
 8001aaa:	2307      	movs	r3, #7
 8001aac:	e00e      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aae:	2308      	movs	r3, #8
 8001ab0:	e00c      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00a      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ab6:	2305      	movs	r3, #5
 8001ab8:	e008      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aba:	2304      	movs	r3, #4
 8001abc:	e006      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e004      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	e002      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_GPIO_Init+0x228>
 8001aca:	2300      	movs	r3, #0
 8001acc:	69fa      	ldr	r2, [r7, #28]
 8001ace:	f002 0203 	and.w	r2, r2, #3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4093      	lsls	r3, r2
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001adc:	4935      	ldr	r1, [pc, #212]	@ (8001bb4 <HAL_GPIO_Init+0x310>)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	089b      	lsrs	r3, r3, #2
 8001ae2:	3302      	adds	r3, #2
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001aea:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b0e:	4a32      	ldr	r2, [pc, #200]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b14:	4b30      	ldr	r3, [pc, #192]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	69ba      	ldr	r2, [r7, #24]
 8001b20:	4013      	ands	r3, r2
 8001b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d003      	beq.n	8001b38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b38:	4a27      	ldr	r2, [pc, #156]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b3e:	4b26      	ldr	r3, [pc, #152]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b62:	4a1d      	ldr	r2, [pc, #116]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b68:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b8c:	4a12      	ldr	r2, [pc, #72]	@ (8001bd8 <HAL_GPIO_Init+0x334>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	2b0f      	cmp	r3, #15
 8001b9c:	f67f ae90 	bls.w	80018c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40013800 	.word	0x40013800
 8001bb8:	40020000 	.word	0x40020000
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40020c00 	.word	0x40020c00
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	40021400 	.word	0x40021400
 8001bd0:	40021800 	.word	0x40021800
 8001bd4:	40021c00 	.word	0x40021c00
 8001bd8:	40013c00 	.word	0x40013c00

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	807b      	strh	r3, [r7, #2]
 8001be8:	4613      	mov	r3, r2
 8001bea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bec:	787b      	ldrb	r3, [r7, #1]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bf2:	887a      	ldrh	r2, [r7, #2]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bf8:	e003      	b.n	8001c02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bfa:	887b      	ldrh	r3, [r7, #2]
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	619a      	str	r2, [r3, #24]
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b084      	sub	sp, #16
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e12b      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7fe fe7e 	bl	8000938 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2224      	movs	r2, #36	@ 0x24
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f022 0201 	bic.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c74:	f002 fc72 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 8001c78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	4a81      	ldr	r2, [pc, #516]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d807      	bhi.n	8001c94 <HAL_I2C_Init+0x84>
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	4a80      	ldr	r2, [pc, #512]	@ (8001e88 <HAL_I2C_Init+0x278>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	bf94      	ite	ls
 8001c8c:	2301      	movls	r3, #1
 8001c8e:	2300      	movhi	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	e006      	b.n	8001ca2 <HAL_I2C_Init+0x92>
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4a7d      	ldr	r2, [pc, #500]	@ (8001e8c <HAL_I2C_Init+0x27c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	bf94      	ite	ls
 8001c9c:	2301      	movls	r3, #1
 8001c9e:	2300      	movhi	r3, #0
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e0e7      	b.n	8001e7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4a78      	ldr	r2, [pc, #480]	@ (8001e90 <HAL_I2C_Init+0x280>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_I2C_Init+0xd4>
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	e009      	b.n	8001cf8 <HAL_I2C_Init+0xe8>
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001cea:	fb02 f303 	mul.w	r3, r2, r3
 8001cee:	4a69      	ldr	r2, [pc, #420]	@ (8001e94 <HAL_I2C_Init+0x284>)
 8001cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	430b      	orrs	r3, r1
 8001cfe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001d0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	495c      	ldr	r1, [pc, #368]	@ (8001e84 <HAL_I2C_Init+0x274>)
 8001d14:	428b      	cmp	r3, r1
 8001d16:	d819      	bhi.n	8001d4c <HAL_I2C_Init+0x13c>
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1e59      	subs	r1, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d26:	1c59      	adds	r1, r3, #1
 8001d28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001d2c:	400b      	ands	r3, r1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_I2C_Init+0x138>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	1e59      	subs	r1, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d40:	3301      	adds	r3, #1
 8001d42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d46:	e051      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e04f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d111      	bne.n	8001d78 <HAL_I2C_Init+0x168>
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	1e58      	subs	r0, r3, #1
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6859      	ldr	r1, [r3, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	440b      	add	r3, r1
 8001d62:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d66:	3301      	adds	r3, #1
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Init+0x18e>
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	1e58      	subs	r0, r3, #1
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6859      	ldr	r1, [r3, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	0099      	lsls	r1, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bf0c      	ite	eq
 8001d98:	2301      	moveq	r3, #1
 8001d9a:	2300      	movne	r3, #0
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <HAL_I2C_Init+0x196>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e022      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10e      	bne.n	8001dcc <HAL_I2C_Init+0x1bc>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	1e58      	subs	r0, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6859      	ldr	r1, [r3, #4]
 8001db6:	460b      	mov	r3, r1
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	440b      	add	r3, r1
 8001dbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dc0:	3301      	adds	r3, #1
 8001dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dca:	e00f      	b.n	8001dec <HAL_I2C_Init+0x1dc>
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	1e58      	subs	r0, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	460b      	mov	r3, r1
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	440b      	add	r3, r1
 8001dda:	0099      	lsls	r1, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de2:	3301      	adds	r3, #1
 8001de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001de8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dec:	6879      	ldr	r1, [r7, #4]
 8001dee:	6809      	ldr	r1, [r1, #0]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001e1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	6911      	ldr	r1, [r2, #16]
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	68d2      	ldr	r2, [r2, #12]
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6812      	ldr	r2, [r2, #0]
 8001e2c:	430b      	orrs	r3, r1
 8001e2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	431a      	orrs	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f042 0201 	orr.w	r2, r2, #1
 8001e5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2220      	movs	r2, #32
 8001e66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	000186a0 	.word	0x000186a0
 8001e88:	001e847f 	.word	0x001e847f
 8001e8c:	003d08ff 	.word	0x003d08ff
 8001e90:	431bde83 	.word	0x431bde83
 8001e94:	10624dd3 	.word	0x10624dd3

08001e98 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d101      	bne.n	8001eaa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e128      	b.n	80020fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a90      	ldr	r2, [pc, #576]	@ (8002104 <HAL_I2S_Init+0x26c>)
 8001ec2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7fe fdaf 	bl	8000a28 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	69db      	ldr	r3, [r3, #28]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ee0:	f023 030f 	bic.w	r3, r3, #15
 8001ee4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2202      	movs	r2, #2
 8001eec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d060      	beq.n	8001fb8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001efe:	2310      	movs	r3, #16
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e001      	b.n	8001f08 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001f04:	2320      	movs	r3, #32
 8001f06:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d802      	bhi.n	8001f16 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	005b      	lsls	r3, r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001f16:	2001      	movs	r0, #1
 8001f18:	f002 fc2a 	bl	8004770 <HAL_RCCEx_GetPeriphCLKFreq>
 8001f1c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f26:	d125      	bne.n	8001f74 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d010      	beq.n	8001f52 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	695b      	ldr	r3, [r3, #20]
 8001f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f4c:	3305      	adds	r3, #5
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	e01f      	b.n	8001f92 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	461a      	mov	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f6e:	3305      	adds	r3, #5
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	e00e      	b.n	8001f92 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4413      	add	r3, r2
 8001f82:	005b      	lsls	r3, r3, #1
 8001f84:	461a      	mov	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f8e:	3305      	adds	r3, #5
 8001f90:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4a5c      	ldr	r2, [pc, #368]	@ (8002108 <HAL_I2S_Init+0x270>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	08db      	lsrs	r3, r3, #3
 8001f9c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001fa6:	693a      	ldr	r2, [r7, #16]
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	1ad3      	subs	r3, r2, r3
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	e003      	b.n	8001fc0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001fb8:	2302      	movs	r3, #2
 8001fba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d902      	bls.n	8001fcc <HAL_I2S_Init+0x134>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	2bff      	cmp	r3, #255	@ 0xff
 8001fca:	d907      	bls.n	8001fdc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd0:	f043 0210 	orr.w	r2, r3, #16
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e08f      	b.n	80020fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	ea42 0103 	orr.w	r1, r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	69fa      	ldr	r2, [r7, #28]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001ffa:	f023 030f 	bic.w	r3, r3, #15
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6851      	ldr	r1, [r2, #4]
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6892      	ldr	r2, [r2, #8]
 8002006:	4311      	orrs	r1, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	68d2      	ldr	r2, [r2, #12]
 800200c:	4311      	orrs	r1, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6992      	ldr	r2, [r2, #24]
 8002012:	430a      	orrs	r2, r1
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800201e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6a1b      	ldr	r3, [r3, #32]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d161      	bne.n	80020ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a38      	ldr	r2, [pc, #224]	@ (800210c <HAL_I2S_Init+0x274>)
 800202c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a37      	ldr	r2, [pc, #220]	@ (8002110 <HAL_I2S_Init+0x278>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d101      	bne.n	800203c <HAL_I2S_Init+0x1a4>
 8002038:	4b36      	ldr	r3, [pc, #216]	@ (8002114 <HAL_I2S_Init+0x27c>)
 800203a:	e001      	b.n	8002040 <HAL_I2S_Init+0x1a8>
 800203c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	6812      	ldr	r2, [r2, #0]
 8002046:	4932      	ldr	r1, [pc, #200]	@ (8002110 <HAL_I2S_Init+0x278>)
 8002048:	428a      	cmp	r2, r1
 800204a:	d101      	bne.n	8002050 <HAL_I2S_Init+0x1b8>
 800204c:	4a31      	ldr	r2, [pc, #196]	@ (8002114 <HAL_I2S_Init+0x27c>)
 800204e:	e001      	b.n	8002054 <HAL_I2S_Init+0x1bc>
 8002050:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002054:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002058:	f023 030f 	bic.w	r3, r3, #15
 800205c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2b      	ldr	r2, [pc, #172]	@ (8002110 <HAL_I2S_Init+0x278>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d101      	bne.n	800206c <HAL_I2S_Init+0x1d4>
 8002068:	4b2a      	ldr	r3, [pc, #168]	@ (8002114 <HAL_I2S_Init+0x27c>)
 800206a:	e001      	b.n	8002070 <HAL_I2S_Init+0x1d8>
 800206c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002070:	2202      	movs	r2, #2
 8002072:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a25      	ldr	r2, [pc, #148]	@ (8002110 <HAL_I2S_Init+0x278>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d101      	bne.n	8002082 <HAL_I2S_Init+0x1ea>
 800207e:	4b25      	ldr	r3, [pc, #148]	@ (8002114 <HAL_I2S_Init+0x27c>)
 8002080:	e001      	b.n	8002086 <HAL_I2S_Init+0x1ee>
 8002082:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002092:	d003      	beq.n	800209c <HAL_I2S_Init+0x204>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d103      	bne.n	80020a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800209c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	e001      	b.n	80020a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80020a4:	2300      	movs	r3, #0
 80020a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020b2:	4313      	orrs	r3, r2
 80020b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020bc:	4313      	orrs	r3, r2
 80020be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b29a      	uxth	r2, r3
 80020ca:	897b      	ldrh	r3, [r7, #10]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80020d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a0d      	ldr	r2, [pc, #52]	@ (8002110 <HAL_I2S_Init+0x278>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_I2S_Init+0x24c>
 80020e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002114 <HAL_I2S_Init+0x27c>)
 80020e2:	e001      	b.n	80020e8 <HAL_I2S_Init+0x250>
 80020e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020e8:	897a      	ldrh	r2, [r7, #10]
 80020ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80020fa:	2300      	movs	r3, #0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3720      	adds	r7, #32
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	0800220f 	.word	0x0800220f
 8002108:	cccccccd 	.word	0xcccccccd
 800210c:	08002325 	.word	0x08002325
 8002110:	40003800 	.word	0x40003800
 8002114:	40003400 	.word	0x40003400

08002118 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002160:	881a      	ldrh	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216c:	1c9a      	adds	r2, r3, #2
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002176:	b29b      	uxth	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b29a      	uxth	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d10e      	bne.n	80021a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002198:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffb8 	bl	8002118 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	68da      	ldr	r2, [r3, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021c2:	b292      	uxth	r2, r2
 80021c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	1c9a      	adds	r2, r3, #2
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3b01      	subs	r3, #1
 80021d8:	b29a      	uxth	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10e      	bne.n	8002206 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80021f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2201      	movs	r2, #1
 80021fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f7ff ff93 	bl	800212c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b086      	sub	sp, #24
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b04      	cmp	r3, #4
 8002228:	d13a      	bne.n	80022a0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b01      	cmp	r3, #1
 8002232:	d109      	bne.n	8002248 <I2S_IRQHandler+0x3a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b40      	cmp	r3, #64	@ 0x40
 8002240:	d102      	bne.n	8002248 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffb4 	bl	80021b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800224e:	2b40      	cmp	r3, #64	@ 0x40
 8002250:	d126      	bne.n	80022a0 <I2S_IRQHandler+0x92>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 0320 	and.w	r3, r3, #32
 800225c:	2b20      	cmp	r3, #32
 800225e:	d11f      	bne.n	80022a0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	685a      	ldr	r2, [r3, #4]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800226e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	613b      	str	r3, [r7, #16]
 8002284:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002292:	f043 0202 	orr.w	r2, r3, #2
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff50 	bl	8002140 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b03      	cmp	r3, #3
 80022aa:	d136      	bne.n	800231a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f003 0302 	and.w	r3, r3, #2
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d109      	bne.n	80022ca <I2S_IRQHandler+0xbc>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c0:	2b80      	cmp	r3, #128	@ 0x80
 80022c2:	d102      	bne.n	80022ca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff ff45 	bl	8002154 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d122      	bne.n	800231a <I2S_IRQHandler+0x10c>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0320 	and.w	r3, r3, #32
 80022de:	2b20      	cmp	r3, #32
 80022e0:	d11b      	bne.n	800231a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	685a      	ldr	r2, [r3, #4]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80022f0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230c:	f043 0204 	orr.w	r2, r3, #4
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ff13 	bl	8002140 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800231a:	bf00      	nop
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b088      	sub	sp, #32
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a92      	ldr	r2, [pc, #584]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d101      	bne.n	8002342 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800233e:	4b92      	ldr	r3, [pc, #584]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002340:	e001      	b.n	8002346 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002342:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a8b      	ldr	r2, [pc, #556]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d101      	bne.n	8002360 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800235c:	4b8a      	ldr	r3, [pc, #552]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800235e:	e001      	b.n	8002364 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002360:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002370:	d004      	beq.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 8099 	bne.w	80024ae <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b02      	cmp	r3, #2
 8002384:	d107      	bne.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f000 f925 	bl	80025e0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f003 0301 	and.w	r3, r3, #1
 800239c:	2b01      	cmp	r3, #1
 800239e:	d107      	bne.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f9c8 	bl	8002740 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023b6:	2b40      	cmp	r3, #64	@ 0x40
 80023b8:	d13a      	bne.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d035      	beq.n	8002430 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a6e      	ldr	r2, [pc, #440]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80023ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023d0:	e001      	b.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80023d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4969      	ldr	r1, [pc, #420]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023de:	428b      	cmp	r3, r1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80023e2:	4b69      	ldr	r3, [pc, #420]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023e4:	e001      	b.n	80023ea <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80023e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80023ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80023ee:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80023fe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002400:	2300      	movs	r3, #0
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	60fb      	str	r3, [r7, #12]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f043 0202 	orr.w	r2, r3, #2
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fe88 	bl	8002140 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b08      	cmp	r3, #8
 8002438:	f040 80c3 	bne.w	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	f003 0320 	and.w	r3, r3, #32
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80bd 	beq.w	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002456:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a49      	ldr	r2, [pc, #292]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d101      	bne.n	8002466 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002462:	4b49      	ldr	r3, [pc, #292]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002464:	e001      	b.n	800246a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002466:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800246a:	685a      	ldr	r2, [r3, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4944      	ldr	r1, [pc, #272]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002472:	428b      	cmp	r3, r1
 8002474:	d101      	bne.n	800247a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002476:	4b44      	ldr	r3, [pc, #272]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002478:	e001      	b.n	800247e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800247a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800247e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002482:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002484:	2300      	movs	r3, #0
 8002486:	60bb      	str	r3, [r7, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800249e:	f043 0204 	orr.w	r2, r3, #4
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f7ff fe4a 	bl	8002140 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024ac:	e089      	b.n	80025c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d107      	bne.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d002      	beq.n	80024c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8be 	bl	8002644 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d002      	beq.n	80024e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f8fd 	bl	80026dc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024e8:	2b40      	cmp	r3, #64	@ 0x40
 80024ea:	d12f      	bne.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d02a      	beq.n	800254c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002504:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a1e      	ldr	r2, [pc, #120]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d101      	bne.n	8002514 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002510:	4b1d      	ldr	r3, [pc, #116]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002512:	e001      	b.n	8002518 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002518:	685a      	ldr	r2, [r3, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4919      	ldr	r1, [pc, #100]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002520:	428b      	cmp	r3, r1
 8002522:	d101      	bne.n	8002528 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002524:	4b18      	ldr	r3, [pc, #96]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002526:	e001      	b.n	800252c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002528:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800252c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002530:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	f043 0202 	orr.w	r2, r3, #2
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7ff fdfa 	bl	8002140 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	f003 0308 	and.w	r3, r3, #8
 8002552:	2b08      	cmp	r3, #8
 8002554:	d136      	bne.n	80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	f003 0320 	and.w	r3, r3, #32
 800255c:	2b00      	cmp	r3, #0
 800255e:	d031      	beq.n	80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a07      	ldr	r2, [pc, #28]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d101      	bne.n	800256e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800256a:	4b07      	ldr	r3, [pc, #28]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800256c:	e001      	b.n	8002572 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800256e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002572:	685a      	ldr	r2, [r3, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4902      	ldr	r1, [pc, #8]	@ (8002584 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800257a:	428b      	cmp	r3, r1
 800257c:	d106      	bne.n	800258c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800257e:	4b02      	ldr	r3, [pc, #8]	@ (8002588 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002580:	e006      	b.n	8002590 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002582:	bf00      	nop
 8002584:	40003800 	.word	0x40003800
 8002588:	40003400 	.word	0x40003400
 800258c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002590:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002594:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80025a4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fdc0 	bl	8002140 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80025c0:	e000      	b.n	80025c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80025c2:	bf00      	nop
}
 80025c4:	bf00      	nop
 80025c6:	3720      	adds	r7, #32
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	1c99      	adds	r1, r3, #2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6251      	str	r1, [r2, #36]	@ 0x24
 80025f2:	881a      	ldrh	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d113      	bne.n	800263a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	685a      	ldr	r2, [r3, #4]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002620:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002626:	b29b      	uxth	r3, r3
 8002628:	2b00      	cmp	r3, #0
 800262a:	d106      	bne.n	800263a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f7ff ffc9 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002650:	1c99      	adds	r1, r3, #2
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	6251      	str	r1, [r2, #36]	@ 0x24
 8002656:	8819      	ldrh	r1, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a1d      	ldr	r2, [pc, #116]	@ (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d101      	bne.n	8002666 <I2SEx_TxISR_I2SExt+0x22>
 8002662:	4b1d      	ldr	r3, [pc, #116]	@ (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002664:	e001      	b.n	800266a <I2SEx_TxISR_I2SExt+0x26>
 8002666:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800266a:	460a      	mov	r2, r1
 800266c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d121      	bne.n	80026ca <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a12      	ldr	r2, [pc, #72]	@ (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d101      	bne.n	8002694 <I2SEx_TxISR_I2SExt+0x50>
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 8002692:	e001      	b.n	8002698 <I2SEx_TxISR_I2SExt+0x54>
 8002694:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002698:	685a      	ldr	r2, [r3, #4]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	490d      	ldr	r1, [pc, #52]	@ (80026d4 <I2SEx_TxISR_I2SExt+0x90>)
 80026a0:	428b      	cmp	r3, r1
 80026a2:	d101      	bne.n	80026a8 <I2SEx_TxISR_I2SExt+0x64>
 80026a4:	4b0c      	ldr	r3, [pc, #48]	@ (80026d8 <I2SEx_TxISR_I2SExt+0x94>)
 80026a6:	e001      	b.n	80026ac <I2SEx_TxISR_I2SExt+0x68>
 80026a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80026ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80026b0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d106      	bne.n	80026ca <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff81 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40003800 	.word	0x40003800
 80026d8:	40003400 	.word	0x40003400

080026dc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68d8      	ldr	r0, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ee:	1c99      	adds	r1, r3, #2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80026f4:	b282      	uxth	r2, r0
 80026f6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800270a:	b29b      	uxth	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d113      	bne.n	8002738 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800271e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002724:	b29b      	uxth	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ff4a 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002738:	bf00      	nop
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a20      	ldr	r2, [pc, #128]	@ (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d101      	bne.n	8002756 <I2SEx_RxISR_I2SExt+0x16>
 8002752:	4b20      	ldr	r3, [pc, #128]	@ (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 8002754:	e001      	b.n	800275a <I2SEx_RxISR_I2SExt+0x1a>
 8002756:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800275a:	68d8      	ldr	r0, [r3, #12]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002760:	1c99      	adds	r1, r3, #2
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002766:	b282      	uxth	r2, r0
 8002768:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d121      	bne.n	80027c6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a12      	ldr	r2, [pc, #72]	@ (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d101      	bne.n	8002790 <I2SEx_RxISR_I2SExt+0x50>
 800278c:	4b11      	ldr	r3, [pc, #68]	@ (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 800278e:	e001      	b.n	8002794 <I2SEx_RxISR_I2SExt+0x54>
 8002790:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002794:	685a      	ldr	r2, [r3, #4]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	490d      	ldr	r1, [pc, #52]	@ (80027d0 <I2SEx_RxISR_I2SExt+0x90>)
 800279c:	428b      	cmp	r3, r1
 800279e:	d101      	bne.n	80027a4 <I2SEx_RxISR_I2SExt+0x64>
 80027a0:	4b0c      	ldr	r3, [pc, #48]	@ (80027d4 <I2SEx_RxISR_I2SExt+0x94>)
 80027a2:	e001      	b.n	80027a8 <I2SEx_RxISR_I2SExt+0x68>
 80027a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027ac:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d106      	bne.n	80027c6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f7ff ff03 	bl	80025cc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	40003800 	.word	0x40003800
 80027d4:	40003400 	.word	0x40003400

080027d8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af02      	add	r7, sp, #8
 80027de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e101      	b.n	80029ee <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d106      	bne.n	800280a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f005 ff91 	bl	800872c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2203      	movs	r2, #3
 800280e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002818:	d102      	bne.n	8002820 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2200      	movs	r2, #0
 800281e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f002 fbde 	bl	8004fe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6818      	ldr	r0, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	7c1a      	ldrb	r2, [r3, #16]
 8002832:	f88d 2000 	strb.w	r2, [sp]
 8002836:	3304      	adds	r3, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	f002 fabd 	bl	8004db8 <USB_CoreInit>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2202      	movs	r2, #2
 8002848:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0ce      	b.n	80029ee <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2100      	movs	r1, #0
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fbd6 	bl	8005008 <USB_SetCurrentMode>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d005      	beq.n	800286e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2202      	movs	r2, #2
 8002866:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e0bf      	b.n	80029ee <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800286e:	2300      	movs	r3, #0
 8002870:	73fb      	strb	r3, [r7, #15]
 8002872:	e04a      	b.n	800290a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	00db      	lsls	r3, r3, #3
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	3315      	adds	r3, #21
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002888:	7bfa      	ldrb	r2, [r7, #15]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	4413      	add	r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3314      	adds	r3, #20
 8002898:	7bfa      	ldrb	r2, [r7, #15]
 800289a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	b298      	uxth	r0, r3
 80028a2:	6879      	ldr	r1, [r7, #4]
 80028a4:	4613      	mov	r3, r2
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	4413      	add	r3, r2
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	440b      	add	r3, r1
 80028ae:	332e      	adds	r3, #46	@ 0x2e
 80028b0:	4602      	mov	r2, r0
 80028b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	4613      	mov	r3, r2
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4413      	add	r3, r2
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	440b      	add	r3, r1
 80028c2:	3318      	adds	r3, #24
 80028c4:	2200      	movs	r2, #0
 80028c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028c8:	7bfa      	ldrb	r2, [r7, #15]
 80028ca:	6879      	ldr	r1, [r7, #4]
 80028cc:	4613      	mov	r3, r2
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4413      	add	r3, r2
 80028d2:	009b      	lsls	r3, r3, #2
 80028d4:	440b      	add	r3, r1
 80028d6:	331c      	adds	r3, #28
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80028dc:	7bfa      	ldrb	r2, [r7, #15]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	00db      	lsls	r3, r3, #3
 80028e4:	4413      	add	r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	3320      	adds	r3, #32
 80028ec:	2200      	movs	r2, #0
 80028ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80028f0:	7bfa      	ldrb	r2, [r7, #15]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3324      	adds	r3, #36	@ 0x24
 8002900:	2200      	movs	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002904:	7bfb      	ldrb	r3, [r7, #15]
 8002906:	3301      	adds	r3, #1
 8002908:	73fb      	strb	r3, [r7, #15]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	791b      	ldrb	r3, [r3, #4]
 800290e:	7bfa      	ldrb	r2, [r7, #15]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3af      	bcc.n	8002874 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002914:	2300      	movs	r3, #0
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e044      	b.n	80029a4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4413      	add	r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800292c:	2200      	movs	r2, #0
 800292e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4413      	add	r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002942:	7bfa      	ldrb	r2, [r7, #15]
 8002944:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002972:	7bfa      	ldrb	r2, [r7, #15]
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	4613      	mov	r3, r2
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4413      	add	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	440b      	add	r3, r1
 8002980:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	6879      	ldr	r1, [r7, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	440b      	add	r3, r1
 8002996:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800299a:	2200      	movs	r2, #0
 800299c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800299e:	7bfb      	ldrb	r3, [r7, #15]
 80029a0:	3301      	adds	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	791b      	ldrb	r3, [r3, #4]
 80029a8:	7bfa      	ldrb	r2, [r7, #15]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d3b5      	bcc.n	800291a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6818      	ldr	r0, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	7c1a      	ldrb	r2, [r3, #16]
 80029b6:	f88d 2000 	strb.w	r2, [sp]
 80029ba:	3304      	adds	r3, #4
 80029bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029be:	f002 fb6f 	bl	80050a0 <USB_DevInit>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d005      	beq.n	80029d4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2202      	movs	r2, #2
 80029cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e00c      	b.n	80029ee <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f003 fbb9 	bl	800615e <USB_DevDisconnect>

  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80029f6:	b580      	push	{r7, lr}
 80029f8:	b084      	sub	sp, #16
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_PCD_Start+0x1c>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e022      	b.n	8002a58 <HAL_PCD_Start+0x62>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d105      	bne.n	8002a3a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a32:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f002 fac0 	bl	8004fc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f003 fb67 	bl	800611c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a60:	b590      	push	{r4, r7, lr}
 8002a62:	b08d      	sub	sp, #52	@ 0x34
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f003 fc25 	bl	80062c6 <USB_GetMode>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f040 848c 	bne.w	800339c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f003 fb89 	bl	80061a0 <USB_ReadInterrupts>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 8482 	beq.w	800339a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	0a1b      	lsrs	r3, r3, #8
 8002aa0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 fb76 	bl	80061a0 <USB_ReadInterrupts>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d107      	bne.n	8002ace <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f002 0202 	and.w	r2, r2, #2
 8002acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f003 fb64 	bl	80061a0 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b10      	cmp	r3, #16
 8002ae0:	d161      	bne.n	8002ba6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	699a      	ldr	r2, [r3, #24]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0210 	bic.w	r2, r2, #16
 8002af0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f003 020f 	and.w	r2, r3, #15
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	0c5b      	lsrs	r3, r3, #17
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d124      	bne.n	8002b68 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d035      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	091b      	lsrs	r3, r3, #4
 8002b32:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	6a38      	ldr	r0, [r7, #32]
 8002b3e:	f003 f99b 	bl	8005e78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	091b      	lsrs	r3, r3, #4
 8002b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b4e:	441a      	add	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b60:	441a      	add	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]
 8002b66:	e016      	b.n	8002b96 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	2b06      	cmp	r3, #6
 8002b72:	d110      	bne.n	8002b96 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	6a38      	ldr	r0, [r7, #32]
 8002b80:	f003 f97a 	bl	8005e78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	695a      	ldr	r2, [r3, #20]
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b90:	441a      	add	r2, r3
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0210 	orr.w	r2, r2, #16
 8002ba4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4618      	mov	r0, r3
 8002bac:	f003 faf8 	bl	80061a0 <USB_ReadInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002bb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002bba:	f040 80a7 	bne.w	8002d0c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f003 fafd 	bl	80061c6 <USB_ReadDevAllOutEpInterrupt>
 8002bcc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002bce:	e099      	b.n	8002d04 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 808e 	beq.w	8002cf8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	4611      	mov	r1, r2
 8002be6:	4618      	mov	r0, r3
 8002be8:	f003 fb21 	bl	800622e <USB_ReadDevOutEPInterrupt>
 8002bec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f003 0301 	and.w	r3, r3, #1
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00c      	beq.n	8002c12 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c04:	461a      	mov	r2, r3
 8002c06:	2301      	movs	r3, #1
 8002c08:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c0a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fea3 	bl	8003958 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f003 0308 	and.w	r3, r3, #8
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00c      	beq.n	8002c36 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c1e:	015a      	lsls	r2, r3, #5
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c28:	461a      	mov	r2, r3
 8002c2a:	2308      	movs	r3, #8
 8002c2c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f000 ff79 	bl	8003b28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d008      	beq.n	8002c52 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	015a      	lsls	r2, r3, #5
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	4413      	add	r3, r2
 8002c48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	2310      	movs	r3, #16
 8002c50:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d030      	beq.n	8002cbe <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c5c:	6a3b      	ldr	r3, [r7, #32]
 8002c5e:	695b      	ldr	r3, [r3, #20]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	2b80      	cmp	r3, #128	@ 0x80
 8002c66:	d109      	bne.n	8002c7c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	69fa      	ldr	r2, [r7, #28]
 8002c72:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002c7a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002c7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c7e:	4613      	mov	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	4413      	add	r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	3304      	adds	r3, #4
 8002c90:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	78db      	ldrb	r3, [r3, #3]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d108      	bne.n	8002cac <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f005 fe54 	bl	8008954 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2302      	movs	r3, #2
 8002cbc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	2320      	movs	r3, #32
 8002cd8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002cf6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	085b      	lsrs	r3, r3, #1
 8002d02:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f47f af62 	bne.w	8002bd0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 fa45 	bl	80061a0 <USB_ReadInterrupts>
 8002d16:	4603      	mov	r3, r0
 8002d18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d1c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002d20:	f040 80db 	bne.w	8002eda <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 fa66 	bl	80061fa <USB_ReadDevAllInEpInterrupt>
 8002d2e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002d34:	e0cd      	b.n	8002ed2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80c2 	beq.w	8002ec6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d48:	b2d2      	uxtb	r2, r2
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f003 fa8c 	bl	800626a <USB_ReadDevInEPInterrupt>
 8002d52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d057      	beq.n	8002e0e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69f9      	ldr	r1, [r7, #28]
 8002d7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002d7e:	4013      	ands	r3, r2
 8002d80:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	015a      	lsls	r2, r3, #5
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	4413      	add	r3, r2
 8002d8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8e:	461a      	mov	r2, r3
 8002d90:	2301      	movs	r3, #1
 8002d92:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	799b      	ldrb	r3, [r3, #6]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d132      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3320      	adds	r3, #32
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4403      	add	r3, r0
 8002dbc:	331c      	adds	r3, #28
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4419      	add	r1, r3
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4403      	add	r3, r0
 8002dd0:	3320      	adds	r3, #32
 8002dd2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d113      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x3a2>
 8002dda:	6879      	ldr	r1, [r7, #4]
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dde:	4613      	mov	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3324      	adds	r3, #36	@ 0x24
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d108      	bne.n	8002e02 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	f003 fa93 	bl	8006328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	4619      	mov	r1, r3
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f005 fd1e 	bl	800884a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e24:	461a      	mov	r2, r3
 8002e26:	2308      	movs	r3, #8
 8002e28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d008      	beq.n	8002e46 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e40:	461a      	mov	r2, r3
 8002e42:	2310      	movs	r3, #16
 8002e44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2340      	movs	r3, #64	@ 0x40
 8002e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002e6c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002e6e:	6a38      	ldr	r0, [r7, #32]
 8002e70:	f002 fa7a 	bl	8005368 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e76:	4613      	mov	r3, r2
 8002e78:	00db      	lsls	r3, r3, #3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	3310      	adds	r3, #16
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	4413      	add	r3, r2
 8002e84:	3304      	adds	r3, #4
 8002e86:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	78db      	ldrb	r3, [r3, #3]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d108      	bne.n	8002ea2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2200      	movs	r2, #0
 8002e94:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f005 fd6b 	bl	8008978 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ebe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fcbd 	bl	8003840 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec8:	3301      	adds	r3, #1
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	085b      	lsrs	r3, r3, #1
 8002ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f47f af2e 	bne.w	8002d36 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f003 f95e 	bl	80061a0 <USB_ReadInterrupts>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002eea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002eee:	d122      	bne.n	8002f36 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002efe:	f023 0301 	bic.w	r3, r3, #1
 8002f02:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d108      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f16:	2100      	movs	r1, #0
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 fea3 	bl	8003c64 <HAL_PCDEx_LPM_Callback>
 8002f1e:	e002      	b.n	8002f26 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f005 fd09 	bl	8008938 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695a      	ldr	r2, [r3, #20]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002f34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 f930 	bl	80061a0 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002f46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f4a:	d112      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 0301 	and.w	r3, r3, #1
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d102      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f005 fcc5 	bl	80088ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	695a      	ldr	r2, [r3, #20]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002f70:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f003 f912 	bl	80061a0 <USB_ReadInterrupts>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f86:	f040 80b7 	bne.w	80030f8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	69fa      	ldr	r2, [r7, #28]
 8002f94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002f98:	f023 0301 	bic.w	r3, r3, #1
 8002f9c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2110      	movs	r1, #16
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f002 f9df 	bl	8005368 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002faa:	2300      	movs	r3, #0
 8002fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fae:	e046      	b.n	800303e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb2:	015a      	lsls	r2, r3, #5
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002fc2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc6:	015a      	lsls	r2, r3, #5
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fd4:	0151      	lsls	r1, r2, #5
 8002fd6:	69fa      	ldr	r2, [r7, #28]
 8002fd8:	440a      	add	r2, r1
 8002fda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002fde:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002fe2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe6:	015a      	lsls	r2, r3, #5
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	4413      	add	r3, r2
 8002fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ff0:	461a      	mov	r2, r3
 8002ff2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002ff6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffa:	015a      	lsls	r2, r3, #5
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	4413      	add	r3, r2
 8003000:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003008:	0151      	lsls	r1, r2, #5
 800300a:	69fa      	ldr	r2, [r7, #28]
 800300c:	440a      	add	r2, r1
 800300e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003012:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003016:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003028:	0151      	lsls	r1, r2, #5
 800302a:	69fa      	ldr	r2, [r7, #28]
 800302c:	440a      	add	r2, r1
 800302e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003032:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003036:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800303a:	3301      	adds	r3, #1
 800303c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	791b      	ldrb	r3, [r3, #4]
 8003042:	461a      	mov	r2, r3
 8003044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003046:	4293      	cmp	r3, r2
 8003048:	d3b2      	bcc.n	8002fb0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003058:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800305c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7bdb      	ldrb	r3, [r3, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d016      	beq.n	8003094 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003076:	f043 030b 	orr.w	r3, r3, #11
 800307a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003086:	69fa      	ldr	r2, [r7, #28]
 8003088:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800308c:	f043 030b 	orr.w	r3, r3, #11
 8003090:	6453      	str	r3, [r2, #68]	@ 0x44
 8003092:	e015      	b.n	80030c0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	69fa      	ldr	r2, [r7, #28]
 800309e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030a2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030a6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80030aa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ba:	f043 030b 	orr.w	r3, r3, #11
 80030be:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80030ce:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80030d2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80030e2:	461a      	mov	r2, r3
 80030e4:	f003 f920 	bl	8006328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695a      	ldr	r2, [r3, #20]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80030f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f003 f84f 	bl	80061a0 <USB_ReadInterrupts>
 8003102:	4603      	mov	r3, r0
 8003104:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800310c:	d123      	bne.n	8003156 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4618      	mov	r0, r3
 8003114:	f003 f8e5 	bl	80062e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f002 f99c 	bl	800545a <USB_GetDevSpeed>
 8003122:	4603      	mov	r3, r0
 8003124:	461a      	mov	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681c      	ldr	r4, [r3, #0]
 800312e:	f001 fa09 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8003132:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003138:	461a      	mov	r2, r3
 800313a:	4620      	mov	r0, r4
 800313c:	f001 fea0 	bl	8004e80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f005 fbaa 	bl	800889a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695a      	ldr	r2, [r3, #20]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003154:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 f820 	bl	80061a0 <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0308 	and.w	r3, r3, #8
 8003166:	2b08      	cmp	r3, #8
 8003168:	d10a      	bne.n	8003180 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f005 fb87 	bl	800887e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	695a      	ldr	r2, [r3, #20]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f002 0208 	and.w	r2, r2, #8
 800317e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f003 f80b 	bl	80061a0 <USB_ReadInterrupts>
 800318a:	4603      	mov	r3, r0
 800318c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003190:	2b80      	cmp	r3, #128	@ 0x80
 8003192:	d123      	bne.n	80031dc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003194:	6a3b      	ldr	r3, [r7, #32]
 8003196:	699b      	ldr	r3, [r3, #24]
 8003198:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031a0:	2301      	movs	r3, #1
 80031a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031a4:	e014      	b.n	80031d0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031aa:	4613      	mov	r3, r2
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4413      	add	r3, r2
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	440b      	add	r3, r1
 80031b4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d105      	bne.n	80031ca <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fb0a 	bl	80037de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	3301      	adds	r3, #1
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	791b      	ldrb	r3, [r3, #4]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d8:	4293      	cmp	r3, r2
 80031da:	d3e4      	bcc.n	80031a6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f002 ffdd 	bl	80061a0 <USB_ReadInterrupts>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f0:	d13c      	bne.n	800326c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031f2:	2301      	movs	r3, #1
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80031f6:	e02b      	b.n	8003250 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	440b      	add	r3, r1
 8003216:	3318      	adds	r3, #24
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800321e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003220:	2b00      	cmp	r3, #0
 8003222:	da12      	bge.n	800324a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003228:	4613      	mov	r3, r2
 800322a:	00db      	lsls	r3, r3, #3
 800322c:	4413      	add	r3, r2
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	3317      	adds	r3, #23
 8003234:	2201      	movs	r2, #1
 8003236:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003240:	b2db      	uxtb	r3, r3
 8003242:	4619      	mov	r1, r3
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 faca 	bl	80037de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	3301      	adds	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	791b      	ldrb	r3, [r3, #4]
 8003254:	461a      	mov	r2, r3
 8003256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003258:	4293      	cmp	r3, r2
 800325a:	d3cd      	bcc.n	80031f8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	695a      	ldr	r2, [r3, #20]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800326a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 ff95 	bl	80061a0 <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800327c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003280:	d156      	bne.n	8003330 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	@ 0x24
 8003286:	e045      	b.n	8003314 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d12e      	bne.n	800330e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	da2b      	bge.n	800330e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80032c2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d121      	bne.n	800330e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80032ca:	6879      	ldr	r1, [r7, #4]
 80032cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032ce:	4613      	mov	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	4413      	add	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80032e0:	6a3b      	ldr	r3, [r7, #32]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d10a      	bne.n	800330e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003306:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800330a:	6053      	str	r3, [r2, #4]
            break;
 800330c:	e008      	b.n	8003320 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	3301      	adds	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	@ 0x24
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	791b      	ldrb	r3, [r3, #4]
 8003318:	461a      	mov	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	4293      	cmp	r3, r2
 800331e:	d3b3      	bcc.n	8003288 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	695a      	ldr	r2, [r3, #20]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800332e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4618      	mov	r0, r3
 8003336:	f002 ff33 	bl	80061a0 <USB_ReadInterrupts>
 800333a:	4603      	mov	r3, r0
 800333c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003340:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003344:	d10a      	bne.n	800335c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f005 fb28 	bl	800899c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800335a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 ff1d 	bl	80061a0 <USB_ReadInterrupts>
 8003366:	4603      	mov	r3, r0
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d115      	bne.n	800339c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003378:	69bb      	ldr	r3, [r7, #24]
 800337a:	f003 0304 	and.w	r3, r3, #4
 800337e:	2b00      	cmp	r3, #0
 8003380:	d002      	beq.n	8003388 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f005 fb18 	bl	80089b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e000      	b.n	800339c <HAL_PCD_IRQHandler+0x93c>
      return;
 800339a:	bf00      	nop
    }
  }
}
 800339c:	3734      	adds	r7, #52	@ 0x34
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b082      	sub	sp, #8
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
 80033aa:	460b      	mov	r3, r1
 80033ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <HAL_PCD_SetAddress+0x1a>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e012      	b.n	80033e2 <HAL_PCD_SetAddress+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	4611      	mov	r1, r2
 80033d2:	4618      	mov	r0, r3
 80033d4:	f002 fe7c 	bl	80060d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
 80033f2:	4608      	mov	r0, r1
 80033f4:	4611      	mov	r1, r2
 80033f6:	461a      	mov	r2, r3
 80033f8:	4603      	mov	r3, r0
 80033fa:	70fb      	strb	r3, [r7, #3]
 80033fc:	460b      	mov	r3, r1
 80033fe:	803b      	strh	r3, [r7, #0]
 8003400:	4613      	mov	r3, r2
 8003402:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800340c:	2b00      	cmp	r3, #0
 800340e:	da0f      	bge.n	8003430 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003410:	78fb      	ldrb	r3, [r7, #3]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	4613      	mov	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	4413      	add	r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	3310      	adds	r3, #16
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	3304      	adds	r3, #4
 8003426:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2201      	movs	r2, #1
 800342c:	705a      	strb	r2, [r3, #1]
 800342e:	e00f      	b.n	8003450 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	f003 020f 	and.w	r2, r3, #15
 8003436:	4613      	mov	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	4413      	add	r3, r2
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	4413      	add	r3, r2
 8003446:	3304      	adds	r3, #4
 8003448:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003450:	78fb      	ldrb	r3, [r7, #3]
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	b2da      	uxtb	r2, r3
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800345c:	883b      	ldrh	r3, [r7, #0]
 800345e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	78ba      	ldrb	r2, [r7, #2]
 800346a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	785b      	ldrb	r3, [r3, #1]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800347e:	78bb      	ldrb	r3, [r7, #2]
 8003480:	2b02      	cmp	r3, #2
 8003482:	d102      	bne.n	800348a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_PCD_EP_Open+0xae>
 8003494:	2302      	movs	r3, #2
 8003496:	e00e      	b.n	80034b6 <HAL_PCD_EP_Open+0xcc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68f9      	ldr	r1, [r7, #12]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fffc 	bl	80054a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80034b4:	7afb      	ldrb	r3, [r7, #11]
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	460b      	mov	r3, r1
 80034c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da0f      	bge.n	80034f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034d2:	78fb      	ldrb	r3, [r7, #3]
 80034d4:	f003 020f 	and.w	r2, r3, #15
 80034d8:	4613      	mov	r3, r2
 80034da:	00db      	lsls	r3, r3, #3
 80034dc:	4413      	add	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	3310      	adds	r3, #16
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	3304      	adds	r3, #4
 80034e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2201      	movs	r2, #1
 80034ee:	705a      	strb	r2, [r3, #1]
 80034f0:	e00f      	b.n	8003512 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 020f 	and.w	r2, r3, #15
 80034f8:	4613      	mov	r3, r2
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4413      	add	r3, r2
 8003508:	3304      	adds	r3, #4
 800350a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2200      	movs	r2, #0
 8003510:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003512:	78fb      	ldrb	r3, [r7, #3]
 8003514:	f003 030f 	and.w	r3, r3, #15
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003524:	2b01      	cmp	r3, #1
 8003526:	d101      	bne.n	800352c <HAL_PCD_EP_Close+0x6e>
 8003528:	2302      	movs	r3, #2
 800352a:	e00e      	b.n	800354a <HAL_PCD_EP_Close+0x8c>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68f9      	ldr	r1, [r7, #12]
 800353a:	4618      	mov	r0, r3
 800353c:	f002 f83a 	bl	80055b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}

08003552 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003552:	b580      	push	{r7, lr}
 8003554:	b086      	sub	sp, #24
 8003556:	af00      	add	r7, sp, #0
 8003558:	60f8      	str	r0, [r7, #12]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
 800355e:	460b      	mov	r3, r1
 8003560:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003562:	7afb      	ldrb	r3, [r7, #11]
 8003564:	f003 020f 	and.w	r2, r3, #15
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	b2da      	uxtb	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	799b      	ldrb	r3, [r3, #6]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d102      	bne.n	80035ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	799b      	ldrb	r3, [r3, #6]
 80035b6:	461a      	mov	r2, r3
 80035b8:	6979      	ldr	r1, [r7, #20]
 80035ba:	f002 f8d7 	bl	800576c <USB_EPStartXfer>

  return HAL_OK;
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}

080035c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80035d4:	78fb      	ldrb	r3, [r7, #3]
 80035d6:	f003 020f 	and.w	r2, r3, #15
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	00db      	lsls	r3, r3, #3
 80035e0:	4413      	add	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	607a      	str	r2, [r7, #4]
 8003602:	603b      	str	r3, [r7, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003608:	7afb      	ldrb	r3, [r7, #11]
 800360a:	f003 020f 	and.w	r2, r3, #15
 800360e:	4613      	mov	r3, r2
 8003610:	00db      	lsls	r3, r3, #3
 8003612:	4413      	add	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	3310      	adds	r3, #16
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	3304      	adds	r3, #4
 800361e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	683a      	ldr	r2, [r7, #0]
 800362a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2200      	movs	r2, #0
 8003630:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2201      	movs	r2, #1
 8003636:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	b2da      	uxtb	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	799b      	ldrb	r3, [r3, #6]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d102      	bne.n	8003652 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	799b      	ldrb	r3, [r3, #6]
 800365a:	461a      	mov	r2, r3
 800365c:	6979      	ldr	r1, [r7, #20]
 800365e:	f002 f885 	bl	800576c <USB_EPStartXfer>

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	7912      	ldrb	r2, [r2, #4]
 8003682:	4293      	cmp	r3, r2
 8003684:	d901      	bls.n	800368a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e04f      	b.n	800372a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800368a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800368e:	2b00      	cmp	r3, #0
 8003690:	da0f      	bge.n	80036b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003692:	78fb      	ldrb	r3, [r7, #3]
 8003694:	f003 020f 	and.w	r2, r3, #15
 8003698:	4613      	mov	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	4413      	add	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	3310      	adds	r3, #16
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	4413      	add	r3, r2
 80036a6:	3304      	adds	r3, #4
 80036a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2201      	movs	r2, #1
 80036ae:	705a      	strb	r2, [r3, #1]
 80036b0:	e00d      	b.n	80036ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4613      	mov	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	4413      	add	r3, r2
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	4413      	add	r3, r2
 80036c4:	3304      	adds	r3, #4
 80036c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	2200      	movs	r2, #0
 80036cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 030f 	and.w	r3, r3, #15
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d101      	bne.n	80036ee <HAL_PCD_EP_SetStall+0x82>
 80036ea:	2302      	movs	r3, #2
 80036ec:	e01d      	b.n	800372a <HAL_PCD_EP_SetStall+0xbe>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68f9      	ldr	r1, [r7, #12]
 80036fc:	4618      	mov	r0, r3
 80036fe:	f002 fc13 	bl	8005f28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6818      	ldr	r0, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	7999      	ldrb	r1, [r3, #6]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800371a:	461a      	mov	r2, r3
 800371c:	f002 fe04 	bl	8006328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3710      	adds	r7, #16
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
 800373a:	460b      	mov	r3, r1
 800373c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800373e:	78fb      	ldrb	r3, [r7, #3]
 8003740:	f003 030f 	and.w	r3, r3, #15
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	7912      	ldrb	r2, [r2, #4]
 8003748:	4293      	cmp	r3, r2
 800374a:	d901      	bls.n	8003750 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e042      	b.n	80037d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003754:	2b00      	cmp	r3, #0
 8003756:	da0f      	bge.n	8003778 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	f003 020f 	and.w	r2, r3, #15
 800375e:	4613      	mov	r3, r2
 8003760:	00db      	lsls	r3, r3, #3
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	3310      	adds	r3, #16
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	4413      	add	r3, r2
 800376c:	3304      	adds	r3, #4
 800376e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	705a      	strb	r2, [r3, #1]
 8003776:	e00f      	b.n	8003798 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003778:	78fb      	ldrb	r3, [r7, #3]
 800377a:	f003 020f 	and.w	r2, r3, #15
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	4413      	add	r3, r2
 800378e:	3304      	adds	r3, #4
 8003790:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800379e:	78fb      	ldrb	r3, [r7, #3]
 80037a0:	f003 030f 	and.w	r3, r3, #15
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d101      	bne.n	80037b8 <HAL_PCD_EP_ClrStall+0x86>
 80037b4:	2302      	movs	r3, #2
 80037b6:	e00e      	b.n	80037d6 <HAL_PCD_EP_ClrStall+0xa4>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68f9      	ldr	r1, [r7, #12]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 fc1c 	bl	8006004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3710      	adds	r7, #16
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}

080037de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037de:	b580      	push	{r7, lr}
 80037e0:	b084      	sub	sp, #16
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
 80037e6:	460b      	mov	r3, r1
 80037e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	da0c      	bge.n	800380c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f2:	78fb      	ldrb	r3, [r7, #3]
 80037f4:	f003 020f 	and.w	r2, r3, #15
 80037f8:	4613      	mov	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	4413      	add	r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	3310      	adds	r3, #16
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	4413      	add	r3, r2
 8003806:	3304      	adds	r3, #4
 8003808:	60fb      	str	r3, [r7, #12]
 800380a:	e00c      	b.n	8003826 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800380c:	78fb      	ldrb	r3, [r7, #3]
 800380e:	f003 020f 	and.w	r2, r3, #15
 8003812:	4613      	mov	r3, r2
 8003814:	00db      	lsls	r3, r3, #3
 8003816:	4413      	add	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	3304      	adds	r3, #4
 8003824:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	4618      	mov	r0, r3
 800382e:	f002 fa3b 	bl	8005ca8 <USB_EPStopXfer>
 8003832:	4603      	mov	r3, r0
 8003834:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003836:	7afb      	ldrb	r3, [r7, #11]
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	@ 0x28
 8003844:	af02      	add	r7, sp, #8
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	3310      	adds	r3, #16
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	4413      	add	r3, r2
 8003864:	3304      	adds	r3, #4
 8003866:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	429a      	cmp	r2, r3
 8003872:	d901      	bls.n	8003878 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e06b      	b.n	8003950 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	691a      	ldr	r2, [r3, #16]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	429a      	cmp	r2, r3
 800388c:	d902      	bls.n	8003894 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	3303      	adds	r3, #3
 8003898:	089b      	lsrs	r3, r3, #2
 800389a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800389c:	e02a      	b.n	80038f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	691a      	ldr	r2, [r3, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	695b      	ldr	r3, [r3, #20]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d902      	bls.n	80038ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	3303      	adds	r3, #3
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68d9      	ldr	r1, [r3, #12]
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	b2da      	uxtb	r2, r3
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	4603      	mov	r3, r0
 80038d6:	6978      	ldr	r0, [r7, #20]
 80038d8:	f002 fa90 	bl	8005dfc <USB_WritePacket>

    ep->xfer_buff  += len;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	441a      	add	r2, r3
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	441a      	add	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	015a      	lsls	r2, r3, #5
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4413      	add	r3, r2
 80038fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	429a      	cmp	r2, r3
 8003908:	d809      	bhi.n	800391e <PCD_WriteEmptyTxFifo+0xde>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	695a      	ldr	r2, [r3, #20]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003912:	429a      	cmp	r2, r3
 8003914:	d203      	bcs.n	800391e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1bf      	bne.n	800389e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691a      	ldr	r2, [r3, #16]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	429a      	cmp	r2, r3
 8003928:	d811      	bhi.n	800394e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	f003 030f 	and.w	r3, r3, #15
 8003930:	2201      	movs	r2, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800393e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	43db      	mvns	r3, r3
 8003944:	6939      	ldr	r1, [r7, #16]
 8003946:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800394a:	4013      	ands	r3, r2
 800394c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3720      	adds	r7, #32
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800396c:	69fb      	ldr	r3, [r7, #28]
 800396e:	333c      	adds	r3, #60	@ 0x3c
 8003970:	3304      	adds	r3, #4
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	015a      	lsls	r2, r3, #5
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	4413      	add	r3, r2
 800397e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	799b      	ldrb	r3, [r3, #6]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d17b      	bne.n	8003a86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	2b00      	cmp	r3, #0
 8003996:	d015      	beq.n	80039c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	4a61      	ldr	r2, [pc, #388]	@ (8003b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	f240 80b9 	bls.w	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80b3 	beq.w	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80039c0:	6093      	str	r3, [r2, #8]
 80039c2:	e0a7      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	f003 0320 	and.w	r3, r3, #32
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80039da:	461a      	mov	r2, r3
 80039dc:	2320      	movs	r3, #32
 80039de:	6093      	str	r3, [r2, #8]
 80039e0:	e098      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 8093 	bne.w	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	4a4b      	ldr	r2, [pc, #300]	@ (8003b20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d90f      	bls.n	8003a16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d00a      	beq.n	8003a16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	015a      	lsls	r2, r3, #5
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003a12:	6093      	str	r3, [r2, #8]
 8003a14:	e07e      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6a1a      	ldr	r2, [r3, #32]
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	0159      	lsls	r1, r3, #5
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	440b      	add	r3, r1
 8003a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a42:	1ad2      	subs	r2, r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d114      	bne.n	8003a78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d109      	bne.n	8003a6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a60:	461a      	mov	r2, r3
 8003a62:	2101      	movs	r1, #1
 8003a64:	f002 fc60 	bl	8006328 <USB_EP0_OutStart>
 8003a68:	e006      	b.n	8003a78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	441a      	add	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f004 fec8 	bl	8008814 <HAL_PCD_DataOutStageCallback>
 8003a84:	e046      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	4a26      	ldr	r2, [pc, #152]	@ (8003b24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d124      	bne.n	8003ad8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	015a      	lsls	r2, r3, #5
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003aaa:	6093      	str	r3, [r2, #8]
 8003aac:	e032      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d008      	beq.n	8003aca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	015a      	lsls	r2, r3, #5
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	4413      	add	r3, r2
 8003ac0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	2320      	movs	r3, #32
 8003ac8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	4619      	mov	r1, r3
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f004 fe9f 	bl	8008814 <HAL_PCD_DataOutStageCallback>
 8003ad6:	e01d      	b.n	8003b14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d114      	bne.n	8003b08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4413      	add	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d108      	bne.n	8003b08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b00:	461a      	mov	r2, r3
 8003b02:	2100      	movs	r1, #0
 8003b04:	f002 fc10 	bl	8006328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f004 fe80 	bl	8008814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3720      	adds	r7, #32
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	4f54300a 	.word	0x4f54300a
 8003b24:	4f54310a 	.word	0x4f54310a

08003b28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b086      	sub	sp, #24
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	333c      	adds	r3, #60	@ 0x3c
 8003b40:	3304      	adds	r3, #4
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a15      	ldr	r2, [pc, #84]	@ (8003bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d90e      	bls.n	8003b7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	015a      	lsls	r2, r3, #5
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003b74:	461a      	mov	r2, r3
 8003b76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f004 fe37 	bl	80087f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	4a0a      	ldr	r2, [pc, #40]	@ (8003bb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d90c      	bls.n	8003ba4 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	799b      	ldrb	r3, [r3, #6]
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d108      	bne.n	8003ba4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	2101      	movs	r1, #1
 8003ba0:	f002 fbc2 	bl	8006328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	4f54300a 	.word	0x4f54300a

08003bb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	70fb      	strb	r3, [r7, #3]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d107      	bne.n	8003be2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003bd2:	883b      	ldrh	r3, [r7, #0]
 8003bd4:	0419      	lsls	r1, r3, #16
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	629a      	str	r2, [r3, #40]	@ 0x28
 8003be0:	e028      	b.n	8003c34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	4413      	add	r3, r2
 8003bee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	73fb      	strb	r3, [r7, #15]
 8003bf4:	e00d      	b.n	8003c12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681a      	ldr	r2, [r3, #0]
 8003bfa:	7bfb      	ldrb	r3, [r7, #15]
 8003bfc:	3340      	adds	r3, #64	@ 0x40
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	0c1b      	lsrs	r3, r3, #16
 8003c06:	68ba      	ldr	r2, [r7, #8]
 8003c08:	4413      	add	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c0c:	7bfb      	ldrb	r3, [r7, #15]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	73fb      	strb	r3, [r7, #15]
 8003c12:	7bfa      	ldrb	r2, [r7, #15]
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3ec      	bcc.n	8003bf6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c1c:	883b      	ldrh	r3, [r7, #0]
 8003c1e:	0418      	lsls	r0, r3, #16
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6819      	ldr	r1, [r3, #0]
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	4302      	orrs	r2, r0
 8003c2c:	3340      	adds	r3, #64	@ 0x40
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	887a      	ldrh	r2, [r7, #2]
 8003c54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003c56:	2300      	movs	r3, #0
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr

08003c64 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b083      	sub	sp, #12
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e267      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d075      	beq.n	8003d86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003c9a:	4b88      	ldr	r3, [pc, #544]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 030c 	and.w	r3, r3, #12
 8003ca2:	2b04      	cmp	r3, #4
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ca6:	4b85      	ldr	r3, [pc, #532]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cae:	2b08      	cmp	r3, #8
 8003cb0:	d112      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cb2:	4b82      	ldr	r3, [pc, #520]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003cbe:	d10b      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cc0:	4b7e      	ldr	r3, [pc, #504]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d05b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x108>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d157      	bne.n	8003d84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e242      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ce0:	d106      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x74>
 8003ce2:	4b76      	ldr	r3, [pc, #472]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003ce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	e01d      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003cf8:	d10c      	bne.n	8003d14 <HAL_RCC_OscConfig+0x98>
 8003cfa:	4b70      	ldr	r3, [pc, #448]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a6f      	ldr	r2, [pc, #444]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	4b6d      	ldr	r3, [pc, #436]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6c      	ldr	r2, [pc, #432]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCC_OscConfig+0xb0>
 8003d14:	4b69      	ldr	r3, [pc, #420]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a68      	ldr	r2, [pc, #416]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d1e:	6013      	str	r3, [r2, #0]
 8003d20:	4b66      	ldr	r3, [pc, #408]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a65      	ldr	r2, [pc, #404]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d34:	f7fd f916 	bl	8000f64 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d3c:	f7fd f912 	bl	8000f64 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b64      	cmp	r3, #100	@ 0x64
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e207      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0xc0>
 8003d5a:	e014      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d5c:	f7fd f902 	bl	8000f64 <HAL_GetTick>
 8003d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d62:	e008      	b.n	8003d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d64:	f7fd f8fe 	bl	8000f64 <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	2b64      	cmp	r3, #100	@ 0x64
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e1f3      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d76:	4b51      	ldr	r3, [pc, #324]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1f0      	bne.n	8003d64 <HAL_RCC_OscConfig+0xe8>
 8003d82:	e000      	b.n	8003d86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d063      	beq.n	8003e5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003d92:	4b4a      	ldr	r3, [pc, #296]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d00b      	beq.n	8003db6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d9e:	4b47      	ldr	r3, [pc, #284]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d11c      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003daa:	4b44      	ldr	r3, [pc, #272]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d116      	bne.n	8003de4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	4b41      	ldr	r3, [pc, #260]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d005      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d001      	beq.n	8003dce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e1c7      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dce:	4b3b      	ldr	r3, [pc, #236]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	00db      	lsls	r3, r3, #3
 8003ddc:	4937      	ldr	r1, [pc, #220]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003de2:	e03a      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d020      	beq.n	8003e2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dec:	4b34      	ldr	r3, [pc, #208]	@ (8003ec0 <HAL_RCC_OscConfig+0x244>)
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df2:	f7fd f8b7 	bl	8000f64 <HAL_GetTick>
 8003df6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dfa:	f7fd f8b3 	bl	8000f64 <HAL_GetTick>
 8003dfe:	4602      	mov	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e1a8      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d0f0      	beq.n	8003dfa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e18:	4b28      	ldr	r3, [pc, #160]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00db      	lsls	r3, r3, #3
 8003e26:	4925      	ldr	r1, [pc, #148]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	600b      	str	r3, [r1, #0]
 8003e2c:	e015      	b.n	8003e5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e2e:	4b24      	ldr	r3, [pc, #144]	@ (8003ec0 <HAL_RCC_OscConfig+0x244>)
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fd f896 	bl	8000f64 <HAL_GetTick>
 8003e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e3a:	e008      	b.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3c:	f7fd f892 	bl	8000f64 <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e187      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0308 	and.w	r3, r3, #8
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d036      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d016      	beq.n	8003e9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e6e:	4b15      	ldr	r3, [pc, #84]	@ (8003ec4 <HAL_RCC_OscConfig+0x248>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e74:	f7fd f876 	bl	8000f64 <HAL_GetTick>
 8003e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e7c:	f7fd f872 	bl	8000f64 <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e167      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003ebc <HAL_RCC_OscConfig+0x240>)
 8003e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d0f0      	beq.n	8003e7c <HAL_RCC_OscConfig+0x200>
 8003e9a:	e01b      	b.n	8003ed4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e9c:	4b09      	ldr	r3, [pc, #36]	@ (8003ec4 <HAL_RCC_OscConfig+0x248>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ea2:	f7fd f85f 	bl	8000f64 <HAL_GetTick>
 8003ea6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ea8:	e00e      	b.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eaa:	f7fd f85b 	bl	8000f64 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d907      	bls.n	8003ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e150      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	42470000 	.word	0x42470000
 8003ec4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ec8:	4b88      	ldr	r3, [pc, #544]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003eca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1ea      	bne.n	8003eaa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8097 	beq.w	8004010 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ee6:	4b81      	ldr	r3, [pc, #516]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10f      	bne.n	8003f12 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	60bb      	str	r3, [r7, #8]
 8003ef6:	4b7d      	ldr	r3, [pc, #500]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	4a7c      	ldr	r2, [pc, #496]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f02:	4b7a      	ldr	r3, [pc, #488]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f0a:	60bb      	str	r3, [r7, #8]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f12:	4b77      	ldr	r3, [pc, #476]	@ (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d118      	bne.n	8003f50 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f1e:	4b74      	ldr	r3, [pc, #464]	@ (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a73      	ldr	r2, [pc, #460]	@ (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f2a:	f7fd f81b 	bl	8000f64 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f32:	f7fd f817 	bl	8000f64 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e10c      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f44:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCC_OscConfig+0x474>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b01      	cmp	r3, #1
 8003f56:	d106      	bne.n	8003f66 <HAL_RCC_OscConfig+0x2ea>
 8003f58:	4b64      	ldr	r3, [pc, #400]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f5c:	4a63      	ldr	r2, [pc, #396]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f5e:	f043 0301 	orr.w	r3, r3, #1
 8003f62:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f64:	e01c      	b.n	8003fa0 <HAL_RCC_OscConfig+0x324>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2b05      	cmp	r3, #5
 8003f6c:	d10c      	bne.n	8003f88 <HAL_RCC_OscConfig+0x30c>
 8003f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f72:	4a5e      	ldr	r2, [pc, #376]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f74:	f043 0304 	orr.w	r3, r3, #4
 8003f78:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f7a:	4b5c      	ldr	r3, [pc, #368]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f86:	e00b      	b.n	8003fa0 <HAL_RCC_OscConfig+0x324>
 8003f88:	4b58      	ldr	r3, [pc, #352]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	4a57      	ldr	r2, [pc, #348]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f8e:	f023 0301 	bic.w	r3, r3, #1
 8003f92:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f94:	4b55      	ldr	r3, [pc, #340]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f98:	4a54      	ldr	r2, [pc, #336]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003f9a:	f023 0304 	bic.w	r3, r3, #4
 8003f9e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d015      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fc ffdc 	bl	8000f64 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fc ffd8 	bl	8000f64 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0cb      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fc6:	4b49      	ldr	r3, [pc, #292]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0ee      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x334>
 8003fd2:	e014      	b.n	8003ffe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fd4:	f7fc ffc6 	bl	8000f64 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fda:	e00a      	b.n	8003ff2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fdc:	f7fc ffc2 	bl	8000f64 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d901      	bls.n	8003ff2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e0b5      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ff2:	4b3e      	ldr	r3, [pc, #248]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8003ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1ee      	bne.n	8003fdc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004004:	4b39      	ldr	r3, [pc, #228]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	4a38      	ldr	r2, [pc, #224]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 800400a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800400e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 80a1 	beq.w	800415c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800401a:	4b34      	ldr	r3, [pc, #208]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	f003 030c 	and.w	r3, r3, #12
 8004022:	2b08      	cmp	r3, #8
 8004024:	d05c      	beq.n	80040e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	2b02      	cmp	r3, #2
 800402c:	d141      	bne.n	80040b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800402e:	4b31      	ldr	r3, [pc, #196]	@ (80040f4 <HAL_RCC_OscConfig+0x478>)
 8004030:	2200      	movs	r2, #0
 8004032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fc ff96 	bl	8000f64 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800403c:	f7fc ff92 	bl	8000f64 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e087      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800404e:	4b27      	ldr	r3, [pc, #156]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	69da      	ldr	r2, [r3, #28]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004068:	019b      	lsls	r3, r3, #6
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
 8004076:	431a      	orrs	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	491b      	ldr	r1, [pc, #108]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004084:	4b1b      	ldr	r3, [pc, #108]	@ (80040f4 <HAL_RCC_OscConfig+0x478>)
 8004086:	2201      	movs	r2, #1
 8004088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408a:	f7fc ff6b 	bl	8000f64 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004090:	e008      	b.n	80040a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004092:	f7fc ff67 	bl	8000f64 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	2b02      	cmp	r3, #2
 800409e:	d901      	bls.n	80040a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040a0:	2303      	movs	r3, #3
 80040a2:	e05c      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d0f0      	beq.n	8004092 <HAL_RCC_OscConfig+0x416>
 80040b0:	e054      	b.n	800415c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b2:	4b10      	ldr	r3, [pc, #64]	@ (80040f4 <HAL_RCC_OscConfig+0x478>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b8:	f7fc ff54 	bl	8000f64 <HAL_GetTick>
 80040bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040be:	e008      	b.n	80040d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040c0:	f7fc ff50 	bl	8000f64 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e045      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040d2:	4b06      	ldr	r3, [pc, #24]	@ (80040ec <HAL_RCC_OscConfig+0x470>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1f0      	bne.n	80040c0 <HAL_RCC_OscConfig+0x444>
 80040de:	e03d      	b.n	800415c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d107      	bne.n	80040f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e038      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
 80040ec:	40023800 	.word	0x40023800
 80040f0:	40007000 	.word	0x40007000
 80040f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004168 <HAL_RCC_OscConfig+0x4ec>)
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	699b      	ldr	r3, [r3, #24]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d028      	beq.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004110:	429a      	cmp	r2, r3
 8004112:	d121      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800411e:	429a      	cmp	r2, r3
 8004120:	d11a      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800412e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004130:	4293      	cmp	r3, r2
 8004132:	d111      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	085b      	lsrs	r3, r3, #1
 8004140:	3b01      	subs	r3, #1
 8004142:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004144:	429a      	cmp	r2, r3
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004154:	429a      	cmp	r2, r3
 8004156:	d001      	beq.n	800415c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e000      	b.n	800415e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3718      	adds	r7, #24
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40023800 	.word	0x40023800

0800416c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0cc      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004180:	4b68      	ldr	r3, [pc, #416]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0307 	and.w	r3, r3, #7
 8004188:	683a      	ldr	r2, [r7, #0]
 800418a:	429a      	cmp	r2, r3
 800418c:	d90c      	bls.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800418e:	4b65      	ldr	r3, [pc, #404]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004196:	4b63      	ldr	r3, [pc, #396]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0307 	and.w	r3, r3, #7
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d001      	beq.n	80041a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e0b8      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d020      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80041c0:	4b59      	ldr	r3, [pc, #356]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	4a58      	ldr	r2, [pc, #352]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80041ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d005      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	4a52      	ldr	r2, [pc, #328]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80041e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041e4:	4b50      	ldr	r3, [pc, #320]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	494d      	ldr	r1, [pc, #308]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d044      	beq.n	800428c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2b01      	cmp	r3, #1
 8004208:	d107      	bne.n	800421a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420a:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d119      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	e07f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2b02      	cmp	r3, #2
 8004220:	d003      	beq.n	800422a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004226:	2b03      	cmp	r3, #3
 8004228:	d107      	bne.n	800423a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800422a:	4b3f      	ldr	r3, [pc, #252]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004236:	2301      	movs	r3, #1
 8004238:	e06f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800423a:	4b3b      	ldr	r3, [pc, #236]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d101      	bne.n	800424a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e067      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800424a:	4b37      	ldr	r3, [pc, #220]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f023 0203 	bic.w	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	4934      	ldr	r1, [pc, #208]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 8004258:	4313      	orrs	r3, r2
 800425a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800425c:	f7fc fe82 	bl	8000f64 <HAL_GetTick>
 8004260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004262:	e00a      	b.n	800427a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004264:	f7fc fe7e 	bl	8000f64 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004272:	4293      	cmp	r3, r2
 8004274:	d901      	bls.n	800427a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e04f      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800427a:	4b2b      	ldr	r3, [pc, #172]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	f003 020c 	and.w	r2, r3, #12
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	429a      	cmp	r2, r3
 800428a:	d1eb      	bne.n	8004264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800428c:	4b25      	ldr	r3, [pc, #148]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d20c      	bcs.n	80042b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b22      	ldr	r3, [pc, #136]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b20      	ldr	r3, [pc, #128]	@ (8004324 <HAL_RCC_ClockConfig+0x1b8>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d001      	beq.n	80042b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e032      	b.n	800431a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0304 	and.w	r3, r3, #4
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d008      	beq.n	80042d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c0:	4b19      	ldr	r3, [pc, #100]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	4916      	ldr	r1, [pc, #88]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0308 	and.w	r3, r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d009      	beq.n	80042f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042de:	4b12      	ldr	r3, [pc, #72]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	691b      	ldr	r3, [r3, #16]
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	490e      	ldr	r1, [pc, #56]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042ee:	4313      	orrs	r3, r2
 80042f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042f2:	f000 f821 	bl	8004338 <HAL_RCC_GetSysClockFreq>
 80042f6:	4602      	mov	r2, r0
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <HAL_RCC_ClockConfig+0x1bc>)
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	091b      	lsrs	r3, r3, #4
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	490a      	ldr	r1, [pc, #40]	@ (800432c <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	5ccb      	ldrb	r3, [r1, r3]
 8004306:	fa22 f303 	lsr.w	r3, r2, r3
 800430a:	4a09      	ldr	r2, [pc, #36]	@ (8004330 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800430e:	4b09      	ldr	r3, [pc, #36]	@ (8004334 <HAL_RCC_ClockConfig+0x1c8>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4618      	mov	r0, r3
 8004314:	f7fc fde2 	bl	8000edc <HAL_InitTick>

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	40023c00 	.word	0x40023c00
 8004328:	40023800 	.word	0x40023800
 800432c:	08008e28 	.word	0x08008e28
 8004330:	20000000 	.word	0x20000000
 8004334:	20000004 	.word	0x20000004

08004338 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800433c:	b094      	sub	sp, #80	@ 0x50
 800433e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004340:	2300      	movs	r3, #0
 8004342:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004344:	2300      	movs	r3, #0
 8004346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004348:	2300      	movs	r3, #0
 800434a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004350:	4b79      	ldr	r3, [pc, #484]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 030c 	and.w	r3, r3, #12
 8004358:	2b08      	cmp	r3, #8
 800435a:	d00d      	beq.n	8004378 <HAL_RCC_GetSysClockFreq+0x40>
 800435c:	2b08      	cmp	r3, #8
 800435e:	f200 80e1 	bhi.w	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d002      	beq.n	800436c <HAL_RCC_GetSysClockFreq+0x34>
 8004366:	2b04      	cmp	r3, #4
 8004368:	d003      	beq.n	8004372 <HAL_RCC_GetSysClockFreq+0x3a>
 800436a:	e0db      	b.n	8004524 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800436c:	4b73      	ldr	r3, [pc, #460]	@ (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 800436e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004370:	e0db      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004372:	4b73      	ldr	r3, [pc, #460]	@ (8004540 <HAL_RCC_GetSysClockFreq+0x208>)
 8004374:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004376:	e0d8      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004378:	4b6f      	ldr	r3, [pc, #444]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004380:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004382:	4b6d      	ldr	r3, [pc, #436]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d063      	beq.n	8004456 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800438e:	4b6a      	ldr	r3, [pc, #424]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	099b      	lsrs	r3, r3, #6
 8004394:	2200      	movs	r2, #0
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004398:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800439a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800439c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80043a2:	2300      	movs	r3, #0
 80043a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80043aa:	4622      	mov	r2, r4
 80043ac:	462b      	mov	r3, r5
 80043ae:	f04f 0000 	mov.w	r0, #0
 80043b2:	f04f 0100 	mov.w	r1, #0
 80043b6:	0159      	lsls	r1, r3, #5
 80043b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043bc:	0150      	lsls	r0, r2, #5
 80043be:	4602      	mov	r2, r0
 80043c0:	460b      	mov	r3, r1
 80043c2:	4621      	mov	r1, r4
 80043c4:	1a51      	subs	r1, r2, r1
 80043c6:	6139      	str	r1, [r7, #16]
 80043c8:	4629      	mov	r1, r5
 80043ca:	eb63 0301 	sbc.w	r3, r3, r1
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	f04f 0200 	mov.w	r2, #0
 80043d4:	f04f 0300 	mov.w	r3, #0
 80043d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043dc:	4659      	mov	r1, fp
 80043de:	018b      	lsls	r3, r1, #6
 80043e0:	4651      	mov	r1, sl
 80043e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80043e6:	4651      	mov	r1, sl
 80043e8:	018a      	lsls	r2, r1, #6
 80043ea:	4651      	mov	r1, sl
 80043ec:	ebb2 0801 	subs.w	r8, r2, r1
 80043f0:	4659      	mov	r1, fp
 80043f2:	eb63 0901 	sbc.w	r9, r3, r1
 80043f6:	f04f 0200 	mov.w	r2, #0
 80043fa:	f04f 0300 	mov.w	r3, #0
 80043fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004402:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004406:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800440a:	4690      	mov	r8, r2
 800440c:	4699      	mov	r9, r3
 800440e:	4623      	mov	r3, r4
 8004410:	eb18 0303 	adds.w	r3, r8, r3
 8004414:	60bb      	str	r3, [r7, #8]
 8004416:	462b      	mov	r3, r5
 8004418:	eb49 0303 	adc.w	r3, r9, r3
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800442a:	4629      	mov	r1, r5
 800442c:	024b      	lsls	r3, r1, #9
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004434:	4621      	mov	r1, r4
 8004436:	024a      	lsls	r2, r1, #9
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004442:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004444:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004448:	f7fb febe 	bl	80001c8 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004454:	e058      	b.n	8004508 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004456:	4b38      	ldr	r3, [pc, #224]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	099b      	lsrs	r3, r3, #6
 800445c:	2200      	movs	r2, #0
 800445e:	4618      	mov	r0, r3
 8004460:	4611      	mov	r1, r2
 8004462:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004466:	623b      	str	r3, [r7, #32]
 8004468:	2300      	movs	r3, #0
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
 800446c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	f04f 0000 	mov.w	r0, #0
 8004478:	f04f 0100 	mov.w	r1, #0
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004482:	0150      	lsls	r0, r2, #5
 8004484:	4602      	mov	r2, r0
 8004486:	460b      	mov	r3, r1
 8004488:	4641      	mov	r1, r8
 800448a:	ebb2 0a01 	subs.w	sl, r2, r1
 800448e:	4649      	mov	r1, r9
 8004490:	eb63 0b01 	sbc.w	fp, r3, r1
 8004494:	f04f 0200 	mov.w	r2, #0
 8004498:	f04f 0300 	mov.w	r3, #0
 800449c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80044a8:	ebb2 040a 	subs.w	r4, r2, sl
 80044ac:	eb63 050b 	sbc.w	r5, r3, fp
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	00eb      	lsls	r3, r5, #3
 80044ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044be:	00e2      	lsls	r2, r4, #3
 80044c0:	4614      	mov	r4, r2
 80044c2:	461d      	mov	r5, r3
 80044c4:	4643      	mov	r3, r8
 80044c6:	18e3      	adds	r3, r4, r3
 80044c8:	603b      	str	r3, [r7, #0]
 80044ca:	464b      	mov	r3, r9
 80044cc:	eb45 0303 	adc.w	r3, r5, r3
 80044d0:	607b      	str	r3, [r7, #4]
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044de:	4629      	mov	r1, r5
 80044e0:	028b      	lsls	r3, r1, #10
 80044e2:	4621      	mov	r1, r4
 80044e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044e8:	4621      	mov	r1, r4
 80044ea:	028a      	lsls	r2, r1, #10
 80044ec:	4610      	mov	r0, r2
 80044ee:	4619      	mov	r1, r3
 80044f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044f2:	2200      	movs	r2, #0
 80044f4:	61bb      	str	r3, [r7, #24]
 80044f6:	61fa      	str	r2, [r7, #28]
 80044f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044fc:	f7fb fe64 	bl	80001c8 <__aeabi_uldivmod>
 8004500:	4602      	mov	r2, r0
 8004502:	460b      	mov	r3, r1
 8004504:	4613      	mov	r3, r2
 8004506:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004508:	4b0b      	ldr	r3, [pc, #44]	@ (8004538 <HAL_RCC_GetSysClockFreq+0x200>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	0c1b      	lsrs	r3, r3, #16
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	3301      	adds	r3, #1
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004518:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800451a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800451c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004520:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004522:	e002      	b.n	800452a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004524:	4b05      	ldr	r3, [pc, #20]	@ (800453c <HAL_RCC_GetSysClockFreq+0x204>)
 8004526:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004528:	bf00      	nop
    }
  }
  return sysclockfreq;
 800452a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800452c:	4618      	mov	r0, r3
 800452e:	3750      	adds	r7, #80	@ 0x50
 8004530:	46bd      	mov	sp, r7
 8004532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004536:	bf00      	nop
 8004538:	40023800 	.word	0x40023800
 800453c:	00f42400 	.word	0x00f42400
 8004540:	007a1200 	.word	0x007a1200

08004544 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004544:	b480      	push	{r7}
 8004546:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004548:	4b03      	ldr	r3, [pc, #12]	@ (8004558 <HAL_RCC_GetHCLKFreq+0x14>)
 800454a:	681b      	ldr	r3, [r3, #0]
}
 800454c:	4618      	mov	r0, r3
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20000000 	.word	0x20000000

0800455c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004560:	f7ff fff0 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 8004564:	4602      	mov	r2, r0
 8004566:	4b05      	ldr	r3, [pc, #20]	@ (800457c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	0a9b      	lsrs	r3, r3, #10
 800456c:	f003 0307 	and.w	r3, r3, #7
 8004570:	4903      	ldr	r1, [pc, #12]	@ (8004580 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004572:	5ccb      	ldrb	r3, [r1, r3]
 8004574:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004578:	4618      	mov	r0, r3
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	08008e38 	.word	0x08008e38

08004584 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004588:	f7ff ffdc 	bl	8004544 <HAL_RCC_GetHCLKFreq>
 800458c:	4602      	mov	r2, r0
 800458e:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	0b5b      	lsrs	r3, r3, #13
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	4903      	ldr	r1, [pc, #12]	@ (80045a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800459a:	5ccb      	ldrb	r3, [r1, r3]
 800459c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	40023800 	.word	0x40023800
 80045a8:	08008e38 	.word	0x08008e38

080045ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d105      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d035      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80045d4:	4b62      	ldr	r3, [pc, #392]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80045da:	f7fc fcc3 	bl	8000f64 <HAL_GetTick>
 80045de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045e0:	e008      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80045e2:	f7fc fcbf 	bl	8000f64 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	d901      	bls.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e0b0      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80045f4:	4b5b      	ldr	r3, [pc, #364]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1f0      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	019a      	lsls	r2, r3, #6
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	071b      	lsls	r3, r3, #28
 800460c:	4955      	ldr	r1, [pc, #340]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460e:	4313      	orrs	r3, r2
 8004610:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004614:	4b52      	ldr	r3, [pc, #328]	@ (8004760 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004616:	2201      	movs	r2, #1
 8004618:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800461a:	f7fc fca3 	bl	8000f64 <HAL_GetTick>
 800461e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004620:	e008      	b.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004622:	f7fc fc9f 	bl	8000f64 <HAL_GetTick>
 8004626:	4602      	mov	r2, r0
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	1ad3      	subs	r3, r2, r3
 800462c:	2b02      	cmp	r3, #2
 800462e:	d901      	bls.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004630:	2303      	movs	r3, #3
 8004632:	e090      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004634:	4b4b      	ldr	r3, [pc, #300]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d0f0      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0302 	and.w	r3, r3, #2
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 8083 	beq.w	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	4b44      	ldr	r3, [pc, #272]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	4a43      	ldr	r2, [pc, #268]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800465c:	6413      	str	r3, [r2, #64]	@ 0x40
 800465e:	4b41      	ldr	r3, [pc, #260]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004662:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004666:	60fb      	str	r3, [r7, #12]
 8004668:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800466a:	4b3f      	ldr	r3, [pc, #252]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a3e      	ldr	r2, [pc, #248]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004670:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004674:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004676:	f7fc fc75 	bl	8000f64 <HAL_GetTick>
 800467a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800467e:	f7fc fc71 	bl	8000f64 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e062      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004690:	4b35      	ldr	r3, [pc, #212]	@ (8004768 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800469c:	4b31      	ldr	r3, [pc, #196]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d02f      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d028      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046c4:	4b29      	ldr	r3, [pc, #164]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046ca:	4b28      	ldr	r3, [pc, #160]	@ (800476c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80046d0:	4a24      	ldr	r2, [pc, #144]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046d6:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80046d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d114      	bne.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80046e2:	f7fc fc3f 	bl	8000f64 <HAL_GetTick>
 80046e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	e00a      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ea:	f7fc fc3b 	bl	8000f64 <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d901      	bls.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80046fc:	2303      	movs	r3, #3
 80046fe:	e02a      	b.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004700:	4b18      	ldr	r3, [pc, #96]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004702:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d0ee      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	68db      	ldr	r3, [r3, #12]
 8004710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004714:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004718:	d10d      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800471a:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800472a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472e:	490d      	ldr	r1, [pc, #52]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004730:	4313      	orrs	r3, r2
 8004732:	608b      	str	r3, [r1, #8]
 8004734:	e005      	b.n	8004742 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004736:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	4a0a      	ldr	r2, [pc, #40]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800473c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004740:	6093      	str	r3, [r2, #8]
 8004742:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004744:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474e:	4905      	ldr	r1, [pc, #20]	@ (8004764 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004750:	4313      	orrs	r3, r2
 8004752:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3718      	adds	r7, #24
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	42470068 	.word	0x42470068
 8004764:	40023800 	.word	0x40023800
 8004768:	40007000 	.word	0x40007000
 800476c:	42470e40 	.word	0x42470e40

08004770 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004770:	b480      	push	{r7}
 8004772:	b087      	sub	sp, #28
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004778:	2300      	movs	r3, #0
 800477a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d13f      	bne.n	800480e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800478e:	4b24      	ldr	r3, [pc, #144]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004796:	60fb      	str	r3, [r7, #12]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d006      	beq.n	80047ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80047a4:	d12f      	bne.n	8004806 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80047a6:	4b1f      	ldr	r3, [pc, #124]	@ (8004824 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80047a8:	617b      	str	r3, [r7, #20]
          break;
 80047aa:	e02f      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80047ac:	4b1c      	ldr	r3, [pc, #112]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80047b8:	d108      	bne.n	80047cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047ba:	4b19      	ldr	r3, [pc, #100]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047c2:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80047c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e007      	b.n	80047dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80047cc:	4b14      	ldr	r3, [pc, #80]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047d4:	4a15      	ldr	r2, [pc, #84]	@ (800482c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80047dc:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047e2:	099b      	lsrs	r3, r3, #6
 80047e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80047f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004820 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80047f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047f6:	0f1b      	lsrs	r3, r3, #28
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004802:	617b      	str	r3, [r7, #20]
          break;
 8004804:	e002      	b.n	800480c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
          break;
 800480a:	bf00      	nop
        }
      }
      break;
 800480c:	e000      	b.n	8004810 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800480e:	bf00      	nop
    }
  }
  return frequency;
 8004810:	697b      	ldr	r3, [r7, #20]
}
 8004812:	4618      	mov	r0, r3
 8004814:	371c      	adds	r7, #28
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800
 8004824:	00bb8000 	.word	0x00bb8000
 8004828:	007a1200 	.word	0x007a1200
 800482c:	00f42400 	.word	0x00f42400

08004830 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e042      	b.n	80048c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fc faac 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2224      	movs	r2, #36	@ 0x24
 8004860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004872:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f82b 	bl	80048d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004888:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	695a      	ldr	r2, [r3, #20]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004898:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	68da      	ldr	r2, [r3, #12]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2220      	movs	r2, #32
 80048b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048d4:	b0c0      	sub	sp, #256	@ 0x100
 80048d6:	af00      	add	r7, sp, #0
 80048d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048ec:	68d9      	ldr	r1, [r3, #12]
 80048ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	ea40 0301 	orr.w	r3, r0, r1
 80048f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	431a      	orrs	r2, r3
 8004908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4313      	orrs	r3, r2
 8004918:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004928:	f021 010c 	bic.w	r1, r1, #12
 800492c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004936:	430b      	orrs	r3, r1
 8004938:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800493a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	695b      	ldr	r3, [r3, #20]
 8004942:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494a:	6999      	ldr	r1, [r3, #24]
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	ea40 0301 	orr.w	r3, r0, r1
 8004956:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b8f      	ldr	r3, [pc, #572]	@ (8004b9c <UART_SetConfig+0x2cc>)
 8004960:	429a      	cmp	r2, r3
 8004962:	d005      	beq.n	8004970 <UART_SetConfig+0xa0>
 8004964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	4b8d      	ldr	r3, [pc, #564]	@ (8004ba0 <UART_SetConfig+0x2d0>)
 800496c:	429a      	cmp	r2, r3
 800496e:	d104      	bne.n	800497a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004970:	f7ff fe08 	bl	8004584 <HAL_RCC_GetPCLK2Freq>
 8004974:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004978:	e003      	b.n	8004982 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800497a:	f7ff fdef 	bl	800455c <HAL_RCC_GetPCLK1Freq>
 800497e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800498c:	f040 810c 	bne.w	8004ba8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004990:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004994:	2200      	movs	r2, #0
 8004996:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800499a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800499e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80049a2:	4622      	mov	r2, r4
 80049a4:	462b      	mov	r3, r5
 80049a6:	1891      	adds	r1, r2, r2
 80049a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80049aa:	415b      	adcs	r3, r3
 80049ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80049b2:	4621      	mov	r1, r4
 80049b4:	eb12 0801 	adds.w	r8, r2, r1
 80049b8:	4629      	mov	r1, r5
 80049ba:	eb43 0901 	adc.w	r9, r3, r1
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d2:	4690      	mov	r8, r2
 80049d4:	4699      	mov	r9, r3
 80049d6:	4623      	mov	r3, r4
 80049d8:	eb18 0303 	adds.w	r3, r8, r3
 80049dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049e0:	462b      	mov	r3, r5
 80049e2:	eb49 0303 	adc.w	r3, r9, r3
 80049e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049fe:	460b      	mov	r3, r1
 8004a00:	18db      	adds	r3, r3, r3
 8004a02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004a04:	4613      	mov	r3, r2
 8004a06:	eb42 0303 	adc.w	r3, r2, r3
 8004a0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004a10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004a14:	f7fb fbd8 	bl	80001c8 <__aeabi_uldivmod>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	460b      	mov	r3, r1
 8004a1c:	4b61      	ldr	r3, [pc, #388]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a22:	095b      	lsrs	r3, r3, #5
 8004a24:	011c      	lsls	r4, r3, #4
 8004a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004a34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	1891      	adds	r1, r2, r2
 8004a3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a40:	415b      	adcs	r3, r3
 8004a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a48:	4641      	mov	r1, r8
 8004a4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a4e:	4649      	mov	r1, r9
 8004a50:	eb43 0b01 	adc.w	fp, r3, r1
 8004a54:	f04f 0200 	mov.w	r2, #0
 8004a58:	f04f 0300 	mov.w	r3, #0
 8004a5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a68:	4692      	mov	sl, r2
 8004a6a:	469b      	mov	fp, r3
 8004a6c:	4643      	mov	r3, r8
 8004a6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a76:	464b      	mov	r3, r9
 8004a78:	eb4b 0303 	adc.w	r3, fp, r3
 8004a7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a94:	460b      	mov	r3, r1
 8004a96:	18db      	adds	r3, r3, r3
 8004a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	eb42 0303 	adc.w	r3, r2, r3
 8004aa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004aa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004aa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004aaa:	f7fb fb8d 	bl	80001c8 <__aeabi_uldivmod>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004ab6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2264      	movs	r2, #100	@ 0x64
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	1acb      	subs	r3, r1, r3
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004aca:	4b36      	ldr	r3, [pc, #216]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004acc:	fba3 2302 	umull	r2, r3, r3, r2
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004ad8:	441c      	add	r4, r3
 8004ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ade:	2200      	movs	r2, #0
 8004ae0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ae4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004ae8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004aec:	4642      	mov	r2, r8
 8004aee:	464b      	mov	r3, r9
 8004af0:	1891      	adds	r1, r2, r2
 8004af2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004af4:	415b      	adcs	r3, r3
 8004af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004af8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004afc:	4641      	mov	r1, r8
 8004afe:	1851      	adds	r1, r2, r1
 8004b00:	6339      	str	r1, [r7, #48]	@ 0x30
 8004b02:	4649      	mov	r1, r9
 8004b04:	414b      	adcs	r3, r1
 8004b06:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b08:	f04f 0200 	mov.w	r2, #0
 8004b0c:	f04f 0300 	mov.w	r3, #0
 8004b10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004b14:	4659      	mov	r1, fp
 8004b16:	00cb      	lsls	r3, r1, #3
 8004b18:	4651      	mov	r1, sl
 8004b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b1e:	4651      	mov	r1, sl
 8004b20:	00ca      	lsls	r2, r1, #3
 8004b22:	4610      	mov	r0, r2
 8004b24:	4619      	mov	r1, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	4642      	mov	r2, r8
 8004b2a:	189b      	adds	r3, r3, r2
 8004b2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b30:	464b      	mov	r3, r9
 8004b32:	460a      	mov	r2, r1
 8004b34:	eb42 0303 	adc.w	r3, r2, r3
 8004b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b50:	460b      	mov	r3, r1
 8004b52:	18db      	adds	r3, r3, r3
 8004b54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b56:	4613      	mov	r3, r2
 8004b58:	eb42 0303 	adc.w	r3, r2, r3
 8004b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b66:	f7fb fb2f 	bl	80001c8 <__aeabi_uldivmod>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004b70:	fba3 1302 	umull	r1, r3, r3, r2
 8004b74:	095b      	lsrs	r3, r3, #5
 8004b76:	2164      	movs	r1, #100	@ 0x64
 8004b78:	fb01 f303 	mul.w	r3, r1, r3
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	3332      	adds	r3, #50	@ 0x32
 8004b82:	4a08      	ldr	r2, [pc, #32]	@ (8004ba4 <UART_SetConfig+0x2d4>)
 8004b84:	fba2 2303 	umull	r2, r3, r2, r3
 8004b88:	095b      	lsrs	r3, r3, #5
 8004b8a:	f003 0207 	and.w	r2, r3, #7
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4422      	add	r2, r4
 8004b96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b98:	e106      	b.n	8004da8 <UART_SetConfig+0x4d8>
 8004b9a:	bf00      	nop
 8004b9c:	40011000 	.word	0x40011000
 8004ba0:	40011400 	.word	0x40011400
 8004ba4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ba8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bac:	2200      	movs	r2, #0
 8004bae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004bb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004bb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004bba:	4642      	mov	r2, r8
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	1891      	adds	r1, r2, r2
 8004bc0:	6239      	str	r1, [r7, #32]
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bca:	4641      	mov	r1, r8
 8004bcc:	1854      	adds	r4, r2, r1
 8004bce:	4649      	mov	r1, r9
 8004bd0:	eb43 0501 	adc.w	r5, r3, r1
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	00eb      	lsls	r3, r5, #3
 8004bde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004be2:	00e2      	lsls	r2, r4, #3
 8004be4:	4614      	mov	r4, r2
 8004be6:	461d      	mov	r5, r3
 8004be8:	4643      	mov	r3, r8
 8004bea:	18e3      	adds	r3, r4, r3
 8004bec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bf0:	464b      	mov	r3, r9
 8004bf2:	eb45 0303 	adc.w	r3, r5, r3
 8004bf6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004c06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004c0a:	f04f 0200 	mov.w	r2, #0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004c16:	4629      	mov	r1, r5
 8004c18:	008b      	lsls	r3, r1, #2
 8004c1a:	4621      	mov	r1, r4
 8004c1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c20:	4621      	mov	r1, r4
 8004c22:	008a      	lsls	r2, r1, #2
 8004c24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004c28:	f7fb face 	bl	80001c8 <__aeabi_uldivmod>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	4b60      	ldr	r3, [pc, #384]	@ (8004db4 <UART_SetConfig+0x4e4>)
 8004c32:	fba3 2302 	umull	r2, r3, r3, r2
 8004c36:	095b      	lsrs	r3, r3, #5
 8004c38:	011c      	lsls	r4, r3, #4
 8004c3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	464b      	mov	r3, r9
 8004c50:	1891      	adds	r1, r2, r2
 8004c52:	61b9      	str	r1, [r7, #24]
 8004c54:	415b      	adcs	r3, r3
 8004c56:	61fb      	str	r3, [r7, #28]
 8004c58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	1851      	adds	r1, r2, r1
 8004c60:	6139      	str	r1, [r7, #16]
 8004c62:	4649      	mov	r1, r9
 8004c64:	414b      	adcs	r3, r1
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	f04f 0200 	mov.w	r2, #0
 8004c6c:	f04f 0300 	mov.w	r3, #0
 8004c70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c74:	4659      	mov	r1, fp
 8004c76:	00cb      	lsls	r3, r1, #3
 8004c78:	4651      	mov	r1, sl
 8004c7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c7e:	4651      	mov	r1, sl
 8004c80:	00ca      	lsls	r2, r1, #3
 8004c82:	4610      	mov	r0, r2
 8004c84:	4619      	mov	r1, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	4642      	mov	r2, r8
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c90:	464b      	mov	r3, r9
 8004c92:	460a      	mov	r2, r1
 8004c94:	eb42 0303 	adc.w	r3, r2, r3
 8004c98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ca6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ca8:	f04f 0200 	mov.w	r2, #0
 8004cac:	f04f 0300 	mov.w	r3, #0
 8004cb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004cb4:	4649      	mov	r1, r9
 8004cb6:	008b      	lsls	r3, r1, #2
 8004cb8:	4641      	mov	r1, r8
 8004cba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cbe:	4641      	mov	r1, r8
 8004cc0:	008a      	lsls	r2, r1, #2
 8004cc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004cc6:	f7fb fa7f 	bl	80001c8 <__aeabi_uldivmod>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	460b      	mov	r3, r1
 8004cce:	4611      	mov	r1, r2
 8004cd0:	4b38      	ldr	r3, [pc, #224]	@ (8004db4 <UART_SetConfig+0x4e4>)
 8004cd2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	2264      	movs	r2, #100	@ 0x64
 8004cda:	fb02 f303 	mul.w	r3, r2, r3
 8004cde:	1acb      	subs	r3, r1, r3
 8004ce0:	011b      	lsls	r3, r3, #4
 8004ce2:	3332      	adds	r3, #50	@ 0x32
 8004ce4:	4a33      	ldr	r2, [pc, #204]	@ (8004db4 <UART_SetConfig+0x4e4>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	095b      	lsrs	r3, r3, #5
 8004cec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cf0:	441c      	add	r4, r3
 8004cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cfa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cfc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004d00:	4642      	mov	r2, r8
 8004d02:	464b      	mov	r3, r9
 8004d04:	1891      	adds	r1, r2, r2
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	415b      	adcs	r3, r3
 8004d0a:	60fb      	str	r3, [r7, #12]
 8004d0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d10:	4641      	mov	r1, r8
 8004d12:	1851      	adds	r1, r2, r1
 8004d14:	6039      	str	r1, [r7, #0]
 8004d16:	4649      	mov	r1, r9
 8004d18:	414b      	adcs	r3, r1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d28:	4659      	mov	r1, fp
 8004d2a:	00cb      	lsls	r3, r1, #3
 8004d2c:	4651      	mov	r1, sl
 8004d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d32:	4651      	mov	r1, sl
 8004d34:	00ca      	lsls	r2, r1, #3
 8004d36:	4610      	mov	r0, r2
 8004d38:	4619      	mov	r1, r3
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	189b      	adds	r3, r3, r2
 8004d40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d42:	464b      	mov	r3, r9
 8004d44:	460a      	mov	r2, r1
 8004d46:	eb42 0303 	adc.w	r3, r2, r3
 8004d4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d56:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d58:	f04f 0200 	mov.w	r2, #0
 8004d5c:	f04f 0300 	mov.w	r3, #0
 8004d60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d64:	4649      	mov	r1, r9
 8004d66:	008b      	lsls	r3, r1, #2
 8004d68:	4641      	mov	r1, r8
 8004d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d6e:	4641      	mov	r1, r8
 8004d70:	008a      	lsls	r2, r1, #2
 8004d72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d76:	f7fb fa27 	bl	80001c8 <__aeabi_uldivmod>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004db4 <UART_SetConfig+0x4e4>)
 8004d80:	fba3 1302 	umull	r1, r3, r3, r2
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	2164      	movs	r1, #100	@ 0x64
 8004d88:	fb01 f303 	mul.w	r3, r1, r3
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	3332      	adds	r3, #50	@ 0x32
 8004d92:	4a08      	ldr	r2, [pc, #32]	@ (8004db4 <UART_SetConfig+0x4e4>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	095b      	lsrs	r3, r3, #5
 8004d9a:	f003 020f 	and.w	r2, r3, #15
 8004d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4422      	add	r2, r4
 8004da6:	609a      	str	r2, [r3, #8]
}
 8004da8:	bf00      	nop
 8004daa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004dae:	46bd      	mov	sp, r7
 8004db0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004db4:	51eb851f 	.word	0x51eb851f

08004db8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004db8:	b084      	sub	sp, #16
 8004dba:	b580      	push	{r7, lr}
 8004dbc:	b084      	sub	sp, #16
 8004dbe:	af00      	add	r7, sp, #0
 8004dc0:	6078      	str	r0, [r7, #4]
 8004dc2:	f107 001c 	add.w	r0, r7, #28
 8004dc6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004dca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d123      	bne.n	8004e1a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004dfa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d105      	bne.n	8004e0e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e0e:	6878      	ldr	r0, [r7, #4]
 8004e10:	f001 fae8 	bl	80063e4 <USB_CoreReset>
 8004e14:	4603      	mov	r3, r0
 8004e16:	73fb      	strb	r3, [r7, #15]
 8004e18:	e01b      	b.n	8004e52 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f001 fadc 	bl	80063e4 <USB_CoreReset>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e30:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e3c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e44:	e005      	b.n	8004e52 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e52:	7fbb      	ldrb	r3, [r7, #30]
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d10b      	bne.n	8004e70 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f043 0206 	orr.w	r2, r3, #6
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f043 0220 	orr.w	r2, r3, #32
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3710      	adds	r7, #16
 8004e76:	46bd      	mov	sp, r7
 8004e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e7c:	b004      	add	sp, #16
 8004e7e:	4770      	bx	lr

08004e80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004e8e:	79fb      	ldrb	r3, [r7, #7]
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d165      	bne.n	8004f60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	4a41      	ldr	r2, [pc, #260]	@ (8004f9c <USB_SetTurnaroundTime+0x11c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d906      	bls.n	8004eaa <USB_SetTurnaroundTime+0x2a>
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4a40      	ldr	r2, [pc, #256]	@ (8004fa0 <USB_SetTurnaroundTime+0x120>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d202      	bcs.n	8004eaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004ea4:	230f      	movs	r3, #15
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e062      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4a3c      	ldr	r2, [pc, #240]	@ (8004fa0 <USB_SetTurnaroundTime+0x120>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d306      	bcc.n	8004ec0 <USB_SetTurnaroundTime+0x40>
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	4a3b      	ldr	r2, [pc, #236]	@ (8004fa4 <USB_SetTurnaroundTime+0x124>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d202      	bcs.n	8004ec0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004eba:	230e      	movs	r3, #14
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	e057      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	4a38      	ldr	r2, [pc, #224]	@ (8004fa4 <USB_SetTurnaroundTime+0x124>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d306      	bcc.n	8004ed6 <USB_SetTurnaroundTime+0x56>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4a37      	ldr	r2, [pc, #220]	@ (8004fa8 <USB_SetTurnaroundTime+0x128>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d202      	bcs.n	8004ed6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004ed0:	230d      	movs	r3, #13
 8004ed2:	617b      	str	r3, [r7, #20]
 8004ed4:	e04c      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	4a33      	ldr	r2, [pc, #204]	@ (8004fa8 <USB_SetTurnaroundTime+0x128>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d306      	bcc.n	8004eec <USB_SetTurnaroundTime+0x6c>
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	4a32      	ldr	r2, [pc, #200]	@ (8004fac <USB_SetTurnaroundTime+0x12c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d802      	bhi.n	8004eec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ee6:	230c      	movs	r3, #12
 8004ee8:	617b      	str	r3, [r7, #20]
 8004eea:	e041      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	4a2f      	ldr	r2, [pc, #188]	@ (8004fac <USB_SetTurnaroundTime+0x12c>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d906      	bls.n	8004f02 <USB_SetTurnaroundTime+0x82>
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb0 <USB_SetTurnaroundTime+0x130>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d802      	bhi.n	8004f02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004efc:	230b      	movs	r3, #11
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	e036      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb0 <USB_SetTurnaroundTime+0x130>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d906      	bls.n	8004f18 <USB_SetTurnaroundTime+0x98>
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	4a29      	ldr	r2, [pc, #164]	@ (8004fb4 <USB_SetTurnaroundTime+0x134>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d802      	bhi.n	8004f18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004f12:	230a      	movs	r3, #10
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e02b      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4a26      	ldr	r2, [pc, #152]	@ (8004fb4 <USB_SetTurnaroundTime+0x134>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d906      	bls.n	8004f2e <USB_SetTurnaroundTime+0xae>
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	4a25      	ldr	r2, [pc, #148]	@ (8004fb8 <USB_SetTurnaroundTime+0x138>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d202      	bcs.n	8004f2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004f28:	2309      	movs	r3, #9
 8004f2a:	617b      	str	r3, [r7, #20]
 8004f2c:	e020      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4a21      	ldr	r2, [pc, #132]	@ (8004fb8 <USB_SetTurnaroundTime+0x138>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d306      	bcc.n	8004f44 <USB_SetTurnaroundTime+0xc4>
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	4a20      	ldr	r2, [pc, #128]	@ (8004fbc <USB_SetTurnaroundTime+0x13c>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d802      	bhi.n	8004f44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004f3e:	2308      	movs	r3, #8
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e015      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4a1d      	ldr	r2, [pc, #116]	@ (8004fbc <USB_SetTurnaroundTime+0x13c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d906      	bls.n	8004f5a <USB_SetTurnaroundTime+0xda>
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc0 <USB_SetTurnaroundTime+0x140>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d202      	bcs.n	8004f5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004f54:	2307      	movs	r3, #7
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	e00a      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004f5a:	2306      	movs	r3, #6
 8004f5c:	617b      	str	r3, [r7, #20]
 8004f5e:	e007      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004f60:	79fb      	ldrb	r3, [r7, #7]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004f66:	2309      	movs	r3, #9
 8004f68:	617b      	str	r3, [r7, #20]
 8004f6a:	e001      	b.n	8004f70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004f6c:	2309      	movs	r3, #9
 8004f6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	029b      	lsls	r3, r3, #10
 8004f84:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004f88:	431a      	orrs	r2, r3
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr
 8004f9c:	00d8acbf 	.word	0x00d8acbf
 8004fa0:	00e4e1c0 	.word	0x00e4e1c0
 8004fa4:	00f42400 	.word	0x00f42400
 8004fa8:	01067380 	.word	0x01067380
 8004fac:	011a499f 	.word	0x011a499f
 8004fb0:	01312cff 	.word	0x01312cff
 8004fb4:	014ca43f 	.word	0x014ca43f
 8004fb8:	016e3600 	.word	0x016e3600
 8004fbc:	01a6ab1f 	.word	0x01a6ab1f
 8004fc0:	01e84800 	.word	0x01e84800

08004fc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f043 0201 	orr.w	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	370c      	adds	r7, #12
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fe6:	b480      	push	{r7}
 8004fe8:	b083      	sub	sp, #12
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	460b      	mov	r3, r1
 8005012:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	2b01      	cmp	r3, #1
 8005028:	d115      	bne.n	8005056 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005036:	200a      	movs	r0, #10
 8005038:	f7fb ffa0 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	330a      	adds	r3, #10
 8005040:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 f93f 	bl	80062c6 <USB_GetMode>
 8005048:	4603      	mov	r3, r0
 800504a:	2b01      	cmp	r3, #1
 800504c:	d01e      	beq.n	800508c <USB_SetCurrentMode+0x84>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2bc7      	cmp	r3, #199	@ 0xc7
 8005052:	d9f0      	bls.n	8005036 <USB_SetCurrentMode+0x2e>
 8005054:	e01a      	b.n	800508c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005056:	78fb      	ldrb	r3, [r7, #3]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d115      	bne.n	8005088 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	68db      	ldr	r3, [r3, #12]
 8005060:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005068:	200a      	movs	r0, #10
 800506a:	f7fb ff87 	bl	8000f7c <HAL_Delay>
      ms += 10U;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	330a      	adds	r3, #10
 8005072:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f001 f926 	bl	80062c6 <USB_GetMode>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <USB_SetCurrentMode+0x84>
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2bc7      	cmp	r3, #199	@ 0xc7
 8005084:	d9f0      	bls.n	8005068 <USB_SetCurrentMode+0x60>
 8005086:	e001      	b.n	800508c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e005      	b.n	8005098 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2bc8      	cmp	r3, #200	@ 0xc8
 8005090:	d101      	bne.n	8005096 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e000      	b.n	8005098 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005096:	2300      	movs	r3, #0
}
 8005098:	4618      	mov	r0, r3
 800509a:	3710      	adds	r7, #16
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}

080050a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050a0:	b084      	sub	sp, #16
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b086      	sub	sp, #24
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80050ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050ba:	2300      	movs	r3, #0
 80050bc:	613b      	str	r3, [r7, #16]
 80050be:	e009      	b.n	80050d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	3340      	adds	r3, #64	@ 0x40
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	2200      	movs	r2, #0
 80050cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	3301      	adds	r3, #1
 80050d2:	613b      	str	r3, [r7, #16]
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	2b0e      	cmp	r3, #14
 80050d8:	d9f2      	bls.n	80050c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80050da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d11c      	bne.n	800511c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80050f0:	f043 0302 	orr.w	r3, r3, #2
 80050f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005106:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005112:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	639a      	str	r2, [r3, #56]	@ 0x38
 800511a:	e00b      	b.n	8005134 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005120:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800512c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800513a:	461a      	mov	r2, r3
 800513c:	2300      	movs	r3, #0
 800513e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005140:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8005144:	2b01      	cmp	r3, #1
 8005146:	d10d      	bne.n	8005164 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005148:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800514c:	2b00      	cmp	r3, #0
 800514e:	d104      	bne.n	800515a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005150:	2100      	movs	r1, #0
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f968 	bl	8005428 <USB_SetDevSpeed>
 8005158:	e008      	b.n	800516c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800515a:	2101      	movs	r1, #1
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f963 	bl	8005428 <USB_SetDevSpeed>
 8005162:	e003      	b.n	800516c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005164:	2103      	movs	r1, #3
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f95e 	bl	8005428 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800516c:	2110      	movs	r1, #16
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f8fa 	bl	8005368 <USB_FlushTxFifo>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f924 	bl	80053cc <USB_FlushRxFifo>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005194:	461a      	mov	r2, r3
 8005196:	2300      	movs	r3, #0
 8005198:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a0:	461a      	mov	r2, r3
 80051a2:	2300      	movs	r3, #0
 80051a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ac:	461a      	mov	r2, r3
 80051ae:	2300      	movs	r3, #0
 80051b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051b2:	2300      	movs	r3, #0
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e043      	b.n	8005240 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051ce:	d118      	bne.n	8005202 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051e2:	461a      	mov	r2, r3
 80051e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e013      	b.n	8005214 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051f8:	461a      	mov	r2, r3
 80051fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80051fe:	6013      	str	r3, [r2, #0]
 8005200:	e008      	b.n	8005214 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800520e:	461a      	mov	r2, r3
 8005210:	2300      	movs	r3, #0
 8005212:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	015a      	lsls	r2, r3, #5
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4413      	add	r3, r2
 800521c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005220:	461a      	mov	r2, r3
 8005222:	2300      	movs	r3, #0
 8005224:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005232:	461a      	mov	r2, r3
 8005234:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005238:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3301      	adds	r3, #1
 800523e:	613b      	str	r3, [r7, #16]
 8005240:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005244:	461a      	mov	r2, r3
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4293      	cmp	r3, r2
 800524a:	d3b5      	bcc.n	80051b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800524c:	2300      	movs	r3, #0
 800524e:	613b      	str	r3, [r7, #16]
 8005250:	e043      	b.n	80052da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	015a      	lsls	r2, r3, #5
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005264:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005268:	d118      	bne.n	800529c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800527c:	461a      	mov	r2, r3
 800527e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005282:	6013      	str	r3, [r2, #0]
 8005284:	e013      	b.n	80052ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	461a      	mov	r2, r3
 8005294:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005298:	6013      	str	r3, [r2, #0]
 800529a:	e008      	b.n	80052ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052a8:	461a      	mov	r2, r3
 80052aa:	2300      	movs	r3, #0
 80052ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	015a      	lsls	r2, r3, #5
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	4413      	add	r3, r2
 80052b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052ba:	461a      	mov	r2, r3
 80052bc:	2300      	movs	r3, #0
 80052be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052cc:	461a      	mov	r2, r3
 80052ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	3301      	adds	r3, #1
 80052d8:	613b      	str	r3, [r7, #16]
 80052da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80052de:	461a      	mov	r2, r3
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d3b5      	bcc.n	8005252 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80052f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005306:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005308:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800530c:	2b00      	cmp	r3, #0
 800530e:	d105      	bne.n	800531c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	699b      	ldr	r3, [r3, #24]
 8005314:	f043 0210 	orr.w	r2, r3, #16
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	699a      	ldr	r2, [r3, #24]
 8005320:	4b10      	ldr	r3, [pc, #64]	@ (8005364 <USB_DevInit+0x2c4>)
 8005322:	4313      	orrs	r3, r2
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005328:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f043 0208 	orr.w	r2, r3, #8
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800533c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800534c:	f043 0304 	orr.w	r3, r3, #4
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005354:	7dfb      	ldrb	r3, [r7, #23]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005360:	b004      	add	sp, #16
 8005362:	4770      	bx	lr
 8005364:	803c3800 	.word	0x803c3800

08005368 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	3301      	adds	r3, #1
 800537a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005382:	d901      	bls.n	8005388 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e01b      	b.n	80053c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	2b00      	cmp	r3, #0
 800538e:	daf2      	bge.n	8005376 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005390:	2300      	movs	r3, #0
 8005392:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	019b      	lsls	r3, r3, #6
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053ac:	d901      	bls.n	80053b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e006      	b.n	80053c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	691b      	ldr	r3, [r3, #16]
 80053b6:	f003 0320 	and.w	r3, r3, #32
 80053ba:	2b20      	cmp	r3, #32
 80053bc:	d0f0      	beq.n	80053a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80053e4:	d901      	bls.n	80053ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e018      	b.n	800541c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	daf2      	bge.n	80053d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2210      	movs	r2, #16
 80053fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3301      	adds	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005408:	d901      	bls.n	800540e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800540a:	2303      	movs	r3, #3
 800540c:	e006      	b.n	800541c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	2b10      	cmp	r3, #16
 8005418:	d0f0      	beq.n	80053fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3714      	adds	r7, #20
 8005420:	46bd      	mov	sp, r7
 8005422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005426:	4770      	bx	lr

08005428 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	78fb      	ldrb	r3, [r7, #3]
 8005442:	68f9      	ldr	r1, [r7, #12]
 8005444:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005448:	4313      	orrs	r3, r2
 800544a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	3714      	adds	r7, #20
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800545a:	b480      	push	{r7}
 800545c:	b087      	sub	sp, #28
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	f003 0306 	and.w	r3, r3, #6
 8005472:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800547a:	2300      	movs	r3, #0
 800547c:	75fb      	strb	r3, [r7, #23]
 800547e:	e00a      	b.n	8005496 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b02      	cmp	r3, #2
 8005484:	d002      	beq.n	800548c <USB_GetDevSpeed+0x32>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b06      	cmp	r3, #6
 800548a:	d102      	bne.n	8005492 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800548c:	2302      	movs	r3, #2
 800548e:	75fb      	strb	r3, [r7, #23]
 8005490:	e001      	b.n	8005496 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005492:	230f      	movs	r3, #15
 8005494:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005496:	7dfb      	ldrb	r3, [r7, #23]
}
 8005498:	4618      	mov	r0, r3
 800549a:	371c      	adds	r7, #28
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	785b      	ldrb	r3, [r3, #1]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d13a      	bne.n	8005536 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054c6:	69da      	ldr	r2, [r3, #28]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f003 030f 	and.w	r3, r3, #15
 80054d0:	2101      	movs	r1, #1
 80054d2:	fa01 f303 	lsl.w	r3, r1, r3
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	68f9      	ldr	r1, [r7, #12]
 80054da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054de:	4313      	orrs	r3, r2
 80054e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d155      	bne.n	80055a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	791b      	ldrb	r3, [r3, #4]
 8005512:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005514:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	059b      	lsls	r3, r3, #22
 800551a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800551c:	4313      	orrs	r3, r2
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	68fa      	ldr	r2, [r7, #12]
 8005524:	440a      	add	r2, r1
 8005526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800552a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800552e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e036      	b.n	80055a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800553c:	69da      	ldr	r2, [r3, #28]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f003 030f 	and.w	r3, r3, #15
 8005546:	2101      	movs	r1, #1
 8005548:	fa01 f303 	lsl.w	r3, r1, r3
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	68f9      	ldr	r1, [r7, #12]
 8005550:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005554:	4313      	orrs	r3, r2
 8005556:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	4413      	add	r3, r2
 8005560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800556a:	2b00      	cmp	r3, #0
 800556c:	d11a      	bne.n	80055a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	015a      	lsls	r2, r3, #5
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	4413      	add	r3, r2
 8005576:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	791b      	ldrb	r3, [r3, #4]
 8005588:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800558a:	430b      	orrs	r3, r1
 800558c:	4313      	orrs	r3, r2
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	0151      	lsls	r1, r2, #5
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	440a      	add	r2, r1
 8005596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800559a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800559e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
	...

080055b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d161      	bne.n	8005694 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	015a      	lsls	r2, r3, #5
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80055e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80055e6:	d11f      	bne.n	8005628 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68ba      	ldr	r2, [r7, #8]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005606:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	4413      	add	r3, r2
 8005610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	68fa      	ldr	r2, [r7, #12]
 800561c:	440a      	add	r2, r1
 800561e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005622:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005626:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800562e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	f003 030f 	and.w	r3, r3, #15
 8005638:	2101      	movs	r1, #1
 800563a:	fa01 f303 	lsl.w	r3, r1, r3
 800563e:	b29b      	uxth	r3, r3
 8005640:	43db      	mvns	r3, r3
 8005642:	68f9      	ldr	r1, [r7, #12]
 8005644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005648:	4013      	ands	r3, r2
 800564a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 030f 	and.w	r3, r3, #15
 800565c:	2101      	movs	r1, #1
 800565e:	fa01 f303 	lsl.w	r3, r1, r3
 8005662:	b29b      	uxth	r3, r3
 8005664:	43db      	mvns	r3, r3
 8005666:	68f9      	ldr	r1, [r7, #12]
 8005668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800566c:	4013      	ands	r3, r2
 800566e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0159      	lsls	r1, r3, #5
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	440b      	add	r3, r1
 8005686:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568a:	4619      	mov	r1, r3
 800568c:	4b35      	ldr	r3, [pc, #212]	@ (8005764 <USB_DeactivateEndpoint+0x1b0>)
 800568e:	4013      	ands	r3, r2
 8005690:	600b      	str	r3, [r1, #0]
 8005692:	e060      	b.n	8005756 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80056a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80056aa:	d11f      	bne.n	80056ec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	015a      	lsls	r2, r3, #5
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	4413      	add	r3, r2
 80056b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68ba      	ldr	r2, [r7, #8]
 80056bc:	0151      	lsls	r1, r2, #5
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	440a      	add	r2, r1
 80056c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056c6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056ca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	0151      	lsls	r1, r2, #5
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	440a      	add	r2, r1
 80056e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056e6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	43db      	mvns	r3, r3
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570c:	4013      	ands	r3, r2
 800570e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005716:	69da      	ldr	r2, [r3, #28]
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	781b      	ldrb	r3, [r3, #0]
 800571c:	f003 030f 	and.w	r3, r3, #15
 8005720:	2101      	movs	r1, #1
 8005722:	fa01 f303 	lsl.w	r3, r1, r3
 8005726:	041b      	lsls	r3, r3, #16
 8005728:	43db      	mvns	r3, r3
 800572a:	68f9      	ldr	r1, [r7, #12]
 800572c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005730:	4013      	ands	r3, r2
 8005732:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	0159      	lsls	r1, r3, #5
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	440b      	add	r3, r1
 800574a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574e:	4619      	mov	r1, r3
 8005750:	4b05      	ldr	r3, [pc, #20]	@ (8005768 <USB_DeactivateEndpoint+0x1b4>)
 8005752:	4013      	ands	r3, r2
 8005754:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3714      	adds	r7, #20
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr
 8005764:	ec337800 	.word	0xec337800
 8005768:	eff37800 	.word	0xeff37800

0800576c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08a      	sub	sp, #40	@ 0x28
 8005770:	af02      	add	r7, sp, #8
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	4613      	mov	r3, r2
 8005778:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	781b      	ldrb	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	785b      	ldrb	r3, [r3, #1]
 8005788:	2b01      	cmp	r3, #1
 800578a:	f040 817f 	bne.w	8005a8c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	691b      	ldr	r3, [r3, #16]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d132      	bne.n	80057fc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005796:	69bb      	ldr	r3, [r7, #24]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	69ba      	ldr	r2, [r7, #24]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	69fa      	ldr	r2, [r7, #28]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057b0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80057b4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80057b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	69ba      	ldr	r2, [r7, #24]
 80057ca:	0151      	lsls	r1, r2, #5
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	440a      	add	r2, r1
 80057d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80057d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	69fa      	ldr	r2, [r7, #28]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80057f4:	0cdb      	lsrs	r3, r3, #19
 80057f6:	04db      	lsls	r3, r3, #19
 80057f8:	6113      	str	r3, [r2, #16]
 80057fa:	e097      	b.n	800592c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80057fc:	69bb      	ldr	r3, [r7, #24]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	69ba      	ldr	r2, [r7, #24]
 800580c:	0151      	lsls	r1, r2, #5
 800580e:	69fa      	ldr	r2, [r7, #28]
 8005810:	440a      	add	r2, r1
 8005812:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005816:	0cdb      	lsrs	r3, r3, #19
 8005818:	04db      	lsls	r3, r3, #19
 800581a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800581c:	69bb      	ldr	r3, [r7, #24]
 800581e:	015a      	lsls	r2, r3, #5
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	4413      	add	r3, r2
 8005824:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005828:	691b      	ldr	r3, [r3, #16]
 800582a:	69ba      	ldr	r2, [r7, #24]
 800582c:	0151      	lsls	r1, r2, #5
 800582e:	69fa      	ldr	r2, [r7, #28]
 8005830:	440a      	add	r2, r1
 8005832:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005836:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800583a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800583e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d11a      	bne.n	800587c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	691a      	ldr	r2, [r3, #16]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	429a      	cmp	r2, r3
 8005850:	d903      	bls.n	800585a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	689a      	ldr	r2, [r3, #8]
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005874:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005878:	6113      	str	r3, [r2, #16]
 800587a:	e044      	b.n	8005906 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	691a      	ldr	r2, [r3, #16]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	4413      	add	r3, r2
 8005886:	1e5a      	subs	r2, r3, #1
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005890:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	8afb      	ldrh	r3, [r7, #22]
 80058a2:	04d9      	lsls	r1, r3, #19
 80058a4:	4ba4      	ldr	r3, [pc, #656]	@ (8005b38 <USB_EPStartXfer+0x3cc>)
 80058a6:	400b      	ands	r3, r1
 80058a8:	69b9      	ldr	r1, [r7, #24]
 80058aa:	0148      	lsls	r0, r1, #5
 80058ac:	69f9      	ldr	r1, [r7, #28]
 80058ae:	4401      	add	r1, r0
 80058b0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	791b      	ldrb	r3, [r3, #4]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d122      	bne.n	8005906 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	015a      	lsls	r2, r3, #5
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	4413      	add	r3, r2
 80058c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	69ba      	ldr	r2, [r7, #24]
 80058d0:	0151      	lsls	r1, r2, #5
 80058d2:	69fa      	ldr	r2, [r7, #28]
 80058d4:	440a      	add	r2, r1
 80058d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058da:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80058de:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	691a      	ldr	r2, [r3, #16]
 80058ee:	8afb      	ldrh	r3, [r7, #22]
 80058f0:	075b      	lsls	r3, r3, #29
 80058f2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80058f6:	69b9      	ldr	r1, [r7, #24]
 80058f8:	0148      	lsls	r0, r1, #5
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	4401      	add	r1, r0
 80058fe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005902:	4313      	orrs	r3, r2
 8005904:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	4413      	add	r3, r2
 800590e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005912:	691a      	ldr	r2, [r3, #16]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	0148      	lsls	r0, r1, #5
 8005920:	69f9      	ldr	r1, [r7, #28]
 8005922:	4401      	add	r1, r0
 8005924:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800592c:	79fb      	ldrb	r3, [r7, #7]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d14b      	bne.n	80059ca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d009      	beq.n	800594e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	4413      	add	r3, r2
 8005942:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005946:	461a      	mov	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	791b      	ldrb	r3, [r3, #4]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d128      	bne.n	80059a8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d110      	bne.n	8005988 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005984:	6013      	str	r3, [r2, #0]
 8005986:	e00f      	b.n	80059a8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	015a      	lsls	r2, r3, #5
 800598c:	69fb      	ldr	r3, [r7, #28]
 800598e:	4413      	add	r3, r2
 8005990:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	0151      	lsls	r1, r2, #5
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	440a      	add	r2, r1
 800599e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80059a6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059a8:	69bb      	ldr	r3, [r7, #24]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	69fb      	ldr	r3, [r7, #28]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69ba      	ldr	r2, [r7, #24]
 80059b8:	0151      	lsls	r1, r2, #5
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	440a      	add	r2, r1
 80059be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	e166      	b.n	8005c98 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	69ba      	ldr	r2, [r7, #24]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	69fa      	ldr	r2, [r7, #28]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059e4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80059e8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	791b      	ldrb	r3, [r3, #4]
 80059ee:	2b01      	cmp	r3, #1
 80059f0:	d015      	beq.n	8005a1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f000 814e 	beq.w	8005c98 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	2101      	movs	r1, #1
 8005a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a12:	69f9      	ldr	r1, [r7, #28]
 8005a14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	634b      	str	r3, [r1, #52]	@ 0x34
 8005a1c:	e13c      	b.n	8005c98 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d110      	bne.n	8005a50 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	015a      	lsls	r2, r3, #5
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	4413      	add	r3, r2
 8005a36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	69ba      	ldr	r2, [r7, #24]
 8005a3e:	0151      	lsls	r1, r2, #5
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	440a      	add	r2, r1
 8005a44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	e00f      	b.n	8005a70 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	015a      	lsls	r2, r3, #5
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	4413      	add	r3, r2
 8005a58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	69ba      	ldr	r2, [r7, #24]
 8005a60:	0151      	lsls	r1, r2, #5
 8005a62:	69fa      	ldr	r2, [r7, #28]
 8005a64:	440a      	add	r2, r1
 8005a66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a6e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	68d9      	ldr	r1, [r3, #12]
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	b298      	uxth	r0, r3
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4603      	mov	r3, r0
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	f000 f9b9 	bl	8005dfc <USB_WritePacket>
 8005a8a:	e105      	b.n	8005c98 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	015a      	lsls	r2, r3, #5
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	4413      	add	r3, r2
 8005a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	0151      	lsls	r1, r2, #5
 8005a9e:	69fa      	ldr	r2, [r7, #28]
 8005aa0:	440a      	add	r2, r1
 8005aa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa6:	0cdb      	lsrs	r3, r3, #19
 8005aa8:	04db      	lsls	r3, r3, #19
 8005aaa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	015a      	lsls	r2, r3, #5
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	4413      	add	r3, r2
 8005ab4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ab8:	691b      	ldr	r3, [r3, #16]
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	0151      	lsls	r1, r2, #5
 8005abe:	69fa      	ldr	r2, [r7, #28]
 8005ac0:	440a      	add	r2, r1
 8005ac2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005aca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ace:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005ad0:	69bb      	ldr	r3, [r7, #24]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d132      	bne.n	8005b3c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d003      	beq.n	8005ae6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	689a      	ldr	r2, [r3, #8]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afa:	691a      	ldr	r2, [r3, #16]
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	6a1b      	ldr	r3, [r3, #32]
 8005b00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b04:	69b9      	ldr	r1, [r7, #24]
 8005b06:	0148      	lsls	r0, r1, #5
 8005b08:	69f9      	ldr	r1, [r7, #28]
 8005b0a:	4401      	add	r1, r0
 8005b0c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b10:	4313      	orrs	r3, r2
 8005b12:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	015a      	lsls	r2, r3, #5
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	4413      	add	r3, r2
 8005b1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b20:	691b      	ldr	r3, [r3, #16]
 8005b22:	69ba      	ldr	r2, [r7, #24]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	69fa      	ldr	r2, [r7, #28]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b2e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b32:	6113      	str	r3, [r2, #16]
 8005b34:	e062      	b.n	8005bfc <USB_EPStartXfer+0x490>
 8005b36:	bf00      	nop
 8005b38:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d123      	bne.n	8005b8c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b50:	691a      	ldr	r2, [r3, #16]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b5a:	69b9      	ldr	r1, [r7, #24]
 8005b5c:	0148      	lsls	r0, r1, #5
 8005b5e:	69f9      	ldr	r1, [r7, #28]
 8005b60:	4401      	add	r1, r0
 8005b62:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b66:	4313      	orrs	r3, r2
 8005b68:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	0151      	lsls	r1, r2, #5
 8005b7c:	69fa      	ldr	r2, [r7, #28]
 8005b7e:	440a      	add	r2, r1
 8005b80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b84:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b88:	6113      	str	r3, [r2, #16]
 8005b8a:	e037      	b.n	8005bfc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	691a      	ldr	r2, [r3, #16]
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	4413      	add	r3, r2
 8005b96:	1e5a      	subs	r2, r3, #1
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ba0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	8afa      	ldrh	r2, [r7, #22]
 8005ba8:	fb03 f202 	mul.w	r2, r3, r2
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	015a      	lsls	r2, r3, #5
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	4413      	add	r3, r2
 8005bb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bbc:	691a      	ldr	r2, [r3, #16]
 8005bbe:	8afb      	ldrh	r3, [r7, #22]
 8005bc0:	04d9      	lsls	r1, r3, #19
 8005bc2:	4b38      	ldr	r3, [pc, #224]	@ (8005ca4 <USB_EPStartXfer+0x538>)
 8005bc4:	400b      	ands	r3, r1
 8005bc6:	69b9      	ldr	r1, [r7, #24]
 8005bc8:	0148      	lsls	r0, r1, #5
 8005bca:	69f9      	ldr	r1, [r7, #28]
 8005bcc:	4401      	add	r1, r0
 8005bce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	6a1b      	ldr	r3, [r3, #32]
 8005be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	0148      	lsls	r0, r1, #5
 8005bf0:	69f9      	ldr	r1, [r7, #28]
 8005bf2:	4401      	add	r1, r0
 8005bf4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005bfc:	79fb      	ldrb	r3, [r7, #7]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d10d      	bne.n	8005c1e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d009      	beq.n	8005c1e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	68d9      	ldr	r1, [r3, #12]
 8005c0e:	69bb      	ldr	r3, [r7, #24]
 8005c10:	015a      	lsls	r2, r3, #5
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	4413      	add	r3, r2
 8005c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1a:	460a      	mov	r2, r1
 8005c1c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	791b      	ldrb	r3, [r3, #4]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d128      	bne.n	8005c78 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d110      	bne.n	8005c58 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c36:	69bb      	ldr	r3, [r7, #24]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	69fa      	ldr	r2, [r7, #28]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c54:	6013      	str	r3, [r2, #0]
 8005c56:	e00f      	b.n	8005c78 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c76:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	69ba      	ldr	r2, [r7, #24]
 8005c88:	0151      	lsls	r1, r2, #5
 8005c8a:	69fa      	ldr	r2, [r7, #28]
 8005c8c:	440a      	add	r2, r1
 8005c8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c92:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3720      	adds	r7, #32
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	1ff80000 	.word	0x1ff80000

08005ca8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b087      	sub	sp, #28
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
 8005cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	785b      	ldrb	r3, [r3, #1]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d14a      	bne.n	8005d5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cde:	f040 8086 	bne.w	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	015a      	lsls	r2, r3, #5
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	4413      	add	r3, r2
 8005cec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	7812      	ldrb	r2, [r2, #0]
 8005cf6:	0151      	lsls	r1, r2, #5
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	440a      	add	r2, r1
 8005cfc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d00:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	7812      	ldrb	r2, [r2, #0]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	693a      	ldr	r2, [r7, #16]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d24:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d902      	bls.n	8005d40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8005d3e:	e056      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d54:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d58:	d0e7      	beq.n	8005d2a <USB_EPStopXfer+0x82>
 8005d5a:	e048      	b.n	8005dee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	015a      	lsls	r2, r3, #5
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	4413      	add	r3, r2
 8005d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005d70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005d74:	d13b      	bne.n	8005dee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	693b      	ldr	r3, [r7, #16]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	683a      	ldr	r2, [r7, #0]
 8005d88:	7812      	ldrb	r2, [r2, #0]
 8005d8a:	0151      	lsls	r1, r2, #5
 8005d8c:	693a      	ldr	r2, [r7, #16]
 8005d8e:	440a      	add	r2, r1
 8005d90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005d94:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005d98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	7812      	ldrb	r2, [r2, #0]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005db8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d902      	bls.n	8005dd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8005dd2:	e00c      	b.n	8005dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dec:	d0e7      	beq.n	8005dbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	371c      	adds	r7, #28
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b089      	sub	sp, #36	@ 0x24
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	60f8      	str	r0, [r7, #12]
 8005e04:	60b9      	str	r1, [r7, #8]
 8005e06:	4611      	mov	r1, r2
 8005e08:	461a      	mov	r2, r3
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	71fb      	strb	r3, [r7, #7]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e22:	88bb      	ldrh	r3, [r7, #4]
 8005e24:	3303      	adds	r3, #3
 8005e26:	089b      	lsrs	r3, r3, #2
 8005e28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61bb      	str	r3, [r7, #24]
 8005e2e:	e018      	b.n	8005e62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e30:	79fb      	ldrb	r3, [r7, #7]
 8005e32:	031a      	lsls	r2, r3, #12
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	4413      	add	r3, r2
 8005e38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005e3c:	461a      	mov	r2, r3
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	61bb      	str	r3, [r7, #24]
 8005e62:	69ba      	ldr	r2, [r7, #24]
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d3e2      	bcc.n	8005e30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3724      	adds	r7, #36	@ 0x24
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b08b      	sub	sp, #44	@ 0x2c
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e8e:	88fb      	ldrh	r3, [r7, #6]
 8005e90:	089b      	lsrs	r3, r3, #2
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	f003 0303 	and.w	r3, r3, #3
 8005e9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	623b      	str	r3, [r7, #32]
 8005ea2:	e014      	b.n	8005ece <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	601a      	str	r2, [r3, #0]
    pDest++;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005ec8:	6a3b      	ldr	r3, [r7, #32]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	623b      	str	r3, [r7, #32]
 8005ece:	6a3a      	ldr	r2, [r7, #32]
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d3e6      	bcc.n	8005ea4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005ed6:	8bfb      	ldrh	r3, [r7, #30]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01e      	beq.n	8005f1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f107 0310 	add.w	r3, r7, #16
 8005eec:	6812      	ldr	r2, [r2, #0]
 8005eee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ef0:	693a      	ldr	r2, [r7, #16]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f00:	701a      	strb	r2, [r3, #0]
      i++;
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	3301      	adds	r3, #1
 8005f06:	623b      	str	r3, [r7, #32]
      pDest++;
 8005f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0a:	3301      	adds	r3, #1
 8005f0c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005f0e:	8bfb      	ldrh	r3, [r7, #30]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f14:	8bfb      	ldrh	r3, [r7, #30]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1ea      	bne.n	8005ef0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	372c      	adds	r7, #44	@ 0x2c
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr

08005f28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b085      	sub	sp, #20
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	785b      	ldrb	r3, [r3, #1]
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d12c      	bne.n	8005f9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	db12      	blt.n	8005f7c <USB_EPSetStall+0x54>
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00f      	beq.n	8005f7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005f7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	015a      	lsls	r2, r3, #5
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	0151      	lsls	r1, r2, #5
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	440a      	add	r2, r1
 8005f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f96:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005f9a:	6013      	str	r3, [r2, #0]
 8005f9c:	e02b      	b.n	8005ff6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	015a      	lsls	r2, r3, #5
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	db12      	blt.n	8005fd6 <USB_EPSetStall+0xae>
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00f      	beq.n	8005fd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	015a      	lsls	r2, r3, #5
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4413      	add	r3, r2
 8005fbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	0151      	lsls	r1, r2, #5
 8005fc8:	68fa      	ldr	r2, [r7, #12]
 8005fca:	440a      	add	r2, r1
 8005fcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005fd0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005fd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	015a      	lsls	r2, r3, #5
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68ba      	ldr	r2, [r7, #8]
 8005fe6:	0151      	lsls	r1, r2, #5
 8005fe8:	68fa      	ldr	r2, [r7, #12]
 8005fea:	440a      	add	r2, r1
 8005fec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3714      	adds	r7, #20
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	781b      	ldrb	r3, [r3, #0]
 8006016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	785b      	ldrb	r3, [r3, #1]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d128      	bne.n	8006072 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	015a      	lsls	r2, r3, #5
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	0151      	lsls	r1, r2, #5
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	440a      	add	r2, r1
 8006036:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800603a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800603e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	791b      	ldrb	r3, [r3, #4]
 8006044:	2b03      	cmp	r3, #3
 8006046:	d003      	beq.n	8006050 <USB_EPClearStall+0x4c>
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	791b      	ldrb	r3, [r3, #4]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d138      	bne.n	80060c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	015a      	lsls	r2, r3, #5
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68ba      	ldr	r2, [r7, #8]
 8006060:	0151      	lsls	r1, r2, #5
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	440a      	add	r2, r1
 8006066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800606a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800606e:	6013      	str	r3, [r2, #0]
 8006070:	e027      	b.n	80060c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	0151      	lsls	r1, r2, #5
 8006084:	68fa      	ldr	r2, [r7, #12]
 8006086:	440a      	add	r2, r1
 8006088:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800608c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006090:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	791b      	ldrb	r3, [r3, #4]
 8006096:	2b03      	cmp	r3, #3
 8006098:	d003      	beq.n	80060a2 <USB_EPClearStall+0x9e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	791b      	ldrb	r3, [r3, #4]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d10f      	bne.n	80060c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	015a      	lsls	r2, r3, #5
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4413      	add	r3, r2
 80060aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	0151      	lsls	r1, r2, #5
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	440a      	add	r2, r1
 80060b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80060bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80060c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ce:	4770      	bx	lr

080060d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b085      	sub	sp, #20
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	460b      	mov	r3, r1
 80060da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80060ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80060f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006104:	68f9      	ldr	r1, [r7, #12]
 8006106:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800611c:	b480      	push	{r7}
 800611e:	b085      	sub	sp, #20
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006136:	f023 0303 	bic.w	r3, r3, #3
 800613a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800614a:	f023 0302 	bic.w	r3, r3, #2
 800614e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr

0800615e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800615e:	b480      	push	{r7}
 8006160:	b085      	sub	sp, #20
 8006162:	af00      	add	r7, sp, #0
 8006164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006178:	f023 0303 	bic.w	r3, r3, #3
 800617c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	68fa      	ldr	r2, [r7, #12]
 8006188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800618c:	f043 0302 	orr.w	r3, r3, #2
 8006190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3714      	adds	r7, #20
 8006198:	46bd      	mov	sp, r7
 800619a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619e:	4770      	bx	lr

080061a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b085      	sub	sp, #20
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	695b      	ldr	r3, [r3, #20]
 80061ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	68fa      	ldr	r2, [r7, #12]
 80061b4:	4013      	ands	r3, r2
 80061b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80061b8:	68fb      	ldr	r3, [r7, #12]
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3714      	adds	r7, #20
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061d8:	699b      	ldr	r3, [r3, #24]
 80061da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061e2:	69db      	ldr	r3, [r3, #28]
 80061e4:	68ba      	ldr	r2, [r7, #8]
 80061e6:	4013      	ands	r3, r2
 80061e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	0c1b      	lsrs	r3, r3, #16
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80061fa:	b480      	push	{r7}
 80061fc:	b085      	sub	sp, #20
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	4013      	ands	r3, r2
 800621c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	b29b      	uxth	r3, r3
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800623e:	78fb      	ldrb	r3, [r7, #3]
 8006240:	015a      	lsls	r2, r3, #5
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	4413      	add	r3, r2
 8006246:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4013      	ands	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800625c:	68bb      	ldr	r3, [r7, #8]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3714      	adds	r7, #20
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800626a:	b480      	push	{r7}
 800626c:	b087      	sub	sp, #28
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	460b      	mov	r3, r1
 8006274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800628a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800628c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	fa22 f303 	lsr.w	r3, r2, r3
 800629a:	01db      	lsls	r3, r3, #7
 800629c:	b2db      	uxtb	r3, r3
 800629e:	693a      	ldr	r2, [r7, #16]
 80062a0:	4313      	orrs	r3, r2
 80062a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80062a4:	78fb      	ldrb	r3, [r7, #3]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80062b8:	68bb      	ldr	r3, [r7, #8]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	f003 0301 	and.w	r3, r3, #1
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b085      	sub	sp, #20
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006300:	f023 0307 	bic.w	r3, r3, #7
 8006304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3714      	adds	r7, #20
 8006320:	46bd      	mov	sp, r7
 8006322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006326:	4770      	bx	lr

08006328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006328:	b480      	push	{r7}
 800632a:	b087      	sub	sp, #28
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	460b      	mov	r3, r1
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	333c      	adds	r3, #60	@ 0x3c
 800633e:	3304      	adds	r3, #4
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4a26      	ldr	r2, [pc, #152]	@ (80063e0 <USB_EP0_OutStart+0xb8>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d90a      	bls.n	8006362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006358:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800635c:	d101      	bne.n	8006362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800635e:	2300      	movs	r3, #0
 8006360:	e037      	b.n	80063d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	2300      	movs	r3, #0
 800636c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800637c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006390:	f043 0318 	orr.w	r3, r3, #24
 8006394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	697a      	ldr	r2, [r7, #20]
 80063a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80063a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80063aa:	7afb      	ldrb	r3, [r7, #11]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d10f      	bne.n	80063d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b6:	461a      	mov	r2, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80063ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80063d0:	2300      	movs	r3, #0
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	371c      	adds	r7, #28
 80063d6:	46bd      	mov	sp, r7
 80063d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063dc:	4770      	bx	lr
 80063de:	bf00      	nop
 80063e0:	4f54300a 	.word	0x4f54300a

080063e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063ec:	2300      	movs	r3, #0
 80063ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	3301      	adds	r3, #1
 80063f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063fc:	d901      	bls.n	8006402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063fe:	2303      	movs	r3, #3
 8006400:	e01b      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	2b00      	cmp	r3, #0
 8006408:	daf2      	bge.n	80063f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800640a:	2300      	movs	r3, #0
 800640c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f043 0201 	orr.w	r2, r3, #1
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006426:	d901      	bls.n	800642c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e006      	b.n	800643a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0301 	and.w	r3, r3, #1
 8006434:	2b01      	cmp	r3, #1
 8006436:	d0f0      	beq.n	800641a <USB_CoreReset+0x36>

  return HAL_OK;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	460b      	mov	r3, r1
 8006452:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006454:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006458:	f002 fc46 	bl	8008ce8 <USBD_static_malloc>
 800645c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d109      	bne.n	8006478 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	32b0      	adds	r2, #176	@ 0xb0
 800646e:	2100      	movs	r1, #0
 8006470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006474:	2302      	movs	r3, #2
 8006476:	e0d4      	b.n	8006622 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006478:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800647c:	2100      	movs	r1, #0
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f002 fc76 	bl	8008d70 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	32b0      	adds	r2, #176	@ 0xb0
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	32b0      	adds	r2, #176	@ 0xb0
 800649e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	7c1b      	ldrb	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d138      	bne.n	8006522 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80064b0:	4b5e      	ldr	r3, [pc, #376]	@ (800662c <USBD_CDC_Init+0x1e4>)
 80064b2:	7819      	ldrb	r1, [r3, #0]
 80064b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064b8:	2202      	movs	r2, #2
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f002 faf1 	bl	8008aa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80064c0:	4b5a      	ldr	r3, [pc, #360]	@ (800662c <USBD_CDC_Init+0x1e4>)
 80064c2:	781b      	ldrb	r3, [r3, #0]
 80064c4:	f003 020f 	and.w	r2, r3, #15
 80064c8:	6879      	ldr	r1, [r7, #4]
 80064ca:	4613      	mov	r3, r2
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	440b      	add	r3, r1
 80064d4:	3324      	adds	r3, #36	@ 0x24
 80064d6:	2201      	movs	r2, #1
 80064d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80064da:	4b55      	ldr	r3, [pc, #340]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 80064dc:	7819      	ldrb	r1, [r3, #0]
 80064de:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80064e2:	2202      	movs	r2, #2
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f002 fadc 	bl	8008aa2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80064ea:	4b51      	ldr	r3, [pc, #324]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	f003 020f 	and.w	r2, r3, #15
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006502:	2201      	movs	r2, #1
 8006504:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006506:	4b4b      	ldr	r3, [pc, #300]	@ (8006634 <USBD_CDC_Init+0x1ec>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	3326      	adds	r3, #38	@ 0x26
 800651c:	2210      	movs	r2, #16
 800651e:	801a      	strh	r2, [r3, #0]
 8006520:	e035      	b.n	800658e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006522:	4b42      	ldr	r3, [pc, #264]	@ (800662c <USBD_CDC_Init+0x1e4>)
 8006524:	7819      	ldrb	r1, [r3, #0]
 8006526:	2340      	movs	r3, #64	@ 0x40
 8006528:	2202      	movs	r2, #2
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f002 fab9 	bl	8008aa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006530:	4b3e      	ldr	r3, [pc, #248]	@ (800662c <USBD_CDC_Init+0x1e4>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	f003 020f 	and.w	r2, r3, #15
 8006538:	6879      	ldr	r1, [r7, #4]
 800653a:	4613      	mov	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4413      	add	r3, r2
 8006540:	009b      	lsls	r3, r3, #2
 8006542:	440b      	add	r3, r1
 8006544:	3324      	adds	r3, #36	@ 0x24
 8006546:	2201      	movs	r2, #1
 8006548:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800654a:	4b39      	ldr	r3, [pc, #228]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 800654c:	7819      	ldrb	r1, [r3, #0]
 800654e:	2340      	movs	r3, #64	@ 0x40
 8006550:	2202      	movs	r2, #2
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f002 faa5 	bl	8008aa2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 020f 	and.w	r2, r3, #15
 8006560:	6879      	ldr	r1, [r7, #4]
 8006562:	4613      	mov	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	440b      	add	r3, r1
 800656c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006570:	2201      	movs	r2, #1
 8006572:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006574:	4b2f      	ldr	r3, [pc, #188]	@ (8006634 <USBD_CDC_Init+0x1ec>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f003 020f 	and.w	r2, r3, #15
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	3326      	adds	r3, #38	@ 0x26
 800658a:	2210      	movs	r2, #16
 800658c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800658e:	4b29      	ldr	r3, [pc, #164]	@ (8006634 <USBD_CDC_Init+0x1ec>)
 8006590:	7819      	ldrb	r1, [r3, #0]
 8006592:	2308      	movs	r3, #8
 8006594:	2203      	movs	r2, #3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f002 fa83 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800659c:	4b25      	ldr	r3, [pc, #148]	@ (8006634 <USBD_CDC_Init+0x1ec>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f003 020f 	and.w	r2, r3, #15
 80065a4:	6879      	ldr	r1, [r7, #4]
 80065a6:	4613      	mov	r3, r2
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	4413      	add	r3, r2
 80065ac:	009b      	lsls	r3, r3, #2
 80065ae:	440b      	add	r3, r1
 80065b0:	3324      	adds	r3, #36	@ 0x24
 80065b2:	2201      	movs	r2, #1
 80065b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	33b0      	adds	r3, #176	@ 0xb0
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2200      	movs	r2, #0
 80065de:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80065ec:	2302      	movs	r3, #2
 80065ee:	e018      	b.n	8006622 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	7c1b      	ldrb	r3, [r3, #16]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d10a      	bne.n	800660e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80065f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 80065fa:	7819      	ldrb	r1, [r3, #0]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006602:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f002 fb3a 	bl	8008c80 <USBD_LL_PrepareReceive>
 800660c:	e008      	b.n	8006620 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800660e:	4b08      	ldr	r3, [pc, #32]	@ (8006630 <USBD_CDC_Init+0x1e8>)
 8006610:	7819      	ldrb	r1, [r3, #0]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006618:	2340      	movs	r3, #64	@ 0x40
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f002 fb30 	bl	8008c80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3710      	adds	r7, #16
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000093 	.word	0x20000093
 8006630:	20000094 	.word	0x20000094
 8006634:	20000095 	.word	0x20000095

08006638 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006644:	4b3a      	ldr	r3, [pc, #232]	@ (8006730 <USBD_CDC_DeInit+0xf8>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f002 fa4f 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006650:	4b37      	ldr	r3, [pc, #220]	@ (8006730 <USBD_CDC_DeInit+0xf8>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	f003 020f 	and.w	r2, r3, #15
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	4613      	mov	r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	440b      	add	r3, r1
 8006664:	3324      	adds	r3, #36	@ 0x24
 8006666:	2200      	movs	r2, #0
 8006668:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800666a:	4b32      	ldr	r3, [pc, #200]	@ (8006734 <USBD_CDC_DeInit+0xfc>)
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f002 fa3c 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006676:	4b2f      	ldr	r3, [pc, #188]	@ (8006734 <USBD_CDC_DeInit+0xfc>)
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 020f 	and.w	r2, r3, #15
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800668e:	2200      	movs	r2, #0
 8006690:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006692:	4b29      	ldr	r3, [pc, #164]	@ (8006738 <USBD_CDC_DeInit+0x100>)
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f002 fa28 	bl	8008aee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800669e:	4b26      	ldr	r3, [pc, #152]	@ (8006738 <USBD_CDC_DeInit+0x100>)
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	f003 020f 	and.w	r2, r3, #15
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	3324      	adds	r3, #36	@ 0x24
 80066b4:	2200      	movs	r2, #0
 80066b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80066b8:	4b1f      	ldr	r3, [pc, #124]	@ (8006738 <USBD_CDC_DeInit+0x100>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	f003 020f 	and.w	r2, r3, #15
 80066c0:	6879      	ldr	r1, [r7, #4]
 80066c2:	4613      	mov	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	4413      	add	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	440b      	add	r3, r1
 80066cc:	3326      	adds	r3, #38	@ 0x26
 80066ce:	2200      	movs	r2, #0
 80066d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	32b0      	adds	r2, #176	@ 0xb0
 80066dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d01f      	beq.n	8006724 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	33b0      	adds	r3, #176	@ 0xb0
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	32b0      	adds	r2, #176	@ 0xb0
 8006702:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006706:	4618      	mov	r0, r3
 8006708:	f002 fafc 	bl	8008d04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	32b0      	adds	r2, #176	@ 0xb0
 8006716:	2100      	movs	r1, #0
 8006718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006724:	2300      	movs	r3, #0
}
 8006726:	4618      	mov	r0, r3
 8006728:	3708      	adds	r7, #8
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000093 	.word	0x20000093
 8006734:	20000094 	.word	0x20000094
 8006738:	20000095 	.word	0x20000095

0800673c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	32b0      	adds	r2, #176	@ 0xb0
 8006750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006754:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006756:	2300      	movs	r3, #0
 8006758:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800675a:	2300      	movs	r3, #0
 800675c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d101      	bne.n	800676c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006768:	2303      	movs	r3, #3
 800676a:	e0bf      	b.n	80068ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006774:	2b00      	cmp	r3, #0
 8006776:	d050      	beq.n	800681a <USBD_CDC_Setup+0xde>
 8006778:	2b20      	cmp	r3, #32
 800677a:	f040 80af 	bne.w	80068dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	88db      	ldrh	r3, [r3, #6]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d03a      	beq.n	80067fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	b25b      	sxtb	r3, r3
 800678c:	2b00      	cmp	r3, #0
 800678e:	da1b      	bge.n	80067c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	33b0      	adds	r3, #176	@ 0xb0
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	683a      	ldr	r2, [r7, #0]
 80067a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80067a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	88d2      	ldrh	r2, [r2, #6]
 80067ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	88db      	ldrh	r3, [r3, #6]
 80067b2:	2b07      	cmp	r3, #7
 80067b4:	bf28      	it	cs
 80067b6:	2307      	movcs	r3, #7
 80067b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	89fa      	ldrh	r2, [r7, #14]
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f001 fd53 	bl	800826c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80067c6:	e090      	b.n	80068ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	785a      	ldrb	r2, [r3, #1]
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	88db      	ldrh	r3, [r3, #6]
 80067d6:	2b3f      	cmp	r3, #63	@ 0x3f
 80067d8:	d803      	bhi.n	80067e2 <USBD_CDC_Setup+0xa6>
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	88db      	ldrh	r3, [r3, #6]
 80067de:	b2da      	uxtb	r2, r3
 80067e0:	e000      	b.n	80067e4 <USBD_CDC_Setup+0xa8>
 80067e2:	2240      	movs	r2, #64	@ 0x40
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80067ea:	6939      	ldr	r1, [r7, #16]
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 80067f2:	461a      	mov	r2, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f001 fd65 	bl	80082c4 <USBD_CtlPrepareRx>
      break;
 80067fa:	e076      	b.n	80068ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	33b0      	adds	r3, #176	@ 0xb0
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	689b      	ldr	r3, [r3, #8]
 800680e:	683a      	ldr	r2, [r7, #0]
 8006810:	7850      	ldrb	r0, [r2, #1]
 8006812:	2200      	movs	r2, #0
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	4798      	blx	r3
      break;
 8006818:	e067      	b.n	80068ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	785b      	ldrb	r3, [r3, #1]
 800681e:	2b0b      	cmp	r3, #11
 8006820:	d851      	bhi.n	80068c6 <USBD_CDC_Setup+0x18a>
 8006822:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <USBD_CDC_Setup+0xec>)
 8006824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006828:	08006859 	.word	0x08006859
 800682c:	080068d5 	.word	0x080068d5
 8006830:	080068c7 	.word	0x080068c7
 8006834:	080068c7 	.word	0x080068c7
 8006838:	080068c7 	.word	0x080068c7
 800683c:	080068c7 	.word	0x080068c7
 8006840:	080068c7 	.word	0x080068c7
 8006844:	080068c7 	.word	0x080068c7
 8006848:	080068c7 	.word	0x080068c7
 800684c:	080068c7 	.word	0x080068c7
 8006850:	08006883 	.word	0x08006883
 8006854:	080068ad 	.word	0x080068ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d107      	bne.n	8006874 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006864:	f107 030a 	add.w	r3, r7, #10
 8006868:	2202      	movs	r2, #2
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f001 fcfd 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006872:	e032      	b.n	80068da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 fc7b 	bl	8008172 <USBD_CtlError>
            ret = USBD_FAIL;
 800687c:	2303      	movs	r3, #3
 800687e:	75fb      	strb	r3, [r7, #23]
          break;
 8006880:	e02b      	b.n	80068da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d107      	bne.n	800689e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800688e:	f107 030d 	add.w	r3, r7, #13
 8006892:	2201      	movs	r2, #1
 8006894:	4619      	mov	r1, r3
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 fce8 	bl	800826c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800689c:	e01d      	b.n	80068da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800689e:	6839      	ldr	r1, [r7, #0]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f001 fc66 	bl	8008172 <USBD_CtlError>
            ret = USBD_FAIL;
 80068a6:	2303      	movs	r3, #3
 80068a8:	75fb      	strb	r3, [r7, #23]
          break;
 80068aa:	e016      	b.n	80068da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d00f      	beq.n	80068d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80068b8:	6839      	ldr	r1, [r7, #0]
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f001 fc59 	bl	8008172 <USBD_CtlError>
            ret = USBD_FAIL;
 80068c0:	2303      	movs	r3, #3
 80068c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80068c4:	e008      	b.n	80068d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80068c6:	6839      	ldr	r1, [r7, #0]
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f001 fc52 	bl	8008172 <USBD_CtlError>
          ret = USBD_FAIL;
 80068ce:	2303      	movs	r3, #3
 80068d0:	75fb      	strb	r3, [r7, #23]
          break;
 80068d2:	e002      	b.n	80068da <USBD_CDC_Setup+0x19e>
          break;
 80068d4:	bf00      	nop
 80068d6:	e008      	b.n	80068ea <USBD_CDC_Setup+0x1ae>
          break;
 80068d8:	bf00      	nop
      }
      break;
 80068da:	e006      	b.n	80068ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f001 fc47 	bl	8008172 <USBD_CtlError>
      ret = USBD_FAIL;
 80068e4:	2303      	movs	r3, #3
 80068e6:	75fb      	strb	r3, [r7, #23]
      break;
 80068e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80068ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	460b      	mov	r3, r1
 80068fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006906:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	32b0      	adds	r2, #176	@ 0xb0
 8006912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800691a:	2303      	movs	r3, #3
 800691c:	e065      	b.n	80069ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	32b0      	adds	r2, #176	@ 0xb0
 8006928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800692e:	78fb      	ldrb	r3, [r7, #3]
 8006930:	f003 020f 	and.w	r2, r3, #15
 8006934:	6879      	ldr	r1, [r7, #4]
 8006936:	4613      	mov	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	440b      	add	r3, r1
 8006940:	3318      	adds	r3, #24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d02f      	beq.n	80069a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	f003 020f 	and.w	r2, r3, #15
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	4613      	mov	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	4413      	add	r3, r2
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	3318      	adds	r3, #24
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	f003 010f 	and.w	r1, r3, #15
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	460b      	mov	r3, r1
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	440b      	add	r3, r1
 800696c:	009b      	lsls	r3, r3, #2
 800696e:	4403      	add	r3, r0
 8006970:	331c      	adds	r3, #28
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	fbb2 f1f3 	udiv	r1, r2, r3
 8006978:	fb01 f303 	mul.w	r3, r1, r3
 800697c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800697e:	2b00      	cmp	r3, #0
 8006980:	d112      	bne.n	80069a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	f003 020f 	and.w	r2, r3, #15
 8006988:	6879      	ldr	r1, [r7, #4]
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	3318      	adds	r3, #24
 8006996:	2200      	movs	r2, #0
 8006998:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800699a:	78f9      	ldrb	r1, [r7, #3]
 800699c:	2300      	movs	r3, #0
 800699e:	2200      	movs	r2, #0
 80069a0:	6878      	ldr	r0, [r7, #4]
 80069a2:	f002 f94c 	bl	8008c3e <USBD_LL_Transmit>
 80069a6:	e01f      	b.n	80069e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	33b0      	adds	r3, #176	@ 0xb0
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d010      	beq.n	80069e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	33b0      	adds	r3, #176	@ 0xb0
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 80069e4:	78fa      	ldrb	r2, [r7, #3]
 80069e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	32b0      	adds	r2, #176	@ 0xb0
 8006a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a0c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	32b0      	adds	r2, #176	@ 0xb0
 8006a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e01a      	b.n	8006a5a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006a24:	78fb      	ldrb	r3, [r7, #3]
 8006a26:	4619      	mov	r1, r3
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f002 f94a 	bl	8008cc2 <USBD_LL_GetRxDataSize>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	33b0      	adds	r3, #176	@ 0xb0
 8006a40:	009b      	lsls	r3, r3, #2
 8006a42:	4413      	add	r3, r2
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006a54:	4611      	mov	r1, r2
 8006a56:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3710      	adds	r7, #16
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}

08006a62 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006a62:	b580      	push	{r7, lr}
 8006a64:	b084      	sub	sp, #16
 8006a66:	af00      	add	r7, sp, #0
 8006a68:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	32b0      	adds	r2, #176	@ 0xb0
 8006a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a78:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d101      	bne.n	8006a84 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a80:	2303      	movs	r3, #3
 8006a82:	e024      	b.n	8006ace <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006a8a:	687a      	ldr	r2, [r7, #4]
 8006a8c:	33b0      	adds	r3, #176	@ 0xb0
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4413      	add	r3, r2
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d019      	beq.n	8006acc <USBD_CDC_EP0_RxReady+0x6a>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006a9e:	2bff      	cmp	r3, #255	@ 0xff
 8006aa0:	d014      	beq.n	8006acc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	33b0      	adds	r3, #176	@ 0xb0
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	4413      	add	r3, r2
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8006aba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8006ac2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	22ff      	movs	r2, #255	@ 0xff
 8006ac8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
	...

08006ad8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b086      	sub	sp, #24
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006ae0:	2182      	movs	r1, #130	@ 0x82
 8006ae2:	4818      	ldr	r0, [pc, #96]	@ (8006b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006ae4:	f000 fd0f 	bl	8007506 <USBD_GetEpDesc>
 8006ae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006aea:	2101      	movs	r1, #1
 8006aec:	4815      	ldr	r0, [pc, #84]	@ (8006b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006aee:	f000 fd0a 	bl	8007506 <USBD_GetEpDesc>
 8006af2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006af4:	2181      	movs	r1, #129	@ 0x81
 8006af6:	4813      	ldr	r0, [pc, #76]	@ (8006b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006af8:	f000 fd05 	bl	8007506 <USBD_GetEpDesc>
 8006afc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d002      	beq.n	8006b0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	2210      	movs	r2, #16
 8006b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d006      	beq.n	8006b1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b18:	711a      	strb	r2, [r3, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b2c:	711a      	strb	r2, [r3, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2243      	movs	r2, #67	@ 0x43
 8006b36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006b38:	4b02      	ldr	r3, [pc, #8]	@ (8006b44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3718      	adds	r7, #24
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000050 	.word	0x20000050

08006b48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006b50:	2182      	movs	r1, #130	@ 0x82
 8006b52:	4818      	ldr	r0, [pc, #96]	@ (8006bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b54:	f000 fcd7 	bl	8007506 <USBD_GetEpDesc>
 8006b58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4815      	ldr	r0, [pc, #84]	@ (8006bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b5e:	f000 fcd2 	bl	8007506 <USBD_GetEpDesc>
 8006b62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006b64:	2181      	movs	r1, #129	@ 0x81
 8006b66:	4813      	ldr	r0, [pc, #76]	@ (8006bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006b68:	f000 fccd 	bl	8007506 <USBD_GetEpDesc>
 8006b6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d002      	beq.n	8006b7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2210      	movs	r2, #16
 8006b78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d006      	beq.n	8006b8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	2200      	movs	r2, #0
 8006b84:	711a      	strb	r2, [r3, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f042 0202 	orr.w	r2, r2, #2
 8006b8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d006      	beq.n	8006ba2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	2200      	movs	r2, #0
 8006b98:	711a      	strb	r2, [r3, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f042 0202 	orr.w	r2, r2, #2
 8006ba0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2243      	movs	r2, #67	@ 0x43
 8006ba6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006ba8:	4b02      	ldr	r3, [pc, #8]	@ (8006bb4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	3718      	adds	r7, #24
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	bf00      	nop
 8006bb4:	20000050 	.word	0x20000050

08006bb8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b086      	sub	sp, #24
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006bc0:	2182      	movs	r1, #130	@ 0x82
 8006bc2:	4818      	ldr	r0, [pc, #96]	@ (8006c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bc4:	f000 fc9f 	bl	8007506 <USBD_GetEpDesc>
 8006bc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006bca:	2101      	movs	r1, #1
 8006bcc:	4815      	ldr	r0, [pc, #84]	@ (8006c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bce:	f000 fc9a 	bl	8007506 <USBD_GetEpDesc>
 8006bd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006bd4:	2181      	movs	r1, #129	@ 0x81
 8006bd6:	4813      	ldr	r0, [pc, #76]	@ (8006c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006bd8:	f000 fc95 	bl	8007506 <USBD_GetEpDesc>
 8006bdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	2210      	movs	r2, #16
 8006be8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d006      	beq.n	8006bfe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006bf8:	711a      	strb	r2, [r3, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d006      	beq.n	8006c12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c0c:	711a      	strb	r2, [r3, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2243      	movs	r2, #67	@ 0x43
 8006c16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006c18:	4b02      	ldr	r3, [pc, #8]	@ (8006c24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3718      	adds	r7, #24
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}
 8006c22:	bf00      	nop
 8006c24:	20000050 	.word	0x20000050

08006c28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	220a      	movs	r2, #10
 8006c34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	@ (8006c44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	2000000c 	.word	0x2000000c

08006c48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d101      	bne.n	8006c5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e009      	b.n	8006c70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	33b0      	adds	r3, #176	@ 0xb0
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006c6e:	2300      	movs	r3, #0
}
 8006c70:	4618      	mov	r0, r3
 8006c72:	370c      	adds	r7, #12
 8006c74:	46bd      	mov	sp, r7
 8006c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7a:	4770      	bx	lr

08006c7c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	32b0      	adds	r2, #176	@ 0xb0
 8006c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c96:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d101      	bne.n	8006ca2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006c9e:	2303      	movs	r3, #3
 8006ca0:	e008      	b.n	8006cb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	371c      	adds	r7, #28
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr

08006cc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	32b0      	adds	r2, #176	@ 0xb0
 8006cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e004      	b.n	8006cee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006cec:	2300      	movs	r3, #0
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3714      	adds	r7, #20
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b084      	sub	sp, #16
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	32b0      	adds	r2, #176	@ 0xb0
 8006d0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d12:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	32b0      	adds	r2, #176	@ 0xb0
 8006d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d101      	bne.n	8006d2a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e018      	b.n	8006d5c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	7c1b      	ldrb	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d32:	4b0c      	ldr	r3, [pc, #48]	@ (8006d64 <USBD_CDC_ReceivePacket+0x68>)
 8006d34:	7819      	ldrb	r1, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 ff9d 	bl	8008c80 <USBD_LL_PrepareReceive>
 8006d46:	e008      	b.n	8006d5a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006d48:	4b06      	ldr	r3, [pc, #24]	@ (8006d64 <USBD_CDC_ReceivePacket+0x68>)
 8006d4a:	7819      	ldrb	r1, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006d52:	2340      	movs	r3, #64	@ 0x40
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f001 ff93 	bl	8008c80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3710      	adds	r7, #16
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000094 	.word	0x20000094

08006d68 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b086      	sub	sp, #24
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006d7c:	2303      	movs	r3, #3
 8006d7e:	e01f      	b.n	8006dc0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d003      	beq.n	8006da6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68ba      	ldr	r2, [r7, #8]
 8006da2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	79fa      	ldrb	r2, [r7, #7]
 8006db2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f001 fe0d 	bl	80089d4 <USBD_LL_Init>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b084      	sub	sp, #16
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e025      	b.n	8006e2c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	32ae      	adds	r2, #174	@ 0xae
 8006df2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d00f      	beq.n	8006e1c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	32ae      	adds	r2, #174	@ 0xae
 8006e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e0c:	f107 020e 	add.w	r2, r7, #14
 8006e10:	4610      	mov	r0, r2
 8006e12:	4798      	blx	r3
 8006e14:	4602      	mov	r2, r0
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006e2a:	2300      	movs	r3, #0
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f001 fe15 	bl	8008a6c <USBD_LL_Start>
 8006e42:	4603      	mov	r3, r0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b083      	sub	sp, #12
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e62:	b580      	push	{r7, lr}
 8006e64:	b084      	sub	sp, #16
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d009      	beq.n	8006e90 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	4611      	mov	r1, r2
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	4798      	blx	r3
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b084      	sub	sp, #16
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	78fa      	ldrb	r2, [r7, #3]
 8006eb4:	4611      	mov	r1, r2
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b084      	sub	sp, #16
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f001 f90c 	bl	80080fe <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006ef4:	461a      	mov	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f02:	f003 031f 	and.w	r3, r3, #31
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d01a      	beq.n	8006f40 <USBD_LL_SetupStage+0x72>
 8006f0a:	2b02      	cmp	r3, #2
 8006f0c:	d822      	bhi.n	8006f54 <USBD_LL_SetupStage+0x86>
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d002      	beq.n	8006f18 <USBD_LL_SetupStage+0x4a>
 8006f12:	2b01      	cmp	r3, #1
 8006f14:	d00a      	beq.n	8006f2c <USBD_LL_SetupStage+0x5e>
 8006f16:	e01d      	b.n	8006f54 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f1e:	4619      	mov	r1, r3
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f000 fb63 	bl	80075ec <USBD_StdDevReq>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]
      break;
 8006f2a:	e020      	b.n	8006f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 fbcb 	bl	80076d0 <USBD_StdItfReq>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f3e:	e016      	b.n	8006f6e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fc2d 	bl	80077a8 <USBD_StdEPReq>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	73fb      	strb	r3, [r7, #15]
      break;
 8006f52:	e00c      	b.n	8006f6e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006f5a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f001 fde2 	bl	8008b2c <USBD_LL_StallEP>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6c:	bf00      	nop
  }

  return ret;
 8006f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3710      	adds	r7, #16
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	460b      	mov	r3, r1
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f86:	2300      	movs	r3, #0
 8006f88:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006f8a:	7afb      	ldrb	r3, [r7, #11]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d16e      	bne.n	800706e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006f96:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f040 8098 	bne.w	80070d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	689a      	ldr	r2, [r3, #8]
 8006fa8:	693b      	ldr	r3, [r7, #16]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	429a      	cmp	r2, r3
 8006fae:	d913      	bls.n	8006fd8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	689a      	ldr	r2, [r3, #8]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	68db      	ldr	r3, [r3, #12]
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	bf28      	it	cs
 8006fca:	4613      	movcs	r3, r2
 8006fcc:	461a      	mov	r2, r3
 8006fce:	6879      	ldr	r1, [r7, #4]
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f001 f994 	bl	80082fe <USBD_CtlContinueRx>
 8006fd6:	e07d      	b.n	80070d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006fde:	f003 031f 	and.w	r3, r3, #31
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d014      	beq.n	8007010 <USBD_LL_DataOutStage+0x98>
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d81d      	bhi.n	8007026 <USBD_LL_DataOutStage+0xae>
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <USBD_LL_DataOutStage+0x7c>
 8006fee:	2b01      	cmp	r3, #1
 8006ff0:	d003      	beq.n	8006ffa <USBD_LL_DataOutStage+0x82>
 8006ff2:	e018      	b.n	8007026 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	75bb      	strb	r3, [r7, #22]
            break;
 8006ff8:	e018      	b.n	800702c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007000:	b2db      	uxtb	r3, r3
 8007002:	4619      	mov	r1, r3
 8007004:	68f8      	ldr	r0, [r7, #12]
 8007006:	f000 fa64 	bl	80074d2 <USBD_CoreFindIF>
 800700a:	4603      	mov	r3, r0
 800700c:	75bb      	strb	r3, [r7, #22]
            break;
 800700e:	e00d      	b.n	800702c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007016:	b2db      	uxtb	r3, r3
 8007018:	4619      	mov	r1, r3
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 fa66 	bl	80074ec <USBD_CoreFindEP>
 8007020:	4603      	mov	r3, r0
 8007022:	75bb      	strb	r3, [r7, #22]
            break;
 8007024:	e002      	b.n	800702c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	75bb      	strb	r3, [r7, #22]
            break;
 800702a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800702c:	7dbb      	ldrb	r3, [r7, #22]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d119      	bne.n	8007066 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007038:	b2db      	uxtb	r3, r3
 800703a:	2b03      	cmp	r3, #3
 800703c:	d113      	bne.n	8007066 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800703e:	7dba      	ldrb	r2, [r7, #22]
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	32ae      	adds	r2, #174	@ 0xae
 8007044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00b      	beq.n	8007066 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800704e:	7dba      	ldrb	r2, [r7, #22]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007056:	7dba      	ldrb	r2, [r7, #22]
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	32ae      	adds	r2, #174	@ 0xae
 800705c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	68f8      	ldr	r0, [r7, #12]
 8007064:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f001 f95a 	bl	8008320 <USBD_CtlSendStatus>
 800706c:	e032      	b.n	80070d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800706e:	7afb      	ldrb	r3, [r7, #11]
 8007070:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007074:	b2db      	uxtb	r3, r3
 8007076:	4619      	mov	r1, r3
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f000 fa37 	bl	80074ec <USBD_CoreFindEP>
 800707e:	4603      	mov	r3, r0
 8007080:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007082:	7dbb      	ldrb	r3, [r7, #22]
 8007084:	2bff      	cmp	r3, #255	@ 0xff
 8007086:	d025      	beq.n	80070d4 <USBD_LL_DataOutStage+0x15c>
 8007088:	7dbb      	ldrb	r3, [r7, #22]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d122      	bne.n	80070d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b03      	cmp	r3, #3
 8007098:	d117      	bne.n	80070ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800709a:	7dba      	ldrb	r2, [r7, #22]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	32ae      	adds	r2, #174	@ 0xae
 80070a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a4:	699b      	ldr	r3, [r3, #24]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d00f      	beq.n	80070ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80070aa:	7dba      	ldrb	r2, [r7, #22]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80070b2:	7dba      	ldrb	r2, [r7, #22]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	32ae      	adds	r2, #174	@ 0xae
 80070b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070bc:	699b      	ldr	r3, [r3, #24]
 80070be:	7afa      	ldrb	r2, [r7, #11]
 80070c0:	4611      	mov	r1, r2
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	4798      	blx	r3
 80070c6:	4603      	mov	r3, r0
 80070c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80070ca:	7dfb      	ldrb	r3, [r7, #23]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
 80070d2:	e000      	b.n	80070d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}

080070de <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80070de:	b580      	push	{r7, lr}
 80070e0:	b086      	sub	sp, #24
 80070e2:	af00      	add	r7, sp, #0
 80070e4:	60f8      	str	r0, [r7, #12]
 80070e6:	460b      	mov	r3, r1
 80070e8:	607a      	str	r2, [r7, #4]
 80070ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80070ec:	7afb      	ldrb	r3, [r7, #11]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d16f      	bne.n	80071d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	3314      	adds	r3, #20
 80070f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d15a      	bne.n	80071b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	429a      	cmp	r2, r3
 800710c:	d914      	bls.n	8007138 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	689a      	ldr	r2, [r3, #8]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	1ad2      	subs	r2, r2, r3
 8007118:	693b      	ldr	r3, [r7, #16]
 800711a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	461a      	mov	r2, r3
 8007122:	6879      	ldr	r1, [r7, #4]
 8007124:	68f8      	ldr	r0, [r7, #12]
 8007126:	f001 f8bc 	bl	80082a2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800712a:	2300      	movs	r3, #0
 800712c:	2200      	movs	r2, #0
 800712e:	2100      	movs	r1, #0
 8007130:	68f8      	ldr	r0, [r7, #12]
 8007132:	f001 fda5 	bl	8008c80 <USBD_LL_PrepareReceive>
 8007136:	e03f      	b.n	80071b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	68da      	ldr	r2, [r3, #12]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	429a      	cmp	r2, r3
 8007142:	d11c      	bne.n	800717e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	693b      	ldr	r3, [r7, #16]
 800714a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800714c:	429a      	cmp	r2, r3
 800714e:	d316      	bcc.n	800717e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800715a:	429a      	cmp	r2, r3
 800715c:	d20f      	bcs.n	800717e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800715e:	2200      	movs	r2, #0
 8007160:	2100      	movs	r1, #0
 8007162:	68f8      	ldr	r0, [r7, #12]
 8007164:	f001 f89d 	bl	80082a2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007170:	2300      	movs	r3, #0
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	68f8      	ldr	r0, [r7, #12]
 8007178:	f001 fd82 	bl	8008c80 <USBD_LL_PrepareReceive>
 800717c:	e01c      	b.n	80071b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007184:	b2db      	uxtb	r3, r3
 8007186:	2b03      	cmp	r3, #3
 8007188:	d10f      	bne.n	80071aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007190:	68db      	ldr	r3, [r3, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d009      	beq.n	80071aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80071aa:	2180      	movs	r1, #128	@ 0x80
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f001 fcbd 	bl	8008b2c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f001 f8c7 	bl	8008346 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d03a      	beq.n	8007238 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f7ff fe42 	bl	8006e4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80071d0:	e032      	b.n	8007238 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80071d2:	7afb      	ldrb	r3, [r7, #11]
 80071d4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	4619      	mov	r1, r3
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 f985 	bl	80074ec <USBD_CoreFindEP>
 80071e2:	4603      	mov	r3, r0
 80071e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	2bff      	cmp	r3, #255	@ 0xff
 80071ea:	d025      	beq.n	8007238 <USBD_LL_DataInStage+0x15a>
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d122      	bne.n	8007238 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071f8:	b2db      	uxtb	r3, r3
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d11c      	bne.n	8007238 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80071fe:	7dfa      	ldrb	r2, [r7, #23]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	32ae      	adds	r2, #174	@ 0xae
 8007204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d014      	beq.n	8007238 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800720e:	7dfa      	ldrb	r2, [r7, #23]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007216:	7dfa      	ldrb	r2, [r7, #23]
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	32ae      	adds	r2, #174	@ 0xae
 800721c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	7afa      	ldrb	r2, [r7, #11]
 8007224:	4611      	mov	r1, r2
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	4798      	blx	r3
 800722a:	4603      	mov	r3, r0
 800722c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007234:	7dbb      	ldrb	r3, [r7, #22]
 8007236:	e000      	b.n	800723a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b084      	sub	sp, #16
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	2201      	movs	r2, #1
 8007252:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2200      	movs	r2, #0
 800725a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800727a:	2b00      	cmp	r3, #0
 800727c:	d014      	beq.n	80072a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007284:	685b      	ldr	r3, [r3, #4]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00e      	beq.n	80072a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	6852      	ldr	r2, [r2, #4]
 8007296:	b2d2      	uxtb	r2, r2
 8007298:	4611      	mov	r1, r2
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	4798      	blx	r3
 800729e:	4603      	mov	r3, r0
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d001      	beq.n	80072a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072a8:	2340      	movs	r3, #64	@ 0x40
 80072aa:	2200      	movs	r2, #0
 80072ac:	2100      	movs	r1, #0
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f001 fbf7 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2201      	movs	r2, #1
 80072b8:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2240      	movs	r2, #64	@ 0x40
 80072c0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80072c4:	2340      	movs	r3, #64	@ 0x40
 80072c6:	2200      	movs	r2, #0
 80072c8:	2180      	movs	r1, #128	@ 0x80
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f001 fbe9 	bl	8008aa2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2240      	movs	r2, #64	@ 0x40
 80072da:	621a      	str	r2, [r3, #32]

  return ret;
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	460b      	mov	r3, r1
 80072f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	78fa      	ldrb	r2, [r7, #3]
 80072f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	370c      	adds	r7, #12
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007306:	b480      	push	{r7}
 8007308:	b083      	sub	sp, #12
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007314:	b2db      	uxtb	r3, r3
 8007316:	2b04      	cmp	r3, #4
 8007318:	d006      	beq.n	8007328 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2da      	uxtb	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2204      	movs	r2, #4
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007330:	2300      	movs	r3, #0
}
 8007332:	4618      	mov	r0, r3
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b04      	cmp	r3, #4
 8007350:	d106      	bne.n	8007360 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007358:	b2da      	uxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	370c      	adds	r7, #12
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr

0800736e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b082      	sub	sp, #8
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b03      	cmp	r3, #3
 8007380:	d110      	bne.n	80073a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007388:	2b00      	cmp	r3, #0
 800738a:	d00b      	beq.n	80073a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007392:	69db      	ldr	r3, [r3, #28]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	6878      	ldr	r0, [r7, #4]
 80073a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80073a4:	2300      	movs	r3, #0
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3708      	adds	r7, #8
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}

080073ae <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	32ae      	adds	r2, #174	@ 0xae
 80073c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d101      	bne.n	80073d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	e01c      	b.n	800740a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073d6:	b2db      	uxtb	r3, r3
 80073d8:	2b03      	cmp	r3, #3
 80073da:	d115      	bne.n	8007408 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	32ae      	adds	r2, #174	@ 0xae
 80073e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ea:	6a1b      	ldr	r3, [r3, #32]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	32ae      	adds	r2, #174	@ 0xae
 80073fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073fe:	6a1b      	ldr	r3, [r3, #32]
 8007400:	78fa      	ldrb	r2, [r7, #3]
 8007402:	4611      	mov	r1, r2
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	3708      	adds	r7, #8
 800740e:	46bd      	mov	sp, r7
 8007410:	bd80      	pop	{r7, pc}

08007412 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007412:	b580      	push	{r7, lr}
 8007414:	b082      	sub	sp, #8
 8007416:	af00      	add	r7, sp, #0
 8007418:	6078      	str	r0, [r7, #4]
 800741a:	460b      	mov	r3, r1
 800741c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	32ae      	adds	r2, #174	@ 0xae
 8007428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d101      	bne.n	8007434 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007430:	2303      	movs	r3, #3
 8007432:	e01c      	b.n	800746e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743a:	b2db      	uxtb	r3, r3
 800743c:	2b03      	cmp	r3, #3
 800743e:	d115      	bne.n	800746c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	32ae      	adds	r2, #174	@ 0xae
 800744a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800744e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007450:	2b00      	cmp	r3, #0
 8007452:	d00b      	beq.n	800746c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	32ae      	adds	r2, #174	@ 0xae
 800745e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007464:	78fa      	ldrb	r2, [r7, #3]
 8007466:	4611      	mov	r1, r2
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3708      	adds	r7, #8
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007476:	b480      	push	{r7}
 8007478:	b083      	sub	sp, #12
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800747e:	2300      	movs	r3, #0
}
 8007480:	4618      	mov	r0, r3
 8007482:	370c      	adds	r7, #12
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007494:	2300      	movs	r3, #0
 8007496:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00e      	beq.n	80074c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	6852      	ldr	r2, [r2, #4]
 80074b6:	b2d2      	uxtb	r2, r2
 80074b8:	4611      	mov	r1, r2
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	4798      	blx	r3
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80074c4:	2303      	movs	r3, #3
 80074c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80074c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b083      	sub	sp, #12
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
 80074da:	460b      	mov	r3, r1
 80074dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	370c      	adds	r7, #12
 80074e4:	46bd      	mov	sp, r7
 80074e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ea:	4770      	bx	lr

080074ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b083      	sub	sp, #12
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
 80074f4:	460b      	mov	r3, r1
 80074f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80074f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	885b      	ldrh	r3, [r3, #2]
 8007522:	b29b      	uxth	r3, r3
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	7812      	ldrb	r2, [r2, #0]
 8007528:	4293      	cmp	r3, r2
 800752a:	d91f      	bls.n	800756c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	781b      	ldrb	r3, [r3, #0]
 8007530:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007532:	e013      	b.n	800755c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007534:	f107 030a 	add.w	r3, r7, #10
 8007538:	4619      	mov	r1, r3
 800753a:	6978      	ldr	r0, [r7, #20]
 800753c:	f000 f81b 	bl	8007576 <USBD_GetNextDesc>
 8007540:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	785b      	ldrb	r3, [r3, #1]
 8007546:	2b05      	cmp	r3, #5
 8007548:	d108      	bne.n	800755c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800754e:	693b      	ldr	r3, [r7, #16]
 8007550:	789b      	ldrb	r3, [r3, #2]
 8007552:	78fa      	ldrb	r2, [r7, #3]
 8007554:	429a      	cmp	r2, r3
 8007556:	d008      	beq.n	800756a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007558:	2300      	movs	r3, #0
 800755a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	885b      	ldrh	r3, [r3, #2]
 8007560:	b29a      	uxth	r2, r3
 8007562:	897b      	ldrh	r3, [r7, #10]
 8007564:	429a      	cmp	r2, r3
 8007566:	d8e5      	bhi.n	8007534 <USBD_GetEpDesc+0x2e>
 8007568:	e000      	b.n	800756c <USBD_GetEpDesc+0x66>
          break;
 800756a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800756c:	693b      	ldr	r3, [r7, #16]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3718      	adds	r7, #24
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}

08007576 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007576:	b480      	push	{r7}
 8007578:	b085      	sub	sp, #20
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	881b      	ldrh	r3, [r3, #0]
 8007588:	68fa      	ldr	r2, [r7, #12]
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	4413      	add	r3, r2
 800758e:	b29a      	uxth	r2, r3
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	781b      	ldrb	r3, [r3, #0]
 8007598:	461a      	mov	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	4413      	add	r3, r2
 800759e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80075a0:	68fb      	ldr	r3, [r7, #12]
}
 80075a2:	4618      	mov	r0, r3
 80075a4:	3714      	adds	r7, #20
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr

080075ae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80075ae:	b480      	push	{r7}
 80075b0:	b087      	sub	sp, #28
 80075b2:	af00      	add	r7, sp, #0
 80075b4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3301      	adds	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80075cc:	8a3b      	ldrh	r3, [r7, #16]
 80075ce:	021b      	lsls	r3, r3, #8
 80075d0:	b21a      	sxth	r2, r3
 80075d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075d6:	4313      	orrs	r3, r2
 80075d8:	b21b      	sxth	r3, r3
 80075da:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80075dc:	89fb      	ldrh	r3, [r7, #14]
}
 80075de:	4618      	mov	r0, r3
 80075e0:	371c      	adds	r7, #28
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr
	...

080075ec <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075f6:	2300      	movs	r3, #0
 80075f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	781b      	ldrb	r3, [r3, #0]
 80075fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007602:	2b40      	cmp	r3, #64	@ 0x40
 8007604:	d005      	beq.n	8007612 <USBD_StdDevReq+0x26>
 8007606:	2b40      	cmp	r3, #64	@ 0x40
 8007608:	d857      	bhi.n	80076ba <USBD_StdDevReq+0xce>
 800760a:	2b00      	cmp	r3, #0
 800760c:	d00f      	beq.n	800762e <USBD_StdDevReq+0x42>
 800760e:	2b20      	cmp	r3, #32
 8007610:	d153      	bne.n	80076ba <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	32ae      	adds	r2, #174	@ 0xae
 800761c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	4798      	blx	r3
 8007628:	4603      	mov	r3, r0
 800762a:	73fb      	strb	r3, [r7, #15]
      break;
 800762c:	e04a      	b.n	80076c4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	785b      	ldrb	r3, [r3, #1]
 8007632:	2b09      	cmp	r3, #9
 8007634:	d83b      	bhi.n	80076ae <USBD_StdDevReq+0xc2>
 8007636:	a201      	add	r2, pc, #4	@ (adr r2, 800763c <USBD_StdDevReq+0x50>)
 8007638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763c:	08007691 	.word	0x08007691
 8007640:	080076a5 	.word	0x080076a5
 8007644:	080076af 	.word	0x080076af
 8007648:	0800769b 	.word	0x0800769b
 800764c:	080076af 	.word	0x080076af
 8007650:	0800766f 	.word	0x0800766f
 8007654:	08007665 	.word	0x08007665
 8007658:	080076af 	.word	0x080076af
 800765c:	08007687 	.word	0x08007687
 8007660:	08007679 	.word	0x08007679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007664:	6839      	ldr	r1, [r7, #0]
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa3c 	bl	8007ae4 <USBD_GetDescriptor>
          break;
 800766c:	e024      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800766e:	6839      	ldr	r1, [r7, #0]
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 fba1 	bl	8007db8 <USBD_SetAddress>
          break;
 8007676:	e01f      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007678:	6839      	ldr	r1, [r7, #0]
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fbe0 	bl	8007e40 <USBD_SetConfig>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
          break;
 8007684:	e018      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007686:	6839      	ldr	r1, [r7, #0]
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fc83 	bl	8007f94 <USBD_GetConfig>
          break;
 800768e:	e013      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 fcb4 	bl	8008000 <USBD_GetStatus>
          break;
 8007698:	e00e      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800769a:	6839      	ldr	r1, [r7, #0]
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fce3 	bl	8008068 <USBD_SetFeature>
          break;
 80076a2:	e009      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fd07 	bl	80080ba <USBD_ClrFeature>
          break;
 80076ac:	e004      	b.n	80076b8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f000 fd5e 	bl	8008172 <USBD_CtlError>
          break;
 80076b6:	bf00      	nop
      }
      break;
 80076b8:	e004      	b.n	80076c4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 fd58 	bl	8008172 <USBD_CtlError>
      break;
 80076c2:	bf00      	nop
  }

  return ret;
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop

080076d0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076de:	683b      	ldr	r3, [r7, #0]
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80076e6:	2b40      	cmp	r3, #64	@ 0x40
 80076e8:	d005      	beq.n	80076f6 <USBD_StdItfReq+0x26>
 80076ea:	2b40      	cmp	r3, #64	@ 0x40
 80076ec:	d852      	bhi.n	8007794 <USBD_StdItfReq+0xc4>
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <USBD_StdItfReq+0x26>
 80076f2:	2b20      	cmp	r3, #32
 80076f4:	d14e      	bne.n	8007794 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	3b01      	subs	r3, #1
 8007700:	2b02      	cmp	r3, #2
 8007702:	d840      	bhi.n	8007786 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	889b      	ldrh	r3, [r3, #4]
 8007708:	b2db      	uxtb	r3, r3
 800770a:	2b01      	cmp	r3, #1
 800770c:	d836      	bhi.n	800777c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	889b      	ldrh	r3, [r3, #4]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	4619      	mov	r1, r3
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7ff fedb 	bl	80074d2 <USBD_CoreFindIF>
 800771c:	4603      	mov	r3, r0
 800771e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007720:	7bbb      	ldrb	r3, [r7, #14]
 8007722:	2bff      	cmp	r3, #255	@ 0xff
 8007724:	d01d      	beq.n	8007762 <USBD_StdItfReq+0x92>
 8007726:	7bbb      	ldrb	r3, [r7, #14]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11a      	bne.n	8007762 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800772c:	7bba      	ldrb	r2, [r7, #14]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	32ae      	adds	r2, #174	@ 0xae
 8007732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00f      	beq.n	800775c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800773c:	7bba      	ldrb	r2, [r7, #14]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007744:	7bba      	ldrb	r2, [r7, #14]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	32ae      	adds	r2, #174	@ 0xae
 800774a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800775a:	e004      	b.n	8007766 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007760:	e001      	b.n	8007766 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007762:	2303      	movs	r3, #3
 8007764:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007766:	683b      	ldr	r3, [r7, #0]
 8007768:	88db      	ldrh	r3, [r3, #6]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d110      	bne.n	8007790 <USBD_StdItfReq+0xc0>
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d10d      	bne.n	8007790 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f000 fdd3 	bl	8008320 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800777a:	e009      	b.n	8007790 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 fcf7 	bl	8008172 <USBD_CtlError>
          break;
 8007784:	e004      	b.n	8007790 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007786:	6839      	ldr	r1, [r7, #0]
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 fcf2 	bl	8008172 <USBD_CtlError>
          break;
 800778e:	e000      	b.n	8007792 <USBD_StdItfReq+0xc2>
          break;
 8007790:	bf00      	nop
      }
      break;
 8007792:	e004      	b.n	800779e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fceb 	bl	8008172 <USBD_CtlError>
      break;
 800779c:	bf00      	nop
  }

  return ret;
 800779e:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a0:	4618      	mov	r0, r3
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	889b      	ldrh	r3, [r3, #4]
 80077ba:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80077c4:	2b40      	cmp	r3, #64	@ 0x40
 80077c6:	d007      	beq.n	80077d8 <USBD_StdEPReq+0x30>
 80077c8:	2b40      	cmp	r3, #64	@ 0x40
 80077ca:	f200 817f 	bhi.w	8007acc <USBD_StdEPReq+0x324>
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d02a      	beq.n	8007828 <USBD_StdEPReq+0x80>
 80077d2:	2b20      	cmp	r3, #32
 80077d4:	f040 817a 	bne.w	8007acc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80077d8:	7bbb      	ldrb	r3, [r7, #14]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff fe85 	bl	80074ec <USBD_CoreFindEP>
 80077e2:	4603      	mov	r3, r0
 80077e4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80077e6:	7b7b      	ldrb	r3, [r7, #13]
 80077e8:	2bff      	cmp	r3, #255	@ 0xff
 80077ea:	f000 8174 	beq.w	8007ad6 <USBD_StdEPReq+0x32e>
 80077ee:	7b7b      	ldrb	r3, [r7, #13]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f040 8170 	bne.w	8007ad6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80077f6:	7b7a      	ldrb	r2, [r7, #13]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80077fe:	7b7a      	ldrb	r2, [r7, #13]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	32ae      	adds	r2, #174	@ 0xae
 8007804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	f000 8163 	beq.w	8007ad6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007810:	7b7a      	ldrb	r2, [r7, #13]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	32ae      	adds	r2, #174	@ 0xae
 8007816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	6839      	ldr	r1, [r7, #0]
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
 8007822:	4603      	mov	r3, r0
 8007824:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007826:	e156      	b.n	8007ad6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	785b      	ldrb	r3, [r3, #1]
 800782c:	2b03      	cmp	r3, #3
 800782e:	d008      	beq.n	8007842 <USBD_StdEPReq+0x9a>
 8007830:	2b03      	cmp	r3, #3
 8007832:	f300 8145 	bgt.w	8007ac0 <USBD_StdEPReq+0x318>
 8007836:	2b00      	cmp	r3, #0
 8007838:	f000 809b 	beq.w	8007972 <USBD_StdEPReq+0x1ca>
 800783c:	2b01      	cmp	r3, #1
 800783e:	d03c      	beq.n	80078ba <USBD_StdEPReq+0x112>
 8007840:	e13e      	b.n	8007ac0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007848:	b2db      	uxtb	r3, r3
 800784a:	2b02      	cmp	r3, #2
 800784c:	d002      	beq.n	8007854 <USBD_StdEPReq+0xac>
 800784e:	2b03      	cmp	r3, #3
 8007850:	d016      	beq.n	8007880 <USBD_StdEPReq+0xd8>
 8007852:	e02c      	b.n	80078ae <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00d      	beq.n	8007876 <USBD_StdEPReq+0xce>
 800785a:	7bbb      	ldrb	r3, [r7, #14]
 800785c:	2b80      	cmp	r3, #128	@ 0x80
 800785e:	d00a      	beq.n	8007876 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	4619      	mov	r1, r3
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f001 f961 	bl	8008b2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800786a:	2180      	movs	r1, #128	@ 0x80
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f001 f95d 	bl	8008b2c <USBD_LL_StallEP>
 8007872:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007874:	e020      	b.n	80078b8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007876:	6839      	ldr	r1, [r7, #0]
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f000 fc7a 	bl	8008172 <USBD_CtlError>
              break;
 800787e:	e01b      	b.n	80078b8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	885b      	ldrh	r3, [r3, #2]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10e      	bne.n	80078a6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00b      	beq.n	80078a6 <USBD_StdEPReq+0xfe>
 800788e:	7bbb      	ldrb	r3, [r7, #14]
 8007890:	2b80      	cmp	r3, #128	@ 0x80
 8007892:	d008      	beq.n	80078a6 <USBD_StdEPReq+0xfe>
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	88db      	ldrh	r3, [r3, #6]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800789c:	7bbb      	ldrb	r3, [r7, #14]
 800789e:	4619      	mov	r1, r3
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f001 f943 	bl	8008b2c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f000 fd3a 	bl	8008320 <USBD_CtlSendStatus>

              break;
 80078ac:	e004      	b.n	80078b8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80078ae:	6839      	ldr	r1, [r7, #0]
 80078b0:	6878      	ldr	r0, [r7, #4]
 80078b2:	f000 fc5e 	bl	8008172 <USBD_CtlError>
              break;
 80078b6:	bf00      	nop
          }
          break;
 80078b8:	e107      	b.n	8007aca <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d002      	beq.n	80078cc <USBD_StdEPReq+0x124>
 80078c6:	2b03      	cmp	r3, #3
 80078c8:	d016      	beq.n	80078f8 <USBD_StdEPReq+0x150>
 80078ca:	e04b      	b.n	8007964 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078cc:	7bbb      	ldrb	r3, [r7, #14]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00d      	beq.n	80078ee <USBD_StdEPReq+0x146>
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b80      	cmp	r3, #128	@ 0x80
 80078d6:	d00a      	beq.n	80078ee <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80078d8:	7bbb      	ldrb	r3, [r7, #14]
 80078da:	4619      	mov	r1, r3
 80078dc:	6878      	ldr	r0, [r7, #4]
 80078de:	f001 f925 	bl	8008b2c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80078e2:	2180      	movs	r1, #128	@ 0x80
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f001 f921 	bl	8008b2c <USBD_LL_StallEP>
 80078ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80078ec:	e040      	b.n	8007970 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80078ee:	6839      	ldr	r1, [r7, #0]
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 fc3e 	bl	8008172 <USBD_CtlError>
              break;
 80078f6:	e03b      	b.n	8007970 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	885b      	ldrh	r3, [r3, #2]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d136      	bne.n	800796e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007900:	7bbb      	ldrb	r3, [r7, #14]
 8007902:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007906:	2b00      	cmp	r3, #0
 8007908:	d004      	beq.n	8007914 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f001 f92b 	bl	8008b6a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007914:	6878      	ldr	r0, [r7, #4]
 8007916:	f000 fd03 	bl	8008320 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800791a:	7bbb      	ldrb	r3, [r7, #14]
 800791c:	4619      	mov	r1, r3
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f7ff fde4 	bl	80074ec <USBD_CoreFindEP>
 8007924:	4603      	mov	r3, r0
 8007926:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007928:	7b7b      	ldrb	r3, [r7, #13]
 800792a:	2bff      	cmp	r3, #255	@ 0xff
 800792c:	d01f      	beq.n	800796e <USBD_StdEPReq+0x1c6>
 800792e:	7b7b      	ldrb	r3, [r7, #13]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d11c      	bne.n	800796e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007934:	7b7a      	ldrb	r2, [r7, #13]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800793c:	7b7a      	ldrb	r2, [r7, #13]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	@ 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d010      	beq.n	800796e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800794c:	7b7a      	ldrb	r2, [r7, #13]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	32ae      	adds	r2, #174	@ 0xae
 8007952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	6839      	ldr	r1, [r7, #0]
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	4798      	blx	r3
 800795e:	4603      	mov	r3, r0
 8007960:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007962:	e004      	b.n	800796e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007964:	6839      	ldr	r1, [r7, #0]
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fc03 	bl	8008172 <USBD_CtlError>
              break;
 800796c:	e000      	b.n	8007970 <USBD_StdEPReq+0x1c8>
              break;
 800796e:	bf00      	nop
          }
          break;
 8007970:	e0ab      	b.n	8007aca <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007978:	b2db      	uxtb	r3, r3
 800797a:	2b02      	cmp	r3, #2
 800797c:	d002      	beq.n	8007984 <USBD_StdEPReq+0x1dc>
 800797e:	2b03      	cmp	r3, #3
 8007980:	d032      	beq.n	80079e8 <USBD_StdEPReq+0x240>
 8007982:	e097      	b.n	8007ab4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007984:	7bbb      	ldrb	r3, [r7, #14]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <USBD_StdEPReq+0x1f2>
 800798a:	7bbb      	ldrb	r3, [r7, #14]
 800798c:	2b80      	cmp	r3, #128	@ 0x80
 800798e:	d004      	beq.n	800799a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007990:	6839      	ldr	r1, [r7, #0]
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fbed 	bl	8008172 <USBD_CtlError>
                break;
 8007998:	e091      	b.n	8007abe <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800799a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	da0b      	bge.n	80079ba <USBD_StdEPReq+0x212>
 80079a2:	7bbb      	ldrb	r3, [r7, #14]
 80079a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80079a8:	4613      	mov	r3, r2
 80079aa:	009b      	lsls	r3, r3, #2
 80079ac:	4413      	add	r3, r2
 80079ae:	009b      	lsls	r3, r3, #2
 80079b0:	3310      	adds	r3, #16
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	e00b      	b.n	80079d2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80079ba:	7bbb      	ldrb	r3, [r7, #14]
 80079bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079c0:	4613      	mov	r3, r2
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	4413      	add	r3, r2
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	3304      	adds	r3, #4
 80079d2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	2202      	movs	r2, #2
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 fc43 	bl	800826c <USBD_CtlSendData>
              break;
 80079e6:	e06a      	b.n	8007abe <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80079e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	da11      	bge.n	8007a14 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079f0:	7bbb      	ldrb	r3, [r7, #14]
 80079f2:	f003 020f 	and.w	r2, r3, #15
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	4613      	mov	r3, r2
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	440b      	add	r3, r1
 8007a02:	3324      	adds	r3, #36	@ 0x24
 8007a04:	881b      	ldrh	r3, [r3, #0]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d117      	bne.n	8007a3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fbb0 	bl	8008172 <USBD_CtlError>
                  break;
 8007a12:	e054      	b.n	8007abe <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007a14:	7bbb      	ldrb	r3, [r7, #14]
 8007a16:	f003 020f 	and.w	r2, r3, #15
 8007a1a:	6879      	ldr	r1, [r7, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007a2a:	881b      	ldrh	r3, [r3, #0]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d104      	bne.n	8007a3a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007a30:	6839      	ldr	r1, [r7, #0]
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fb9d 	bl	8008172 <USBD_CtlError>
                  break;
 8007a38:	e041      	b.n	8007abe <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	da0b      	bge.n	8007a5a <USBD_StdEPReq+0x2b2>
 8007a42:	7bbb      	ldrb	r3, [r7, #14]
 8007a44:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007a48:	4613      	mov	r3, r2
 8007a4a:	009b      	lsls	r3, r3, #2
 8007a4c:	4413      	add	r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	3310      	adds	r3, #16
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4413      	add	r3, r2
 8007a56:	3304      	adds	r3, #4
 8007a58:	e00b      	b.n	8007a72 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a60:	4613      	mov	r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	4413      	add	r3, r2
 8007a66:	009b      	lsls	r3, r3, #2
 8007a68:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007a6c:	687a      	ldr	r2, [r7, #4]
 8007a6e:	4413      	add	r3, r2
 8007a70:	3304      	adds	r3, #4
 8007a72:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a74:	7bbb      	ldrb	r3, [r7, #14]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <USBD_StdEPReq+0x2d8>
 8007a7a:	7bbb      	ldrb	r3, [r7, #14]
 8007a7c:	2b80      	cmp	r3, #128	@ 0x80
 8007a7e:	d103      	bne.n	8007a88 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e00e      	b.n	8007aa6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a88:	7bbb      	ldrb	r3, [r7, #14]
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f001 f88b 	bl	8008ba8 <USBD_LL_IsStallEP>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d003      	beq.n	8007aa0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	601a      	str	r2, [r3, #0]
 8007a9e:	e002      	b.n	8007aa6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2202      	movs	r2, #2
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 fbdd 	bl	800826c <USBD_CtlSendData>
              break;
 8007ab2:	e004      	b.n	8007abe <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb5b 	bl	8008172 <USBD_CtlError>
              break;
 8007abc:	bf00      	nop
          }
          break;
 8007abe:	e004      	b.n	8007aca <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007ac0:	6839      	ldr	r1, [r7, #0]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 fb55 	bl	8008172 <USBD_CtlError>
          break;
 8007ac8:	bf00      	nop
      }
      break;
 8007aca:	e005      	b.n	8007ad8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007acc:	6839      	ldr	r1, [r7, #0]
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f000 fb4f 	bl	8008172 <USBD_CtlError>
      break;
 8007ad4:	e000      	b.n	8007ad8 <USBD_StdEPReq+0x330>
      break;
 8007ad6:	bf00      	nop
  }

  return ret;
 8007ad8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3710      	adds	r7, #16
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	bd80      	pop	{r7, pc}
	...

08007ae4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
 8007aec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007af2:	2300      	movs	r3, #0
 8007af4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007af6:	2300      	movs	r3, #0
 8007af8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	885b      	ldrh	r3, [r3, #2]
 8007afe:	0a1b      	lsrs	r3, r3, #8
 8007b00:	b29b      	uxth	r3, r3
 8007b02:	3b01      	subs	r3, #1
 8007b04:	2b06      	cmp	r3, #6
 8007b06:	f200 8128 	bhi.w	8007d5a <USBD_GetDescriptor+0x276>
 8007b0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007b10 <USBD_GetDescriptor+0x2c>)
 8007b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b10:	08007b2d 	.word	0x08007b2d
 8007b14:	08007b45 	.word	0x08007b45
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007d5b 	.word	0x08007d5b
 8007b20:	08007d5b 	.word	0x08007d5b
 8007b24:	08007cfb 	.word	0x08007cfb
 8007b28:	08007d27 	.word	0x08007d27
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	687a      	ldr	r2, [r7, #4]
 8007b36:	7c12      	ldrb	r2, [r2, #16]
 8007b38:	f107 0108 	add.w	r1, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
      break;
 8007b42:	e112      	b.n	8007d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	7c1b      	ldrb	r3, [r3, #16]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d10d      	bne.n	8007b68 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b54:	f107 0208 	add.w	r2, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	2202      	movs	r2, #2
 8007b64:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007b66:	e100      	b.n	8007d6a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b70:	f107 0208 	add.w	r2, r7, #8
 8007b74:	4610      	mov	r0, r2
 8007b76:	4798      	blx	r3
 8007b78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	3301      	adds	r3, #1
 8007b7e:	2202      	movs	r2, #2
 8007b80:	701a      	strb	r2, [r3, #0]
      break;
 8007b82:	e0f2      	b.n	8007d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	885b      	ldrh	r3, [r3, #2]
 8007b88:	b2db      	uxtb	r3, r3
 8007b8a:	2b05      	cmp	r3, #5
 8007b8c:	f200 80ac 	bhi.w	8007ce8 <USBD_GetDescriptor+0x204>
 8007b90:	a201      	add	r2, pc, #4	@ (adr r2, 8007b98 <USBD_GetDescriptor+0xb4>)
 8007b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b96:	bf00      	nop
 8007b98:	08007bb1 	.word	0x08007bb1
 8007b9c:	08007be5 	.word	0x08007be5
 8007ba0:	08007c19 	.word	0x08007c19
 8007ba4:	08007c4d 	.word	0x08007c4d
 8007ba8:	08007c81 	.word	0x08007c81
 8007bac:	08007cb5 	.word	0x08007cb5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00b      	beq.n	8007bd4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	7c12      	ldrb	r2, [r2, #16]
 8007bc8:	f107 0108 	add.w	r1, r7, #8
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
 8007bd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007bd2:	e091      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 facb 	bl	8008172 <USBD_CtlError>
            err++;
 8007bdc:	7afb      	ldrb	r3, [r7, #11]
 8007bde:	3301      	adds	r3, #1
 8007be0:	72fb      	strb	r3, [r7, #11]
          break;
 8007be2:	e089      	b.n	8007cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bea:	689b      	ldr	r3, [r3, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	7c12      	ldrb	r2, [r2, #16]
 8007bfc:	f107 0108 	add.w	r1, r7, #8
 8007c00:	4610      	mov	r0, r2
 8007c02:	4798      	blx	r3
 8007c04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c06:	e077      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c08:	6839      	ldr	r1, [r7, #0]
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fab1 	bl	8008172 <USBD_CtlError>
            err++;
 8007c10:	7afb      	ldrb	r3, [r7, #11]
 8007c12:	3301      	adds	r3, #1
 8007c14:	72fb      	strb	r3, [r7, #11]
          break;
 8007c16:	e06f      	b.n	8007cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c1e:	68db      	ldr	r3, [r3, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d00b      	beq.n	8007c3c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	7c12      	ldrb	r2, [r2, #16]
 8007c30:	f107 0108 	add.w	r1, r7, #8
 8007c34:	4610      	mov	r0, r2
 8007c36:	4798      	blx	r3
 8007c38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c3a:	e05d      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c3c:	6839      	ldr	r1, [r7, #0]
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa97 	bl	8008172 <USBD_CtlError>
            err++;
 8007c44:	7afb      	ldrb	r3, [r7, #11]
 8007c46:	3301      	adds	r3, #1
 8007c48:	72fb      	strb	r3, [r7, #11]
          break;
 8007c4a:	e055      	b.n	8007cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d00b      	beq.n	8007c70 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	687a      	ldr	r2, [r7, #4]
 8007c62:	7c12      	ldrb	r2, [r2, #16]
 8007c64:	f107 0108 	add.w	r1, r7, #8
 8007c68:	4610      	mov	r0, r2
 8007c6a:	4798      	blx	r3
 8007c6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007c6e:	e043      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007c70:	6839      	ldr	r1, [r7, #0]
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa7d 	bl	8008172 <USBD_CtlError>
            err++;
 8007c78:	7afb      	ldrb	r3, [r7, #11]
 8007c7a:	3301      	adds	r3, #1
 8007c7c:	72fb      	strb	r3, [r7, #11]
          break;
 8007c7e:	e03b      	b.n	8007cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d00b      	beq.n	8007ca4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c92:	695b      	ldr	r3, [r3, #20]
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	7c12      	ldrb	r2, [r2, #16]
 8007c98:	f107 0108 	add.w	r1, r7, #8
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	4798      	blx	r3
 8007ca0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ca2:	e029      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ca4:	6839      	ldr	r1, [r7, #0]
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 fa63 	bl	8008172 <USBD_CtlError>
            err++;
 8007cac:	7afb      	ldrb	r3, [r7, #11]
 8007cae:	3301      	adds	r3, #1
 8007cb0:	72fb      	strb	r3, [r7, #11]
          break;
 8007cb2:	e021      	b.n	8007cf8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d00b      	beq.n	8007cd8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cc6:	699b      	ldr	r3, [r3, #24]
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	7c12      	ldrb	r2, [r2, #16]
 8007ccc:	f107 0108 	add.w	r1, r7, #8
 8007cd0:	4610      	mov	r0, r2
 8007cd2:	4798      	blx	r3
 8007cd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cd6:	e00f      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cd8:	6839      	ldr	r1, [r7, #0]
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa49 	bl	8008172 <USBD_CtlError>
            err++;
 8007ce0:	7afb      	ldrb	r3, [r7, #11]
 8007ce2:	3301      	adds	r3, #1
 8007ce4:	72fb      	strb	r3, [r7, #11]
          break;
 8007ce6:	e007      	b.n	8007cf8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007ce8:	6839      	ldr	r1, [r7, #0]
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fa41 	bl	8008172 <USBD_CtlError>
          err++;
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007cf6:	bf00      	nop
      }
      break;
 8007cf8:	e037      	b.n	8007d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	7c1b      	ldrb	r3, [r3, #16]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007d0a:	f107 0208 	add.w	r2, r7, #8
 8007d0e:	4610      	mov	r0, r2
 8007d10:	4798      	blx	r3
 8007d12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d14:	e029      	b.n	8007d6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 fa2a 	bl	8008172 <USBD_CtlError>
        err++;
 8007d1e:	7afb      	ldrb	r3, [r7, #11]
 8007d20:	3301      	adds	r3, #1
 8007d22:	72fb      	strb	r3, [r7, #11]
      break;
 8007d24:	e021      	b.n	8007d6a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	7c1b      	ldrb	r3, [r3, #16]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d10d      	bne.n	8007d4a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d36:	f107 0208 	add.w	r2, r7, #8
 8007d3a:	4610      	mov	r0, r2
 8007d3c:	4798      	blx	r3
 8007d3e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3301      	adds	r3, #1
 8007d44:	2207      	movs	r2, #7
 8007d46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007d48:	e00f      	b.n	8007d6a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007d4a:	6839      	ldr	r1, [r7, #0]
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fa10 	bl	8008172 <USBD_CtlError>
        err++;
 8007d52:	7afb      	ldrb	r3, [r7, #11]
 8007d54:	3301      	adds	r3, #1
 8007d56:	72fb      	strb	r3, [r7, #11]
      break;
 8007d58:	e007      	b.n	8007d6a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007d5a:	6839      	ldr	r1, [r7, #0]
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fa08 	bl	8008172 <USBD_CtlError>
      err++;
 8007d62:	7afb      	ldrb	r3, [r7, #11]
 8007d64:	3301      	adds	r3, #1
 8007d66:	72fb      	strb	r3, [r7, #11]
      break;
 8007d68:	bf00      	nop
  }

  if (err != 0U)
 8007d6a:	7afb      	ldrb	r3, [r7, #11]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d11e      	bne.n	8007dae <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	88db      	ldrh	r3, [r3, #6]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d016      	beq.n	8007da6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007d78:	893b      	ldrh	r3, [r7, #8]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d00e      	beq.n	8007d9c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	88da      	ldrh	r2, [r3, #6]
 8007d82:	893b      	ldrh	r3, [r7, #8]
 8007d84:	4293      	cmp	r3, r2
 8007d86:	bf28      	it	cs
 8007d88:	4613      	movcs	r3, r2
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d8e:	893b      	ldrh	r3, [r7, #8]
 8007d90:	461a      	mov	r2, r3
 8007d92:	68f9      	ldr	r1, [r7, #12]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fa69 	bl	800826c <USBD_CtlSendData>
 8007d9a:	e009      	b.n	8007db0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 f9e7 	bl	8008172 <USBD_CtlError>
 8007da4:	e004      	b.n	8007db0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 faba 	bl	8008320 <USBD_CtlSendStatus>
 8007dac:	e000      	b.n	8007db0 <USBD_GetDescriptor+0x2cc>
    return;
 8007dae:	bf00      	nop
  }
}
 8007db0:	3710      	adds	r7, #16
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop

08007db8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
 8007dc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	889b      	ldrh	r3, [r3, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d131      	bne.n	8007e2e <USBD_SetAddress+0x76>
 8007dca:	683b      	ldr	r3, [r7, #0]
 8007dcc:	88db      	ldrh	r3, [r3, #6]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d12d      	bne.n	8007e2e <USBD_SetAddress+0x76>
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	885b      	ldrh	r3, [r3, #2]
 8007dd6:	2b7f      	cmp	r3, #127	@ 0x7f
 8007dd8:	d829      	bhi.n	8007e2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	885b      	ldrh	r3, [r3, #2]
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007de4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007dec:	b2db      	uxtb	r3, r3
 8007dee:	2b03      	cmp	r3, #3
 8007df0:	d104      	bne.n	8007dfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007df2:	6839      	ldr	r1, [r7, #0]
 8007df4:	6878      	ldr	r0, [r7, #4]
 8007df6:	f000 f9bc 	bl	8008172 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dfa:	e01d      	b.n	8007e38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	7bfa      	ldrb	r2, [r7, #15]
 8007e00:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 fef9 	bl	8008c00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f000 fa86 	bl	8008320 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d004      	beq.n	8007e24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e22:	e009      	b.n	8007e38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e2c:	e004      	b.n	8007e38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e2e:	6839      	ldr	r1, [r7, #0]
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 f99e 	bl	8008172 <USBD_CtlError>
  }
}
 8007e36:	bf00      	nop
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	885b      	ldrh	r3, [r3, #2]
 8007e52:	b2da      	uxtb	r2, r3
 8007e54:	4b4e      	ldr	r3, [pc, #312]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007e56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e58:	4b4d      	ldr	r3, [pc, #308]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007e5a:	781b      	ldrb	r3, [r3, #0]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d905      	bls.n	8007e6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f985 	bl	8008172 <USBD_CtlError>
    return USBD_FAIL;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e08c      	b.n	8007f86 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d002      	beq.n	8007e7e <USBD_SetConfig+0x3e>
 8007e78:	2b03      	cmp	r3, #3
 8007e7a:	d029      	beq.n	8007ed0 <USBD_SetConfig+0x90>
 8007e7c:	e075      	b.n	8007f6a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007e7e:	4b44      	ldr	r3, [pc, #272]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d020      	beq.n	8007ec8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007e86:	4b42      	ldr	r3, [pc, #264]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007e88:	781b      	ldrb	r3, [r3, #0]
 8007e8a:	461a      	mov	r2, r3
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e90:	4b3f      	ldr	r3, [pc, #252]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	4619      	mov	r1, r3
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7fe ffe3 	bl	8006e62 <USBD_SetClassConfig>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007ea0:	7bfb      	ldrb	r3, [r7, #15]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d008      	beq.n	8007eb8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f962 	bl	8008172 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007eb6:	e065      	b.n	8007f84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 fa31 	bl	8008320 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2203      	movs	r2, #3
 8007ec2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007ec6:	e05d      	b.n	8007f84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 fa29 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007ece:	e059      	b.n	8007f84 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007ed0:	4b2f      	ldr	r3, [pc, #188]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d112      	bne.n	8007efe <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2202      	movs	r2, #2
 8007edc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ee0:	4b2b      	ldr	r3, [pc, #172]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007ee2:	781b      	ldrb	r3, [r3, #0]
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007eea:	4b29      	ldr	r3, [pc, #164]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	4619      	mov	r1, r3
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f7fe ffd2 	bl	8006e9a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fa12 	bl	8008320 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007efc:	e042      	b.n	8007f84 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007efe:	4b24      	ldr	r3, [pc, #144]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	461a      	mov	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d02a      	beq.n	8007f62 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fe ffc0 	bl	8006e9a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007f24:	4b1a      	ldr	r3, [pc, #104]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7fe ff99 	bl	8006e62 <USBD_SetClassConfig>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d00f      	beq.n	8007f5a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007f3a:	6839      	ldr	r1, [r7, #0]
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f918 	bl	8008172 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fe ffa5 	bl	8006e9a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007f58:	e014      	b.n	8007f84 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007f5a:	6878      	ldr	r0, [r7, #4]
 8007f5c:	f000 f9e0 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007f60:	e010      	b.n	8007f84 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f9dc 	bl	8008320 <USBD_CtlSendStatus>
      break;
 8007f68:	e00c      	b.n	8007f84 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 f900 	bl	8008172 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f72:	4b07      	ldr	r3, [pc, #28]	@ (8007f90 <USBD_SetConfig+0x150>)
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f7fe ff8e 	bl	8006e9a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007f7e:	2303      	movs	r3, #3
 8007f80:	73fb      	strb	r3, [r7, #15]
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop
 8007f90:	20000260 	.word	0x20000260

08007f94 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	88db      	ldrh	r3, [r3, #6]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d004      	beq.n	8007fb0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f8e2 	bl	8008172 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007fae:	e023      	b.n	8007ff8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fb6:	b2db      	uxtb	r3, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	dc02      	bgt.n	8007fc2 <USBD_GetConfig+0x2e>
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	dc03      	bgt.n	8007fc8 <USBD_GetConfig+0x34>
 8007fc0:	e015      	b.n	8007fee <USBD_GetConfig+0x5a>
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d00b      	beq.n	8007fde <USBD_GetConfig+0x4a>
 8007fc6:	e012      	b.n	8007fee <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2200      	movs	r2, #0
 8007fcc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f948 	bl	800826c <USBD_CtlSendData>
        break;
 8007fdc:	e00c      	b.n	8007ff8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	3304      	adds	r3, #4
 8007fe2:	2201      	movs	r2, #1
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f940 	bl	800826c <USBD_CtlSendData>
        break;
 8007fec:	e004      	b.n	8007ff8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f8be 	bl	8008172 <USBD_CtlError>
        break;
 8007ff6:	bf00      	nop
}
 8007ff8:	bf00      	nop
 8007ffa:	3708      	adds	r7, #8
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008010:	b2db      	uxtb	r3, r3
 8008012:	3b01      	subs	r3, #1
 8008014:	2b02      	cmp	r3, #2
 8008016:	d81e      	bhi.n	8008056 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	88db      	ldrh	r3, [r3, #6]
 800801c:	2b02      	cmp	r3, #2
 800801e:	d004      	beq.n	800802a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008020:	6839      	ldr	r1, [r7, #0]
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 f8a5 	bl	8008172 <USBD_CtlError>
        break;
 8008028:	e01a      	b.n	8008060 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008036:	2b00      	cmp	r3, #0
 8008038:	d005      	beq.n	8008046 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f043 0202 	orr.w	r2, r3, #2
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	330c      	adds	r3, #12
 800804a:	2202      	movs	r2, #2
 800804c:	4619      	mov	r1, r3
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f000 f90c 	bl	800826c <USBD_CtlSendData>
      break;
 8008054:	e004      	b.n	8008060 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f88a 	bl	8008172 <USBD_CtlError>
      break;
 800805e:	bf00      	nop
  }
}
 8008060:	bf00      	nop
 8008062:	3708      	adds	r7, #8
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b082      	sub	sp, #8
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	885b      	ldrh	r3, [r3, #2]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d107      	bne.n	800808a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2201      	movs	r2, #1
 800807e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 f94c 	bl	8008320 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008088:	e013      	b.n	80080b2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	885b      	ldrh	r3, [r3, #2]
 800808e:	2b02      	cmp	r3, #2
 8008090:	d10b      	bne.n	80080aa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	889b      	ldrh	r3, [r3, #4]
 8008096:	0a1b      	lsrs	r3, r3, #8
 8008098:	b29b      	uxth	r3, r3
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f000 f93c 	bl	8008320 <USBD_CtlSendStatus>
}
 80080a8:	e003      	b.n	80080b2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80080aa:	6839      	ldr	r1, [r7, #0]
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f860 	bl	8008172 <USBD_CtlError>
}
 80080b2:	bf00      	nop
 80080b4:	3708      	adds	r7, #8
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b082      	sub	sp, #8
 80080be:	af00      	add	r7, sp, #0
 80080c0:	6078      	str	r0, [r7, #4]
 80080c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	2b02      	cmp	r3, #2
 80080d0:	d80b      	bhi.n	80080ea <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	885b      	ldrh	r3, [r3, #2]
 80080d6:	2b01      	cmp	r3, #1
 80080d8:	d10c      	bne.n	80080f4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f000 f91c 	bl	8008320 <USBD_CtlSendStatus>
      }
      break;
 80080e8:	e004      	b.n	80080f4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80080ea:	6839      	ldr	r1, [r7, #0]
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 f840 	bl	8008172 <USBD_CtlError>
      break;
 80080f2:	e000      	b.n	80080f6 <USBD_ClrFeature+0x3c>
      break;
 80080f4:	bf00      	nop
  }
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080fe:	b580      	push	{r7, lr}
 8008100:	b084      	sub	sp, #16
 8008102:	af00      	add	r7, sp, #0
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	3301      	adds	r3, #1
 8008118:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781a      	ldrb	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008128:	68f8      	ldr	r0, [r7, #12]
 800812a:	f7ff fa40 	bl	80075ae <SWAPBYTE>
 800812e:	4603      	mov	r3, r0
 8008130:	461a      	mov	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	3301      	adds	r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	3301      	adds	r3, #1
 8008140:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008142:	68f8      	ldr	r0, [r7, #12]
 8008144:	f7ff fa33 	bl	80075ae <SWAPBYTE>
 8008148:	4603      	mov	r3, r0
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	3301      	adds	r3, #1
 8008154:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3301      	adds	r3, #1
 800815a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800815c:	68f8      	ldr	r0, [r7, #12]
 800815e:	f7ff fa26 	bl	80075ae <SWAPBYTE>
 8008162:	4603      	mov	r3, r0
 8008164:	461a      	mov	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	80da      	strh	r2, [r3, #6]
}
 800816a:	bf00      	nop
 800816c:	3710      	adds	r7, #16
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800817c:	2180      	movs	r1, #128	@ 0x80
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 fcd4 	bl	8008b2c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008184:	2100      	movs	r1, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fcd0 	bl	8008b2c <USBD_LL_StallEP>
}
 800818c:	bf00      	nop
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80081a0:	2300      	movs	r3, #0
 80081a2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d042      	beq.n	8008230 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80081ae:	6938      	ldr	r0, [r7, #16]
 80081b0:	f000 f842 	bl	8008238 <USBD_GetLen>
 80081b4:	4603      	mov	r3, r0
 80081b6:	3301      	adds	r3, #1
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081be:	d808      	bhi.n	80081d2 <USBD_GetString+0x3e>
 80081c0:	6938      	ldr	r0, [r7, #16]
 80081c2:	f000 f839 	bl	8008238 <USBD_GetLen>
 80081c6:	4603      	mov	r3, r0
 80081c8:	3301      	adds	r3, #1
 80081ca:	b29b      	uxth	r3, r3
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	b29a      	uxth	r2, r3
 80081d0:	e001      	b.n	80081d6 <USBD_GetString+0x42>
 80081d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80081da:	7dfb      	ldrb	r3, [r7, #23]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	4413      	add	r3, r2
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7812      	ldrb	r2, [r2, #0]
 80081e4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081e6:	7dfb      	ldrb	r3, [r7, #23]
 80081e8:	3301      	adds	r3, #1
 80081ea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80081ec:	7dfb      	ldrb	r3, [r7, #23]
 80081ee:	68ba      	ldr	r2, [r7, #8]
 80081f0:	4413      	add	r3, r2
 80081f2:	2203      	movs	r2, #3
 80081f4:	701a      	strb	r2, [r3, #0]
  idx++;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
 80081f8:	3301      	adds	r3, #1
 80081fa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80081fc:	e013      	b.n	8008226 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80081fe:	7dfb      	ldrb	r3, [r7, #23]
 8008200:	68ba      	ldr	r2, [r7, #8]
 8008202:	4413      	add	r3, r2
 8008204:	693a      	ldr	r2, [r7, #16]
 8008206:	7812      	ldrb	r2, [r2, #0]
 8008208:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	3301      	adds	r3, #1
 800820e:	613b      	str	r3, [r7, #16]
    idx++;
 8008210:	7dfb      	ldrb	r3, [r7, #23]
 8008212:	3301      	adds	r3, #1
 8008214:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008216:	7dfb      	ldrb	r3, [r7, #23]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	4413      	add	r3, r2
 800821c:	2200      	movs	r2, #0
 800821e:	701a      	strb	r2, [r3, #0]
    idx++;
 8008220:	7dfb      	ldrb	r3, [r7, #23]
 8008222:	3301      	adds	r3, #1
 8008224:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d1e7      	bne.n	80081fe <USBD_GetString+0x6a>
 800822e:	e000      	b.n	8008232 <USBD_GetString+0x9e>
    return;
 8008230:	bf00      	nop
  }
}
 8008232:	3718      	adds	r7, #24
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008238:	b480      	push	{r7}
 800823a:	b085      	sub	sp, #20
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008240:	2300      	movs	r3, #0
 8008242:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008248:	e005      	b.n	8008256 <USBD_GetLen+0x1e>
  {
    len++;
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	3301      	adds	r3, #1
 800824e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	3301      	adds	r3, #1
 8008254:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d1f5      	bne.n	800824a <USBD_GetLen+0x12>
  }

  return len;
 800825e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826a:	4770      	bx	lr

0800826c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800826c:	b580      	push	{r7, lr}
 800826e:	b084      	sub	sp, #16
 8008270:	af00      	add	r7, sp, #0
 8008272:	60f8      	str	r0, [r7, #12]
 8008274:	60b9      	str	r1, [r7, #8]
 8008276:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2202      	movs	r2, #2
 800827c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	687a      	ldr	r2, [r7, #4]
 8008284:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	2100      	movs	r1, #0
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 fcd3 	bl	8008c3e <USBD_LL_Transmit>

  return USBD_OK;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3710      	adds	r7, #16
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}

080082a2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b084      	sub	sp, #16
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	60f8      	str	r0, [r7, #12]
 80082aa:	60b9      	str	r1, [r7, #8]
 80082ac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68ba      	ldr	r2, [r7, #8]
 80082b2:	2100      	movs	r1, #0
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f000 fcc2 	bl	8008c3e <USBD_LL_Transmit>

  return USBD_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3710      	adds	r7, #16
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}

080082c4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b084      	sub	sp, #16
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2203      	movs	r2, #3
 80082d4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	687a      	ldr	r2, [r7, #4]
 80082dc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	687a      	ldr	r2, [r7, #4]
 80082e4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	2100      	movs	r1, #0
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 fcc6 	bl	8008c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082f4:	2300      	movs	r3, #0
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3710      	adds	r7, #16
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}

080082fe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b084      	sub	sp, #16
 8008302:	af00      	add	r7, sp, #0
 8008304:	60f8      	str	r0, [r7, #12]
 8008306:	60b9      	str	r1, [r7, #8]
 8008308:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	2100      	movs	r1, #0
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 fcb5 	bl	8008c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2204      	movs	r2, #4
 800832c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008330:	2300      	movs	r3, #0
 8008332:	2200      	movs	r2, #0
 8008334:	2100      	movs	r1, #0
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fc81 	bl	8008c3e <USBD_LL_Transmit>

  return USBD_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b082      	sub	sp, #8
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2205      	movs	r2, #5
 8008352:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008356:	2300      	movs	r3, #0
 8008358:	2200      	movs	r2, #0
 800835a:	2100      	movs	r1, #0
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f000 fc8f 	bl	8008c80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3708      	adds	r7, #8
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008370:	2200      	movs	r2, #0
 8008372:	4912      	ldr	r1, [pc, #72]	@ (80083bc <MX_USB_DEVICE_Init+0x50>)
 8008374:	4812      	ldr	r0, [pc, #72]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008376:	f7fe fcf7 	bl	8006d68 <USBD_Init>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008380:	f7f8 fc74 	bl	8000c6c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008384:	490f      	ldr	r1, [pc, #60]	@ (80083c4 <MX_USB_DEVICE_Init+0x58>)
 8008386:	480e      	ldr	r0, [pc, #56]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 8008388:	f7fe fd1e 	bl	8006dc8 <USBD_RegisterClass>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008392:	f7f8 fc6b 	bl	8000c6c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008396:	490c      	ldr	r1, [pc, #48]	@ (80083c8 <MX_USB_DEVICE_Init+0x5c>)
 8008398:	4809      	ldr	r0, [pc, #36]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 800839a:	f7fe fc55 	bl	8006c48 <USBD_CDC_RegisterInterface>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d001      	beq.n	80083a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80083a4:	f7f8 fc62 	bl	8000c6c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80083a8:	4805      	ldr	r0, [pc, #20]	@ (80083c0 <MX_USB_DEVICE_Init+0x54>)
 80083aa:	f7fe fd43 	bl	8006e34 <USBD_Start>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d001      	beq.n	80083b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80083b4:	f7f8 fc5a 	bl	8000c6c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	200000ac 	.word	0x200000ac
 80083c0:	20000264 	.word	0x20000264
 80083c4:	20000018 	.word	0x20000018
 80083c8:	20000098 	.word	0x20000098

080083cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80083d0:	2200      	movs	r2, #0
 80083d2:	4905      	ldr	r1, [pc, #20]	@ (80083e8 <CDC_Init_FS+0x1c>)
 80083d4:	4805      	ldr	r0, [pc, #20]	@ (80083ec <CDC_Init_FS+0x20>)
 80083d6:	f7fe fc51 	bl	8006c7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80083da:	4905      	ldr	r1, [pc, #20]	@ (80083f0 <CDC_Init_FS+0x24>)
 80083dc:	4803      	ldr	r0, [pc, #12]	@ (80083ec <CDC_Init_FS+0x20>)
 80083de:	f7fe fc6f 	bl	8006cc0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80083e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	20000d40 	.word	0x20000d40
 80083ec:	20000264 	.word	0x20000264
 80083f0:	20000540 	.word	0x20000540

080083f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80083f4:	b480      	push	{r7}
 80083f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80083f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008404:	b480      	push	{r7}
 8008406:	b083      	sub	sp, #12
 8008408:	af00      	add	r7, sp, #0
 800840a:	4603      	mov	r3, r0
 800840c:	6039      	str	r1, [r7, #0]
 800840e:	71fb      	strb	r3, [r7, #7]
 8008410:	4613      	mov	r3, r2
 8008412:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008414:	79fb      	ldrb	r3, [r7, #7]
 8008416:	2b23      	cmp	r3, #35	@ 0x23
 8008418:	d84a      	bhi.n	80084b0 <CDC_Control_FS+0xac>
 800841a:	a201      	add	r2, pc, #4	@ (adr r2, 8008420 <CDC_Control_FS+0x1c>)
 800841c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008420:	080084b1 	.word	0x080084b1
 8008424:	080084b1 	.word	0x080084b1
 8008428:	080084b1 	.word	0x080084b1
 800842c:	080084b1 	.word	0x080084b1
 8008430:	080084b1 	.word	0x080084b1
 8008434:	080084b1 	.word	0x080084b1
 8008438:	080084b1 	.word	0x080084b1
 800843c:	080084b1 	.word	0x080084b1
 8008440:	080084b1 	.word	0x080084b1
 8008444:	080084b1 	.word	0x080084b1
 8008448:	080084b1 	.word	0x080084b1
 800844c:	080084b1 	.word	0x080084b1
 8008450:	080084b1 	.word	0x080084b1
 8008454:	080084b1 	.word	0x080084b1
 8008458:	080084b1 	.word	0x080084b1
 800845c:	080084b1 	.word	0x080084b1
 8008460:	080084b1 	.word	0x080084b1
 8008464:	080084b1 	.word	0x080084b1
 8008468:	080084b1 	.word	0x080084b1
 800846c:	080084b1 	.word	0x080084b1
 8008470:	080084b1 	.word	0x080084b1
 8008474:	080084b1 	.word	0x080084b1
 8008478:	080084b1 	.word	0x080084b1
 800847c:	080084b1 	.word	0x080084b1
 8008480:	080084b1 	.word	0x080084b1
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084b1 	.word	0x080084b1
 800848c:	080084b1 	.word	0x080084b1
 8008490:	080084b1 	.word	0x080084b1
 8008494:	080084b1 	.word	0x080084b1
 8008498:	080084b1 	.word	0x080084b1
 800849c:	080084b1 	.word	0x080084b1
 80084a0:	080084b1 	.word	0x080084b1
 80084a4:	080084b1 	.word	0x080084b1
 80084a8:	080084b1 	.word	0x080084b1
 80084ac:	080084b1 	.word	0x080084b1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80084b0:	bf00      	nop
  }

  return (USBD_OK);
 80084b2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084b4:	4618      	mov	r0, r3
 80084b6:	370c      	adds	r7, #12
 80084b8:	46bd      	mov	sp, r7
 80084ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084be:	4770      	bx	lr

080084c0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4805      	ldr	r0, [pc, #20]	@ (80084e4 <CDC_Receive_FS+0x24>)
 80084ce:	f7fe fbf7 	bl	8006cc0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80084d2:	4804      	ldr	r0, [pc, #16]	@ (80084e4 <CDC_Receive_FS+0x24>)
 80084d4:	f7fe fc12 	bl	8006cfc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80084d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3708      	adds	r7, #8
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	20000264 	.word	0x20000264

080084e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	4613      	mov	r3, r2
 80084f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80084f6:	2300      	movs	r3, #0
 80084f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80084fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084fe:	4618      	mov	r0, r3
 8008500:	371c      	adds	r7, #28
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr
	...

0800850c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2212      	movs	r2, #18
 800851c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800851e:	4b03      	ldr	r3, [pc, #12]	@ (800852c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008520:	4618      	mov	r0, r3
 8008522:	370c      	adds	r7, #12
 8008524:	46bd      	mov	sp, r7
 8008526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852a:	4770      	bx	lr
 800852c:	200000c8 	.word	0x200000c8

08008530 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	4603      	mov	r3, r0
 8008538:	6039      	str	r1, [r7, #0]
 800853a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	2204      	movs	r2, #4
 8008540:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008542:	4b03      	ldr	r3, [pc, #12]	@ (8008550 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008544:	4618      	mov	r0, r3
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr
 8008550:	200000dc 	.word	0x200000dc

08008554 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	4603      	mov	r3, r0
 800855c:	6039      	str	r1, [r7, #0]
 800855e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008560:	79fb      	ldrb	r3, [r7, #7]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d105      	bne.n	8008572 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008566:	683a      	ldr	r2, [r7, #0]
 8008568:	4907      	ldr	r1, [pc, #28]	@ (8008588 <USBD_FS_ProductStrDescriptor+0x34>)
 800856a:	4808      	ldr	r0, [pc, #32]	@ (800858c <USBD_FS_ProductStrDescriptor+0x38>)
 800856c:	f7ff fe12 	bl	8008194 <USBD_GetString>
 8008570:	e004      	b.n	800857c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008572:	683a      	ldr	r2, [r7, #0]
 8008574:	4904      	ldr	r1, [pc, #16]	@ (8008588 <USBD_FS_ProductStrDescriptor+0x34>)
 8008576:	4805      	ldr	r0, [pc, #20]	@ (800858c <USBD_FS_ProductStrDescriptor+0x38>)
 8008578:	f7ff fe0c 	bl	8008194 <USBD_GetString>
  }
  return USBD_StrDesc;
 800857c:	4b02      	ldr	r3, [pc, #8]	@ (8008588 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	20001540 	.word	0x20001540
 800858c:	08008de0 	.word	0x08008de0

08008590 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b082      	sub	sp, #8
 8008594:	af00      	add	r7, sp, #0
 8008596:	4603      	mov	r3, r0
 8008598:	6039      	str	r1, [r7, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800859c:	683a      	ldr	r2, [r7, #0]
 800859e:	4904      	ldr	r1, [pc, #16]	@ (80085b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085a0:	4804      	ldr	r0, [pc, #16]	@ (80085b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085a2:	f7ff fdf7 	bl	8008194 <USBD_GetString>
  return USBD_StrDesc;
 80085a6:	4b02      	ldr	r3, [pc, #8]	@ (80085b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3708      	adds	r7, #8
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}
 80085b0:	20001540 	.word	0x20001540
 80085b4:	08008df8 	.word	0x08008df8

080085b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	4603      	mov	r3, r0
 80085c0:	6039      	str	r1, [r7, #0]
 80085c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	221a      	movs	r2, #26
 80085c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085ca:	f000 f843 	bl	8008654 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085ce:	4b02      	ldr	r3, [pc, #8]	@ (80085d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085d0:	4618      	mov	r0, r3
 80085d2:	3708      	adds	r7, #8
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}
 80085d8:	200000e0 	.word	0x200000e0

080085dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b082      	sub	sp, #8
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d105      	bne.n	80085fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085ee:	683a      	ldr	r2, [r7, #0]
 80085f0:	4907      	ldr	r1, [pc, #28]	@ (8008610 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085f2:	4808      	ldr	r0, [pc, #32]	@ (8008614 <USBD_FS_ConfigStrDescriptor+0x38>)
 80085f4:	f7ff fdce 	bl	8008194 <USBD_GetString>
 80085f8:	e004      	b.n	8008604 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	4904      	ldr	r1, [pc, #16]	@ (8008610 <USBD_FS_ConfigStrDescriptor+0x34>)
 80085fe:	4805      	ldr	r0, [pc, #20]	@ (8008614 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008600:	f7ff fdc8 	bl	8008194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008604:	4b02      	ldr	r3, [pc, #8]	@ (8008610 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008606:	4618      	mov	r0, r3
 8008608:	3708      	adds	r7, #8
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20001540 	.word	0x20001540
 8008614:	08008e0c 	.word	0x08008e0c

08008618 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	4603      	mov	r3, r0
 8008620:	6039      	str	r1, [r7, #0]
 8008622:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008624:	79fb      	ldrb	r3, [r7, #7]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d105      	bne.n	8008636 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800862a:	683a      	ldr	r2, [r7, #0]
 800862c:	4907      	ldr	r1, [pc, #28]	@ (800864c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800862e:	4808      	ldr	r0, [pc, #32]	@ (8008650 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008630:	f7ff fdb0 	bl	8008194 <USBD_GetString>
 8008634:	e004      	b.n	8008640 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	4904      	ldr	r1, [pc, #16]	@ (800864c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800863a:	4805      	ldr	r0, [pc, #20]	@ (8008650 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800863c:	f7ff fdaa 	bl	8008194 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008640:	4b02      	ldr	r3, [pc, #8]	@ (800864c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008642:	4618      	mov	r0, r3
 8008644:	3708      	adds	r7, #8
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20001540 	.word	0x20001540
 8008650:	08008e18 	.word	0x08008e18

08008654 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800865a:	4b0f      	ldr	r3, [pc, #60]	@ (8008698 <Get_SerialNum+0x44>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008660:	4b0e      	ldr	r3, [pc, #56]	@ (800869c <Get_SerialNum+0x48>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008666:	4b0e      	ldr	r3, [pc, #56]	@ (80086a0 <Get_SerialNum+0x4c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4413      	add	r3, r2
 8008672:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d009      	beq.n	800868e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800867a:	2208      	movs	r2, #8
 800867c:	4909      	ldr	r1, [pc, #36]	@ (80086a4 <Get_SerialNum+0x50>)
 800867e:	68f8      	ldr	r0, [r7, #12]
 8008680:	f000 f814 	bl	80086ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008684:	2204      	movs	r2, #4
 8008686:	4908      	ldr	r1, [pc, #32]	@ (80086a8 <Get_SerialNum+0x54>)
 8008688:	68b8      	ldr	r0, [r7, #8]
 800868a:	f000 f80f 	bl	80086ac <IntToUnicode>
  }
}
 800868e:	bf00      	nop
 8008690:	3710      	adds	r7, #16
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	1fff7a10 	.word	0x1fff7a10
 800869c:	1fff7a14 	.word	0x1fff7a14
 80086a0:	1fff7a18 	.word	0x1fff7a18
 80086a4:	200000e2 	.word	0x200000e2
 80086a8:	200000f2 	.word	0x200000f2

080086ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	4613      	mov	r3, r2
 80086b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ba:	2300      	movs	r3, #0
 80086bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086be:	2300      	movs	r3, #0
 80086c0:	75fb      	strb	r3, [r7, #23]
 80086c2:	e027      	b.n	8008714 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	0f1b      	lsrs	r3, r3, #28
 80086c8:	2b09      	cmp	r3, #9
 80086ca:	d80b      	bhi.n	80086e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	0f1b      	lsrs	r3, r3, #28
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	7dfb      	ldrb	r3, [r7, #23]
 80086d4:	005b      	lsls	r3, r3, #1
 80086d6:	4619      	mov	r1, r3
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	440b      	add	r3, r1
 80086dc:	3230      	adds	r2, #48	@ 0x30
 80086de:	b2d2      	uxtb	r2, r2
 80086e0:	701a      	strb	r2, [r3, #0]
 80086e2:	e00a      	b.n	80086fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	0f1b      	lsrs	r3, r3, #28
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	7dfb      	ldrb	r3, [r7, #23]
 80086ec:	005b      	lsls	r3, r3, #1
 80086ee:	4619      	mov	r1, r3
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	440b      	add	r3, r1
 80086f4:	3237      	adds	r2, #55	@ 0x37
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	011b      	lsls	r3, r3, #4
 80086fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008700:	7dfb      	ldrb	r3, [r7, #23]
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	3301      	adds	r3, #1
 8008706:	68ba      	ldr	r2, [r7, #8]
 8008708:	4413      	add	r3, r2
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800870e:	7dfb      	ldrb	r3, [r7, #23]
 8008710:	3301      	adds	r3, #1
 8008712:	75fb      	strb	r3, [r7, #23]
 8008714:	7dfa      	ldrb	r2, [r7, #23]
 8008716:	79fb      	ldrb	r3, [r7, #7]
 8008718:	429a      	cmp	r2, r3
 800871a:	d3d3      	bcc.n	80086c4 <IntToUnicode+0x18>
  }
}
 800871c:	bf00      	nop
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008728:	4770      	bx	lr
	...

0800872c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b08a      	sub	sp, #40	@ 0x28
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008734:	f107 0314 	add.w	r3, r7, #20
 8008738:	2200      	movs	r2, #0
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	605a      	str	r2, [r3, #4]
 800873e:	609a      	str	r2, [r3, #8]
 8008740:	60da      	str	r2, [r3, #12]
 8008742:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800874c:	d147      	bne.n	80087de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800874e:	2300      	movs	r3, #0
 8008750:	613b      	str	r3, [r7, #16]
 8008752:	4b25      	ldr	r3, [pc, #148]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 8008754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008756:	4a24      	ldr	r2, [pc, #144]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 8008758:	f043 0301 	orr.w	r3, r3, #1
 800875c:	6313      	str	r3, [r2, #48]	@ 0x30
 800875e:	4b22      	ldr	r3, [pc, #136]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 8008760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008762:	f003 0301 	and.w	r3, r3, #1
 8008766:	613b      	str	r3, [r7, #16]
 8008768:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800876a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800876e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008770:	2300      	movs	r3, #0
 8008772:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008774:	2300      	movs	r3, #0
 8008776:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008778:	f107 0314 	add.w	r3, r7, #20
 800877c:	4619      	mov	r1, r3
 800877e:	481b      	ldr	r0, [pc, #108]	@ (80087ec <HAL_PCD_MspInit+0xc0>)
 8008780:	f7f9 f890 	bl	80018a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008784:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008788:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800878a:	2302      	movs	r3, #2
 800878c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800878e:	2300      	movs	r3, #0
 8008790:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008792:	2300      	movs	r3, #0
 8008794:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008796:	230a      	movs	r3, #10
 8008798:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800879a:	f107 0314 	add.w	r3, r7, #20
 800879e:	4619      	mov	r1, r3
 80087a0:	4812      	ldr	r0, [pc, #72]	@ (80087ec <HAL_PCD_MspInit+0xc0>)
 80087a2:	f7f9 f87f 	bl	80018a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087a6:	4b10      	ldr	r3, [pc, #64]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 80087a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087aa:	4a0f      	ldr	r2, [pc, #60]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 80087ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80087b2:	2300      	movs	r3, #0
 80087b4:	60fb      	str	r3, [r7, #12]
 80087b6:	4b0c      	ldr	r3, [pc, #48]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 80087b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087ba:	4a0b      	ldr	r2, [pc, #44]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 80087bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80087c2:	4b09      	ldr	r3, [pc, #36]	@ (80087e8 <HAL_PCD_MspInit+0xbc>)
 80087c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087ca:	60fb      	str	r3, [r7, #12]
 80087cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087ce:	2200      	movs	r2, #0
 80087d0:	2100      	movs	r1, #0
 80087d2:	2043      	movs	r0, #67	@ 0x43
 80087d4:	f7f8 ff33 	bl	800163e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087d8:	2043      	movs	r0, #67	@ 0x43
 80087da:	f7f8 ff4c 	bl	8001676 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087de:	bf00      	nop
 80087e0:	3728      	adds	r7, #40	@ 0x28
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	40023800 	.word	0x40023800
 80087ec:	40020000 	.word	0x40020000

080087f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008804:	4619      	mov	r1, r3
 8008806:	4610      	mov	r0, r2
 8008808:	f7fe fb61 	bl	8006ece <USBD_LL_SetupStage>
}
 800880c:	bf00      	nop
 800880e:	3708      	adds	r7, #8
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}

08008814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008826:	78fa      	ldrb	r2, [r7, #3]
 8008828:	6879      	ldr	r1, [r7, #4]
 800882a:	4613      	mov	r3, r2
 800882c:	00db      	lsls	r3, r3, #3
 800882e:	4413      	add	r3, r2
 8008830:	009b      	lsls	r3, r3, #2
 8008832:	440b      	add	r3, r1
 8008834:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008838:	681a      	ldr	r2, [r3, #0]
 800883a:	78fb      	ldrb	r3, [r7, #3]
 800883c:	4619      	mov	r1, r3
 800883e:	f7fe fb9b 	bl	8006f78 <USBD_LL_DataOutStage>
}
 8008842:	bf00      	nop
 8008844:	3708      	adds	r7, #8
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800884a:	b580      	push	{r7, lr}
 800884c:	b082      	sub	sp, #8
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	460b      	mov	r3, r1
 8008854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800885c:	78fa      	ldrb	r2, [r7, #3]
 800885e:	6879      	ldr	r1, [r7, #4]
 8008860:	4613      	mov	r3, r2
 8008862:	00db      	lsls	r3, r3, #3
 8008864:	4413      	add	r3, r2
 8008866:	009b      	lsls	r3, r3, #2
 8008868:	440b      	add	r3, r1
 800886a:	3320      	adds	r3, #32
 800886c:	681a      	ldr	r2, [r3, #0]
 800886e:	78fb      	ldrb	r3, [r7, #3]
 8008870:	4619      	mov	r1, r3
 8008872:	f7fe fc34 	bl	80070de <USBD_LL_DataInStage>
}
 8008876:	bf00      	nop
 8008878:	3708      	adds	r7, #8
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b082      	sub	sp, #8
 8008882:	af00      	add	r7, sp, #0
 8008884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800888c:	4618      	mov	r0, r3
 800888e:	f7fe fd6e 	bl	800736e <USBD_LL_SOF>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}

0800889a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800889a:	b580      	push	{r7, lr}
 800889c:	b084      	sub	sp, #16
 800889e:	af00      	add	r7, sp, #0
 80088a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80088a2:	2301      	movs	r3, #1
 80088a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	79db      	ldrb	r3, [r3, #7]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d102      	bne.n	80088b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80088ae:	2300      	movs	r3, #0
 80088b0:	73fb      	strb	r3, [r7, #15]
 80088b2:	e008      	b.n	80088c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	79db      	ldrb	r3, [r3, #7]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d102      	bne.n	80088c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80088bc:	2301      	movs	r3, #1
 80088be:	73fb      	strb	r3, [r7, #15]
 80088c0:	e001      	b.n	80088c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80088c2:	f7f8 f9d3 	bl	8000c6c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088cc:	7bfa      	ldrb	r2, [r7, #15]
 80088ce:	4611      	mov	r1, r2
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fd08 	bl	80072e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088dc:	4618      	mov	r0, r3
 80088de:	f7fe fcb0 	bl	8007242 <USBD_LL_Reset>
}
 80088e2:	bf00      	nop
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
	...

080088ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80088fa:	4618      	mov	r0, r3
 80088fc:	f7fe fd03 	bl	8007306 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	6812      	ldr	r2, [r2, #0]
 800890e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008912:	f043 0301 	orr.w	r3, r3, #1
 8008916:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	7adb      	ldrb	r3, [r3, #11]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d005      	beq.n	800892c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008920:	4b04      	ldr	r3, [pc, #16]	@ (8008934 <HAL_PCD_SuspendCallback+0x48>)
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	4a03      	ldr	r2, [pc, #12]	@ (8008934 <HAL_PCD_SuspendCallback+0x48>)
 8008926:	f043 0306 	orr.w	r3, r3, #6
 800892a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800892c:	bf00      	nop
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}
 8008934:	e000ed00 	.word	0xe000ed00

08008938 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008946:	4618      	mov	r0, r3
 8008948:	f7fe fcf9 	bl	800733e <USBD_LL_Resume>
}
 800894c:	bf00      	nop
 800894e:	3708      	adds	r7, #8
 8008950:	46bd      	mov	sp, r7
 8008952:	bd80      	pop	{r7, pc}

08008954 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b082      	sub	sp, #8
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	460b      	mov	r3, r1
 800895e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	4611      	mov	r1, r2
 800896a:	4618      	mov	r0, r3
 800896c:	f7fe fd51 	bl	8007412 <USBD_LL_IsoOUTIncomplete>
}
 8008970:	bf00      	nop
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	460b      	mov	r3, r1
 8008982:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800898a:	78fa      	ldrb	r2, [r7, #3]
 800898c:	4611      	mov	r1, r2
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fd0d 	bl	80073ae <USBD_LL_IsoINIncomplete>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fd63 	bl	8007476 <USBD_LL_DevConnected>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f7fe fd60 	bl	800748c <USBD_LL_DevDisconnected>
}
 80089cc:	bf00      	nop
 80089ce:	3708      	adds	r7, #8
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}

080089d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d13c      	bne.n	8008a5e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089e4:	4a20      	ldr	r2, [pc, #128]	@ (8008a68 <USBD_LL_Init+0x94>)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008a68 <USBD_LL_Init+0x94>)
 80089f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a68 <USBD_LL_Init+0x94>)
 80089f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80089fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008a68 <USBD_LL_Init+0x94>)
 80089fe:	2204      	movs	r2, #4
 8008a00:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008a02:	4b19      	ldr	r3, [pc, #100]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a04:	2202      	movs	r2, #2
 8008a06:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008a08:	4b17      	ldr	r3, [pc, #92]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008a0e:	4b16      	ldr	r3, [pc, #88]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a10:	2202      	movs	r2, #2
 8008a12:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008a14:	4b14      	ldr	r3, [pc, #80]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a16:	2200      	movs	r2, #0
 8008a18:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008a1a:	4b13      	ldr	r3, [pc, #76]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a20:	4b11      	ldr	r3, [pc, #68]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a22:	2200      	movs	r2, #0
 8008a24:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008a26:	4b10      	ldr	r3, [pc, #64]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a28:	2201      	movs	r2, #1
 8008a2a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a2e:	2200      	movs	r2, #0
 8008a30:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a32:	480d      	ldr	r0, [pc, #52]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a34:	f7f9 fed0 	bl	80027d8 <HAL_PCD_Init>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d001      	beq.n	8008a42 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a3e:	f7f8 f915 	bl	8000c6c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a42:	2180      	movs	r1, #128	@ 0x80
 8008a44:	4808      	ldr	r0, [pc, #32]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a46:	f7fb f8fc 	bl	8003c42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a4a:	2240      	movs	r2, #64	@ 0x40
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4806      	ldr	r0, [pc, #24]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a50:	f7fb f8b0 	bl	8003bb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a54:	2280      	movs	r2, #128	@ 0x80
 8008a56:	2101      	movs	r1, #1
 8008a58:	4803      	ldr	r0, [pc, #12]	@ (8008a68 <USBD_LL_Init+0x94>)
 8008a5a:	f7fb f8ab 	bl	8003bb4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a5e:	2300      	movs	r3, #0
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3708      	adds	r7, #8
 8008a64:	46bd      	mov	sp, r7
 8008a66:	bd80      	pop	{r7, pc}
 8008a68:	20001740 	.word	0x20001740

08008a6c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a74:	2300      	movs	r3, #0
 8008a76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a82:	4618      	mov	r0, r3
 8008a84:	f7f9 ffb7 	bl	80029f6 <HAL_PCD_Start>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a8c:	7bfb      	ldrb	r3, [r7, #15]
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f000 f942 	bl	8008d18 <USBD_Get_USB_Status>
 8008a94:	4603      	mov	r3, r0
 8008a96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a98:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	6078      	str	r0, [r7, #4]
 8008aaa:	4608      	mov	r0, r1
 8008aac:	4611      	mov	r1, r2
 8008aae:	461a      	mov	r2, r3
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	70fb      	strb	r3, [r7, #3]
 8008ab4:	460b      	mov	r3, r1
 8008ab6:	70bb      	strb	r3, [r7, #2]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008abc:	2300      	movs	r3, #0
 8008abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008aca:	78bb      	ldrb	r3, [r7, #2]
 8008acc:	883a      	ldrh	r2, [r7, #0]
 8008ace:	78f9      	ldrb	r1, [r7, #3]
 8008ad0:	f7fa fc8b 	bl	80033ea <HAL_PCD_EP_Open>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 f91c 	bl	8008d18 <USBD_Get_USB_Status>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	3710      	adds	r7, #16
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}

08008aee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008aee:	b580      	push	{r7, lr}
 8008af0:	b084      	sub	sp, #16
 8008af2:	af00      	add	r7, sp, #0
 8008af4:	6078      	str	r0, [r7, #4]
 8008af6:	460b      	mov	r3, r1
 8008af8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008afa:	2300      	movs	r3, #0
 8008afc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b08:	78fa      	ldrb	r2, [r7, #3]
 8008b0a:	4611      	mov	r1, r2
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7fa fcd6 	bl	80034be <HAL_PCD_EP_Close>
 8008b12:	4603      	mov	r3, r0
 8008b14:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b16:	7bfb      	ldrb	r3, [r7, #15]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 f8fd 	bl	8008d18 <USBD_Get_USB_Status>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b22:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b46:	78fa      	ldrb	r2, [r7, #3]
 8008b48:	4611      	mov	r1, r2
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fa fd8e 	bl	800366c <HAL_PCD_EP_SetStall>
 8008b50:	4603      	mov	r3, r0
 8008b52:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b54:	7bfb      	ldrb	r3, [r7, #15]
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 f8de 	bl	8008d18 <USBD_Get_USB_Status>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b60:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3710      	adds	r7, #16
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}

08008b6a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
 8008b72:	460b      	mov	r3, r1
 8008b74:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b76:	2300      	movs	r3, #0
 8008b78:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b84:	78fa      	ldrb	r2, [r7, #3]
 8008b86:	4611      	mov	r1, r2
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fa fdd2 	bl	8003732 <HAL_PCD_EP_ClrStall>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b92:	7bfb      	ldrb	r3, [r7, #15]
 8008b94:	4618      	mov	r0, r3
 8008b96:	f000 f8bf 	bl	8008d18 <USBD_Get_USB_Status>
 8008b9a:	4603      	mov	r3, r0
 8008b9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ba0:	4618      	mov	r0, r3
 8008ba2:	3710      	adds	r7, #16
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	bd80      	pop	{r7, pc}

08008ba8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b085      	sub	sp, #20
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	460b      	mov	r3, r1
 8008bb2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	da0b      	bge.n	8008bdc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008bc4:	78fb      	ldrb	r3, [r7, #3]
 8008bc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bca:	68f9      	ldr	r1, [r7, #12]
 8008bcc:	4613      	mov	r3, r2
 8008bce:	00db      	lsls	r3, r3, #3
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	3316      	adds	r3, #22
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	e00b      	b.n	8008bf4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008be2:	68f9      	ldr	r1, [r7, #12]
 8008be4:	4613      	mov	r3, r2
 8008be6:	00db      	lsls	r3, r3, #3
 8008be8:	4413      	add	r3, r2
 8008bea:	009b      	lsls	r3, r3, #2
 8008bec:	440b      	add	r3, r1
 8008bee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8008bf2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3714      	adds	r7, #20
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008c00:	b580      	push	{r7, lr}
 8008c02:	b084      	sub	sp, #16
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	460b      	mov	r3, r1
 8008c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c10:	2300      	movs	r3, #0
 8008c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c1a:	78fa      	ldrb	r2, [r7, #3]
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f7fa fbbf 	bl	80033a2 <HAL_PCD_SetAddress>
 8008c24:	4603      	mov	r3, r0
 8008c26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c28:	7bfb      	ldrb	r3, [r7, #15]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f000 f874 	bl	8008d18 <USBD_Get_USB_Status>
 8008c30:	4603      	mov	r3, r0
 8008c32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}

08008c3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c3e:	b580      	push	{r7, lr}
 8008c40:	b086      	sub	sp, #24
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	60f8      	str	r0, [r7, #12]
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	603b      	str	r3, [r7, #0]
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c5c:	7af9      	ldrb	r1, [r7, #11]
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	f7fa fcc9 	bl	80035f8 <HAL_PCD_EP_Transmit>
 8008c66:	4603      	mov	r3, r0
 8008c68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f000 f853 	bl	8008d18 <USBD_Get_USB_Status>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c76:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b086      	sub	sp, #24
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	607a      	str	r2, [r7, #4]
 8008c8a:	603b      	str	r3, [r7, #0]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c90:	2300      	movs	r3, #0
 8008c92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c94:	2300      	movs	r3, #0
 8008c96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c9e:	7af9      	ldrb	r1, [r7, #11]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	f7fa fc55 	bl	8003552 <HAL_PCD_EP_Receive>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008cac:	7dfb      	ldrb	r3, [r7, #23]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f832 	bl	8008d18 <USBD_Get_USB_Status>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008cb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b082      	sub	sp, #8
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008cd4:	78fa      	ldrb	r2, [r7, #3]
 8008cd6:	4611      	mov	r1, r2
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7fa fc75 	bl	80035c8 <HAL_PCD_EP_GetRxCount>
 8008cde:	4603      	mov	r3, r0
}
 8008ce0:	4618      	mov	r0, r3
 8008ce2:	3708      	adds	r7, #8
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	bd80      	pop	{r7, pc}

08008ce8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b083      	sub	sp, #12
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008cf0:	4b03      	ldr	r3, [pc, #12]	@ (8008d00 <USBD_static_malloc+0x18>)
}
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	370c      	adds	r7, #12
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	20001c24 	.word	0x20001c24

08008d04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]

}
 8008d0c:	bf00      	nop
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	4603      	mov	r3, r0
 8008d20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008d26:	79fb      	ldrb	r3, [r7, #7]
 8008d28:	2b03      	cmp	r3, #3
 8008d2a:	d817      	bhi.n	8008d5c <USBD_Get_USB_Status+0x44>
 8008d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008d34 <USBD_Get_USB_Status+0x1c>)
 8008d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d32:	bf00      	nop
 8008d34:	08008d45 	.word	0x08008d45
 8008d38:	08008d4b 	.word	0x08008d4b
 8008d3c:	08008d51 	.word	0x08008d51
 8008d40:	08008d57 	.word	0x08008d57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d44:	2300      	movs	r3, #0
 8008d46:	73fb      	strb	r3, [r7, #15]
    break;
 8008d48:	e00b      	b.n	8008d62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d4a:	2303      	movs	r3, #3
 8008d4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d4e:	e008      	b.n	8008d62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d50:	2301      	movs	r3, #1
 8008d52:	73fb      	strb	r3, [r7, #15]
    break;
 8008d54:	e005      	b.n	8008d62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d56:	2303      	movs	r3, #3
 8008d58:	73fb      	strb	r3, [r7, #15]
    break;
 8008d5a:	e002      	b.n	8008d62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d5c:	2303      	movs	r3, #3
 8008d5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d60:	bf00      	nop
  }
  return usb_status;
 8008d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3714      	adds	r7, #20
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6e:	4770      	bx	lr

08008d70 <memset>:
 8008d70:	4402      	add	r2, r0
 8008d72:	4603      	mov	r3, r0
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d100      	bne.n	8008d7a <memset+0xa>
 8008d78:	4770      	bx	lr
 8008d7a:	f803 1b01 	strb.w	r1, [r3], #1
 8008d7e:	e7f9      	b.n	8008d74 <memset+0x4>

08008d80 <__libc_init_array>:
 8008d80:	b570      	push	{r4, r5, r6, lr}
 8008d82:	4d0d      	ldr	r5, [pc, #52]	@ (8008db8 <__libc_init_array+0x38>)
 8008d84:	4c0d      	ldr	r4, [pc, #52]	@ (8008dbc <__libc_init_array+0x3c>)
 8008d86:	1b64      	subs	r4, r4, r5
 8008d88:	10a4      	asrs	r4, r4, #2
 8008d8a:	2600      	movs	r6, #0
 8008d8c:	42a6      	cmp	r6, r4
 8008d8e:	d109      	bne.n	8008da4 <__libc_init_array+0x24>
 8008d90:	4d0b      	ldr	r5, [pc, #44]	@ (8008dc0 <__libc_init_array+0x40>)
 8008d92:	4c0c      	ldr	r4, [pc, #48]	@ (8008dc4 <__libc_init_array+0x44>)
 8008d94:	f000 f818 	bl	8008dc8 <_init>
 8008d98:	1b64      	subs	r4, r4, r5
 8008d9a:	10a4      	asrs	r4, r4, #2
 8008d9c:	2600      	movs	r6, #0
 8008d9e:	42a6      	cmp	r6, r4
 8008da0:	d105      	bne.n	8008dae <__libc_init_array+0x2e>
 8008da2:	bd70      	pop	{r4, r5, r6, pc}
 8008da4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008da8:	4798      	blx	r3
 8008daa:	3601      	adds	r6, #1
 8008dac:	e7ee      	b.n	8008d8c <__libc_init_array+0xc>
 8008dae:	f855 3b04 	ldr.w	r3, [r5], #4
 8008db2:	4798      	blx	r3
 8008db4:	3601      	adds	r6, #1
 8008db6:	e7f2      	b.n	8008d9e <__libc_init_array+0x1e>
 8008db8:	08008e48 	.word	0x08008e48
 8008dbc:	08008e48 	.word	0x08008e48
 8008dc0:	08008e48 	.word	0x08008e48
 8008dc4:	08008e4c 	.word	0x08008e4c

08008dc8 <_init>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_fini>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr
