
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009138  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080092c8  080092c8  0000a2c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800936c  0800936c  0000b14c  2**0
                  CONTENTS
  4 .ARM          00000008  0800936c  0800936c  0000a36c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009374  08009374  0000b14c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009374  08009374  0000a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009378  08009378  0000a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000014c  20000000  0800937c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b14c  2**0
                  CONTENTS
 10 .bss          00001e7c  2000014c  2000014c  0000b14c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001fc8  20001fc8  0000b14c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b14c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017d74  00000000  00000000  0000b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004214  00000000  00000000  00022ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001390  00000000  00000000  00027108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ee8  00000000  00000000  00028498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002547f  00000000  00000000  00029380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d945  00000000  00000000  0004e7ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ccf12  00000000  00000000  0006c144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00139056  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000054c4  00000000  00000000  0013909c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0013e560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080092b0 	.word	0x080092b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	080092b0 	.word	0x080092b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000566:	463b      	mov	r3, r7
 8000568:	2200      	movs	r2, #0
 800056a:	601a      	str	r2, [r3, #0]
 800056c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800056e:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_DAC_Init+0x4c>)
 8000570:	4a0f      	ldr	r2, [pc, #60]	@ (80005b0 <MX_DAC_Init+0x50>)
 8000572:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000574:	480d      	ldr	r0, [pc, #52]	@ (80005ac <MX_DAC_Init+0x4c>)
 8000576:	f000 fe32 	bl	80011de <HAL_DAC_Init>
 800057a:	4603      	mov	r3, r0
 800057c:	2b00      	cmp	r3, #0
 800057e:	d001      	beq.n	8000584 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000580:	f000 fb3a 	bl	8000bf8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000584:	2300      	movs	r3, #0
 8000586:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000588:	2300      	movs	r3, #0
 800058a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800058c:	463b      	mov	r3, r7
 800058e:	2210      	movs	r2, #16
 8000590:	4619      	mov	r1, r3
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <MX_DAC_Init+0x4c>)
 8000594:	f000 fec6 	bl	8001324 <HAL_DAC_ConfigChannel>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800059e:	f000 fb2b 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	20000168 	.word	0x20000168
 80005b0:	40007400 	.word	0x40007400

080005b4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b08a      	sub	sp, #40	@ 0x28
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005bc:	f107 0314 	add.w	r3, r7, #20
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a17      	ldr	r2, [pc, #92]	@ (8000630 <HAL_DAC_MspInit+0x7c>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d127      	bne.n	8000626 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b16      	ldr	r3, [pc, #88]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 80005dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005de:	4a15      	ldr	r2, [pc, #84]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 80005e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80005e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 80005e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b0c      	ldr	r3, [pc, #48]	@ (8000634 <HAL_DAC_MspInit+0x80>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800060e:	2320      	movs	r3, #32
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000612:	2303      	movs	r3, #3
 8000614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	4805      	ldr	r0, [pc, #20]	@ (8000638 <HAL_DAC_MspInit+0x84>)
 8000622:	f000 fed9 	bl	80013d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000626:	bf00      	nop
 8000628:	3728      	adds	r7, #40	@ 0x28
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	40007400 	.word	0x40007400
 8000634:	40023800 	.word	0x40023800
 8000638:	40020000 	.word	0x40020000

0800063c <MX_GPIO_Init>:
     PA6   ------> SPI1_MISO
     PA7   ------> SPI1_MOSI
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b08c      	sub	sp, #48	@ 0x30
 8000640:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000642:	f107 031c 	add.w	r3, r7, #28
 8000646:	2200      	movs	r2, #0
 8000648:	601a      	str	r2, [r3, #0]
 800064a:	605a      	str	r2, [r3, #4]
 800064c:	609a      	str	r2, [r3, #8]
 800064e:	60da      	str	r2, [r3, #12]
 8000650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000652:	2300      	movs	r3, #0
 8000654:	61bb      	str	r3, [r7, #24]
 8000656:	4b7a      	ldr	r3, [pc, #488]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800065a:	4a79      	ldr	r2, [pc, #484]	@ (8000840 <MX_GPIO_Init+0x204>)
 800065c:	f043 0310 	orr.w	r3, r3, #16
 8000660:	6313      	str	r3, [r2, #48]	@ 0x30
 8000662:	4b77      	ldr	r3, [pc, #476]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	f003 0310 	and.w	r3, r3, #16
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	617b      	str	r3, [r7, #20]
 8000672:	4b73      	ldr	r3, [pc, #460]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	4a72      	ldr	r2, [pc, #456]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000678:	f043 0304 	orr.w	r3, r3, #4
 800067c:	6313      	str	r3, [r2, #48]	@ 0x30
 800067e:	4b70      	ldr	r3, [pc, #448]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000682:	f003 0304 	and.w	r3, r3, #4
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
 800068e:	4b6c      	ldr	r3, [pc, #432]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a6b      	ldr	r2, [pc, #428]	@ (8000840 <MX_GPIO_Init+0x204>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
 800069a:	4b69      	ldr	r3, [pc, #420]	@ (8000840 <MX_GPIO_Init+0x204>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	613b      	str	r3, [r7, #16]
 80006a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	4b65      	ldr	r3, [pc, #404]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a64      	ldr	r2, [pc, #400]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006b0:	f043 0301 	orr.w	r3, r3, #1
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b62      	ldr	r3, [pc, #392]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f003 0301 	and.w	r3, r3, #1
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	4b5e      	ldr	r3, [pc, #376]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	4a5d      	ldr	r2, [pc, #372]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006cc:	f043 0302 	orr.w	r3, r3, #2
 80006d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d2:	4b5b      	ldr	r3, [pc, #364]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	f003 0302 	and.w	r3, r3, #2
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b57      	ldr	r3, [pc, #348]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	4a56      	ldr	r2, [pc, #344]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006e8:	f043 0308 	orr.w	r3, r3, #8
 80006ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ee:	4b54      	ldr	r3, [pc, #336]	@ (8000840 <MX_GPIO_Init+0x204>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2108      	movs	r1, #8
 80006fe:	4851      	ldr	r0, [pc, #324]	@ (8000844 <MX_GPIO_Init+0x208>)
 8000700:	f001 f806 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000704:	2201      	movs	r2, #1
 8000706:	2101      	movs	r1, #1
 8000708:	484f      	ldr	r0, [pc, #316]	@ (8000848 <MX_GPIO_Init+0x20c>)
 800070a:	f001 f801 	bl	8001710 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800070e:	2200      	movs	r2, #0
 8000710:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000714:	484d      	ldr	r0, [pc, #308]	@ (800084c <MX_GPIO_Init+0x210>)
 8000716:	f000 fffb 	bl	8001710 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800071a:	2308      	movs	r3, #8
 800071c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071e:	2301      	movs	r3, #1
 8000720:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	4844      	ldr	r0, [pc, #272]	@ (8000844 <MX_GPIO_Init+0x208>)
 8000732:	f000 fe51 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000736:	2301      	movs	r3, #1
 8000738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073a:	2301      	movs	r3, #1
 800073c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	2300      	movs	r3, #0
 8000740:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	4619      	mov	r1, r3
 800074c:	483e      	ldr	r0, [pc, #248]	@ (8000848 <MX_GPIO_Init+0x20c>)
 800074e:	f000 fe43 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000752:	2308      	movs	r3, #8
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000756:	2302      	movs	r3, #2
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000762:	2305      	movs	r3, #5
 8000764:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	4619      	mov	r1, r3
 800076c:	4836      	ldr	r0, [pc, #216]	@ (8000848 <MX_GPIO_Init+0x20c>)
 800076e:	f000 fe33 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000772:	2301      	movs	r3, #1
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000776:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4832      	ldr	r0, [pc, #200]	@ (8000850 <MX_GPIO_Init+0x214>)
 8000788:	f000 fe26 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800078c:	23c0      	movs	r3, #192	@ 0xc0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800079c:	2305      	movs	r3, #5
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	482a      	ldr	r0, [pc, #168]	@ (8000850 <MX_GPIO_Init+0x214>)
 80007a8:	f000 fe16 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80007ac:	2304      	movs	r3, #4
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4619      	mov	r1, r3
 80007be:	4825      	ldr	r0, [pc, #148]	@ (8000854 <MX_GPIO_Init+0x218>)
 80007c0:	f000 fe0a 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80007c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d2:	2300      	movs	r3, #0
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80007d6:	2305      	movs	r3, #5
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	481c      	ldr	r0, [pc, #112]	@ (8000854 <MX_GPIO_Init+0x218>)
 80007e2:	f000 fdf9 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007e6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80007ea:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4813      	ldr	r0, [pc, #76]	@ (800084c <MX_GPIO_Init+0x210>)
 8000800:	f000 fdea 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000804:	2320      	movs	r3, #32
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	2300      	movs	r3, #0
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080c:	2300      	movs	r3, #0
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000810:	f107 031c 	add.w	r3, r7, #28
 8000814:	4619      	mov	r1, r3
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_GPIO_Init+0x210>)
 8000818:	f000 fdde 	bl	80013d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800081c:	2302      	movs	r3, #2
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000820:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000824:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4804      	ldr	r0, [pc, #16]	@ (8000844 <MX_GPIO_Init+0x208>)
 8000832:	f000 fdd1 	bl	80013d8 <HAL_GPIO_Init>

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	@ 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40021000 	.word	0x40021000
 8000848:	40020800 	.word	0x40020800
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40020000 	.word	0x40020000
 8000854:	40020400 	.word	0x40020400

08000858 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800085c:	4b12      	ldr	r3, [pc, #72]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800085e:	4a13      	ldr	r2, [pc, #76]	@ (80008ac <MX_I2C1_Init+0x54>)
 8000860:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000862:	4b11      	ldr	r3, [pc, #68]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000864:	4a12      	ldr	r2, [pc, #72]	@ (80008b0 <MX_I2C1_Init+0x58>)
 8000866:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000868:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800086e:	4b0e      	ldr	r3, [pc, #56]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000870:	2200      	movs	r2, #0
 8000872:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000874:	4b0c      	ldr	r3, [pc, #48]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000876:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800087a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800087c:	4b0a      	ldr	r3, [pc, #40]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800087e:	2200      	movs	r2, #0
 8000880:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000888:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <MX_I2C1_Init+0x50>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800088e:	4b06      	ldr	r3, [pc, #24]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000894:	4804      	ldr	r0, [pc, #16]	@ (80008a8 <MX_I2C1_Init+0x50>)
 8000896:	f000 ff55 	bl	8001744 <HAL_I2C_Init>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008a0:	f000 f9aa 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000017c 	.word	0x2000017c
 80008ac:	40005400 	.word	0x40005400
 80008b0:	000186a0 	.word	0x000186a0

080008b4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	@ 0x28
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008bc:	f107 0314 	add.w	r3, r7, #20
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
 80008c6:	609a      	str	r2, [r3, #8]
 80008c8:	60da      	str	r2, [r3, #12]
 80008ca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a19      	ldr	r2, [pc, #100]	@ (8000938 <HAL_I2C_MspInit+0x84>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d12c      	bne.n	8000930 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <HAL_I2C_MspInit+0x88>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a17      	ldr	r2, [pc, #92]	@ (800093c <HAL_I2C_MspInit+0x88>)
 80008e0:	f043 0302 	orr.w	r3, r3, #2
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <HAL_I2C_MspInit+0x88>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0302 	and.w	r3, r3, #2
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008f2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80008f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f8:	2312      	movs	r3, #18
 80008fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000904:	2304      	movs	r3, #4
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	4619      	mov	r1, r3
 800090e:	480c      	ldr	r0, [pc, #48]	@ (8000940 <HAL_I2C_MspInit+0x8c>)
 8000910:	f000 fd62 	bl	80013d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000914:	2300      	movs	r3, #0
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_I2C_MspInit+0x88>)
 800091a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091c:	4a07      	ldr	r2, [pc, #28]	@ (800093c <HAL_I2C_MspInit+0x88>)
 800091e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000922:	6413      	str	r3, [r2, #64]	@ 0x40
 8000924:	4b05      	ldr	r3, [pc, #20]	@ (800093c <HAL_I2C_MspInit+0x88>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000928:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800092c:	60fb      	str	r3, [r7, #12]
 800092e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000930:	bf00      	nop
 8000932:	3728      	adds	r7, #40	@ 0x28
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40005400 	.word	0x40005400
 800093c:	40023800 	.word	0x40023800
 8000940:	40020400 	.word	0x40020400

08000944 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000948:	4b13      	ldr	r3, [pc, #76]	@ (8000998 <MX_I2S3_Init+0x54>)
 800094a:	4a14      	ldr	r2, [pc, #80]	@ (800099c <MX_I2S3_Init+0x58>)
 800094c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000954:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000956:	4b10      	ldr	r3, [pc, #64]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800095c:	4b0e      	ldr	r3, [pc, #56]	@ (8000998 <MX_I2S3_Init+0x54>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000962:	4b0d      	ldr	r3, [pc, #52]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000964:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000968:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800096a:	4b0b      	ldr	r3, [pc, #44]	@ (8000998 <MX_I2S3_Init+0x54>)
 800096c:	4a0c      	ldr	r2, [pc, #48]	@ (80009a0 <MX_I2S3_Init+0x5c>)
 800096e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000970:	4b09      	ldr	r3, [pc, #36]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000972:	2200      	movs	r2, #0
 8000974:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000976:	4b08      	ldr	r3, [pc, #32]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000978:	2200      	movs	r2, #0
 800097a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800097c:	4b06      	ldr	r3, [pc, #24]	@ (8000998 <MX_I2S3_Init+0x54>)
 800097e:	2200      	movs	r2, #0
 8000980:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	@ (8000998 <MX_I2S3_Init+0x54>)
 8000984:	f001 f822 	bl	80019cc <HAL_I2S_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800098e:	f000 f933 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	200001d0 	.word	0x200001d0
 800099c:	40003c00 	.word	0x40003c00
 80009a0:	00017700 	.word	0x00017700

080009a4 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08e      	sub	sp, #56	@ 0x38
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a31      	ldr	r2, [pc, #196]	@ (8000a94 <HAL_I2S_MspInit+0xf0>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d15a      	bne.n	8000a8a <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009d4:	2301      	movs	r3, #1
 80009d6:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80009d8:	23c0      	movs	r3, #192	@ 0xc0
 80009da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80009dc:	2302      	movs	r3, #2
 80009de:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e0:	f107 0314 	add.w	r3, r7, #20
 80009e4:	4618      	mov	r0, r3
 80009e6:	f003 fb7b 	bl	80040e0 <HAL_RCCEx_PeriphCLKConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80009f0:	f000 f902 	bl	8000bf8 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009f4:	2300      	movs	r3, #0
 80009f6:	613b      	str	r3, [r7, #16]
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 80009fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009fc:	4a26      	ldr	r2, [pc, #152]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 80009fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a02:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a04:	4b24      	ldr	r3, [pc, #144]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a0c:	613b      	str	r3, [r7, #16]
 8000a0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	60fb      	str	r3, [r7, #12]
 8000a14:	4b20      	ldr	r3, [pc, #128]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a18:	4a1f      	ldr	r2, [pc, #124]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a20:	4b1d      	ldr	r3, [pc, #116]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a34:	4a18      	ldr	r2, [pc, #96]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a36:	f043 0304 	orr.w	r3, r3, #4
 8000a3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3c:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <HAL_I2S_MspInit+0xf4>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a40:	f003 0304 	and.w	r3, r3, #4
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a48:	2310      	movs	r3, #16
 8000a4a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a58:	2306      	movs	r3, #6
 8000a5a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a60:	4619      	mov	r1, r3
 8000a62:	480e      	ldr	r0, [pc, #56]	@ (8000a9c <HAL_I2S_MspInit+0xf8>)
 8000a64:	f000 fcb8 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a68:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a7a:	2306      	movs	r3, #6
 8000a7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <HAL_I2S_MspInit+0xfc>)
 8000a86:	f000 fca7 	bl	80013d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a8a:	bf00      	nop
 8000a8c:	3738      	adds	r7, #56	@ 0x38
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40003c00 	.word	0x40003c00
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020800 	.word	0x40020800

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f000 f9f1 	bl	8000e90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f839 	bl	8000b24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f7ff fdc3 	bl	800063c <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ab6:	f7ff fecf 	bl	8000858 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000aba:	f7ff ff43 	bl	8000944 <MX_I2S3_Init>
  MX_DAC_Init();
 8000abe:	f7ff fd4f 	bl	8000560 <MX_DAC_Init>
  MX_USART2_UART_Init();
 8000ac2:	f000 f949 	bl	8000d58 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000ac6:	f007 fa2b 	bl	8007f20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  uint16_t dac_value = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	80fb      	strh	r3, [r7, #6]

  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000ace:	2110      	movs	r1, #16
 8000ad0:	4811      	ldr	r0, [pc, #68]	@ (8000b18 <main+0x74>)
 8000ad2:	f000 fba6 	bl	8001222 <HAL_DAC_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  dac_value = (dac_value + 1) % 4096; // 12-bit bir DAC değeri
 8000ad6:	88fb      	ldrh	r3, [r7, #6]
 8000ad8:	3301      	adds	r3, #1
 8000ada:	425a      	negs	r2, r3
 8000adc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ae0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8000ae4:	bf58      	it	pl
 8000ae6:	4253      	negpl	r3, r2
 8000ae8:	80fb      	strh	r3, [r7, #6]
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_value);
 8000aea:	88fb      	ldrh	r3, [r7, #6]
 8000aec:	2200      	movs	r2, #0
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	@ (8000b18 <main+0x74>)
 8000af2:	f000 fbed 	bl	80012d0 <HAL_DAC_SetValue>
	  sprintf(buf, "DAC Value: %d\n", dac_value);
 8000af6:	88fb      	ldrh	r3, [r7, #6]
 8000af8:	461a      	mov	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <main+0x78>)
 8000afc:	4808      	ldr	r0, [pc, #32]	@ (8000b20 <main+0x7c>)
 8000afe:	f007 ff37 	bl	8008970 <siprintf>
	  CDC_Transmit_FS(buf, sizeof(buf));
 8000b02:	2132      	movs	r1, #50	@ 0x32
 8000b04:	4806      	ldr	r0, [pc, #24]	@ (8000b20 <main+0x7c>)
 8000b06:	f007 fac9 	bl	800809c <CDC_Transmit_FS>
	  //HAL_UART_Transmit(&huart2, buf, sizeof(buf), 100);

	 HAL_Delay(500);
 8000b0a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000b0e:	f000 fa31 	bl	8000f74 <HAL_Delay>
  {
 8000b12:	bf00      	nop
 8000b14:	e7df      	b.n	8000ad6 <main+0x32>
 8000b16:	bf00      	nop
 8000b18:	20000168 	.word	0x20000168
 8000b1c:	080092c8 	.word	0x080092c8
 8000b20:	20000218 	.word	0x20000218

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	@ 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	@ 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f007 ff3c 	bl	80089b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b28      	ldr	r3, [pc, #160]	@ (8000bf0 <SystemClock_Config+0xcc>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	4a27      	ldr	r2, [pc, #156]	@ (8000bf0 <SystemClock_Config+0xcc>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b58:	4b25      	ldr	r3, [pc, #148]	@ (8000bf0 <SystemClock_Config+0xcc>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b22      	ldr	r3, [pc, #136]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a21      	ldr	r2, [pc, #132]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b6e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4b1f      	ldr	r3, [pc, #124]	@ (8000bf4 <SystemClock_Config+0xd0>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b80:	2301      	movs	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b88:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b8e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b94:	2308      	movs	r3, #8
 8000b96:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b98:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b9c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba2:	2307      	movs	r3, #7
 8000ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 0320 	add.w	r3, r7, #32
 8000baa:	4618      	mov	r0, r3
 8000bac:	f002 fe00 	bl	80037b0 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000bb6:	f000 f81f 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bba:	230f      	movs	r3, #15
 8000bbc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bc6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bd0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2105      	movs	r1, #5
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f003 f861 	bl	8003ca0 <HAL_RCC_ClockConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000be4:	f000 f808 	bl	8000bf8 <Error_Handler>
  }
}
 8000be8:	bf00      	nop
 8000bea:	3750      	adds	r7, #80	@ 0x50
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40023800 	.word	0x40023800
 8000bf4:	40007000 	.word	0x40007000

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000c42:	2007      	movs	r0, #7
 8000c44:	f000 fa8a 	bl	800115c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40023800 	.word	0x40023800

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr

08000c98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000caa:	f000 f943 	bl	8000f34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
	...

08000cb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cb8:	4802      	ldr	r0, [pc, #8]	@ (8000cc4 <OTG_FS_IRQHandler+0x10>)
 8000cba:	f001 fc6b 	bl	8002594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000cbe:	bf00      	nop
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	2000177c 	.word	0x2000177c

08000cc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cd0:	4a14      	ldr	r2, [pc, #80]	@ (8000d24 <_sbrk+0x5c>)
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <_sbrk+0x60>)
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <_sbrk+0x64>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d102      	bne.n	8000cea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <_sbrk+0x64>)
 8000ce6:	4a12      	ldr	r2, [pc, #72]	@ (8000d30 <_sbrk+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cea:	4b10      	ldr	r3, [pc, #64]	@ (8000d2c <_sbrk+0x64>)
 8000cec:	681a      	ldr	r2, [r3, #0]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d207      	bcs.n	8000d08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf8:	f007 fe62 	bl	80089c0 <__errno>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	220c      	movs	r2, #12
 8000d00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	e009      	b.n	8000d1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d08:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <_sbrk+0x64>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	4a05      	ldr	r2, [pc, #20]	@ (8000d2c <_sbrk+0x64>)
 8000d18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d1a:	68fb      	ldr	r3, [r7, #12]
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3718      	adds	r7, #24
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20020000 	.word	0x20020000
 8000d28:	00000400 	.word	0x00000400
 8000d2c:	2000024c 	.word	0x2000024c
 8000d30:	20001fc8 	.word	0x20001fc8

08000d34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d38:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <SystemInit+0x20>)
 8000d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d3e:	4a05      	ldr	r2, [pc, #20]	@ (8000d54 <SystemInit+0x20>)
 8000d40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	@ (8000da8 <MX_USART2_UART_Init+0x50>)
 8000d60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d62:	4b10      	ldr	r3, [pc, #64]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d7e:	220c      	movs	r2, #12
 8000d80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d88:	4b06      	ldr	r3, [pc, #24]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	@ (8000da4 <MX_USART2_UART_Init+0x4c>)
 8000d90:	f003 fae8 	bl	8004364 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d9a:	f7ff ff2d 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	20000250 	.word	0x20000250
 8000da8:	40004400 	.word	0x40004400

08000dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	@ 0x28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a19      	ldr	r2, [pc, #100]	@ (8000e30 <HAL_UART_MspInit+0x84>)
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d12b      	bne.n	8000e26 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	4b18      	ldr	r3, [pc, #96]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	4a17      	ldr	r2, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dde:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de6:	613b      	str	r3, [r7, #16]
 8000de8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	4b11      	ldr	r3, [pc, #68]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	4a10      	ldr	r2, [pc, #64]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000df4:	f043 0301 	orr.w	r3, r3, #1
 8000df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <HAL_UART_MspInit+0x88>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfe:	f003 0301 	and.w	r3, r3, #1
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e06:	230c      	movs	r3, #12
 8000e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e16:	2307      	movs	r3, #7
 8000e18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	f107 0314 	add.w	r3, r7, #20
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	@ (8000e38 <HAL_UART_MspInit+0x8c>)
 8000e22:	f000 fad9 	bl	80013d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e26:	bf00      	nop
 8000e28:	3728      	adds	r7, #40	@ 0x28
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40020000 	.word	0x40020000

08000e3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e40:	f7ff ff78 	bl	8000d34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e44:	480c      	ldr	r0, [pc, #48]	@ (8000e78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e46:	490d      	ldr	r1, [pc, #52]	@ (8000e7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e4c:	e002      	b.n	8000e54 <LoopCopyDataInit>

08000e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e52:	3304      	adds	r3, #4

08000e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e58:	d3f9      	bcc.n	8000e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e60:	e001      	b.n	8000e66 <LoopFillZerobss>

08000e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e64:	3204      	adds	r2, #4

08000e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e68:	d3fb      	bcc.n	8000e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f007 fdaf 	bl	80089cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6e:	f7ff fe19 	bl	8000aa4 <main>
  bx  lr    
 8000e72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 8000e80:	0800937c 	.word	0x0800937c
  ldr r2, =_sbss
 8000e84:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 8000e88:	20001fc8 	.word	0x20001fc8

08000e8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC_IRQHandler>
	...

08000e90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e94:	4b0e      	ldr	r3, [pc, #56]	@ (8000ed0 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <HAL_Init+0x40>)
 8000e9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed0 <HAL_Init+0x40>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eac:	4b08      	ldr	r3, [pc, #32]	@ (8000ed0 <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a07      	ldr	r2, [pc, #28]	@ (8000ed0 <HAL_Init+0x40>)
 8000eb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb8:	2003      	movs	r0, #3
 8000eba:	f000 f94f 	bl	800115c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ebe:	2000      	movs	r0, #0
 8000ec0:	f000 f808 	bl	8000ed4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ec4:	f7ff fe9e 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	40023c00 	.word	0x40023c00

08000ed4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <HAL_InitTick+0x54>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b12      	ldr	r3, [pc, #72]	@ (8000f2c <HAL_InitTick+0x58>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 f967 	bl	80011c6 <HAL_SYSTICK_Config>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00e      	b.n	8000f20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2b0f      	cmp	r3, #15
 8000f06:	d80a      	bhi.n	8000f1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	6879      	ldr	r1, [r7, #4]
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f000 f92f 	bl	8001172 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f14:	4a06      	ldr	r2, [pc, #24]	@ (8000f30 <HAL_InitTick+0x5c>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	e000      	b.n	8000f20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000008 	.word	0x20000008
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b06      	ldr	r3, [pc, #24]	@ (8000f54 <HAL_IncTick+0x20>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	461a      	mov	r2, r3
 8000f3e:	4b06      	ldr	r3, [pc, #24]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4413      	add	r3, r2
 8000f44:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <HAL_IncTick+0x24>)
 8000f46:	6013      	str	r3, [r2, #0]
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000298 	.word	0x20000298

08000f5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f60:	4b03      	ldr	r3, [pc, #12]	@ (8000f70 <HAL_GetTick+0x14>)
 8000f62:	681b      	ldr	r3, [r3, #0]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000298 	.word	0x20000298

08000f74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f7c:	f7ff ffee 	bl	8000f5c <HAL_GetTick>
 8000f80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f8c:	d005      	beq.n	8000f9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_Delay+0x44>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	461a      	mov	r2, r3
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f9a:	bf00      	nop
 8000f9c:	f7ff ffde 	bl	8000f5c <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	68fa      	ldr	r2, [r7, #12]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d8f7      	bhi.n	8000f9c <HAL_Delay+0x28>
  {
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000008 	.word	0x20000008

08000fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fd8:	4013      	ands	r3, r2
 8000fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fe4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fe8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fee:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	60d3      	str	r3, [r2, #12]
}
 8000ff4:	bf00      	nop
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001008:	4b04      	ldr	r3, [pc, #16]	@ (800101c <__NVIC_GetPriorityGrouping+0x18>)
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	0a1b      	lsrs	r3, r3, #8
 800100e:	f003 0307 	and.w	r3, r3, #7
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	e000ed00 	.word	0xe000ed00

08001020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	2b00      	cmp	r3, #0
 8001030:	db0b      	blt.n	800104a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001032:	79fb      	ldrb	r3, [r7, #7]
 8001034:	f003 021f 	and.w	r2, r3, #31
 8001038:	4907      	ldr	r1, [pc, #28]	@ (8001058 <__NVIC_EnableIRQ+0x38>)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	095b      	lsrs	r3, r3, #5
 8001040:	2001      	movs	r0, #1
 8001042:	fa00 f202 	lsl.w	r2, r0, r2
 8001046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100

0800105c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	6039      	str	r1, [r7, #0]
 8001066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106c:	2b00      	cmp	r3, #0
 800106e:	db0a      	blt.n	8001086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	b2da      	uxtb	r2, r3
 8001074:	490c      	ldr	r1, [pc, #48]	@ (80010a8 <__NVIC_SetPriority+0x4c>)
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	0112      	lsls	r2, r2, #4
 800107c:	b2d2      	uxtb	r2, r2
 800107e:	440b      	add	r3, r1
 8001080:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001084:	e00a      	b.n	800109c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	b2da      	uxtb	r2, r3
 800108a:	4908      	ldr	r1, [pc, #32]	@ (80010ac <__NVIC_SetPriority+0x50>)
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	f003 030f 	and.w	r3, r3, #15
 8001092:	3b04      	subs	r3, #4
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	b2d2      	uxtb	r2, r2
 8001098:	440b      	add	r3, r1
 800109a:	761a      	strb	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	e000e100 	.word	0xe000e100
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b089      	sub	sp, #36	@ 0x24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	60f8      	str	r0, [r7, #12]
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	f1c3 0307 	rsb	r3, r3, #7
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	bf28      	it	cs
 80010ce:	2304      	movcs	r3, #4
 80010d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	3304      	adds	r3, #4
 80010d6:	2b06      	cmp	r3, #6
 80010d8:	d902      	bls.n	80010e0 <NVIC_EncodePriority+0x30>
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3b03      	subs	r3, #3
 80010de:	e000      	b.n	80010e2 <NVIC_EncodePriority+0x32>
 80010e0:	2300      	movs	r3, #0
 80010e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	43da      	mvns	r2, r3
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	401a      	ands	r2, r3
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f8:	f04f 31ff 	mov.w	r1, #4294967295
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001102:	43d9      	mvns	r1, r3
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001108:	4313      	orrs	r3, r2
         );
}
 800110a:	4618      	mov	r0, r3
 800110c:	3724      	adds	r7, #36	@ 0x24
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
	...

08001118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3b01      	subs	r3, #1
 8001124:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001128:	d301      	bcc.n	800112e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800112a:	2301      	movs	r3, #1
 800112c:	e00f      	b.n	800114e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112e:	4a0a      	ldr	r2, [pc, #40]	@ (8001158 <SysTick_Config+0x40>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001136:	210f      	movs	r1, #15
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f7ff ff8e 	bl	800105c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001140:	4b05      	ldr	r3, [pc, #20]	@ (8001158 <SysTick_Config+0x40>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001146:	4b04      	ldr	r3, [pc, #16]	@ (8001158 <SysTick_Config+0x40>)
 8001148:	2207      	movs	r2, #7
 800114a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	e000e010 	.word	0xe000e010

0800115c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001164:	6878      	ldr	r0, [r7, #4]
 8001166:	f7ff ff29 	bl	8000fbc <__NVIC_SetPriorityGrouping>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	4603      	mov	r3, r0
 800117a:	60b9      	str	r1, [r7, #8]
 800117c:	607a      	str	r2, [r7, #4]
 800117e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001184:	f7ff ff3e 	bl	8001004 <__NVIC_GetPriorityGrouping>
 8001188:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	68b9      	ldr	r1, [r7, #8]
 800118e:	6978      	ldr	r0, [r7, #20]
 8001190:	f7ff ff8e 	bl	80010b0 <NVIC_EncodePriority>
 8001194:	4602      	mov	r2, r0
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff ff5d 	bl	800105c <__NVIC_SetPriority>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	4603      	mov	r3, r0
 80011b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff31 	bl	8001020 <__NVIC_EnableIRQ>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b082      	sub	sp, #8
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff ffa2 	bl	8001118 <SysTick_Config>
 80011d4:	4603      	mov	r3, r0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d101      	bne.n	80011f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e014      	b.n	800121a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	791b      	ldrb	r3, [r3, #4]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d105      	bne.n	8001206 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f7ff f9d7 	bl	80005b4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2202      	movs	r2, #2
 800120a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2201      	movs	r2, #1
 8001216:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}

08001222 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001222:	b480      	push	{r7}
 8001224:	b083      	sub	sp, #12
 8001226:	af00      	add	r7, sp, #0
 8001228:	6078      	str	r0, [r7, #4]
 800122a:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e046      	b.n	80012c4 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	795b      	ldrb	r3, [r3, #5]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d101      	bne.n	8001242 <HAL_DAC_Start+0x20>
 800123e:	2302      	movs	r3, #2
 8001240:	e040      	b.n	80012c4 <HAL_DAC_Start+0xa2>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2201      	movs	r2, #1
 8001246:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2202      	movs	r2, #2
 800124c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6819      	ldr	r1, [r3, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	2201      	movs	r2, #1
 800125c:	409a      	lsls	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	430a      	orrs	r2, r1
 8001264:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d10f      	bne.n	800128c <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8001276:	2b3c      	cmp	r3, #60	@ 0x3c
 8001278:	d11d      	bne.n	80012b6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0201 	orr.w	r2, r2, #1
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	e014      	b.n	80012b6 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	f003 0310 	and.w	r3, r3, #16
 800129c:	213c      	movs	r1, #60	@ 0x3c
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d107      	bne.n	80012b6 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	685a      	ldr	r2, [r3, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f042 0202 	orr.w	r2, r2, #2
 80012b4:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2201      	movs	r2, #1
 80012ba:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2200      	movs	r2, #0
 80012c0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	4618      	mov	r0, r3
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr

080012d0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b087      	sub	sp, #28
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60f8      	str	r0, [r7, #12]
 80012d8:	60b9      	str	r1, [r7, #8]
 80012da:	607a      	str	r2, [r7, #4]
 80012dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d101      	bne.n	80012ec <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e015      	b.n	8001318 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d105      	bne.n	8001304 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80012f8:	697a      	ldr	r2, [r7, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	3308      	adds	r3, #8
 8001300:	617b      	str	r3, [r7, #20]
 8001302:	e004      	b.n	800130e <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001304:	697a      	ldr	r2, [r7, #20]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4413      	add	r3, r2
 800130a:	3314      	adds	r3, #20
 800130c:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	461a      	mov	r2, r3
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
}
 8001318:	4618      	mov	r0, r3
 800131a:	371c      	adds	r7, #28
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	@ 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001330:	2300      	movs	r3, #0
 8001332:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_DAC_ConfigChannel+0x1c>
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d101      	bne.n	8001344 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e042      	b.n	80013ca <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	795b      	ldrb	r3, [r3, #5]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_DAC_ConfigChannel+0x2c>
 800134c:	2302      	movs	r3, #2
 800134e:	e03c      	b.n	80013ca <HAL_DAC_ConfigChannel+0xa6>
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2201      	movs	r2, #1
 8001354:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2202      	movs	r2, #2
 800135a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	f003 0310 	and.w	r3, r3, #16
 800136a:	f640 72fe 	movw	r2, #4094	@ 0xffe
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001372:	43db      	mvns	r3, r3
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	4013      	ands	r3, r2
 8001378:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	68bb      	ldr	r3, [r7, #8]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	4313      	orrs	r3, r2
 8001384:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	f003 0310 	and.w	r3, r3, #16
 800138c:	697a      	ldr	r2, [r7, #20]
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6819      	ldr	r1, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	22c0      	movs	r2, #192	@ 0xc0
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	400a      	ands	r2, r1
 80013ba:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	2201      	movs	r2, #1
 80013c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	2200      	movs	r2, #0
 80013c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80013c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3724      	adds	r7, #36	@ 0x24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	@ 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e16b      	b.n	80016cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 815a 	bne.w	80016c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	2b02      	cmp	r3, #2
 8001428:	d130      	bne.n	800148c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d017      	beq.n	80014c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d123      	bne.n	800151c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80b4 	beq.w	80016c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b60      	ldr	r3, [pc, #384]	@ (80016e4 <HAL_GPIO_Init+0x30c>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001566:	4a5f      	ldr	r2, [pc, #380]	@ (80016e4 <HAL_GPIO_Init+0x30c>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800156c:	6453      	str	r3, [r2, #68]	@ 0x44
 800156e:	4b5d      	ldr	r3, [pc, #372]	@ (80016e4 <HAL_GPIO_Init+0x30c>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157a:	4a5b      	ldr	r2, [pc, #364]	@ (80016e8 <HAL_GPIO_Init+0x310>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a52      	ldr	r2, [pc, #328]	@ (80016ec <HAL_GPIO_Init+0x314>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d02b      	beq.n	80015fe <HAL_GPIO_Init+0x226>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a51      	ldr	r2, [pc, #324]	@ (80016f0 <HAL_GPIO_Init+0x318>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d025      	beq.n	80015fa <HAL_GPIO_Init+0x222>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a50      	ldr	r2, [pc, #320]	@ (80016f4 <HAL_GPIO_Init+0x31c>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d01f      	beq.n	80015f6 <HAL_GPIO_Init+0x21e>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a4f      	ldr	r2, [pc, #316]	@ (80016f8 <HAL_GPIO_Init+0x320>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d019      	beq.n	80015f2 <HAL_GPIO_Init+0x21a>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a4e      	ldr	r2, [pc, #312]	@ (80016fc <HAL_GPIO_Init+0x324>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d013      	beq.n	80015ee <HAL_GPIO_Init+0x216>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001700 <HAL_GPIO_Init+0x328>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d00d      	beq.n	80015ea <HAL_GPIO_Init+0x212>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001704 <HAL_GPIO_Init+0x32c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d007      	beq.n	80015e6 <HAL_GPIO_Init+0x20e>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001708 <HAL_GPIO_Init+0x330>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d101      	bne.n	80015e2 <HAL_GPIO_Init+0x20a>
 80015de:	2307      	movs	r3, #7
 80015e0:	e00e      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015e2:	2308      	movs	r3, #8
 80015e4:	e00c      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015e6:	2306      	movs	r3, #6
 80015e8:	e00a      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e008      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015ee:	2304      	movs	r3, #4
 80015f0:	e006      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015f2:	2303      	movs	r3, #3
 80015f4:	e004      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015f6:	2302      	movs	r3, #2
 80015f8:	e002      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015fa:	2301      	movs	r3, #1
 80015fc:	e000      	b.n	8001600 <HAL_GPIO_Init+0x228>
 80015fe:	2300      	movs	r3, #0
 8001600:	69fa      	ldr	r2, [r7, #28]
 8001602:	f002 0203 	and.w	r2, r2, #3
 8001606:	0092      	lsls	r2, r2, #2
 8001608:	4093      	lsls	r3, r2
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	4313      	orrs	r3, r2
 800160e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001610:	4935      	ldr	r1, [pc, #212]	@ (80016e8 <HAL_GPIO_Init+0x310>)
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	089b      	lsrs	r3, r3, #2
 8001616:	3302      	adds	r3, #2
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b3b      	ldr	r3, [pc, #236]	@ (800170c <HAL_GPIO_Init+0x334>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a32      	ldr	r2, [pc, #200]	@ (800170c <HAL_GPIO_Init+0x334>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b30      	ldr	r3, [pc, #192]	@ (800170c <HAL_GPIO_Init+0x334>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a27      	ldr	r2, [pc, #156]	@ (800170c <HAL_GPIO_Init+0x334>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001672:	4b26      	ldr	r3, [pc, #152]	@ (800170c <HAL_GPIO_Init+0x334>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	43db      	mvns	r3, r3
 800167c:	69ba      	ldr	r2, [r7, #24]
 800167e:	4013      	ands	r3, r2
 8001680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d003      	beq.n	8001696 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001696:	4a1d      	ldr	r2, [pc, #116]	@ (800170c <HAL_GPIO_Init+0x334>)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_GPIO_Init+0x334>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	43db      	mvns	r3, r3
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4013      	ands	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d003      	beq.n	80016c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016c0:	4a12      	ldr	r2, [pc, #72]	@ (800170c <HAL_GPIO_Init+0x334>)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	3301      	adds	r3, #1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	f67f ae90 	bls.w	80013f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3724      	adds	r7, #36	@ 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40013800 	.word	0x40013800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	40020800 	.word	0x40020800
 80016f8:	40020c00 	.word	0x40020c00
 80016fc:	40021000 	.word	0x40021000
 8001700:	40021400 	.word	0x40021400
 8001704:	40021800 	.word	0x40021800
 8001708:	40021c00 	.word	0x40021c00
 800170c:	40013c00 	.word	0x40013c00

08001710 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	460b      	mov	r3, r1
 800171a:	807b      	strh	r3, [r7, #2]
 800171c:	4613      	mov	r3, r2
 800171e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001720:	787b      	ldrb	r3, [r7, #1]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001726:	887a      	ldrh	r2, [r7, #2]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800172c:	e003      	b.n	8001736 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800172e:	887b      	ldrh	r3, [r7, #2]
 8001730:	041a      	lsls	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d101      	bne.n	8001756 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e12b      	b.n	80019ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d106      	bne.n	8001770 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f7ff f8a2 	bl	80008b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2224      	movs	r2, #36	@ 0x24
 8001774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0201 	bic.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001796:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017a8:	f002 fc72 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 80017ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a81      	ldr	r2, [pc, #516]	@ (80019b8 <HAL_I2C_Init+0x274>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d807      	bhi.n	80017c8 <HAL_I2C_Init+0x84>
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4a80      	ldr	r2, [pc, #512]	@ (80019bc <HAL_I2C_Init+0x278>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	bf94      	ite	ls
 80017c0:	2301      	movls	r3, #1
 80017c2:	2300      	movhi	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	e006      	b.n	80017d6 <HAL_I2C_Init+0x92>
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4a7d      	ldr	r2, [pc, #500]	@ (80019c0 <HAL_I2C_Init+0x27c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	bf94      	ite	ls
 80017d0:	2301      	movls	r3, #1
 80017d2:	2300      	movhi	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e0e7      	b.n	80019ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4a78      	ldr	r2, [pc, #480]	@ (80019c4 <HAL_I2C_Init+0x280>)
 80017e2:	fba2 2303 	umull	r2, r3, r2, r3
 80017e6:	0c9b      	lsrs	r3, r3, #18
 80017e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	4a6a      	ldr	r2, [pc, #424]	@ (80019b8 <HAL_I2C_Init+0x274>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d802      	bhi.n	8001818 <HAL_I2C_Init+0xd4>
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	3301      	adds	r3, #1
 8001816:	e009      	b.n	800182c <HAL_I2C_Init+0xe8>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4a69      	ldr	r2, [pc, #420]	@ (80019c8 <HAL_I2C_Init+0x284>)
 8001824:	fba2 2303 	umull	r2, r3, r2, r3
 8001828:	099b      	lsrs	r3, r3, #6
 800182a:	3301      	adds	r3, #1
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6812      	ldr	r2, [r2, #0]
 8001830:	430b      	orrs	r3, r1
 8001832:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	69db      	ldr	r3, [r3, #28]
 800183a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800183e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	495c      	ldr	r1, [pc, #368]	@ (80019b8 <HAL_I2C_Init+0x274>)
 8001848:	428b      	cmp	r3, r1
 800184a:	d819      	bhi.n	8001880 <HAL_I2C_Init+0x13c>
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1e59      	subs	r1, r3, #1
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	fbb1 f3f3 	udiv	r3, r1, r3
 800185a:	1c59      	adds	r1, r3, #1
 800185c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001860:	400b      	ands	r3, r1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00a      	beq.n	800187c <HAL_I2C_Init+0x138>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	1e59      	subs	r1, r3, #1
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fbb1 f3f3 	udiv	r3, r1, r3
 8001874:	3301      	adds	r3, #1
 8001876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800187a:	e051      	b.n	8001920 <HAL_I2C_Init+0x1dc>
 800187c:	2304      	movs	r3, #4
 800187e:	e04f      	b.n	8001920 <HAL_I2C_Init+0x1dc>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d111      	bne.n	80018ac <HAL_I2C_Init+0x168>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1e58      	subs	r0, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	440b      	add	r3, r1
 8001896:	fbb0 f3f3 	udiv	r3, r0, r3
 800189a:	3301      	adds	r3, #1
 800189c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e012      	b.n	80018d2 <HAL_I2C_Init+0x18e>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	bf0c      	ite	eq
 80018cc:	2301      	moveq	r3, #1
 80018ce:	2300      	movne	r3, #0
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_I2C_Init+0x196>
 80018d6:	2301      	movs	r3, #1
 80018d8:	e022      	b.n	8001920 <HAL_I2C_Init+0x1dc>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d10e      	bne.n	8001900 <HAL_I2C_Init+0x1bc>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	1e58      	subs	r0, r3, #1
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6859      	ldr	r1, [r3, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	440b      	add	r3, r1
 80018f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80018f4:	3301      	adds	r3, #1
 80018f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018fe:	e00f      	b.n	8001920 <HAL_I2C_Init+0x1dc>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	1e58      	subs	r0, r3, #1
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6859      	ldr	r1, [r3, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	440b      	add	r3, r1
 800190e:	0099      	lsls	r1, r3, #2
 8001910:	440b      	add	r3, r1
 8001912:	fbb0 f3f3 	udiv	r3, r0, r3
 8001916:	3301      	adds	r3, #1
 8001918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	6809      	ldr	r1, [r1, #0]
 8001924:	4313      	orrs	r3, r2
 8001926:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	69da      	ldr	r2, [r3, #28]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	430a      	orrs	r2, r1
 8001942:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800194e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6911      	ldr	r1, [r2, #16]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68d2      	ldr	r2, [r2, #12]
 800195a:	4311      	orrs	r1, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	430b      	orrs	r3, r1
 8001962:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	695a      	ldr	r2, [r3, #20]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	431a      	orrs	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	430a      	orrs	r2, r1
 800197e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f042 0201 	orr.w	r2, r2, #1
 800198e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2200      	movs	r2, #0
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	000186a0 	.word	0x000186a0
 80019bc:	001e847f 	.word	0x001e847f
 80019c0:	003d08ff 	.word	0x003d08ff
 80019c4:	431bde83 	.word	0x431bde83
 80019c8:	10624dd3 	.word	0x10624dd3

080019cc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b088      	sub	sp, #32
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d101      	bne.n	80019de <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e128      	b.n	8001c30 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d109      	bne.n	80019fe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a90      	ldr	r2, [pc, #576]	@ (8001c38 <HAL_I2S_Init+0x26c>)
 80019f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f7fe ffd3 	bl	80009a4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2202      	movs	r2, #2
 8001a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001a14:	f023 030f 	bic.w	r3, r3, #15
 8001a18:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2202      	movs	r2, #2
 8001a20:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d060      	beq.n	8001aec <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68db      	ldr	r3, [r3, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d102      	bne.n	8001a38 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001a32:	2310      	movs	r3, #16
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	e001      	b.n	8001a3c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001a38:	2320      	movs	r3, #32
 8001a3a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d802      	bhi.n	8001a4a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f002 fc2a 	bl	80042a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8001a50:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001a5a:	d125      	bne.n	8001aa8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d010      	beq.n	8001a86 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	68fa      	ldr	r2, [r7, #12]
 8001a6a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	461a      	mov	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	3305      	adds	r3, #5
 8001a82:	613b      	str	r3, [r7, #16]
 8001a84:	e01f      	b.n	8001ac6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	00db      	lsls	r3, r3, #3
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a90:	4613      	mov	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	461a      	mov	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa2:	3305      	adds	r3, #5
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	e00e      	b.n	8001ac6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001aa8:	68fa      	ldr	r2, [r7, #12]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	4413      	add	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	461a      	mov	r2, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	3305      	adds	r3, #5
 8001ac4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	4a5c      	ldr	r2, [pc, #368]	@ (8001c3c <HAL_I2S_Init+0x270>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	08db      	lsrs	r3, r3, #3
 8001ad0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	085b      	lsrs	r3, r3, #1
 8001ae2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	021b      	lsls	r3, r3, #8
 8001ae8:	61bb      	str	r3, [r7, #24]
 8001aea:	e003      	b.n	8001af4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001aec:	2302      	movs	r3, #2
 8001aee:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d902      	bls.n	8001b00 <HAL_I2S_Init+0x134>
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	2bff      	cmp	r3, #255	@ 0xff
 8001afe:	d907      	bls.n	8001b10 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b04:	f043 0210 	orr.w	r2, r3, #16
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e08f      	b.n	8001c30 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	ea42 0103 	orr.w	r1, r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	430a      	orrs	r2, r1
 8001b22:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69db      	ldr	r3, [r3, #28]
 8001b2a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b2e:	f023 030f 	bic.w	r3, r3, #15
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6851      	ldr	r1, [r2, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6892      	ldr	r2, [r2, #8]
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	68d2      	ldr	r2, [r2, #12]
 8001b40:	4311      	orrs	r1, r2
 8001b42:	687a      	ldr	r2, [r7, #4]
 8001b44:	6992      	ldr	r2, [r2, #24]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001b52:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6a1b      	ldr	r3, [r3, #32]
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d161      	bne.n	8001c20 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a38      	ldr	r2, [pc, #224]	@ (8001c40 <HAL_I2S_Init+0x274>)
 8001b60:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a37      	ldr	r2, [pc, #220]	@ (8001c44 <HAL_I2S_Init+0x278>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d101      	bne.n	8001b70 <HAL_I2S_Init+0x1a4>
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <HAL_I2S_Init+0x27c>)
 8001b6e:	e001      	b.n	8001b74 <HAL_I2S_Init+0x1a8>
 8001b70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001b74:	69db      	ldr	r3, [r3, #28]
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6812      	ldr	r2, [r2, #0]
 8001b7a:	4932      	ldr	r1, [pc, #200]	@ (8001c44 <HAL_I2S_Init+0x278>)
 8001b7c:	428a      	cmp	r2, r1
 8001b7e:	d101      	bne.n	8001b84 <HAL_I2S_Init+0x1b8>
 8001b80:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_I2S_Init+0x27c>)
 8001b82:	e001      	b.n	8001b88 <HAL_I2S_Init+0x1bc>
 8001b84:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8001b88:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8001b8c:	f023 030f 	bic.w	r3, r3, #15
 8001b90:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2b      	ldr	r2, [pc, #172]	@ (8001c44 <HAL_I2S_Init+0x278>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d101      	bne.n	8001ba0 <HAL_I2S_Init+0x1d4>
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001c48 <HAL_I2S_Init+0x27c>)
 8001b9e:	e001      	b.n	8001ba4 <HAL_I2S_Init+0x1d8>
 8001ba0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a25      	ldr	r2, [pc, #148]	@ (8001c44 <HAL_I2S_Init+0x278>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d101      	bne.n	8001bb6 <HAL_I2S_Init+0x1ea>
 8001bb2:	4b25      	ldr	r3, [pc, #148]	@ (8001c48 <HAL_I2S_Init+0x27c>)
 8001bb4:	e001      	b.n	8001bba <HAL_I2S_Init+0x1ee>
 8001bb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bc6:	d003      	beq.n	8001bd0 <HAL_I2S_Init+0x204>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d103      	bne.n	8001bd8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001bd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	e001      	b.n	8001bdc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001be6:	4313      	orrs	r3, r2
 8001be8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	897b      	ldrh	r3, [r7, #10]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c08:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c44 <HAL_I2S_Init+0x278>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d101      	bne.n	8001c18 <HAL_I2S_Init+0x24c>
 8001c14:	4b0c      	ldr	r3, [pc, #48]	@ (8001c48 <HAL_I2S_Init+0x27c>)
 8001c16:	e001      	b.n	8001c1c <HAL_I2S_Init+0x250>
 8001c18:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001c1c:	897a      	ldrh	r2, [r7, #10]
 8001c1e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8001c2e:	2300      	movs	r3, #0
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3720      	adds	r7, #32
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	08001d43 	.word	0x08001d43
 8001c3c:	cccccccd 	.word	0xcccccccd
 8001c40:	08001e59 	.word	0x08001e59
 8001c44:	40003800 	.word	0x40003800
 8001c48:	40003400 	.word	0x40003400

08001c4c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	1c9a      	adds	r2, r3, #2
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	3b01      	subs	r3, #1
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10e      	bne.n	8001cdc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001ccc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffb8 	bl	8001c4c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf6:	b292      	uxth	r2, r2
 8001cf8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cfe:	1c9a      	adds	r2, r3, #2
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10e      	bne.n	8001d3a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001d2a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff93 	bl	8001c60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b086      	sub	sp, #24
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	d13a      	bne.n	8001dd4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	f003 0301 	and.w	r3, r3, #1
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d109      	bne.n	8001d7c <I2S_IRQHandler+0x3a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d72:	2b40      	cmp	r3, #64	@ 0x40
 8001d74:	d102      	bne.n	8001d7c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb4 	bl	8001ce4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d82:	2b40      	cmp	r3, #64	@ 0x40
 8001d84:	d126      	bne.n	8001dd4 <I2S_IRQHandler+0x92>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0320 	and.w	r3, r3, #32
 8001d90:	2b20      	cmp	r3, #32
 8001d92:	d11f      	bne.n	8001dd4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001da2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001da4:	2300      	movs	r3, #0
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	613b      	str	r3, [r7, #16]
 8001db8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	f043 0202 	orr.w	r2, r3, #2
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ff50 	bl	8001c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d136      	bne.n	8001e4e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d109      	bne.n	8001dfe <I2S_IRQHandler+0xbc>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001df4:	2b80      	cmp	r3, #128	@ 0x80
 8001df6:	d102      	bne.n	8001dfe <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f7ff ff45 	bl	8001c88 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0308 	and.w	r3, r3, #8
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d122      	bne.n	8001e4e <I2S_IRQHandler+0x10c>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f003 0320 	and.w	r3, r3, #32
 8001e12:	2b20      	cmp	r3, #32
 8001e14:	d11b      	bne.n	8001e4e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685a      	ldr	r2, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001e24:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e40:	f043 0204 	orr.w	r2, r3, #4
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff13 	bl	8001c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
	...

08001e58 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b088      	sub	sp, #32
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a92      	ldr	r2, [pc, #584]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d101      	bne.n	8001e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8001e72:	4b92      	ldr	r3, [pc, #584]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e74:	e001      	b.n	8001e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8001e76:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a8b      	ldr	r2, [pc, #556]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8001e90:	4b8a      	ldr	r3, [pc, #552]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001e92:	e001      	b.n	8001e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001e94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001ea4:	d004      	beq.n	8001eb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f040 8099 	bne.w	8001fe2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b02      	cmp	r3, #2
 8001eb8:	d107      	bne.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d002      	beq.n	8001eca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 f925 	bl	8002114 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d107      	bne.n	8001ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d002      	beq.n	8001ee4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f9c8 	bl	8002274 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eea:	2b40      	cmp	r3, #64	@ 0x40
 8001eec:	d13a      	bne.n	8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d035      	beq.n	8001f64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6e      	ldr	r2, [pc, #440]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d101      	bne.n	8001f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8001f02:	4b6e      	ldr	r3, [pc, #440]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f04:	e001      	b.n	8001f0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8001f06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4969      	ldr	r1, [pc, #420]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f12:	428b      	cmp	r3, r1
 8001f14:	d101      	bne.n	8001f1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8001f16:	4b69      	ldr	r3, [pc, #420]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f18:	e001      	b.n	8001f1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8001f1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	685a      	ldr	r2, [r3, #4]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	60fb      	str	r3, [r7, #12]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f56:	f043 0202 	orr.w	r2, r3, #2
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f7ff fe88 	bl	8001c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	f040 80c3 	bne.w	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	f003 0320 	and.w	r3, r3, #32
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80bd 	beq.w	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8001f8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a49      	ldr	r2, [pc, #292]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d101      	bne.n	8001f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001f96:	4b49      	ldr	r3, [pc, #292]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001f98:	e001      	b.n	8001f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001f9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001f9e:	685a      	ldr	r2, [r3, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4944      	ldr	r1, [pc, #272]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8001fa6:	428b      	cmp	r3, r1
 8001fa8:	d101      	bne.n	8001fae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8001faa:	4b44      	ldr	r3, [pc, #272]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8001fac:	e001      	b.n	8001fb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001fae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8001fb2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001fb6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f043 0204 	orr.w	r2, r3, #4
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7ff fe4a 	bl	8001c74 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8001fe0:	e089      	b.n	80020f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d107      	bne.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d002      	beq.n	8001ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f8be 	bl	8002178 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d107      	bne.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f000 f8fd 	bl	8002210 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201c:	2b40      	cmp	r3, #64	@ 0x40
 800201e:	d12f      	bne.n	8002080 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 0320 	and.w	r3, r3, #32
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02a      	beq.n	8002080 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002038:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d101      	bne.n	8002048 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002044:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002046:	e001      	b.n	800204c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002048:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4919      	ldr	r1, [pc, #100]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002054:	428b      	cmp	r3, r1
 8002056:	d101      	bne.n	800205c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002058:	4b18      	ldr	r3, [pc, #96]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800205a:	e001      	b.n	8002060 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800205c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002060:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002064:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002072:	f043 0202 	orr.w	r2, r3, #2
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f7ff fdfa 	bl	8001c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b08      	cmp	r3, #8
 8002088:	d136      	bne.n	80020f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	f003 0320 	and.w	r3, r3, #32
 8002090:	2b00      	cmp	r3, #0
 8002092:	d031      	beq.n	80020f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d101      	bne.n	80020a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020a0:	e001      	b.n	80020a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80020a2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020a6:	685a      	ldr	r2, [r3, #4]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4902      	ldr	r1, [pc, #8]	@ (80020b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80020ae:	428b      	cmp	r3, r1
 80020b0:	d106      	bne.n	80020c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80020b2:	4b02      	ldr	r3, [pc, #8]	@ (80020bc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80020b4:	e006      	b.n	80020c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80020b6:	bf00      	nop
 80020b8:	40003800 	.word	0x40003800
 80020bc:	40003400 	.word	0x40003400
 80020c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80020c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80020c8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f043 0204 	orr.w	r2, r3, #4
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	f7ff fdc0 	bl	8001c74 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80020f4:	e000      	b.n	80020f8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80020f6:	bf00      	nop
}
 80020f8:	bf00      	nop
 80020fa:	3720      	adds	r7, #32
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002120:	1c99      	adds	r1, r3, #2
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6251      	str	r1, [r2, #36]	@ 0x24
 8002126:	881a      	ldrh	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002132:	b29b      	uxth	r3, r3
 8002134:	3b01      	subs	r3, #1
 8002136:	b29a      	uxth	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d113      	bne.n	800216e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002154:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	d106      	bne.n	800216e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f7ff ffc9 	bl	8002100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002184:	1c99      	adds	r1, r3, #2
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6251      	str	r1, [r2, #36]	@ 0x24
 800218a:	8819      	ldrh	r1, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <I2SEx_TxISR_I2SExt+0x90>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d101      	bne.n	800219a <I2SEx_TxISR_I2SExt+0x22>
 8002196:	4b1d      	ldr	r3, [pc, #116]	@ (800220c <I2SEx_TxISR_I2SExt+0x94>)
 8002198:	e001      	b.n	800219e <I2SEx_TxISR_I2SExt+0x26>
 800219a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800219e:	460a      	mov	r2, r1
 80021a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29a      	uxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d121      	bne.n	80021fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a12      	ldr	r2, [pc, #72]	@ (8002208 <I2SEx_TxISR_I2SExt+0x90>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d101      	bne.n	80021c8 <I2SEx_TxISR_I2SExt+0x50>
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <I2SEx_TxISR_I2SExt+0x94>)
 80021c6:	e001      	b.n	80021cc <I2SEx_TxISR_I2SExt+0x54>
 80021c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	490d      	ldr	r1, [pc, #52]	@ (8002208 <I2SEx_TxISR_I2SExt+0x90>)
 80021d4:	428b      	cmp	r3, r1
 80021d6:	d101      	bne.n	80021dc <I2SEx_TxISR_I2SExt+0x64>
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <I2SEx_TxISR_I2SExt+0x94>)
 80021da:	e001      	b.n	80021e0 <I2SEx_TxISR_I2SExt+0x68>
 80021dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80021e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80021e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d106      	bne.n	80021fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff ff81 	bl	8002100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	40003800 	.word	0x40003800
 800220c:	40003400 	.word	0x40003400

08002210 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68d8      	ldr	r0, [r3, #12]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002222:	1c99      	adds	r1, r3, #2
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002228:	b282      	uxth	r2, r0
 800222a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d113      	bne.n	800226c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002252:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002258:	b29b      	uxth	r3, r3
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff ff4a 	bl	8002100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800226c:	bf00      	nop
 800226e:	3708      	adds	r7, #8
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a20      	ldr	r2, [pc, #128]	@ (8002304 <I2SEx_RxISR_I2SExt+0x90>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <I2SEx_RxISR_I2SExt+0x16>
 8002286:	4b20      	ldr	r3, [pc, #128]	@ (8002308 <I2SEx_RxISR_I2SExt+0x94>)
 8002288:	e001      	b.n	800228e <I2SEx_RxISR_I2SExt+0x1a>
 800228a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800228e:	68d8      	ldr	r0, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002294:	1c99      	adds	r1, r3, #2
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800229a:	b282      	uxth	r2, r0
 800229c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b29a      	uxth	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d121      	bne.n	80022fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a12      	ldr	r2, [pc, #72]	@ (8002304 <I2SEx_RxISR_I2SExt+0x90>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d101      	bne.n	80022c4 <I2SEx_RxISR_I2SExt+0x50>
 80022c0:	4b11      	ldr	r3, [pc, #68]	@ (8002308 <I2SEx_RxISR_I2SExt+0x94>)
 80022c2:	e001      	b.n	80022c8 <I2SEx_RxISR_I2SExt+0x54>
 80022c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022c8:	685a      	ldr	r2, [r3, #4]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	490d      	ldr	r1, [pc, #52]	@ (8002304 <I2SEx_RxISR_I2SExt+0x90>)
 80022d0:	428b      	cmp	r3, r1
 80022d2:	d101      	bne.n	80022d8 <I2SEx_RxISR_I2SExt+0x64>
 80022d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002308 <I2SEx_RxISR_I2SExt+0x94>)
 80022d6:	e001      	b.n	80022dc <I2SEx_RxISR_I2SExt+0x68>
 80022d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022dc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80022e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d106      	bne.n	80022fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff03 	bl	8002100 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	40003800 	.word	0x40003800
 8002308:	40003400 	.word	0x40003400

0800230c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af02      	add	r7, sp, #8
 8002312:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e101      	b.n	8002522 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800232a:	b2db      	uxtb	r3, r3
 800232c:	2b00      	cmp	r3, #0
 800232e:	d106      	bne.n	800233e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f005 fff7 	bl	800832c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800234c:	d102      	bne.n	8002354 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f002 fbde 	bl	8004b1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6818      	ldr	r0, [r3, #0]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	7c1a      	ldrb	r2, [r3, #16]
 8002366:	f88d 2000 	strb.w	r2, [sp]
 800236a:	3304      	adds	r3, #4
 800236c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800236e:	f002 fabd 	bl	80048ec <USB_CoreInit>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d005      	beq.n	8002384 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2202      	movs	r2, #2
 800237c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0ce      	b.n	8002522 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2100      	movs	r1, #0
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fbd6 	bl	8004b3c <USB_SetCurrentMode>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e0bf      	b.n	8002522 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	73fb      	strb	r3, [r7, #15]
 80023a6:	e04a      	b.n	800243e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80023a8:	7bfa      	ldrb	r2, [r7, #15]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	3315      	adds	r3, #21
 80023b8:	2201      	movs	r2, #1
 80023ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023bc:	7bfa      	ldrb	r2, [r7, #15]
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3314      	adds	r3, #20
 80023cc:	7bfa      	ldrb	r2, [r7, #15]
 80023ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023d0:	7bfa      	ldrb	r2, [r7, #15]
 80023d2:	7bfb      	ldrb	r3, [r7, #15]
 80023d4:	b298      	uxth	r0, r3
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	332e      	adds	r3, #46	@ 0x2e
 80023e4:	4602      	mov	r2, r0
 80023e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023e8:	7bfa      	ldrb	r2, [r7, #15]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	3318      	adds	r3, #24
 80023f8:	2200      	movs	r2, #0
 80023fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023fc:	7bfa      	ldrb	r2, [r7, #15]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	331c      	adds	r3, #28
 800240c:	2200      	movs	r2, #0
 800240e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002410:	7bfa      	ldrb	r2, [r7, #15]
 8002412:	6879      	ldr	r1, [r7, #4]
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	440b      	add	r3, r1
 800241e:	3320      	adds	r3, #32
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002424:	7bfa      	ldrb	r2, [r7, #15]
 8002426:	6879      	ldr	r1, [r7, #4]
 8002428:	4613      	mov	r3, r2
 800242a:	00db      	lsls	r3, r3, #3
 800242c:	4413      	add	r3, r2
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	440b      	add	r3, r1
 8002432:	3324      	adds	r3, #36	@ 0x24
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	3301      	adds	r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	791b      	ldrb	r3, [r3, #4]
 8002442:	7bfa      	ldrb	r2, [r7, #15]
 8002444:	429a      	cmp	r2, r3
 8002446:	d3af      	bcc.n	80023a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002448:	2300      	movs	r3, #0
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e044      	b.n	80024d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800244e:	7bfa      	ldrb	r2, [r7, #15]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	00db      	lsls	r3, r3, #3
 8002456:	4413      	add	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002464:	7bfa      	ldrb	r2, [r7, #15]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002476:	7bfa      	ldrb	r2, [r7, #15]
 8002478:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800247a:	7bfa      	ldrb	r2, [r7, #15]
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	4613      	mov	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	4413      	add	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	440b      	add	r3, r1
 8002488:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800248c:	2200      	movs	r2, #0
 800248e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002490:	7bfa      	ldrb	r2, [r7, #15]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	4413      	add	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80024a2:	2200      	movs	r2, #0
 80024a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80024a6:	7bfa      	ldrb	r2, [r7, #15]
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024bc:	7bfa      	ldrb	r2, [r7, #15]
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	4613      	mov	r3, r2
 80024c2:	00db      	lsls	r3, r3, #3
 80024c4:	4413      	add	r3, r2
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	440b      	add	r3, r1
 80024ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80024ce:	2200      	movs	r2, #0
 80024d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	3301      	adds	r3, #1
 80024d6:	73fb      	strb	r3, [r7, #15]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	791b      	ldrb	r3, [r3, #4]
 80024dc:	7bfa      	ldrb	r2, [r7, #15]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d3b5      	bcc.n	800244e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7c1a      	ldrb	r2, [r3, #16]
 80024ea:	f88d 2000 	strb.w	r2, [sp]
 80024ee:	3304      	adds	r3, #4
 80024f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024f2:	f002 fb6f 	bl	8004bd4 <USB_DevInit>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d005      	beq.n	8002508 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2202      	movs	r2, #2
 8002500:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e00c      	b.n	8002522 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2201      	movs	r2, #1
 8002512:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f003 fbb9 	bl	8005c92 <USB_DevDisconnect>

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3710      	adds	r7, #16
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}

0800252a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800252a:	b580      	push	{r7, lr}
 800252c:	b084      	sub	sp, #16
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800253e:	2b01      	cmp	r3, #1
 8002540:	d101      	bne.n	8002546 <HAL_PCD_Start+0x1c>
 8002542:	2302      	movs	r3, #2
 8002544:	e022      	b.n	800258c <HAL_PCD_Start+0x62>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d009      	beq.n	800256e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800255e:	2b01      	cmp	r3, #1
 8002560:	d105      	bne.n	800256e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002566:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f002 fac0 	bl	8004af8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f003 fb67 	bl	8005c50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002594:	b590      	push	{r4, r7, lr}
 8002596:	b08d      	sub	sp, #52	@ 0x34
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025a2:	6a3b      	ldr	r3, [r7, #32]
 80025a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f003 fc25 	bl	8005dfa <USB_GetMode>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	f040 848c 	bne.w	8002ed0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fb89 	bl	8005cd4 <USB_ReadInterrupts>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	f000 8482 	beq.w	8002ece <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	0a1b      	lsrs	r3, r3, #8
 80025d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f003 fb76 	bl	8005cd4 <USB_ReadInterrupts>
 80025e8:	4603      	mov	r3, r0
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d107      	bne.n	8002602 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695a      	ldr	r2, [r3, #20]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f002 0202 	and.w	r2, r2, #2
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f003 fb64 	bl	8005cd4 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b10      	cmp	r3, #16
 8002614:	d161      	bne.n	80026da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f022 0210 	bic.w	r2, r2, #16
 8002624:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002626:	6a3b      	ldr	r3, [r7, #32]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f003 020f 	and.w	r2, r3, #15
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	4413      	add	r3, r2
 8002642:	3304      	adds	r3, #4
 8002644:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	0c5b      	lsrs	r3, r3, #17
 800264a:	f003 030f 	and.w	r3, r3, #15
 800264e:	2b02      	cmp	r3, #2
 8002650:	d124      	bne.n	800269c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002658:	4013      	ands	r3, r2
 800265a:	2b00      	cmp	r3, #0
 800265c:	d035      	beq.n	80026ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	091b      	lsrs	r3, r3, #4
 8002666:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800266c:	b29b      	uxth	r3, r3
 800266e:	461a      	mov	r2, r3
 8002670:	6a38      	ldr	r0, [r7, #32]
 8002672:	f003 f99b 	bl	80059ac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	68da      	ldr	r2, [r3, #12]
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002682:	441a      	add	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	695a      	ldr	r2, [r3, #20]
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	091b      	lsrs	r3, r3, #4
 8002690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002694:	441a      	add	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	615a      	str	r2, [r3, #20]
 800269a:	e016      	b.n	80026ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	0c5b      	lsrs	r3, r3, #17
 80026a0:	f003 030f 	and.w	r3, r3, #15
 80026a4:	2b06      	cmp	r3, #6
 80026a6:	d110      	bne.n	80026ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80026ae:	2208      	movs	r2, #8
 80026b0:	4619      	mov	r1, r3
 80026b2:	6a38      	ldr	r0, [r7, #32]
 80026b4:	f003 f97a 	bl	80059ac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	695a      	ldr	r2, [r3, #20]
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80026c4:	441a      	add	r2, r3
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699a      	ldr	r2, [r3, #24]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0210 	orr.w	r2, r2, #16
 80026d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 faf8 	bl	8005cd4 <USB_ReadInterrupts>
 80026e4:	4603      	mov	r3, r0
 80026e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80026ee:	f040 80a7 	bne.w	8002840 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f003 fafd 	bl	8005cfa <USB_ReadDevAllOutEpInterrupt>
 8002700:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8002702:	e099      	b.n	8002838 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 808e 	beq.w	800282c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	4611      	mov	r1, r2
 800271a:	4618      	mov	r0, r3
 800271c:	f003 fb21 	bl	8005d62 <USB_ReadDevOutEPInterrupt>
 8002720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00c      	beq.n	8002746 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800272c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272e:	015a      	lsls	r2, r3, #5
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	4413      	add	r3, r2
 8002734:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002738:	461a      	mov	r2, r3
 800273a:	2301      	movs	r3, #1
 800273c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800273e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 fea3 	bl	800348c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00c      	beq.n	800276a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800275c:	461a      	mov	r2, r3
 800275e:	2308      	movs	r3, #8
 8002760:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002762:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 ff79 	bl	800365c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	015a      	lsls	r2, r3, #5
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	4413      	add	r3, r2
 800277c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002780:	461a      	mov	r2, r3
 8002782:	2310      	movs	r3, #16
 8002784:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d030      	beq.n	80027f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002798:	2b80      	cmp	r3, #128	@ 0x80
 800279a:	d109      	bne.n	80027b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	69fa      	ldr	r2, [r7, #28]
 80027a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80027aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80027b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027b2:	4613      	mov	r3, r2
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	3304      	adds	r3, #4
 80027c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	78db      	ldrb	r3, [r3, #3]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d108      	bne.n	80027e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	2200      	movs	r2, #0
 80027d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80027d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	4619      	mov	r1, r3
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f005 feba 	bl	8008554 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80027e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e2:	015a      	lsls	r2, r3, #5
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	4413      	add	r3, r2
 80027e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027ec:	461a      	mov	r2, r3
 80027ee:	2302      	movs	r3, #2
 80027f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	015a      	lsls	r2, r3, #5
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	4413      	add	r3, r2
 8002804:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002808:	461a      	mov	r2, r3
 800280a:	2320      	movs	r3, #32
 800280c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d009      	beq.n	800282c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	015a      	lsls	r2, r3, #5
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	4413      	add	r3, r2
 8002820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002824:	461a      	mov	r2, r3
 8002826:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800282a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	3301      	adds	r3, #1
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	f47f af62 	bne.w	8002704 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fa45 	bl	8005cd4 <USB_ReadInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002850:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002854:	f040 80db 	bne.w	8002a0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fa66 	bl	8005d2e <USB_ReadDevAllInEpInterrupt>
 8002862:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002868:	e0cd      	b.n	8002a06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800286a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	f000 80c2 	beq.w	80029fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800287c:	b2d2      	uxtb	r2, r2
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f003 fa8c 	bl	8005d9e <USB_ReadDevInEPInterrupt>
 8002886:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d057      	beq.n	8002942 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	f003 030f 	and.w	r3, r3, #15
 8002898:	2201      	movs	r2, #1
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80028a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69f9      	ldr	r1, [r7, #28]
 80028ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80028b2:	4013      	ands	r3, r2
 80028b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80028c2:	461a      	mov	r2, r3
 80028c4:	2301      	movs	r3, #1
 80028c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	799b      	ldrb	r3, [r3, #6]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d132      	bne.n	8002936 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	3320      	adds	r3, #32
 80028e0:	6819      	ldr	r1, [r3, #0]
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028e6:	4613      	mov	r3, r2
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4403      	add	r3, r0
 80028f0:	331c      	adds	r3, #28
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4419      	add	r1, r3
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028fa:	4613      	mov	r3, r2
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	4403      	add	r3, r0
 8002904:	3320      	adds	r3, #32
 8002906:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290a:	2b00      	cmp	r3, #0
 800290c:	d113      	bne.n	8002936 <HAL_PCD_IRQHandler+0x3a2>
 800290e:	6879      	ldr	r1, [r7, #4]
 8002910:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002912:	4613      	mov	r3, r2
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4413      	add	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3324      	adds	r3, #36	@ 0x24
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d108      	bne.n	8002936 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800292e:	461a      	mov	r2, r3
 8002930:	2101      	movs	r1, #1
 8002932:	f003 fa93 	bl	8005e5c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f005 fd84 	bl	800844a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0308 	and.w	r3, r3, #8
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800294c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002958:	461a      	mov	r2, r3
 800295a:	2308      	movs	r3, #8
 800295c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	f003 0310 	and.w	r3, r3, #16
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	4413      	add	r3, r2
 8002970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002974:	461a      	mov	r2, r3
 8002976:	2310      	movs	r3, #16
 8002978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	015a      	lsls	r2, r3, #5
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	4413      	add	r3, r2
 800298c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002990:	461a      	mov	r2, r3
 8002992:	2340      	movs	r3, #64	@ 0x40
 8002994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d023      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80029a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029a2:	6a38      	ldr	r0, [r7, #32]
 80029a4:	f002 fa7a 	bl	8004e9c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80029a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029aa:	4613      	mov	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	3310      	adds	r3, #16
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	4413      	add	r3, r2
 80029b8:	3304      	adds	r3, #4
 80029ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	78db      	ldrb	r3, [r3, #3]
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d108      	bne.n	80029d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2200      	movs	r2, #0
 80029c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80029ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	4619      	mov	r1, r3
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f005 fdd1 	bl	8008578 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029e2:	461a      	mov	r2, r3
 80029e4:	2302      	movs	r3, #2
 80029e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d003      	beq.n	80029fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80029f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	f000 fcbd 	bl	8003374 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	3301      	adds	r3, #1
 80029fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	085b      	lsrs	r3, r3, #1
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f47f af2e 	bne.w	800286a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f003 f95e 	bl	8005cd4 <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a22:	d122      	bne.n	8002a6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	69fa      	ldr	r2, [r7, #28]
 8002a2e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d108      	bne.n	8002a54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 fea3 	bl	8003798 <HAL_PCDEx_LPM_Callback>
 8002a52:	e002      	b.n	8002a5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f005 fd6f 	bl	8008538 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	695a      	ldr	r2, [r3, #20]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 f930 	bl	8005cd4 <USB_ReadInterrupts>
 8002a74:	4603      	mov	r3, r0
 8002a76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002a7e:	d112      	bne.n	8002aa6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d102      	bne.n	8002a96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f005 fd2b 	bl	80084ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002aa4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f003 f912 	bl	8005cd4 <USB_ReadInterrupts>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ab6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002aba:	f040 80b7 	bne.w	8002c2c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002acc:	f023 0301 	bic.w	r3, r3, #1
 8002ad0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f002 f9df 	bl	8004e9c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ae2:	e046      	b.n	8002b72 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002af0:	461a      	mov	r2, r3
 8002af2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002af6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002afa:	015a      	lsls	r2, r3, #5
 8002afc:	69fb      	ldr	r3, [r7, #28]
 8002afe:	4413      	add	r3, r2
 8002b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b08:	0151      	lsls	r1, r2, #5
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	440a      	add	r2, r1
 8002b0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002b12:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b1a:	015a      	lsls	r2, r3, #5
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	4413      	add	r3, r2
 8002b20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b24:	461a      	mov	r2, r3
 8002b26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002b2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b2e:	015a      	lsls	r2, r3, #5
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	4413      	add	r3, r2
 8002b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b3c:	0151      	lsls	r1, r2, #5
 8002b3e:	69fa      	ldr	r2, [r7, #28]
 8002b40:	440a      	add	r2, r1
 8002b42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5c:	0151      	lsls	r1, r2, #5
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	440a      	add	r2, r1
 8002b62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002b66:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002b6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6e:	3301      	adds	r3, #1
 8002b70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	791b      	ldrb	r3, [r3, #4]
 8002b76:	461a      	mov	r2, r3
 8002b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d3b2      	bcc.n	8002ae4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	69fa      	ldr	r2, [r7, #28]
 8002b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002b8c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002b90:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	7bdb      	ldrb	r3, [r3, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ba4:	69fa      	ldr	r2, [r7, #28]
 8002ba6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002baa:	f043 030b 	orr.w	r3, r3, #11
 8002bae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bba:	69fa      	ldr	r2, [r7, #28]
 8002bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bc0:	f043 030b 	orr.w	r3, r3, #11
 8002bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc6:	e015      	b.n	8002bf4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bce:	695b      	ldr	r3, [r3, #20]
 8002bd0:	69fa      	ldr	r2, [r7, #28]
 8002bd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bd6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002bda:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002bde:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002be6:	691b      	ldr	r3, [r3, #16]
 8002be8:	69fa      	ldr	r2, [r7, #28]
 8002bea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002bee:	f043 030b 	orr.w	r3, r3, #11
 8002bf2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002c06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6818      	ldr	r0, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c16:	461a      	mov	r2, r3
 8002c18:	f003 f920 	bl	8005e5c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695a      	ldr	r2, [r3, #20]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f003 f84f 	bl	8005cd4 <USB_ReadInterrupts>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c40:	d123      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f8e5 	bl	8005e16 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4618      	mov	r0, r3
 8002c52:	f002 f99c 	bl	8004f8e <USB_GetDevSpeed>
 8002c56:	4603      	mov	r3, r0
 8002c58:	461a      	mov	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681c      	ldr	r4, [r3, #0]
 8002c62:	f001 fa09 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8002c66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4620      	mov	r0, r4
 8002c70:	f001 fea0 	bl	80049b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f005 fc10 	bl	800849a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f003 f820 	bl	8005cd4 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d10a      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 fbed 	bl	800847e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f002 0208 	and.w	r2, r2, #8
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f003 f80b 	bl	8005cd4 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc4:	2b80      	cmp	r3, #128	@ 0x80
 8002cc6:	d123      	bne.n	8002d10 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cd8:	e014      	b.n	8002d04 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cde:	4613      	mov	r3, r2
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d105      	bne.n	8002cfe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fb0a 	bl	8003312 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d00:	3301      	adds	r3, #1
 8002d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	791b      	ldrb	r3, [r3, #4]
 8002d08:	461a      	mov	r2, r3
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d3e4      	bcc.n	8002cda <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f002 ffdd 	bl	8005cd4 <USB_ReadInterrupts>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d24:	d13c      	bne.n	8002da0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d26:	2301      	movs	r3, #1
 8002d28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d2a:	e02b      	b.n	8002d84 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d40:	4613      	mov	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4413      	add	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3318      	adds	r3, #24
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d115      	bne.n	8002d7e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002d52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	da12      	bge.n	8002d7e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3317      	adds	r3, #23
 8002d68:	2201      	movs	r2, #1
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f000 faca 	bl	8003312 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	3301      	adds	r3, #1
 8002d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	791b      	ldrb	r3, [r3, #4]
 8002d88:	461a      	mov	r2, r3
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d3cd      	bcc.n	8002d2c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	695a      	ldr	r2, [r3, #20]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f002 ff95 	bl	8005cd4 <USB_ReadInterrupts>
 8002daa:	4603      	mov	r3, r0
 8002dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002db4:	d156      	bne.n	8002e64 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002db6:	2301      	movs	r3, #1
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002dba:	e045      	b.n	8002e48 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	00db      	lsls	r3, r3, #3
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d12e      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002de4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	da2b      	bge.n	8002e42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002df6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d121      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e02:	4613      	mov	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	695b      	ldr	r3, [r3, #20]
 8002e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d10a      	bne.n	8002e42 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e3e:	6053      	str	r3, [r2, #4]
            break;
 8002e40:	e008      	b.n	8002e54 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e44:	3301      	adds	r3, #1
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	791b      	ldrb	r3, [r3, #4]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d3b3      	bcc.n	8002dbc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002e62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f002 ff33 	bl	8005cd4 <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002e74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e78:	d10a      	bne.n	8002e90 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f005 fb8e 	bl	800859c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	695a      	ldr	r2, [r3, #20]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f002 ff1d 	bl	8005cd4 <USB_ReadInterrupts>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d115      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f005 fb7e 	bl	80085b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6859      	ldr	r1, [r3, #4]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	e000      	b.n	8002ed0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002ece:	bf00      	nop
    }
  }
}
 8002ed0:	3734      	adds	r7, #52	@ 0x34
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd90      	pop	{r4, r7, pc}

08002ed6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d101      	bne.n	8002ef0 <HAL_PCD_SetAddress+0x1a>
 8002eec:	2302      	movs	r3, #2
 8002eee:	e012      	b.n	8002f16 <HAL_PCD_SetAddress+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f002 fe7c 	bl	8005c04 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
 8002f26:	4608      	mov	r0, r1
 8002f28:	4611      	mov	r1, r2
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	70fb      	strb	r3, [r7, #3]
 8002f30:	460b      	mov	r3, r1
 8002f32:	803b      	strh	r3, [r7, #0]
 8002f34:	4613      	mov	r3, r2
 8002f36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	da0f      	bge.n	8002f64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f44:	78fb      	ldrb	r3, [r7, #3]
 8002f46:	f003 020f 	and.w	r2, r3, #15
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	00db      	lsls	r3, r3, #3
 8002f4e:	4413      	add	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	3310      	adds	r3, #16
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	4413      	add	r3, r2
 8002f58:	3304      	adds	r3, #4
 8002f5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	705a      	strb	r2, [r3, #1]
 8002f62:	e00f      	b.n	8002f84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 020f 	and.w	r2, r3, #15
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	00db      	lsls	r3, r3, #3
 8002f6e:	4413      	add	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4413      	add	r3, r2
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2200      	movs	r2, #0
 8002f82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f84:	78fb      	ldrb	r3, [r7, #3]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	b2da      	uxtb	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002f90:	883b      	ldrh	r3, [r7, #0]
 8002f92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	78ba      	ldrb	r2, [r7, #2]
 8002f9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	785b      	ldrb	r3, [r3, #1]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d004      	beq.n	8002fb2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	461a      	mov	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002fb2:	78bb      	ldrb	r3, [r7, #2]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d102      	bne.n	8002fbe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d101      	bne.n	8002fcc <HAL_PCD_EP_Open+0xae>
 8002fc8:	2302      	movs	r3, #2
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_Open+0xcc>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68f9      	ldr	r1, [r7, #12]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fffc 	bl	8004fd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002fe8:	7afb      	ldrb	r3, [r7, #11]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}

08002ff2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ff2:	b580      	push	{r7, lr}
 8002ff4:	b084      	sub	sp, #16
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ffe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003002:	2b00      	cmp	r3, #0
 8003004:	da0f      	bge.n	8003026 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003006:	78fb      	ldrb	r3, [r7, #3]
 8003008:	f003 020f 	and.w	r2, r3, #15
 800300c:	4613      	mov	r3, r2
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	4413      	add	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	3310      	adds	r3, #16
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4413      	add	r3, r2
 800301a:	3304      	adds	r3, #4
 800301c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2201      	movs	r2, #1
 8003022:	705a      	strb	r2, [r3, #1]
 8003024:	e00f      	b.n	8003046 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	78fb      	ldrb	r3, [r7, #3]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	b2da      	uxtb	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_PCD_EP_Close+0x6e>
 800305c:	2302      	movs	r3, #2
 800305e:	e00e      	b.n	800307e <HAL_PCD_EP_Close+0x8c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68f9      	ldr	r1, [r7, #12]
 800306e:	4618      	mov	r0, r3
 8003070:	f002 f83a 	bl	80050e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003086:	b580      	push	{r7, lr}
 8003088:	b086      	sub	sp, #24
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	607a      	str	r2, [r7, #4]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	460b      	mov	r3, r1
 8003094:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003096:	7afb      	ldrb	r3, [r7, #11]
 8003098:	f003 020f 	and.w	r2, r3, #15
 800309c:	4613      	mov	r3, r2
 800309e:	00db      	lsls	r3, r3, #3
 80030a0:	4413      	add	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	3304      	adds	r3, #4
 80030ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2200      	movs	r2, #0
 80030c0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	2200      	movs	r2, #0
 80030c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c8:	7afb      	ldrb	r3, [r7, #11]
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	799b      	ldrb	r3, [r3, #6]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d102      	bne.n	80030e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	799b      	ldrb	r3, [r3, #6]
 80030ea:	461a      	mov	r2, r3
 80030ec:	6979      	ldr	r1, [r7, #20]
 80030ee:	f002 f8d7 	bl	80052a0 <USB_EPStartXfer>

  return HAL_OK;
 80030f2:	2300      	movs	r3, #0
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	3718      	adds	r7, #24
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b083      	sub	sp, #12
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	460b      	mov	r3, r1
 8003106:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	f003 020f 	and.w	r2, r3, #15
 800310e:	6879      	ldr	r1, [r7, #4]
 8003110:	4613      	mov	r3, r2
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800311e:	681b      	ldr	r3, [r3, #0]
}
 8003120:	4618      	mov	r0, r3
 8003122:	370c      	adds	r7, #12
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	607a      	str	r2, [r7, #4]
 8003136:	603b      	str	r3, [r7, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800313c:	7afb      	ldrb	r3, [r7, #11]
 800313e:	f003 020f 	and.w	r2, r3, #15
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	3310      	adds	r3, #16
 800314c:	68fa      	ldr	r2, [r7, #12]
 800314e:	4413      	add	r3, r2
 8003150:	3304      	adds	r3, #4
 8003152:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	2200      	movs	r2, #0
 8003164:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	2201      	movs	r2, #1
 800316a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800316c:	7afb      	ldrb	r3, [r7, #11]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	b2da      	uxtb	r2, r3
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	799b      	ldrb	r3, [r3, #6]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d102      	bne.n	8003186 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6818      	ldr	r0, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	799b      	ldrb	r3, [r3, #6]
 800318e:	461a      	mov	r2, r3
 8003190:	6979      	ldr	r1, [r7, #20]
 8003192:	f002 f885 	bl	80052a0 <USB_EPStartXfer>

  return HAL_OK;
 8003196:	2300      	movs	r3, #0
}
 8003198:	4618      	mov	r0, r3
 800319a:	3718      	adds	r7, #24
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}

080031a0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	f003 030f 	and.w	r3, r3, #15
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	7912      	ldrb	r2, [r2, #4]
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e04f      	b.n	800325e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	da0f      	bge.n	80031e6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031c6:	78fb      	ldrb	r3, [r7, #3]
 80031c8:	f003 020f 	and.w	r2, r3, #15
 80031cc:	4613      	mov	r3, r2
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	3310      	adds	r3, #16
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	4413      	add	r3, r2
 80031da:	3304      	adds	r3, #4
 80031dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2201      	movs	r2, #1
 80031e2:	705a      	strb	r2, [r3, #1]
 80031e4:	e00d      	b.n	8003202 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	4413      	add	r3, r2
 80031f8:	3304      	adds	r3, #4
 80031fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2201      	movs	r2, #1
 8003206:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	b2da      	uxtb	r2, r3
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800321a:	2b01      	cmp	r3, #1
 800321c:	d101      	bne.n	8003222 <HAL_PCD_EP_SetStall+0x82>
 800321e:	2302      	movs	r3, #2
 8003220:	e01d      	b.n	800325e <HAL_PCD_EP_SetStall+0xbe>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	4618      	mov	r0, r3
 8003232:	f002 fc13 	bl	8005a5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003236:	78fb      	ldrb	r3, [r7, #3]
 8003238:	f003 030f 	and.w	r3, r3, #15
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7999      	ldrb	r1, [r3, #6]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800324e:	461a      	mov	r2, r3
 8003250:	f002 fe04 	bl	8005e5c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b084      	sub	sp, #16
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
 800326e:	460b      	mov	r3, r1
 8003270:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 030f 	and.w	r3, r3, #15
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	7912      	ldrb	r2, [r2, #4]
 800327c:	4293      	cmp	r3, r2
 800327e:	d901      	bls.n	8003284 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e042      	b.n	800330a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003284:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	da0f      	bge.n	80032ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328c:	78fb      	ldrb	r3, [r7, #3]
 800328e:	f003 020f 	and.w	r2, r3, #15
 8003292:	4613      	mov	r3, r2
 8003294:	00db      	lsls	r3, r3, #3
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	3310      	adds	r3, #16
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	4413      	add	r3, r2
 80032a0:	3304      	adds	r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2201      	movs	r2, #1
 80032a8:	705a      	strb	r2, [r3, #1]
 80032aa:	e00f      	b.n	80032cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ac:	78fb      	ldrb	r3, [r7, #3]
 80032ae:	f003 020f 	and.w	r2, r3, #15
 80032b2:	4613      	mov	r3, r2
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4413      	add	r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	3304      	adds	r3, #4
 80032c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2200      	movs	r2, #0
 80032d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d2:	78fb      	ldrb	r3, [r7, #3]
 80032d4:	f003 030f 	and.w	r3, r3, #15
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_PCD_EP_ClrStall+0x86>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e00e      	b.n	800330a <HAL_PCD_EP_ClrStall+0xa4>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f002 fc1c 	bl	8005b38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	460b      	mov	r3, r1
 800331c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800331e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003322:	2b00      	cmp	r3, #0
 8003324:	da0c      	bge.n	8003340 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	4613      	mov	r3, r2
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	3310      	adds	r3, #16
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	3304      	adds	r3, #4
 800333c:	60fb      	str	r3, [r7, #12]
 800333e:	e00c      	b.n	800335a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003340:	78fb      	ldrb	r3, [r7, #3]
 8003342:	f003 020f 	and.w	r2, r3, #15
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	4413      	add	r3, r2
 8003356:	3304      	adds	r3, #4
 8003358:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	4618      	mov	r0, r3
 8003362:	f002 fa3b 	bl	80057dc <USB_EPStopXfer>
 8003366:	4603      	mov	r3, r0
 8003368:	72fb      	strb	r3, [r7, #11]

  return ret;
 800336a:	7afb      	ldrb	r3, [r7, #11]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3710      	adds	r7, #16
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b08a      	sub	sp, #40	@ 0x28
 8003378:	af02      	add	r7, sp, #8
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	4413      	add	r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	3310      	adds	r3, #16
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	4413      	add	r3, r2
 8003398:	3304      	adds	r3, #4
 800339a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d901      	bls.n	80033ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e06b      	b.n	8003484 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	691a      	ldr	r2, [r3, #16]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	695b      	ldr	r3, [r3, #20]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	69fa      	ldr	r2, [r7, #28]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d902      	bls.n	80033c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	3303      	adds	r3, #3
 80033cc:	089b      	lsrs	r3, r3, #2
 80033ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033d0:	e02a      	b.n	8003428 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	691a      	ldr	r2, [r3, #16]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d902      	bls.n	80033ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	3303      	adds	r3, #3
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68d9      	ldr	r1, [r3, #12]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003406:	9300      	str	r3, [sp, #0]
 8003408:	4603      	mov	r3, r0
 800340a:	6978      	ldr	r0, [r7, #20]
 800340c:	f002 fa90 	bl	8005930 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	68da      	ldr	r2, [r3, #12]
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	441a      	add	r2, r3
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	695a      	ldr	r2, [r3, #20]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	441a      	add	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	429a      	cmp	r2, r3
 800343c:	d809      	bhi.n	8003452 <PCD_WriteEmptyTxFifo+0xde>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003446:	429a      	cmp	r2, r3
 8003448:	d203      	bcs.n	8003452 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1bf      	bne.n	80033d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691a      	ldr	r2, [r3, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	695b      	ldr	r3, [r3, #20]
 800345a:	429a      	cmp	r2, r3
 800345c:	d811      	bhi.n	8003482 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	f003 030f 	and.w	r3, r3, #15
 8003464:	2201      	movs	r2, #1
 8003466:	fa02 f303 	lsl.w	r3, r2, r3
 800346a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003472:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	43db      	mvns	r3, r3
 8003478:	6939      	ldr	r1, [r7, #16]
 800347a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800347e:	4013      	ands	r3, r2
 8003480:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3720      	adds	r7, #32
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	333c      	adds	r3, #60	@ 0x3c
 80034a4:	3304      	adds	r3, #4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69bb      	ldr	r3, [r7, #24]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	799b      	ldrb	r3, [r3, #6]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d17b      	bne.n	80035ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d015      	beq.n	80034f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	4a61      	ldr	r2, [pc, #388]	@ (8003654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	f240 80b9 	bls.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 80b3 	beq.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034ee:	461a      	mov	r2, r3
 80034f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034f4:	6093      	str	r3, [r2, #8]
 80034f6:	e0a7      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d009      	beq.n	8003516 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800350e:	461a      	mov	r2, r3
 8003510:	2320      	movs	r3, #32
 8003512:	6093      	str	r3, [r2, #8]
 8003514:	e098      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	f040 8093 	bne.w	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	4a4b      	ldr	r2, [pc, #300]	@ (8003654 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d90f      	bls.n	800354a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	4413      	add	r3, r2
 800353c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003540:	461a      	mov	r2, r3
 8003542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003546:	6093      	str	r3, [r2, #8]
 8003548:	e07e      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a1a      	ldr	r2, [r3, #32]
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	440b      	add	r3, r1
 800356c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003576:	1ad2      	subs	r2, r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d114      	bne.n	80035ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d109      	bne.n	800359e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	f002 fc60 	bl	8005e5c <USB_EP0_OutStart>
 800359c:	e006      	b.n	80035ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	441a      	add	r2, r3
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	4619      	mov	r1, r3
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f004 ff2e 	bl	8008414 <HAL_PCD_DataOutStageCallback>
 80035b8:	e046      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a26      	ldr	r2, [pc, #152]	@ (8003658 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d124      	bne.n	800360c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00a      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d8:	461a      	mov	r2, r3
 80035da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035de:	6093      	str	r3, [r2, #8]
 80035e0:	e032      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f003 0320 	and.w	r3, r3, #32
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d008      	beq.n	80035fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	2320      	movs	r3, #32
 80035fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 ff05 	bl	8008414 <HAL_PCD_DataOutStageCallback>
 800360a:	e01d      	b.n	8003648 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d114      	bne.n	800363c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	683a      	ldr	r2, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d108      	bne.n	800363c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6818      	ldr	r0, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003634:	461a      	mov	r2, r3
 8003636:	2100      	movs	r1, #0
 8003638:	f002 fc10 	bl	8005e5c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f004 fee6 	bl	8008414 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003648:	2300      	movs	r3, #0
}
 800364a:	4618      	mov	r0, r3
 800364c:	3720      	adds	r7, #32
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	4f54300a 	.word	0x4f54300a
 8003658:	4f54310a 	.word	0x4f54310a

0800365c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	333c      	adds	r3, #60	@ 0x3c
 8003674:	3304      	adds	r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a15      	ldr	r2, [pc, #84]	@ (80036e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d90e      	bls.n	80036b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	015a      	lsls	r2, r3, #5
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	4413      	add	r3, r2
 80036a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036a8:	461a      	mov	r2, r3
 80036aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f004 fe9d 	bl	80083f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a0a      	ldr	r2, [pc, #40]	@ (80036e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d90c      	bls.n	80036d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	799b      	ldrb	r3, [r3, #6]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d108      	bne.n	80036d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6818      	ldr	r0, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80036d0:	461a      	mov	r2, r3
 80036d2:	2101      	movs	r1, #1
 80036d4:	f002 fbc2 	bl	8005e5c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3718      	adds	r7, #24
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	4f54300a 	.word	0x4f54300a

080036e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b085      	sub	sp, #20
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
 80036f0:	460b      	mov	r3, r1
 80036f2:	70fb      	strb	r3, [r7, #3]
 80036f4:	4613      	mov	r3, r2
 80036f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d107      	bne.n	8003716 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003706:	883b      	ldrh	r3, [r7, #0]
 8003708:	0419      	lsls	r1, r3, #16
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	430a      	orrs	r2, r1
 8003712:	629a      	str	r2, [r3, #40]	@ 0x28
 8003714:	e028      	b.n	8003768 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	68ba      	ldr	r2, [r7, #8]
 8003720:	4413      	add	r3, r2
 8003722:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003724:	2300      	movs	r3, #0
 8003726:	73fb      	strb	r3, [r7, #15]
 8003728:	e00d      	b.n	8003746 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	3340      	adds	r3, #64	@ 0x40
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	4413      	add	r3, r2
 800373e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	3301      	adds	r3, #1
 8003744:	73fb      	strb	r3, [r7, #15]
 8003746:	7bfa      	ldrb	r2, [r7, #15]
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	3b01      	subs	r3, #1
 800374c:	429a      	cmp	r2, r3
 800374e:	d3ec      	bcc.n	800372a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003750:	883b      	ldrh	r3, [r7, #0]
 8003752:	0418      	lsls	r0, r3, #16
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	78fb      	ldrb	r3, [r7, #3]
 800375a:	3b01      	subs	r3, #1
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	4302      	orrs	r2, r0
 8003760:	3340      	adds	r3, #64	@ 0x40
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	440b      	add	r3, r1
 8003766:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr

08003776 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	887a      	ldrh	r2, [r7, #2]
 8003788:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80037a4:	bf00      	nop
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e267      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d075      	beq.n	80038ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037ce:	4b88      	ldr	r3, [pc, #544]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b04      	cmp	r3, #4
 80037d8:	d00c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037da:	4b85      	ldr	r3, [pc, #532]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80037e2:	2b08      	cmp	r3, #8
 80037e4:	d112      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037e6:	4b82      	ldr	r3, [pc, #520]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80037ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037f2:	d10b      	bne.n	800380c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037f4:	4b7e      	ldr	r3, [pc, #504]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05b      	beq.n	80038b8 <HAL_RCC_OscConfig+0x108>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d157      	bne.n	80038b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e242      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003814:	d106      	bne.n	8003824 <HAL_RCC_OscConfig+0x74>
 8003816:	4b76      	ldr	r3, [pc, #472]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a75      	ldr	r2, [pc, #468]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800381c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	e01d      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800382c:	d10c      	bne.n	8003848 <HAL_RCC_OscConfig+0x98>
 800382e:	4b70      	ldr	r3, [pc, #448]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6f      	ldr	r2, [pc, #444]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	4b6d      	ldr	r3, [pc, #436]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a6c      	ldr	r2, [pc, #432]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003840:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003844:	6013      	str	r3, [r2, #0]
 8003846:	e00b      	b.n	8003860 <HAL_RCC_OscConfig+0xb0>
 8003848:	4b69      	ldr	r3, [pc, #420]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a68      	ldr	r2, [pc, #416]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800384e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003852:	6013      	str	r3, [r2, #0]
 8003854:	4b66      	ldr	r3, [pc, #408]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a65      	ldr	r2, [pc, #404]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800385a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800385e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d013      	beq.n	8003890 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003868:	f7fd fb78 	bl	8000f5c <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386e:	e008      	b.n	8003882 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003870:	f7fd fb74 	bl	8000f5c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	2b64      	cmp	r3, #100	@ 0x64
 800387c:	d901      	bls.n	8003882 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e207      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003882:	4b5b      	ldr	r3, [pc, #364]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	d0f0      	beq.n	8003870 <HAL_RCC_OscConfig+0xc0>
 800388e:	e014      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003890:	f7fd fb64 	bl	8000f5c <HAL_GetTick>
 8003894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003896:	e008      	b.n	80038aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003898:	f7fd fb60 	bl	8000f5c <HAL_GetTick>
 800389c:	4602      	mov	r2, r0
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	2b64      	cmp	r3, #100	@ 0x64
 80038a4:	d901      	bls.n	80038aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038a6:	2303      	movs	r3, #3
 80038a8:	e1f3      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038aa:	4b51      	ldr	r3, [pc, #324]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d1f0      	bne.n	8003898 <HAL_RCC_OscConfig+0xe8>
 80038b6:	e000      	b.n	80038ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d063      	beq.n	800398e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038c6:	4b4a      	ldr	r3, [pc, #296]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00b      	beq.n	80038ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038d2:	4b47      	ldr	r3, [pc, #284]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80038da:	2b08      	cmp	r3, #8
 80038dc:	d11c      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038de:	4b44      	ldr	r3, [pc, #272]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d116      	bne.n	8003918 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ea:	4b41      	ldr	r3, [pc, #260]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d005      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d001      	beq.n	8003902 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e1c7      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003902:	4b3b      	ldr	r3, [pc, #236]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	4937      	ldr	r1, [pc, #220]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003912:	4313      	orrs	r3, r2
 8003914:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003916:	e03a      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003920:	4b34      	ldr	r3, [pc, #208]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003922:	2201      	movs	r2, #1
 8003924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003926:	f7fd fb19 	bl	8000f5c <HAL_GetTick>
 800392a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800392c:	e008      	b.n	8003940 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392e:	f7fd fb15 	bl	8000f5c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d901      	bls.n	8003940 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e1a8      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003940:	4b2b      	ldr	r3, [pc, #172]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d0f0      	beq.n	800392e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800394c:	4b28      	ldr	r3, [pc, #160]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	4925      	ldr	r1, [pc, #148]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 800395c:	4313      	orrs	r3, r2
 800395e:	600b      	str	r3, [r1, #0]
 8003960:	e015      	b.n	800398e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RCC_OscConfig+0x244>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003968:	f7fd faf8 	bl	8000f5c <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003970:	f7fd faf4 	bl	8000f5c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e187      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003982:	4b1b      	ldr	r3, [pc, #108]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0302 	and.w	r3, r3, #2
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0308 	and.w	r3, r3, #8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d036      	beq.n	8003a08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d016      	beq.n	80039d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039a2:	4b15      	ldr	r3, [pc, #84]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039a4:	2201      	movs	r2, #1
 80039a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a8:	f7fd fad8 	bl	8000f5c <HAL_GetTick>
 80039ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ae:	e008      	b.n	80039c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b0:	f7fd fad4 	bl	8000f5c <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e167      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c2:	4b0b      	ldr	r3, [pc, #44]	@ (80039f0 <HAL_RCC_OscConfig+0x240>)
 80039c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d0f0      	beq.n	80039b0 <HAL_RCC_OscConfig+0x200>
 80039ce:	e01b      	b.n	8003a08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <HAL_RCC_OscConfig+0x248>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039d6:	f7fd fac1 	bl	8000f5c <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039dc:	e00e      	b.n	80039fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039de:	f7fd fabd 	bl	8000f5c <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d907      	bls.n	80039fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e150      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 80039f0:	40023800 	.word	0x40023800
 80039f4:	42470000 	.word	0x42470000
 80039f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039fc:	4b88      	ldr	r3, [pc, #544]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 80039fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a00:	f003 0302 	and.w	r3, r3, #2
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1ea      	bne.n	80039de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8097 	beq.w	8003b44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a1a:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10f      	bne.n	8003a46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	4b7d      	ldr	r3, [pc, #500]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2e:	4a7c      	ldr	r2, [pc, #496]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a36:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a42:	2301      	movs	r3, #1
 8003a44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a46:	4b77      	ldr	r3, [pc, #476]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d118      	bne.n	8003a84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a52:	4b74      	ldr	r3, [pc, #464]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a73      	ldr	r2, [pc, #460]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fa7d 	bl	8000f5c <HAL_GetTick>
 8003a62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a66:	f7fd fa79 	bl	8000f5c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e10c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a78:	4b6a      	ldr	r3, [pc, #424]	@ (8003c24 <HAL_RCC_OscConfig+0x474>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d0f0      	beq.n	8003a66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x2ea>
 8003a8c:	4b64      	ldr	r3, [pc, #400]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a90:	4a63      	ldr	r2, [pc, #396]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6713      	str	r3, [r2, #112]	@ 0x70
 8003a98:	e01c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2b05      	cmp	r3, #5
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x30c>
 8003aa2:	4b5f      	ldr	r3, [pc, #380]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	4a5e      	ldr	r2, [pc, #376]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aae:	4b5c      	ldr	r3, [pc, #368]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab2:	4a5b      	ldr	r2, [pc, #364]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003aba:	e00b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x324>
 8003abc:	4b58      	ldr	r3, [pc, #352]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac0:	4a57      	ldr	r2, [pc, #348]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ac2:	f023 0301 	bic.w	r3, r3, #1
 8003ac6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ac8:	4b55      	ldr	r3, [pc, #340]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003aca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003acc:	4a54      	ldr	r2, [pc, #336]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003ace:	f023 0304 	bic.w	r3, r3, #4
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d015      	beq.n	8003b08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003adc:	f7fd fa3e 	bl	8000f5c <HAL_GetTick>
 8003ae0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ae4:	f7fd fa3a 	bl	8000f5c <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e0cb      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	4b49      	ldr	r3, [pc, #292]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d0ee      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x334>
 8003b06:	e014      	b.n	8003b32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b08:	f7fd fa28 	bl	8000f5c <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd fa24 	bl	8000f5c <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e0b5      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	4b3e      	ldr	r3, [pc, #248]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ee      	bne.n	8003b10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b32:	7dfb      	ldrb	r3, [r7, #23]
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d105      	bne.n	8003b44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b38:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3c:	4a38      	ldr	r2, [pc, #224]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80a1 	beq.w	8003c90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b4e:	4b34      	ldr	r3, [pc, #208]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 030c 	and.w	r3, r3, #12
 8003b56:	2b08      	cmp	r3, #8
 8003b58:	d05c      	beq.n	8003c14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d141      	bne.n	8003be6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b62:	4b31      	ldr	r3, [pc, #196]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fd f9f8 	bl	8000f5c <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b70:	f7fd f9f4 	bl	8000f5c <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e087      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b82:	4b27      	ldr	r3, [pc, #156]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69da      	ldr	r2, [r3, #28]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b9c:	019b      	lsls	r3, r3, #6
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	041b      	lsls	r3, r3, #16
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bb0:	061b      	lsls	r3, r3, #24
 8003bb2:	491b      	ldr	r1, [pc, #108]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb8:	4b1b      	ldr	r3, [pc, #108]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003bba:	2201      	movs	r2, #1
 8003bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fd f9cd 	bl	8000f5c <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bc6:	f7fd f9c9 	bl	8000f5c <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e05c      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bd8:	4b11      	ldr	r3, [pc, #68]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d0f0      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x416>
 8003be4:	e054      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b10      	ldr	r3, [pc, #64]	@ (8003c28 <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fd f9b6 	bl	8000f5c <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fd f9b2 	bl	8000f5c <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e045      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x444>
 8003c12:	e03d      	b.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d107      	bne.n	8003c2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e038      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	40007000 	.word	0x40007000
 8003c28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c2c:	4b1b      	ldr	r3, [pc, #108]	@ (8003c9c <HAL_RCC_OscConfig+0x4ec>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d028      	beq.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d121      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d11a      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003c62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d111      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c72:	085b      	lsrs	r3, r3, #1
 8003c74:	3b01      	subs	r3, #1
 8003c76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d107      	bne.n	8003c8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d001      	beq.n	8003c90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800

08003ca0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0cc      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cb4:	4b68      	ldr	r3, [pc, #416]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d90c      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc2:	4b65      	ldr	r3, [pc, #404]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	b2d2      	uxtb	r2, r2
 8003cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003cfe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a52      	ldr	r2, [pc, #328]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d044      	beq.n	8003dc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d119      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d003      	beq.n	8003d5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d5a:	2b03      	cmp	r3, #3
 8003d5c:	d107      	bne.n	8003d6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d5e:	4b3f      	ldr	r3, [pc, #252]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d109      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e06f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d6e:	4b3b      	ldr	r3, [pc, #236]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e067      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d7e:	4b37      	ldr	r3, [pc, #220]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f023 0203 	bic.w	r2, r3, #3
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	4934      	ldr	r1, [pc, #208]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d90:	f7fd f8e4 	bl	8000f5c <HAL_GetTick>
 8003d94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d96:	e00a      	b.n	8003dae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d98:	f7fd f8e0 	bl	8000f5c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e04f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	4b2b      	ldr	r3, [pc, #172]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 020c 	and.w	r2, r3, #12
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d1eb      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dc0:	4b25      	ldr	r3, [pc, #148]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d20c      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dce:	4b22      	ldr	r3, [pc, #136]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	@ (8003e58 <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e12:	4b12      	ldr	r3, [pc, #72]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	@ (8003e60 <HAL_RCC_ClockConfig+0x1c0>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	@ (8003e64 <HAL_RCC_ClockConfig+0x1c4>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	@ (8003e68 <HAL_RCC_ClockConfig+0x1c8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7fd f844 	bl	8000ed4 <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023c00 	.word	0x40023c00
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	08009320 	.word	0x08009320
 8003e64:	20000000 	.word	0x20000000
 8003e68:	20000004 	.word	0x20000004

08003e6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e70:	b094      	sub	sp, #80	@ 0x50
 8003e72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003e74:	2300      	movs	r3, #0
 8003e76:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003e80:	2300      	movs	r3, #0
 8003e82:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e84:	4b79      	ldr	r3, [pc, #484]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 030c 	and.w	r3, r3, #12
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d00d      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	f200 80e1 	bhi.w	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d002      	beq.n	8003ea0 <HAL_RCC_GetSysClockFreq+0x34>
 8003e9a:	2b04      	cmp	r3, #4
 8003e9c:	d003      	beq.n	8003ea6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003e9e:	e0db      	b.n	8004058 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ea0:	4b73      	ldr	r3, [pc, #460]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ea2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ea4:	e0db      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ea6:	4b73      	ldr	r3, [pc, #460]	@ (8004074 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003eaa:	e0d8      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003eac:	4b6f      	ldr	r3, [pc, #444]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003eb4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eb6:	4b6d      	ldr	r3, [pc, #436]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d063      	beq.n	8003f8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec2:	4b6a      	ldr	r3, [pc, #424]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	099b      	lsrs	r3, r3, #6
 8003ec8:	2200      	movs	r2, #0
 8003eca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ed4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003ede:	4622      	mov	r2, r4
 8003ee0:	462b      	mov	r3, r5
 8003ee2:	f04f 0000 	mov.w	r0, #0
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	0159      	lsls	r1, r3, #5
 8003eec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ef0:	0150      	lsls	r0, r2, #5
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4621      	mov	r1, r4
 8003ef8:	1a51      	subs	r1, r2, r1
 8003efa:	6139      	str	r1, [r7, #16]
 8003efc:	4629      	mov	r1, r5
 8003efe:	eb63 0301 	sbc.w	r3, r3, r1
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	f04f 0200 	mov.w	r2, #0
 8003f08:	f04f 0300 	mov.w	r3, #0
 8003f0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f10:	4659      	mov	r1, fp
 8003f12:	018b      	lsls	r3, r1, #6
 8003f14:	4651      	mov	r1, sl
 8003f16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f1a:	4651      	mov	r1, sl
 8003f1c:	018a      	lsls	r2, r1, #6
 8003f1e:	4651      	mov	r1, sl
 8003f20:	ebb2 0801 	subs.w	r8, r2, r1
 8003f24:	4659      	mov	r1, fp
 8003f26:	eb63 0901 	sbc.w	r9, r3, r1
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f3e:	4690      	mov	r8, r2
 8003f40:	4699      	mov	r9, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	eb18 0303 	adds.w	r3, r8, r3
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	eb49 0303 	adc.w	r3, r9, r3
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	f04f 0200 	mov.w	r2, #0
 8003f56:	f04f 0300 	mov.w	r3, #0
 8003f5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f5e:	4629      	mov	r1, r5
 8003f60:	024b      	lsls	r3, r1, #9
 8003f62:	4621      	mov	r1, r4
 8003f64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f68:	4621      	mov	r1, r4
 8003f6a:	024a      	lsls	r2, r1, #9
 8003f6c:	4610      	mov	r0, r2
 8003f6e:	4619      	mov	r1, r3
 8003f70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003f7c:	f7fc f978 	bl	8000270 <__aeabi_uldivmod>
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4613      	mov	r3, r2
 8003f86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f88:	e058      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f8a:	4b38      	ldr	r3, [pc, #224]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	099b      	lsrs	r3, r3, #6
 8003f90:	2200      	movs	r2, #0
 8003f92:	4618      	mov	r0, r3
 8003f94:	4611      	mov	r1, r2
 8003f96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003f9a:	623b      	str	r3, [r7, #32]
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fa4:	4642      	mov	r2, r8
 8003fa6:	464b      	mov	r3, r9
 8003fa8:	f04f 0000 	mov.w	r0, #0
 8003fac:	f04f 0100 	mov.w	r1, #0
 8003fb0:	0159      	lsls	r1, r3, #5
 8003fb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb6:	0150      	lsls	r0, r2, #5
 8003fb8:	4602      	mov	r2, r0
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4641      	mov	r1, r8
 8003fbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc2:	4649      	mov	r1, r9
 8003fc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003fd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003fdc:	ebb2 040a 	subs.w	r4, r2, sl
 8003fe0:	eb63 050b 	sbc.w	r5, r3, fp
 8003fe4:	f04f 0200 	mov.w	r2, #0
 8003fe8:	f04f 0300 	mov.w	r3, #0
 8003fec:	00eb      	lsls	r3, r5, #3
 8003fee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003ff2:	00e2      	lsls	r2, r4, #3
 8003ff4:	4614      	mov	r4, r2
 8003ff6:	461d      	mov	r5, r3
 8003ff8:	4643      	mov	r3, r8
 8003ffa:	18e3      	adds	r3, r4, r3
 8003ffc:	603b      	str	r3, [r7, #0]
 8003ffe:	464b      	mov	r3, r9
 8004000:	eb45 0303 	adc.w	r3, r5, r3
 8004004:	607b      	str	r3, [r7, #4]
 8004006:	f04f 0200 	mov.w	r2, #0
 800400a:	f04f 0300 	mov.w	r3, #0
 800400e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004012:	4629      	mov	r1, r5
 8004014:	028b      	lsls	r3, r1, #10
 8004016:	4621      	mov	r1, r4
 8004018:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800401c:	4621      	mov	r1, r4
 800401e:	028a      	lsls	r2, r1, #10
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004026:	2200      	movs	r2, #0
 8004028:	61bb      	str	r3, [r7, #24]
 800402a:	61fa      	str	r2, [r7, #28]
 800402c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004030:	f7fc f91e 	bl	8000270 <__aeabi_uldivmod>
 8004034:	4602      	mov	r2, r0
 8004036:	460b      	mov	r3, r1
 8004038:	4613      	mov	r3, r2
 800403a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_RCC_GetSysClockFreq+0x200>)
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	0c1b      	lsrs	r3, r3, #16
 8004042:	f003 0303 	and.w	r3, r3, #3
 8004046:	3301      	adds	r3, #1
 8004048:	005b      	lsls	r3, r3, #1
 800404a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800404c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800404e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004056:	e002      	b.n	800405e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004058:	4b05      	ldr	r3, [pc, #20]	@ (8004070 <HAL_RCC_GetSysClockFreq+0x204>)
 800405a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800405c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800405e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004060:	4618      	mov	r0, r3
 8004062:	3750      	adds	r7, #80	@ 0x50
 8004064:	46bd      	mov	sp, r7
 8004066:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800406a:	bf00      	nop
 800406c:	40023800 	.word	0x40023800
 8004070:	00f42400 	.word	0x00f42400
 8004074:	007a1200 	.word	0x007a1200

08004078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800407c:	4b03      	ldr	r3, [pc, #12]	@ (800408c <HAL_RCC_GetHCLKFreq+0x14>)
 800407e:	681b      	ldr	r3, [r3, #0]
}
 8004080:	4618      	mov	r0, r3
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	20000000 	.word	0x20000000

08004090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004094:	f7ff fff0 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 8004098:	4602      	mov	r2, r0
 800409a:	4b05      	ldr	r3, [pc, #20]	@ (80040b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	0a9b      	lsrs	r3, r3, #10
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	4903      	ldr	r1, [pc, #12]	@ (80040b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040a6:	5ccb      	ldrb	r3, [r1, r3]
 80040a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	40023800 	.word	0x40023800
 80040b4:	08009330 	.word	0x08009330

080040b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80040bc:	f7ff ffdc 	bl	8004078 <HAL_RCC_GetHCLKFreq>
 80040c0:	4602      	mov	r2, r0
 80040c2:	4b05      	ldr	r3, [pc, #20]	@ (80040d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	0b5b      	lsrs	r3, r3, #13
 80040c8:	f003 0307 	and.w	r3, r3, #7
 80040cc:	4903      	ldr	r1, [pc, #12]	@ (80040dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80040ce:	5ccb      	ldrb	r3, [r1, r3]
 80040d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	40023800 	.word	0x40023800
 80040dc:	08009330 	.word	0x08009330

080040e0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0301 	and.w	r3, r3, #1
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d105      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004104:	2b00      	cmp	r3, #0
 8004106:	d035      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004108:	4b62      	ldr	r3, [pc, #392]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800410a:	2200      	movs	r2, #0
 800410c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800410e:	f7fc ff25 	bl	8000f5c <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004114:	e008      	b.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004116:	f7fc ff21 	bl	8000f5c <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	2b02      	cmp	r3, #2
 8004122:	d901      	bls.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0b0      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004128:	4b5b      	ldr	r3, [pc, #364]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d1f0      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	019a      	lsls	r2, r3, #6
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	071b      	lsls	r3, r3, #28
 8004140:	4955      	ldr	r1, [pc, #340]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004148:	4b52      	ldr	r3, [pc, #328]	@ (8004294 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800414a:	2201      	movs	r2, #1
 800414c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800414e:	f7fc ff05 	bl	8000f5c <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004154:	e008      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004156:	f7fc ff01 	bl	8000f5c <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d901      	bls.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e090      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004168:	4b4b      	ldr	r3, [pc, #300]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0f0      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0302 	and.w	r3, r3, #2
 800417c:	2b00      	cmp	r3, #0
 800417e:	f000 8083 	beq.w	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
 8004186:	4b44      	ldr	r3, [pc, #272]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	4a43      	ldr	r2, [pc, #268]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800418c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004190:	6413      	str	r3, [r2, #64]	@ 0x40
 8004192:	4b41      	ldr	r3, [pc, #260]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800419a:	60fb      	str	r3, [r7, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800419e:	4b3f      	ldr	r3, [pc, #252]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a3e      	ldr	r2, [pc, #248]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041a8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80041aa:	f7fc fed7 	bl	8000f5c <HAL_GetTick>
 80041ae:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041b0:	e008      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041b2:	f7fc fed3 	bl	8000f5c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d901      	bls.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80041c0:	2303      	movs	r3, #3
 80041c2:	e062      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80041c4:	4b35      	ldr	r3, [pc, #212]	@ (800429c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d0f0      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80041d0:	4b31      	ldr	r3, [pc, #196]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041d8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d02f      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d028      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041ee:	4b2a      	ldr	r3, [pc, #168]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80041f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041f6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041f8:	4b29      	ldr	r3, [pc, #164]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80041fa:	2201      	movs	r2, #1
 80041fc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041fe:	4b28      	ldr	r3, [pc, #160]	@ (80042a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004200:	2200      	movs	r2, #0
 8004202:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004204:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800420a:	4b23      	ldr	r3, [pc, #140]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800420e:	f003 0301 	and.w	r3, r3, #1
 8004212:	2b01      	cmp	r3, #1
 8004214:	d114      	bne.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004216:	f7fc fea1 	bl	8000f5c <HAL_GetTick>
 800421a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fc fe9d 	bl	8000f5c <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	@ 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e02a      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004234:	4b18      	ldr	r3, [pc, #96]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0ee      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004248:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800424c:	d10d      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800424e:	4b12      	ldr	r3, [pc, #72]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800425e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004262:	490d      	ldr	r1, [pc, #52]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004264:	4313      	orrs	r3, r2
 8004266:	608b      	str	r3, [r1, #8]
 8004268:	e005      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800426a:	4b0b      	ldr	r3, [pc, #44]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	4a0a      	ldr	r2, [pc, #40]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004270:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004274:	6093      	str	r3, [r2, #8]
 8004276:	4b08      	ldr	r3, [pc, #32]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004278:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004282:	4905      	ldr	r1, [pc, #20]	@ (8004298 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004284:	4313      	orrs	r3, r2
 8004286:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	42470068 	.word	0x42470068
 8004298:	40023800 	.word	0x40023800
 800429c:	40007000 	.word	0x40007000
 80042a0:	42470e40 	.word	0x42470e40

080042a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80042ac:	2300      	movs	r3, #0
 80042ae:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80042b4:	2300      	movs	r3, #0
 80042b6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d13f      	bne.n	8004342 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80042c2:	4b24      	ldr	r3, [pc, #144]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d006      	beq.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042d8:	d12f      	bne.n	800433a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80042da:	4b1f      	ldr	r3, [pc, #124]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80042dc:	617b      	str	r3, [r7, #20]
          break;
 80042de:	e02f      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80042e0:	4b1c      	ldr	r3, [pc, #112]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042ec:	d108      	bne.n	8004300 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80042ee:	4b19      	ldr	r3, [pc, #100]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042f6:	4a19      	ldr	r2, [pc, #100]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80042f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	e007      	b.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004300:	4b14      	ldr	r3, [pc, #80]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004308:	4a15      	ldr	r2, [pc, #84]	@ (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004310:	4b10      	ldr	r3, [pc, #64]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004312:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	fb02 f303 	mul.w	r3, r2, r3
 8004322:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004326:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800432a:	0f1b      	lsrs	r3, r3, #28
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	68ba      	ldr	r2, [r7, #8]
 8004332:	fbb2 f3f3 	udiv	r3, r2, r3
 8004336:	617b      	str	r3, [r7, #20]
          break;
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	617b      	str	r3, [r7, #20]
          break;
 800433e:	bf00      	nop
        }
      }
      break;
 8004340:	e000      	b.n	8004344 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004342:	bf00      	nop
    }
  }
  return frequency;
 8004344:	697b      	ldr	r3, [r7, #20]
}
 8004346:	4618      	mov	r0, r3
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00bb8000 	.word	0x00bb8000
 800435c:	007a1200 	.word	0x007a1200
 8004360:	00f42400 	.word	0x00f42400

08004364 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e042      	b.n	80043fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d106      	bne.n	8004390 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7fc fd0e 	bl	8000dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2224      	movs	r2, #36	@ 0x24
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	68da      	ldr	r2, [r3, #12]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f82b 	bl	8004404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691a      	ldr	r2, [r3, #16]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	695a      	ldr	r2, [r3, #20]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68da      	ldr	r2, [r3, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2200      	movs	r2, #0
 80043e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2220      	movs	r2, #32
 80043e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2220      	movs	r2, #32
 80043f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043fa:	2300      	movs	r3, #0
}
 80043fc:	4618      	mov	r0, r3
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004408:	b0c0      	sub	sp, #256	@ 0x100
 800440a:	af00      	add	r7, sp, #0
 800440c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691b      	ldr	r3, [r3, #16]
 8004418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004420:	68d9      	ldr	r1, [r3, #12]
 8004422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	ea40 0301 	orr.w	r3, r0, r1
 800442c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	431a      	orrs	r2, r3
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800445c:	f021 010c 	bic.w	r1, r1, #12
 8004460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800446a:	430b      	orrs	r3, r1
 800446c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	695b      	ldr	r3, [r3, #20]
 8004476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	6999      	ldr	r1, [r3, #24]
 8004480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	ea40 0301 	orr.w	r3, r0, r1
 800448a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b8f      	ldr	r3, [pc, #572]	@ (80046d0 <UART_SetConfig+0x2cc>)
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <UART_SetConfig+0xa0>
 8004498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	4b8d      	ldr	r3, [pc, #564]	@ (80046d4 <UART_SetConfig+0x2d0>)
 80044a0:	429a      	cmp	r2, r3
 80044a2:	d104      	bne.n	80044ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a4:	f7ff fe08 	bl	80040b8 <HAL_RCC_GetPCLK2Freq>
 80044a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80044ac:	e003      	b.n	80044b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044ae:	f7ff fdef 	bl	8004090 <HAL_RCC_GetPCLK1Freq>
 80044b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044c0:	f040 810c 	bne.w	80046dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044c8:	2200      	movs	r2, #0
 80044ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80044ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80044d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80044d6:	4622      	mov	r2, r4
 80044d8:	462b      	mov	r3, r5
 80044da:	1891      	adds	r1, r2, r2
 80044dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044de:	415b      	adcs	r3, r3
 80044e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044e6:	4621      	mov	r1, r4
 80044e8:	eb12 0801 	adds.w	r8, r2, r1
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb43 0901 	adc.w	r9, r3, r1
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004506:	4690      	mov	r8, r2
 8004508:	4699      	mov	r9, r3
 800450a:	4623      	mov	r3, r4
 800450c:	eb18 0303 	adds.w	r3, r8, r3
 8004510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004514:	462b      	mov	r3, r5
 8004516:	eb49 0303 	adc.w	r3, r9, r3
 800451a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800451e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800452a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800452e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004532:	460b      	mov	r3, r1
 8004534:	18db      	adds	r3, r3, r3
 8004536:	653b      	str	r3, [r7, #80]	@ 0x50
 8004538:	4613      	mov	r3, r2
 800453a:	eb42 0303 	adc.w	r3, r2, r3
 800453e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004548:	f7fb fe92 	bl	8000270 <__aeabi_uldivmod>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	4b61      	ldr	r3, [pc, #388]	@ (80046d8 <UART_SetConfig+0x2d4>)
 8004552:	fba3 2302 	umull	r2, r3, r3, r2
 8004556:	095b      	lsrs	r3, r3, #5
 8004558:	011c      	lsls	r4, r3, #4
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800456c:	4642      	mov	r2, r8
 800456e:	464b      	mov	r3, r9
 8004570:	1891      	adds	r1, r2, r2
 8004572:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004574:	415b      	adcs	r3, r3
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800457c:	4641      	mov	r1, r8
 800457e:	eb12 0a01 	adds.w	sl, r2, r1
 8004582:	4649      	mov	r1, r9
 8004584:	eb43 0b01 	adc.w	fp, r3, r1
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f04f 0300 	mov.w	r3, #0
 8004590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800459c:	4692      	mov	sl, r2
 800459e:	469b      	mov	fp, r3
 80045a0:	4643      	mov	r3, r8
 80045a2:	eb1a 0303 	adds.w	r3, sl, r3
 80045a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045aa:	464b      	mov	r3, r9
 80045ac:	eb4b 0303 	adc.w	r3, fp, r3
 80045b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80045c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80045c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80045c8:	460b      	mov	r3, r1
 80045ca:	18db      	adds	r3, r3, r3
 80045cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80045ce:	4613      	mov	r3, r2
 80045d0:	eb42 0303 	adc.w	r3, r2, r3
 80045d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80045d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80045da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045de:	f7fb fe47 	bl	8000270 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4611      	mov	r1, r2
 80045e8:	4b3b      	ldr	r3, [pc, #236]	@ (80046d8 <UART_SetConfig+0x2d4>)
 80045ea:	fba3 2301 	umull	r2, r3, r3, r1
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	2264      	movs	r2, #100	@ 0x64
 80045f2:	fb02 f303 	mul.w	r3, r2, r3
 80045f6:	1acb      	subs	r3, r1, r3
 80045f8:	00db      	lsls	r3, r3, #3
 80045fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045fe:	4b36      	ldr	r3, [pc, #216]	@ (80046d8 <UART_SetConfig+0x2d4>)
 8004600:	fba3 2302 	umull	r2, r3, r3, r2
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800460c:	441c      	add	r4, r3
 800460e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800461c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004620:	4642      	mov	r2, r8
 8004622:	464b      	mov	r3, r9
 8004624:	1891      	adds	r1, r2, r2
 8004626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004628:	415b      	adcs	r3, r3
 800462a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004630:	4641      	mov	r1, r8
 8004632:	1851      	adds	r1, r2, r1
 8004634:	6339      	str	r1, [r7, #48]	@ 0x30
 8004636:	4649      	mov	r1, r9
 8004638:	414b      	adcs	r3, r1
 800463a:	637b      	str	r3, [r7, #52]	@ 0x34
 800463c:	f04f 0200 	mov.w	r2, #0
 8004640:	f04f 0300 	mov.w	r3, #0
 8004644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004648:	4659      	mov	r1, fp
 800464a:	00cb      	lsls	r3, r1, #3
 800464c:	4651      	mov	r1, sl
 800464e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004652:	4651      	mov	r1, sl
 8004654:	00ca      	lsls	r2, r1, #3
 8004656:	4610      	mov	r0, r2
 8004658:	4619      	mov	r1, r3
 800465a:	4603      	mov	r3, r0
 800465c:	4642      	mov	r2, r8
 800465e:	189b      	adds	r3, r3, r2
 8004660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004664:	464b      	mov	r3, r9
 8004666:	460a      	mov	r2, r1
 8004668:	eb42 0303 	adc.w	r3, r2, r3
 800466c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800467c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004684:	460b      	mov	r3, r1
 8004686:	18db      	adds	r3, r3, r3
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800468a:	4613      	mov	r3, r2
 800468c:	eb42 0303 	adc.w	r3, r2, r3
 8004690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800469a:	f7fb fde9 	bl	8000270 <__aeabi_uldivmod>
 800469e:	4602      	mov	r2, r0
 80046a0:	460b      	mov	r3, r1
 80046a2:	4b0d      	ldr	r3, [pc, #52]	@ (80046d8 <UART_SetConfig+0x2d4>)
 80046a4:	fba3 1302 	umull	r1, r3, r3, r2
 80046a8:	095b      	lsrs	r3, r3, #5
 80046aa:	2164      	movs	r1, #100	@ 0x64
 80046ac:	fb01 f303 	mul.w	r3, r1, r3
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	3332      	adds	r3, #50	@ 0x32
 80046b6:	4a08      	ldr	r2, [pc, #32]	@ (80046d8 <UART_SetConfig+0x2d4>)
 80046b8:	fba2 2303 	umull	r2, r3, r2, r3
 80046bc:	095b      	lsrs	r3, r3, #5
 80046be:	f003 0207 	and.w	r2, r3, #7
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4422      	add	r2, r4
 80046ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046cc:	e106      	b.n	80048dc <UART_SetConfig+0x4d8>
 80046ce:	bf00      	nop
 80046d0:	40011000 	.word	0x40011000
 80046d4:	40011400 	.word	0x40011400
 80046d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046e0:	2200      	movs	r2, #0
 80046e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046ee:	4642      	mov	r2, r8
 80046f0:	464b      	mov	r3, r9
 80046f2:	1891      	adds	r1, r2, r2
 80046f4:	6239      	str	r1, [r7, #32]
 80046f6:	415b      	adcs	r3, r3
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046fe:	4641      	mov	r1, r8
 8004700:	1854      	adds	r4, r2, r1
 8004702:	4649      	mov	r1, r9
 8004704:	eb43 0501 	adc.w	r5, r3, r1
 8004708:	f04f 0200 	mov.w	r2, #0
 800470c:	f04f 0300 	mov.w	r3, #0
 8004710:	00eb      	lsls	r3, r5, #3
 8004712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004716:	00e2      	lsls	r2, r4, #3
 8004718:	4614      	mov	r4, r2
 800471a:	461d      	mov	r5, r3
 800471c:	4643      	mov	r3, r8
 800471e:	18e3      	adds	r3, r4, r3
 8004720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004724:	464b      	mov	r3, r9
 8004726:	eb45 0303 	adc.w	r3, r5, r3
 800472a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800473a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800474a:	4629      	mov	r1, r5
 800474c:	008b      	lsls	r3, r1, #2
 800474e:	4621      	mov	r1, r4
 8004750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004754:	4621      	mov	r1, r4
 8004756:	008a      	lsls	r2, r1, #2
 8004758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800475c:	f7fb fd88 	bl	8000270 <__aeabi_uldivmod>
 8004760:	4602      	mov	r2, r0
 8004762:	460b      	mov	r3, r1
 8004764:	4b60      	ldr	r3, [pc, #384]	@ (80048e8 <UART_SetConfig+0x4e4>)
 8004766:	fba3 2302 	umull	r2, r3, r3, r2
 800476a:	095b      	lsrs	r3, r3, #5
 800476c:	011c      	lsls	r4, r3, #4
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800477c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004780:	4642      	mov	r2, r8
 8004782:	464b      	mov	r3, r9
 8004784:	1891      	adds	r1, r2, r2
 8004786:	61b9      	str	r1, [r7, #24]
 8004788:	415b      	adcs	r3, r3
 800478a:	61fb      	str	r3, [r7, #28]
 800478c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004790:	4641      	mov	r1, r8
 8004792:	1851      	adds	r1, r2, r1
 8004794:	6139      	str	r1, [r7, #16]
 8004796:	4649      	mov	r1, r9
 8004798:	414b      	adcs	r3, r1
 800479a:	617b      	str	r3, [r7, #20]
 800479c:	f04f 0200 	mov.w	r2, #0
 80047a0:	f04f 0300 	mov.w	r3, #0
 80047a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047a8:	4659      	mov	r1, fp
 80047aa:	00cb      	lsls	r3, r1, #3
 80047ac:	4651      	mov	r1, sl
 80047ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b2:	4651      	mov	r1, sl
 80047b4:	00ca      	lsls	r2, r1, #3
 80047b6:	4610      	mov	r0, r2
 80047b8:	4619      	mov	r1, r3
 80047ba:	4603      	mov	r3, r0
 80047bc:	4642      	mov	r2, r8
 80047be:	189b      	adds	r3, r3, r2
 80047c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80047c4:	464b      	mov	r3, r9
 80047c6:	460a      	mov	r2, r1
 80047c8:	eb42 0303 	adc.w	r3, r2, r3
 80047cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80047d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80047da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047dc:	f04f 0200 	mov.w	r2, #0
 80047e0:	f04f 0300 	mov.w	r3, #0
 80047e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047e8:	4649      	mov	r1, r9
 80047ea:	008b      	lsls	r3, r1, #2
 80047ec:	4641      	mov	r1, r8
 80047ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f2:	4641      	mov	r1, r8
 80047f4:	008a      	lsls	r2, r1, #2
 80047f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047fa:	f7fb fd39 	bl	8000270 <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4611      	mov	r1, r2
 8004804:	4b38      	ldr	r3, [pc, #224]	@ (80048e8 <UART_SetConfig+0x4e4>)
 8004806:	fba3 2301 	umull	r2, r3, r3, r1
 800480a:	095b      	lsrs	r3, r3, #5
 800480c:	2264      	movs	r2, #100	@ 0x64
 800480e:	fb02 f303 	mul.w	r3, r2, r3
 8004812:	1acb      	subs	r3, r1, r3
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	3332      	adds	r3, #50	@ 0x32
 8004818:	4a33      	ldr	r2, [pc, #204]	@ (80048e8 <UART_SetConfig+0x4e4>)
 800481a:	fba2 2303 	umull	r2, r3, r2, r3
 800481e:	095b      	lsrs	r3, r3, #5
 8004820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004824:	441c      	add	r4, r3
 8004826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482a:	2200      	movs	r2, #0
 800482c:	673b      	str	r3, [r7, #112]	@ 0x70
 800482e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004834:	4642      	mov	r2, r8
 8004836:	464b      	mov	r3, r9
 8004838:	1891      	adds	r1, r2, r2
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	415b      	adcs	r3, r3
 800483e:	60fb      	str	r3, [r7, #12]
 8004840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004844:	4641      	mov	r1, r8
 8004846:	1851      	adds	r1, r2, r1
 8004848:	6039      	str	r1, [r7, #0]
 800484a:	4649      	mov	r1, r9
 800484c:	414b      	adcs	r3, r1
 800484e:	607b      	str	r3, [r7, #4]
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800485c:	4659      	mov	r1, fp
 800485e:	00cb      	lsls	r3, r1, #3
 8004860:	4651      	mov	r1, sl
 8004862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004866:	4651      	mov	r1, sl
 8004868:	00ca      	lsls	r2, r1, #3
 800486a:	4610      	mov	r0, r2
 800486c:	4619      	mov	r1, r3
 800486e:	4603      	mov	r3, r0
 8004870:	4642      	mov	r2, r8
 8004872:	189b      	adds	r3, r3, r2
 8004874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004876:	464b      	mov	r3, r9
 8004878:	460a      	mov	r2, r1
 800487a:	eb42 0303 	adc.w	r3, r2, r3
 800487e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	663b      	str	r3, [r7, #96]	@ 0x60
 800488a:	667a      	str	r2, [r7, #100]	@ 0x64
 800488c:	f04f 0200 	mov.w	r2, #0
 8004890:	f04f 0300 	mov.w	r3, #0
 8004894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004898:	4649      	mov	r1, r9
 800489a:	008b      	lsls	r3, r1, #2
 800489c:	4641      	mov	r1, r8
 800489e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a2:	4641      	mov	r1, r8
 80048a4:	008a      	lsls	r2, r1, #2
 80048a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80048aa:	f7fb fce1 	bl	8000270 <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4b0d      	ldr	r3, [pc, #52]	@ (80048e8 <UART_SetConfig+0x4e4>)
 80048b4:	fba3 1302 	umull	r1, r3, r3, r2
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	2164      	movs	r1, #100	@ 0x64
 80048bc:	fb01 f303 	mul.w	r3, r1, r3
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	3332      	adds	r3, #50	@ 0x32
 80048c6:	4a08      	ldr	r2, [pc, #32]	@ (80048e8 <UART_SetConfig+0x4e4>)
 80048c8:	fba2 2303 	umull	r2, r3, r2, r3
 80048cc:	095b      	lsrs	r3, r3, #5
 80048ce:	f003 020f 	and.w	r2, r3, #15
 80048d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4422      	add	r2, r4
 80048da:	609a      	str	r2, [r3, #8]
}
 80048dc:	bf00      	nop
 80048de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048e2:	46bd      	mov	sp, r7
 80048e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048e8:	51eb851f 	.word	0x51eb851f

080048ec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80048ec:	b084      	sub	sp, #16
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	f107 001c 	add.w	r0, r7, #28
 80048fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048fe:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004902:	2b01      	cmp	r3, #1
 8004904:	d123      	bne.n	800494e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800491a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800492e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004932:	2b01      	cmp	r3, #1
 8004934:	d105      	bne.n	8004942 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004942:	6878      	ldr	r0, [r7, #4]
 8004944:	f001 fae8 	bl	8005f18 <USB_CoreReset>
 8004948:	4603      	mov	r3, r0
 800494a:	73fb      	strb	r3, [r7, #15]
 800494c:	e01b      	b.n	8004986 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f001 fadc 	bl	8005f18 <USB_CoreReset>
 8004960:	4603      	mov	r3, r0
 8004962:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004964:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004968:	2b00      	cmp	r3, #0
 800496a:	d106      	bne.n	800497a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004970:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	639a      	str	r2, [r3, #56]	@ 0x38
 8004978:	e005      	b.n	8004986 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800497e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004986:	7fbb      	ldrb	r3, [r7, #30]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10b      	bne.n	80049a4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	f043 0206 	orr.w	r2, r3, #6
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f043 0220 	orr.w	r2, r3, #32
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80049a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80049b0:	b004      	add	sp, #16
 80049b2:	4770      	bx	lr

080049b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b087      	sub	sp, #28
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4613      	mov	r3, r2
 80049c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d165      	bne.n	8004a94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	4a41      	ldr	r2, [pc, #260]	@ (8004ad0 <USB_SetTurnaroundTime+0x11c>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d906      	bls.n	80049de <USB_SetTurnaroundTime+0x2a>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	4a40      	ldr	r2, [pc, #256]	@ (8004ad4 <USB_SetTurnaroundTime+0x120>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d202      	bcs.n	80049de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80049d8:	230f      	movs	r3, #15
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e062      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ad4 <USB_SetTurnaroundTime+0x120>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d306      	bcc.n	80049f4 <USB_SetTurnaroundTime+0x40>
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4a3b      	ldr	r2, [pc, #236]	@ (8004ad8 <USB_SetTurnaroundTime+0x124>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d202      	bcs.n	80049f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80049ee:	230e      	movs	r3, #14
 80049f0:	617b      	str	r3, [r7, #20]
 80049f2:	e057      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4a38      	ldr	r2, [pc, #224]	@ (8004ad8 <USB_SetTurnaroundTime+0x124>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d306      	bcc.n	8004a0a <USB_SetTurnaroundTime+0x56>
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	4a37      	ldr	r2, [pc, #220]	@ (8004adc <USB_SetTurnaroundTime+0x128>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d202      	bcs.n	8004a0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004a04:	230d      	movs	r3, #13
 8004a06:	617b      	str	r3, [r7, #20]
 8004a08:	e04c      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	4a33      	ldr	r2, [pc, #204]	@ (8004adc <USB_SetTurnaroundTime+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d306      	bcc.n	8004a20 <USB_SetTurnaroundTime+0x6c>
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	4a32      	ldr	r2, [pc, #200]	@ (8004ae0 <USB_SetTurnaroundTime+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d802      	bhi.n	8004a20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004a1a:	230c      	movs	r3, #12
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e041      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4a2f      	ldr	r2, [pc, #188]	@ (8004ae0 <USB_SetTurnaroundTime+0x12c>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d906      	bls.n	8004a36 <USB_SetTurnaroundTime+0x82>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8004ae4 <USB_SetTurnaroundTime+0x130>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d802      	bhi.n	8004a36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004a30:	230b      	movs	r3, #11
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e036      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4a2a      	ldr	r2, [pc, #168]	@ (8004ae4 <USB_SetTurnaroundTime+0x130>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d906      	bls.n	8004a4c <USB_SetTurnaroundTime+0x98>
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	4a29      	ldr	r2, [pc, #164]	@ (8004ae8 <USB_SetTurnaroundTime+0x134>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004a46:	230a      	movs	r3, #10
 8004a48:	617b      	str	r3, [r7, #20]
 8004a4a:	e02b      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4a26      	ldr	r2, [pc, #152]	@ (8004ae8 <USB_SetTurnaroundTime+0x134>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d906      	bls.n	8004a62 <USB_SetTurnaroundTime+0xae>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	4a25      	ldr	r2, [pc, #148]	@ (8004aec <USB_SetTurnaroundTime+0x138>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d202      	bcs.n	8004a62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004a5c:	2309      	movs	r3, #9
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	e020      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	4a21      	ldr	r2, [pc, #132]	@ (8004aec <USB_SetTurnaroundTime+0x138>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d306      	bcc.n	8004a78 <USB_SetTurnaroundTime+0xc4>
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	4a20      	ldr	r2, [pc, #128]	@ (8004af0 <USB_SetTurnaroundTime+0x13c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d802      	bhi.n	8004a78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004a72:	2308      	movs	r3, #8
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	e015      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a1d      	ldr	r2, [pc, #116]	@ (8004af0 <USB_SetTurnaroundTime+0x13c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d906      	bls.n	8004a8e <USB_SetTurnaroundTime+0xda>
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4a1c      	ldr	r2, [pc, #112]	@ (8004af4 <USB_SetTurnaroundTime+0x140>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d202      	bcs.n	8004a8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]
 8004a8c:	e00a      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004a8e:	2306      	movs	r3, #6
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e007      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a94:	79fb      	ldrb	r3, [r7, #7]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d102      	bne.n	8004aa0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a9a:	2309      	movs	r3, #9
 8004a9c:	617b      	str	r3, [r7, #20]
 8004a9e:	e001      	b.n	8004aa4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004aa0:	2309      	movs	r3, #9
 8004aa2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	68da      	ldr	r2, [r3, #12]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	029b      	lsls	r3, r3, #10
 8004ab8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	371c      	adds	r7, #28
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	00d8acbf 	.word	0x00d8acbf
 8004ad4:	00e4e1c0 	.word	0x00e4e1c0
 8004ad8:	00f42400 	.word	0x00f42400
 8004adc:	01067380 	.word	0x01067380
 8004ae0:	011a499f 	.word	0x011a499f
 8004ae4:	01312cff 	.word	0x01312cff
 8004ae8:	014ca43f 	.word	0x014ca43f
 8004aec:	016e3600 	.word	0x016e3600
 8004af0:	01a6ab1f 	.word	0x01a6ab1f
 8004af4:	01e84800 	.word	0x01e84800

08004af8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b083      	sub	sp, #12
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f043 0201 	orr.w	r2, r3, #1
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b0c:	2300      	movs	r3, #0
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b2e:	2300      	movs	r3, #0
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr

08004b3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	460b      	mov	r3, r1
 8004b46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b58:	78fb      	ldrb	r3, [r7, #3]
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d115      	bne.n	8004b8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b6a:	200a      	movs	r0, #10
 8004b6c:	f7fc fa02 	bl	8000f74 <HAL_Delay>
      ms += 10U;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	330a      	adds	r3, #10
 8004b74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f001 f93f 	bl	8005dfa <USB_GetMode>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d01e      	beq.n	8004bc0 <USB_SetCurrentMode+0x84>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2bc7      	cmp	r3, #199	@ 0xc7
 8004b86:	d9f0      	bls.n	8004b6a <USB_SetCurrentMode+0x2e>
 8004b88:	e01a      	b.n	8004bc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d115      	bne.n	8004bbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004b9c:	200a      	movs	r0, #10
 8004b9e:	f7fc f9e9 	bl	8000f74 <HAL_Delay>
      ms += 10U;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	330a      	adds	r3, #10
 8004ba6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f001 f926 	bl	8005dfa <USB_GetMode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <USB_SetCurrentMode+0x84>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2bc7      	cmp	r3, #199	@ 0xc7
 8004bb8:	d9f0      	bls.n	8004b9c <USB_SetCurrentMode+0x60>
 8004bba:	e001      	b.n	8004bc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e005      	b.n	8004bcc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	2bc8      	cmp	r3, #200	@ 0xc8
 8004bc4:	d101      	bne.n	8004bca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e000      	b.n	8004bcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}

08004bd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bd4:	b084      	sub	sp, #16
 8004bd6:	b580      	push	{r7, lr}
 8004bd8:	b086      	sub	sp, #24
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004be2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004bee:	2300      	movs	r3, #0
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	e009      	b.n	8004c08 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	3340      	adds	r3, #64	@ 0x40
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3301      	adds	r3, #1
 8004c06:	613b      	str	r3, [r7, #16]
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	2b0e      	cmp	r3, #14
 8004c0c:	d9f2      	bls.n	8004bf4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004c0e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d11c      	bne.n	8004c50 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c24:	f043 0302 	orr.w	r3, r3, #2
 8004c28:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c2e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c3a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c46:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004c4e:	e00b      	b.n	8004c68 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c54:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004c6e:	461a      	mov	r2, r3
 8004c70:	2300      	movs	r3, #0
 8004c72:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c74:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d10d      	bne.n	8004c98 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004c7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d104      	bne.n	8004c8e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004c84:	2100      	movs	r1, #0
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f968 	bl	8004f5c <USB_SetDevSpeed>
 8004c8c:	e008      	b.n	8004ca0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004c8e:	2101      	movs	r1, #1
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f963 	bl	8004f5c <USB_SetDevSpeed>
 8004c96:	e003      	b.n	8004ca0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c98:	2103      	movs	r1, #3
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f95e 	bl	8004f5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004ca0:	2110      	movs	r1, #16
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f8fa 	bl	8004e9c <USB_FlushTxFifo>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f924 	bl	8004f00 <USB_FlushRxFifo>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cc8:	461a      	mov	r2, r3
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	613b      	str	r3, [r7, #16]
 8004cea:	e043      	b.n	8004d74 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	015a      	lsls	r2, r3, #5
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	4413      	add	r3, r2
 8004cf4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004cfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d02:	d118      	bne.n	8004d36 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d10a      	bne.n	8004d20 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d16:	461a      	mov	r2, r3
 8004d18:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	e013      	b.n	8004d48 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004d32:	6013      	str	r3, [r2, #0]
 8004d34:	e008      	b.n	8004d48 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d42:	461a      	mov	r2, r3
 8004d44:	2300      	movs	r3, #0
 8004d46:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d54:	461a      	mov	r2, r3
 8004d56:	2300      	movs	r3, #0
 8004d58:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	015a      	lsls	r2, r3, #5
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d66:	461a      	mov	r2, r3
 8004d68:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004d6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	3301      	adds	r3, #1
 8004d72:	613b      	str	r3, [r7, #16]
 8004d74:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004d78:	461a      	mov	r2, r3
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d3b5      	bcc.n	8004cec <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d80:	2300      	movs	r3, #0
 8004d82:	613b      	str	r3, [r7, #16]
 8004d84:	e043      	b.n	8004e0e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d98:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d9c:	d118      	bne.n	8004dd0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d10a      	bne.n	8004dba <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	015a      	lsls	r2, r3, #5
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	4413      	add	r3, r2
 8004dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004db0:	461a      	mov	r2, r3
 8004db2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e013      	b.n	8004de2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004dcc:	6013      	str	r3, [r2, #0]
 8004dce:	e008      	b.n	8004de2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	461a      	mov	r2, r3
 8004dde:	2300      	movs	r3, #0
 8004de0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dee:	461a      	mov	r2, r3
 8004df0:	2300      	movs	r3, #0
 8004df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e00:	461a      	mov	r2, r3
 8004e02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004e12:	461a      	mov	r2, r3
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d3b5      	bcc.n	8004d86 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e2c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004e3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004e3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	f043 0210 	orr.w	r2, r3, #16
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	4b10      	ldr	r3, [pc, #64]	@ (8004e98 <USB_DevInit+0x2c4>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004e5c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d005      	beq.n	8004e70 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	f043 0208 	orr.w	r2, r3, #8
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004e70:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d107      	bne.n	8004e88 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004e88:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3718      	adds	r7, #24
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e94:	b004      	add	sp, #16
 8004e96:	4770      	bx	lr
 8004e98:	803c3800 	.word	0x803c3800

08004e9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	3301      	adds	r3, #1
 8004eae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004eb6:	d901      	bls.n	8004ebc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e01b      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	691b      	ldr	r3, [r3, #16]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	daf2      	bge.n	8004eaa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	f043 0220 	orr.w	r2, r3, #32
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ee0:	d901      	bls.n	8004ee6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f003 0320 	and.w	r3, r3, #32
 8004eee:	2b20      	cmp	r3, #32
 8004ef0:	d0f0      	beq.n	8004ed4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f18:	d901      	bls.n	8004f1e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e018      	b.n	8004f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	daf2      	bge.n	8004f0c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3301      	adds	r3, #1
 8004f34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004f3c:	d901      	bls.n	8004f42 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e006      	b.n	8004f50 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d0f0      	beq.n	8004f30 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	460b      	mov	r3, r1
 8004f66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	68f9      	ldr	r1, [r7, #12]
 8004f78:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b087      	sub	sp, #28
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0306 	and.w	r3, r3, #6
 8004fa6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d102      	bne.n	8004fb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004fae:	2300      	movs	r3, #0
 8004fb0:	75fb      	strb	r3, [r7, #23]
 8004fb2:	e00a      	b.n	8004fca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d002      	beq.n	8004fc0 <USB_GetDevSpeed+0x32>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	2b06      	cmp	r3, #6
 8004fbe:	d102      	bne.n	8004fc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	75fb      	strb	r3, [r7, #23]
 8004fc4:	e001      	b.n	8004fca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004fc6:	230f      	movs	r3, #15
 8004fc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	371c      	adds	r7, #28
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	781b      	ldrb	r3, [r3, #0]
 8004fea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	785b      	ldrb	r3, [r3, #1]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d13a      	bne.n	800506a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	f003 030f 	and.w	r3, r3, #15
 8005004:	2101      	movs	r1, #1
 8005006:	fa01 f303 	lsl.w	r3, r1, r3
 800500a:	b29b      	uxth	r3, r3
 800500c:	68f9      	ldr	r1, [r7, #12]
 800500e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005012:	4313      	orrs	r3, r2
 8005014:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d155      	bne.n	80050d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	689b      	ldr	r3, [r3, #8]
 800503e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	791b      	ldrb	r3, [r3, #4]
 8005046:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005048:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	059b      	lsls	r3, r3, #22
 800504e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005050:	4313      	orrs	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	0151      	lsls	r1, r2, #5
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	440a      	add	r2, r1
 800505a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800505e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	e036      	b.n	80050d8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005070:	69da      	ldr	r2, [r3, #28]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 030f 	and.w	r3, r3, #15
 800507a:	2101      	movs	r1, #1
 800507c:	fa01 f303 	lsl.w	r3, r1, r3
 8005080:	041b      	lsls	r3, r3, #16
 8005082:	68f9      	ldr	r1, [r7, #12]
 8005084:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005088:	4313      	orrs	r3, r2
 800508a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11a      	bne.n	80050d8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	791b      	ldrb	r3, [r3, #4]
 80050bc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80050be:	430b      	orrs	r3, r1
 80050c0:	4313      	orrs	r3, r2
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	0151      	lsls	r1, r2, #5
 80050c6:	68fa      	ldr	r2, [r7, #12]
 80050c8:	440a      	add	r2, r1
 80050ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80050ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d161      	bne.n	80051c8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4413      	add	r3, r2
 800510c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800511a:	d11f      	bne.n	800515c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005136:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800513a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	0151      	lsls	r1, r2, #5
 800514e:	68fa      	ldr	r2, [r7, #12]
 8005150:	440a      	add	r2, r1
 8005152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005156:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800515a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005162:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	f003 030f 	and.w	r3, r3, #15
 800516c:	2101      	movs	r1, #1
 800516e:	fa01 f303 	lsl.w	r3, r1, r3
 8005172:	b29b      	uxth	r3, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	68f9      	ldr	r1, [r7, #12]
 8005178:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800517c:	4013      	ands	r3, r2
 800517e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	2101      	movs	r1, #1
 8005192:	fa01 f303 	lsl.w	r3, r1, r3
 8005196:	b29b      	uxth	r3, r3
 8005198:	43db      	mvns	r3, r3
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051a0:	4013      	ands	r3, r2
 80051a2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	0159      	lsls	r1, r3, #5
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	440b      	add	r3, r1
 80051ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80051be:	4619      	mov	r1, r3
 80051c0:	4b35      	ldr	r3, [pc, #212]	@ (8005298 <USB_DeactivateEndpoint+0x1b0>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	600b      	str	r3, [r1, #0]
 80051c6:	e060      	b.n	800528a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	015a      	lsls	r2, r3, #5
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4413      	add	r3, r2
 80051d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051de:	d11f      	bne.n	8005220 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68ba      	ldr	r2, [r7, #8]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051fa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051fe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68ba      	ldr	r2, [r7, #8]
 8005210:	0151      	lsls	r1, r2, #5
 8005212:	68fa      	ldr	r2, [r7, #12]
 8005214:	440a      	add	r2, r1
 8005216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800521e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	2101      	movs	r1, #1
 8005232:	fa01 f303 	lsl.w	r3, r1, r3
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	43db      	mvns	r3, r3
 800523a:	68f9      	ldr	r1, [r7, #12]
 800523c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005240:	4013      	ands	r3, r2
 8005242:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	041b      	lsls	r3, r3, #16
 800525c:	43db      	mvns	r3, r3
 800525e:	68f9      	ldr	r1, [r7, #12]
 8005260:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005264:	4013      	ands	r3, r2
 8005266:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	0159      	lsls	r1, r3, #5
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	440b      	add	r3, r1
 800527e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005282:	4619      	mov	r1, r3
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <USB_DeactivateEndpoint+0x1b4>)
 8005286:	4013      	ands	r3, r2
 8005288:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	ec337800 	.word	0xec337800
 800529c:	eff37800 	.word	0xeff37800

080052a0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08a      	sub	sp, #40	@ 0x28
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	4613      	mov	r3, r2
 80052ac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	785b      	ldrb	r3, [r3, #1]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	f040 817f 	bne.w	80055c0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d132      	bne.n	8005330 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	015a      	lsls	r2, r3, #5
 80052ce:	69fb      	ldr	r3, [r7, #28]
 80052d0:	4413      	add	r3, r2
 80052d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	69ba      	ldr	r2, [r7, #24]
 80052da:	0151      	lsls	r1, r2, #5
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	440a      	add	r2, r1
 80052e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80052e4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80052e8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80052ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	69ba      	ldr	r2, [r7, #24]
 80052fe:	0151      	lsls	r1, r2, #5
 8005300:	69fa      	ldr	r2, [r7, #28]
 8005302:	440a      	add	r2, r1
 8005304:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005308:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800530c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	015a      	lsls	r2, r3, #5
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	4413      	add	r3, r2
 8005316:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	69ba      	ldr	r2, [r7, #24]
 800531e:	0151      	lsls	r1, r2, #5
 8005320:	69fa      	ldr	r2, [r7, #28]
 8005322:	440a      	add	r2, r1
 8005324:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005328:	0cdb      	lsrs	r3, r3, #19
 800532a:	04db      	lsls	r3, r3, #19
 800532c:	6113      	str	r3, [r2, #16]
 800532e:	e097      	b.n	8005460 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	015a      	lsls	r2, r3, #5
 8005334:	69fb      	ldr	r3, [r7, #28]
 8005336:	4413      	add	r3, r2
 8005338:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	0151      	lsls	r1, r2, #5
 8005342:	69fa      	ldr	r2, [r7, #28]
 8005344:	440a      	add	r2, r1
 8005346:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800534a:	0cdb      	lsrs	r3, r3, #19
 800534c:	04db      	lsls	r3, r3, #19
 800534e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	69ba      	ldr	r2, [r7, #24]
 8005360:	0151      	lsls	r1, r2, #5
 8005362:	69fa      	ldr	r2, [r7, #28]
 8005364:	440a      	add	r2, r1
 8005366:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800536a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800536e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005372:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d11a      	bne.n	80053b0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	691a      	ldr	r2, [r3, #16]
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	429a      	cmp	r2, r3
 8005384:	d903      	bls.n	800538e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	689a      	ldr	r2, [r3, #8]
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800538e:	69bb      	ldr	r3, [r7, #24]
 8005390:	015a      	lsls	r2, r3, #5
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	4413      	add	r3, r2
 8005396:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	69ba      	ldr	r2, [r7, #24]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	69fa      	ldr	r2, [r7, #28]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80053a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80053ac:	6113      	str	r3, [r2, #16]
 80053ae:	e044      	b.n	800543a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	691a      	ldr	r2, [r3, #16]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	4413      	add	r3, r2
 80053ba:	1e5a      	subs	r2, r3, #1
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	689b      	ldr	r3, [r3, #8]
 80053c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	8afb      	ldrh	r3, [r7, #22]
 80053d6:	04d9      	lsls	r1, r3, #19
 80053d8:	4ba4      	ldr	r3, [pc, #656]	@ (800566c <USB_EPStartXfer+0x3cc>)
 80053da:	400b      	ands	r3, r1
 80053dc:	69b9      	ldr	r1, [r7, #24]
 80053de:	0148      	lsls	r0, r1, #5
 80053e0:	69f9      	ldr	r1, [r7, #28]
 80053e2:	4401      	add	r1, r0
 80053e4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80053e8:	4313      	orrs	r3, r2
 80053ea:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	791b      	ldrb	r3, [r3, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d122      	bne.n	800543a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	015a      	lsls	r2, r3, #5
 80053f8:	69fb      	ldr	r3, [r7, #28]
 80053fa:	4413      	add	r3, r2
 80053fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	69ba      	ldr	r2, [r7, #24]
 8005404:	0151      	lsls	r1, r2, #5
 8005406:	69fa      	ldr	r2, [r7, #28]
 8005408:	440a      	add	r2, r1
 800540a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800540e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005412:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	015a      	lsls	r2, r3, #5
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	4413      	add	r3, r2
 800541c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005420:	691a      	ldr	r2, [r3, #16]
 8005422:	8afb      	ldrh	r3, [r7, #22]
 8005424:	075b      	lsls	r3, r3, #29
 8005426:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800542a:	69b9      	ldr	r1, [r7, #24]
 800542c:	0148      	lsls	r0, r1, #5
 800542e:	69f9      	ldr	r1, [r7, #28]
 8005430:	4401      	add	r1, r0
 8005432:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005436:	4313      	orrs	r3, r2
 8005438:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800543a:	69bb      	ldr	r3, [r7, #24]
 800543c:	015a      	lsls	r2, r3, #5
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	4413      	add	r3, r2
 8005442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	691b      	ldr	r3, [r3, #16]
 800544c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005450:	69b9      	ldr	r1, [r7, #24]
 8005452:	0148      	lsls	r0, r1, #5
 8005454:	69f9      	ldr	r1, [r7, #28]
 8005456:	4401      	add	r1, r0
 8005458:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800545c:	4313      	orrs	r3, r2
 800545e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005460:	79fb      	ldrb	r3, [r7, #7]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d14b      	bne.n	80054fe <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d009      	beq.n	8005482 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	015a      	lsls	r2, r3, #5
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	4413      	add	r3, r2
 8005476:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800547a:	461a      	mov	r2, r3
 800547c:	68bb      	ldr	r3, [r7, #8]
 800547e:	69db      	ldr	r3, [r3, #28]
 8005480:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d128      	bne.n	80054dc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005496:	2b00      	cmp	r3, #0
 8005498:	d110      	bne.n	80054bc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800549a:	69bb      	ldr	r3, [r7, #24]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69ba      	ldr	r2, [r7, #24]
 80054aa:	0151      	lsls	r1, r2, #5
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	440a      	add	r2, r1
 80054b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e00f      	b.n	80054dc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	69fa      	ldr	r2, [r7, #28]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054da:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	015a      	lsls	r2, r3, #5
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	4413      	add	r3, r2
 80054e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	0151      	lsls	r1, r2, #5
 80054ee:	69fa      	ldr	r2, [r7, #28]
 80054f0:	440a      	add	r2, r1
 80054f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80054f6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	e166      	b.n	80057cc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054fe:	69bb      	ldr	r3, [r7, #24]
 8005500:	015a      	lsls	r2, r3, #5
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	4413      	add	r3, r2
 8005506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69ba      	ldr	r2, [r7, #24]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	69fa      	ldr	r2, [r7, #28]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005518:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800551c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	791b      	ldrb	r3, [r3, #4]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d015      	beq.n	8005552 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 814e 	beq.w	80057cc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005536:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	2101      	movs	r1, #1
 8005542:	fa01 f303 	lsl.w	r3, r1, r3
 8005546:	69f9      	ldr	r1, [r7, #28]
 8005548:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800554c:	4313      	orrs	r3, r2
 800554e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005550:	e13c      	b.n	80057cc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d110      	bne.n	8005584 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	015a      	lsls	r2, r3, #5
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4413      	add	r3, r2
 800556a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	0151      	lsls	r1, r2, #5
 8005574:	69fa      	ldr	r2, [r7, #28]
 8005576:	440a      	add	r2, r1
 8005578:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800557c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	e00f      	b.n	80055a4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	015a      	lsls	r2, r3, #5
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	4413      	add	r3, r2
 800558c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	69ba      	ldr	r2, [r7, #24]
 8005594:	0151      	lsls	r1, r2, #5
 8005596:	69fa      	ldr	r2, [r7, #28]
 8005598:	440a      	add	r2, r1
 800559a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	68d9      	ldr	r1, [r3, #12]
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	781a      	ldrb	r2, [r3, #0]
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	b298      	uxth	r0, r3
 80055b2:	79fb      	ldrb	r3, [r7, #7]
 80055b4:	9300      	str	r3, [sp, #0]
 80055b6:	4603      	mov	r3, r0
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f000 f9b9 	bl	8005930 <USB_WritePacket>
 80055be:	e105      	b.n	80057cc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	015a      	lsls	r2, r3, #5
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	4413      	add	r3, r2
 80055c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	0151      	lsls	r1, r2, #5
 80055d2:	69fa      	ldr	r2, [r7, #28]
 80055d4:	440a      	add	r2, r1
 80055d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055da:	0cdb      	lsrs	r3, r3, #19
 80055dc:	04db      	lsls	r3, r3, #19
 80055de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	69ba      	ldr	r2, [r7, #24]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80055fa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80055fe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005602:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d132      	bne.n	8005670 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	689a      	ldr	r2, [r3, #8]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005638:	69b9      	ldr	r1, [r7, #24]
 800563a:	0148      	lsls	r0, r1, #5
 800563c:	69f9      	ldr	r1, [r7, #28]
 800563e:	4401      	add	r1, r0
 8005640:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005644:	4313      	orrs	r3, r2
 8005646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005662:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005666:	6113      	str	r3, [r2, #16]
 8005668:	e062      	b.n	8005730 <USB_EPStartXfer+0x490>
 800566a:	bf00      	nop
 800566c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d123      	bne.n	80056c0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	015a      	lsls	r2, r3, #5
 800567c:	69fb      	ldr	r3, [r7, #28]
 800567e:	4413      	add	r3, r2
 8005680:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005684:	691a      	ldr	r2, [r3, #16]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568e:	69b9      	ldr	r1, [r7, #24]
 8005690:	0148      	lsls	r0, r1, #5
 8005692:	69f9      	ldr	r1, [r7, #28]
 8005694:	4401      	add	r1, r0
 8005696:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800569a:	4313      	orrs	r3, r2
 800569c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	69ba      	ldr	r2, [r7, #24]
 80056ae:	0151      	lsls	r1, r2, #5
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	440a      	add	r2, r1
 80056b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80056bc:	6113      	str	r3, [r2, #16]
 80056be:	e037      	b.n	8005730 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	691a      	ldr	r2, [r3, #16]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	4413      	add	r3, r2
 80056ca:	1e5a      	subs	r2, r3, #1
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	8afa      	ldrh	r2, [r7, #22]
 80056dc:	fb03 f202 	mul.w	r2, r3, r2
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	015a      	lsls	r2, r3, #5
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	4413      	add	r3, r2
 80056ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056f0:	691a      	ldr	r2, [r3, #16]
 80056f2:	8afb      	ldrh	r3, [r7, #22]
 80056f4:	04d9      	lsls	r1, r3, #19
 80056f6:	4b38      	ldr	r3, [pc, #224]	@ (80057d8 <USB_EPStartXfer+0x538>)
 80056f8:	400b      	ands	r3, r1
 80056fa:	69b9      	ldr	r1, [r7, #24]
 80056fc:	0148      	lsls	r0, r1, #5
 80056fe:	69f9      	ldr	r1, [r7, #28]
 8005700:	4401      	add	r1, r0
 8005702:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005706:	4313      	orrs	r3, r2
 8005708:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4413      	add	r3, r2
 8005712:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005716:	691a      	ldr	r2, [r3, #16]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6a1b      	ldr	r3, [r3, #32]
 800571c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005720:	69b9      	ldr	r1, [r7, #24]
 8005722:	0148      	lsls	r0, r1, #5
 8005724:	69f9      	ldr	r1, [r7, #28]
 8005726:	4401      	add	r1, r0
 8005728:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800572c:	4313      	orrs	r3, r2
 800572e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005730:	79fb      	ldrb	r3, [r7, #7]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d10d      	bne.n	8005752 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d009      	beq.n	8005752 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	68d9      	ldr	r1, [r3, #12]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800574e:	460a      	mov	r2, r1
 8005750:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	791b      	ldrb	r3, [r3, #4]
 8005756:	2b01      	cmp	r3, #1
 8005758:	d128      	bne.n	80057ac <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800575a:	69fb      	ldr	r3, [r7, #28]
 800575c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d110      	bne.n	800578c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	4413      	add	r3, r2
 8005772:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69ba      	ldr	r2, [r7, #24]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005784:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005788:	6013      	str	r3, [r2, #0]
 800578a:	e00f      	b.n	80057ac <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	015a      	lsls	r2, r3, #5
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	4413      	add	r3, r2
 8005794:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	69ba      	ldr	r2, [r7, #24]
 800579c:	0151      	lsls	r1, r2, #5
 800579e:	69fa      	ldr	r2, [r7, #28]
 80057a0:	440a      	add	r2, r1
 80057a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057aa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	0151      	lsls	r1, r2, #5
 80057be:	69fa      	ldr	r2, [r7, #28]
 80057c0:	440a      	add	r2, r1
 80057c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057c6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80057ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	3720      	adds	r7, #32
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	1ff80000 	.word	0x1ff80000

080057dc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	785b      	ldrb	r3, [r3, #1]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d14a      	bne.n	8005890 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800580e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005812:	f040 8086 	bne.w	8005922 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	7812      	ldrb	r2, [r2, #0]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005834:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005838:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	7812      	ldrb	r2, [r2, #0]
 800584e:	0151      	lsls	r1, r2, #5
 8005850:	693a      	ldr	r2, [r7, #16]
 8005852:	440a      	add	r2, r1
 8005854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005858:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800585c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3301      	adds	r3, #1
 8005862:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f242 7210 	movw	r2, #10000	@ 0x2710
 800586a:	4293      	cmp	r3, r2
 800586c:	d902      	bls.n	8005874 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	75fb      	strb	r3, [r7, #23]
          break;
 8005872:	e056      	b.n	8005922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005888:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800588c:	d0e7      	beq.n	800585e <USB_EPStopXfer+0x82>
 800588e:	e048      	b.n	8005922 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058a8:	d13b      	bne.n	8005922 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	015a      	lsls	r2, r3, #5
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	4413      	add	r3, r2
 80058b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	7812      	ldrb	r2, [r2, #0]
 80058be:	0151      	lsls	r1, r2, #5
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	440a      	add	r2, r1
 80058c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058c8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80058cc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	781b      	ldrb	r3, [r3, #0]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	7812      	ldrb	r2, [r2, #0]
 80058e2:	0151      	lsls	r1, r2, #5
 80058e4:	693a      	ldr	r2, [r7, #16]
 80058e6:	440a      	add	r2, r1
 80058e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80058ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80058f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	3301      	adds	r3, #1
 80058f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f242 7210 	movw	r2, #10000	@ 0x2710
 80058fe:	4293      	cmp	r3, r2
 8005900:	d902      	bls.n	8005908 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	75fb      	strb	r3, [r7, #23]
          break;
 8005906:	e00c      	b.n	8005922 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800591c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005920:	d0e7      	beq.n	80058f2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005922:	7dfb      	ldrb	r3, [r7, #23]
}
 8005924:	4618      	mov	r0, r3
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005930:	b480      	push	{r7}
 8005932:	b089      	sub	sp, #36	@ 0x24
 8005934:	af00      	add	r7, sp, #0
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4611      	mov	r1, r2
 800593c:	461a      	mov	r2, r3
 800593e:	460b      	mov	r3, r1
 8005940:	71fb      	strb	r3, [r7, #7]
 8005942:	4613      	mov	r3, r2
 8005944:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800594e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005952:	2b00      	cmp	r3, #0
 8005954:	d123      	bne.n	800599e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005956:	88bb      	ldrh	r3, [r7, #4]
 8005958:	3303      	adds	r3, #3
 800595a:	089b      	lsrs	r3, r3, #2
 800595c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800595e:	2300      	movs	r3, #0
 8005960:	61bb      	str	r3, [r7, #24]
 8005962:	e018      	b.n	8005996 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005964:	79fb      	ldrb	r3, [r7, #7]
 8005966:	031a      	lsls	r2, r3, #12
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	4413      	add	r3, r2
 800596c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005970:	461a      	mov	r2, r3
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	3301      	adds	r3, #1
 800597c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	3301      	adds	r3, #1
 8005982:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	3301      	adds	r3, #1
 8005988:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	3301      	adds	r3, #1
 8005994:	61bb      	str	r3, [r7, #24]
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	429a      	cmp	r2, r3
 800599c:	d3e2      	bcc.n	8005964 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3724      	adds	r7, #36	@ 0x24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b08b      	sub	sp, #44	@ 0x2c
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80059c2:	88fb      	ldrh	r3, [r7, #6]
 80059c4:	089b      	lsrs	r3, r3, #2
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80059ca:	88fb      	ldrh	r3, [r7, #6]
 80059cc:	f003 0303 	and.w	r3, r3, #3
 80059d0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80059d2:	2300      	movs	r3, #0
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	e014      	b.n	8005a02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e2:	601a      	str	r2, [r3, #0]
    pDest++;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059e6:	3301      	adds	r3, #1
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ec:	3301      	adds	r3, #1
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f2:	3301      	adds	r3, #1
 80059f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	3301      	adds	r3, #1
 80059fa:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	3301      	adds	r3, #1
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	6a3a      	ldr	r2, [r7, #32]
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d3e6      	bcc.n	80059d8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005a0a:	8bfb      	ldrh	r3, [r7, #30]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01e      	beq.n	8005a4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005a10:	2300      	movs	r3, #0
 8005a12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f107 0310 	add.w	r3, r7, #16
 8005a20:	6812      	ldr	r2, [r2, #0]
 8005a22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	6a3b      	ldr	r3, [r7, #32]
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	00db      	lsls	r3, r3, #3
 8005a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	701a      	strb	r2, [r3, #0]
      i++;
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	3301      	adds	r3, #1
 8005a3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8005a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3e:	3301      	adds	r3, #1
 8005a40:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005a42:	8bfb      	ldrh	r3, [r7, #30]
 8005a44:	3b01      	subs	r3, #1
 8005a46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005a48:	8bfb      	ldrh	r3, [r7, #30]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ea      	bne.n	8005a24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	372c      	adds	r7, #44	@ 0x2c
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	785b      	ldrb	r3, [r3, #1]
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d12c      	bne.n	8005ad2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	015a      	lsls	r2, r3, #5
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	4413      	add	r3, r2
 8005a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	db12      	blt.n	8005ab0 <USB_EPSetStall+0x54>
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00f      	beq.n	8005ab0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	015a      	lsls	r2, r3, #5
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68ba      	ldr	r2, [r7, #8]
 8005aa0:	0151      	lsls	r1, r2, #5
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	440a      	add	r2, r1
 8005aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aaa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005aae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	0151      	lsls	r1, r2, #5
 8005ac2:	68fa      	ldr	r2, [r7, #12]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aca:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005ace:	6013      	str	r3, [r2, #0]
 8005ad0:	e02b      	b.n	8005b2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	015a      	lsls	r2, r3, #5
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	4413      	add	r3, r2
 8005ada:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db12      	blt.n	8005b0a <USB_EPSetStall+0xae>
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00f      	beq.n	8005b0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005b08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b24:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005b28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b085      	sub	sp, #20
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d128      	bne.n	8005ba6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b6e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005b72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	791b      	ldrb	r3, [r3, #4]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d003      	beq.n	8005b84 <USB_EPClearStall+0x4c>
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	791b      	ldrb	r3, [r3, #4]
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d138      	bne.n	8005bf6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005b9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	6013      	str	r3, [r2, #0]
 8005ba4:	e027      	b.n	8005bf6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	015a      	lsls	r2, r3, #5
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68ba      	ldr	r2, [r7, #8]
 8005bb6:	0151      	lsls	r1, r2, #5
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	440a      	add	r2, r1
 8005bbc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bc0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	791b      	ldrb	r3, [r3, #4]
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d003      	beq.n	8005bd6 <USB_EPClearStall+0x9e>
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	791b      	ldrb	r3, [r3, #4]
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d10f      	bne.n	8005bf6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	0151      	lsls	r1, r2, #5
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	440a      	add	r2, r1
 8005bec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005bf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bf4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c22:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005c26:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	011b      	lsls	r3, r3, #4
 8005c34:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005c42:	2300      	movs	r3, #0
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b085      	sub	sp, #20
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	68fa      	ldr	r2, [r7, #12]
 8005c7a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c7e:	f023 0302 	bic.w	r3, r3, #2
 8005c82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3714      	adds	r7, #20
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68fa      	ldr	r2, [r7, #12]
 8005ca8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cc0:	f043 0302 	orr.w	r3, r3, #2
 8005cc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3714      	adds	r7, #20
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	699b      	ldr	r3, [r3, #24]
 8005ce6:	68fa      	ldr	r2, [r7, #12]
 8005ce8:	4013      	ands	r3, r2
 8005cea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cec:	68fb      	ldr	r3, [r7, #12]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b085      	sub	sp, #20
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0c:	699b      	ldr	r3, [r3, #24]
 8005d0e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	0c1b      	lsrs	r3, r3, #16
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3714      	adds	r7, #20
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	b29b      	uxth	r3, r3
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3714      	adds	r7, #20
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr

08005d62 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d62:	b480      	push	{r7}
 8005d64:	b085      	sub	sp, #20
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005d72:	78fb      	ldrb	r3, [r7, #3]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	68ba      	ldr	r2, [r7, #8]
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d90:	68bb      	ldr	r3, [r7, #8]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b087      	sub	sp, #28
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
 8005da6:	460b      	mov	r3, r1
 8005da8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 030f 	and.w	r3, r3, #15
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	fa22 f303 	lsr.w	r3, r2, r3
 8005dce:	01db      	lsls	r3, r3, #7
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	693a      	ldr	r2, [r7, #16]
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005dec:	68bb      	ldr	r3, [r7, #8]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr

08005dfa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dfa:	b480      	push	{r7}
 8005dfc:	b083      	sub	sp, #12
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
 8005e06:	f003 0301 	and.w	r3, r3, #1
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b085      	sub	sp, #20
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e30:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005e34:	f023 0307 	bic.w	r3, r3, #7
 8005e38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e4e:	2300      	movs	r3, #0
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3714      	adds	r7, #20
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	460b      	mov	r3, r1
 8005e66:	607a      	str	r2, [r7, #4]
 8005e68:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	333c      	adds	r3, #60	@ 0x3c
 8005e72:	3304      	adds	r3, #4
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4a26      	ldr	r2, [pc, #152]	@ (8005f14 <USB_EP0_OutStart+0xb8>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d90a      	bls.n	8005e96 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e8c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e90:	d101      	bne.n	8005e96 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005e92:	2300      	movs	r3, #0
 8005e94:	e037      	b.n	8005f06 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005e96:	697b      	ldr	r3, [r7, #20]
 8005e98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ea8:	691b      	ldr	r3, [r3, #16]
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005eb0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005eb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	697a      	ldr	r2, [r7, #20]
 8005ec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ec4:	f043 0318 	orr.w	r3, r3, #24
 8005ec8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005edc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ede:	7afb      	ldrb	r3, [r7, #11]
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d10f      	bne.n	8005f04 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	697a      	ldr	r2, [r7, #20]
 8005efa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005efe:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005f02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	371c      	adds	r7, #28
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	4f54300a 	.word	0x4f54300a

08005f18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b085      	sub	sp, #20
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f20:	2300      	movs	r3, #0
 8005f22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	3301      	adds	r3, #1
 8005f28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f30:	d901      	bls.n	8005f36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e01b      	b.n	8005f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	daf2      	bge.n	8005f24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	f043 0201 	orr.w	r2, r3, #1
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3301      	adds	r3, #1
 8005f52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005f5a:	d901      	bls.n	8005f60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e006      	b.n	8005f6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d0f0      	beq.n	8005f4e <USB_CoreReset+0x36>

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
	...

08005f7c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005f88:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005f8c:	f002 fcac 	bl	80088e8 <USBD_static_malloc>
 8005f90:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d109      	bne.n	8005fac <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	32b0      	adds	r2, #176	@ 0xb0
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e0d4      	b.n	8006156 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005fac:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005fb0:	2100      	movs	r1, #0
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f002 fcfc 	bl	80089b0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	32b0      	adds	r2, #176	@ 0xb0
 8005fc2:	68f9      	ldr	r1, [r7, #12]
 8005fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	32b0      	adds	r2, #176	@ 0xb0
 8005fd2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	7c1b      	ldrb	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d138      	bne.n	8006056 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005fe4:	4b5e      	ldr	r3, [pc, #376]	@ (8006160 <USBD_CDC_Init+0x1e4>)
 8005fe6:	7819      	ldrb	r1, [r3, #0]
 8005fe8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005fec:	2202      	movs	r2, #2
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f002 fb57 	bl	80086a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005ff4:	4b5a      	ldr	r3, [pc, #360]	@ (8006160 <USBD_CDC_Init+0x1e4>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 020f 	and.w	r2, r3, #15
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	4613      	mov	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	440b      	add	r3, r1
 8006008:	3324      	adds	r3, #36	@ 0x24
 800600a:	2201      	movs	r2, #1
 800600c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800600e:	4b55      	ldr	r3, [pc, #340]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 8006010:	7819      	ldrb	r1, [r3, #0]
 8006012:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006016:	2202      	movs	r2, #2
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f002 fb42 	bl	80086a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800601e:	4b51      	ldr	r3, [pc, #324]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	6879      	ldr	r1, [r7, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	440b      	add	r3, r1
 8006032:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006036:	2201      	movs	r2, #1
 8006038:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800603a:	4b4b      	ldr	r3, [pc, #300]	@ (8006168 <USBD_CDC_Init+0x1ec>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f003 020f 	and.w	r2, r3, #15
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	3326      	adds	r3, #38	@ 0x26
 8006050:	2210      	movs	r2, #16
 8006052:	801a      	strh	r2, [r3, #0]
 8006054:	e035      	b.n	80060c2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006056:	4b42      	ldr	r3, [pc, #264]	@ (8006160 <USBD_CDC_Init+0x1e4>)
 8006058:	7819      	ldrb	r1, [r3, #0]
 800605a:	2340      	movs	r3, #64	@ 0x40
 800605c:	2202      	movs	r2, #2
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f002 fb1f 	bl	80086a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006064:	4b3e      	ldr	r3, [pc, #248]	@ (8006160 <USBD_CDC_Init+0x1e4>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f003 020f 	and.w	r2, r3, #15
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	3324      	adds	r3, #36	@ 0x24
 800607a:	2201      	movs	r2, #1
 800607c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800607e:	4b39      	ldr	r3, [pc, #228]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 8006080:	7819      	ldrb	r1, [r3, #0]
 8006082:	2340      	movs	r3, #64	@ 0x40
 8006084:	2202      	movs	r2, #2
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f002 fb0b 	bl	80086a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800608c:	4b35      	ldr	r3, [pc, #212]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 800608e:	781b      	ldrb	r3, [r3, #0]
 8006090:	f003 020f 	and.w	r2, r3, #15
 8006094:	6879      	ldr	r1, [r7, #4]
 8006096:	4613      	mov	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	440b      	add	r3, r1
 80060a0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80060a4:	2201      	movs	r2, #1
 80060a6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80060a8:	4b2f      	ldr	r3, [pc, #188]	@ (8006168 <USBD_CDC_Init+0x1ec>)
 80060aa:	781b      	ldrb	r3, [r3, #0]
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	3326      	adds	r3, #38	@ 0x26
 80060be:	2210      	movs	r2, #16
 80060c0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80060c2:	4b29      	ldr	r3, [pc, #164]	@ (8006168 <USBD_CDC_Init+0x1ec>)
 80060c4:	7819      	ldrb	r1, [r3, #0]
 80060c6:	2308      	movs	r3, #8
 80060c8:	2203      	movs	r2, #3
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f002 fae9 	bl	80086a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80060d0:	4b25      	ldr	r3, [pc, #148]	@ (8006168 <USBD_CDC_Init+0x1ec>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	009b      	lsls	r3, r3, #2
 80060de:	4413      	add	r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	3324      	adds	r3, #36	@ 0x24
 80060e6:	2201      	movs	r2, #1
 80060e8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060f8:	687a      	ldr	r2, [r7, #4]
 80060fa:	33b0      	adds	r3, #176	@ 0xb0
 80060fc:	009b      	lsls	r3, r3, #2
 80060fe:	4413      	add	r3, r2
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	2200      	movs	r2, #0
 800610a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800611c:	2b00      	cmp	r3, #0
 800611e:	d101      	bne.n	8006124 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006120:	2302      	movs	r3, #2
 8006122:	e018      	b.n	8006156 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7c1b      	ldrb	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800612c:	4b0d      	ldr	r3, [pc, #52]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 800612e:	7819      	ldrb	r1, [r3, #0]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006136:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f002 fba0 	bl	8008880 <USBD_LL_PrepareReceive>
 8006140:	e008      	b.n	8006154 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006142:	4b08      	ldr	r3, [pc, #32]	@ (8006164 <USBD_CDC_Init+0x1e8>)
 8006144:	7819      	ldrb	r1, [r3, #0]
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800614c:	2340      	movs	r3, #64	@ 0x40
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f002 fb96 	bl	8008880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000093 	.word	0x20000093
 8006164:	20000094 	.word	0x20000094
 8006168:	20000095 	.word	0x20000095

0800616c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	460b      	mov	r3, r1
 8006176:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006178:	4b3a      	ldr	r3, [pc, #232]	@ (8006264 <USBD_CDC_DeInit+0xf8>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	4619      	mov	r1, r3
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f002 fab5 	bl	80086ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006184:	4b37      	ldr	r3, [pc, #220]	@ (8006264 <USBD_CDC_DeInit+0xf8>)
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	f003 020f 	and.w	r2, r3, #15
 800618c:	6879      	ldr	r1, [r7, #4]
 800618e:	4613      	mov	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	440b      	add	r3, r1
 8006198:	3324      	adds	r3, #36	@ 0x24
 800619a:	2200      	movs	r2, #0
 800619c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800619e:	4b32      	ldr	r3, [pc, #200]	@ (8006268 <USBD_CDC_DeInit+0xfc>)
 80061a0:	781b      	ldrb	r3, [r3, #0]
 80061a2:	4619      	mov	r1, r3
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f002 faa2 	bl	80086ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80061aa:	4b2f      	ldr	r3, [pc, #188]	@ (8006268 <USBD_CDC_DeInit+0xfc>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	f003 020f 	and.w	r2, r3, #15
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	440b      	add	r3, r1
 80061be:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80061c2:	2200      	movs	r2, #0
 80061c4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80061c6:	4b29      	ldr	r3, [pc, #164]	@ (800626c <USBD_CDC_DeInit+0x100>)
 80061c8:	781b      	ldrb	r3, [r3, #0]
 80061ca:	4619      	mov	r1, r3
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f002 fa8e 	bl	80086ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80061d2:	4b26      	ldr	r3, [pc, #152]	@ (800626c <USBD_CDC_DeInit+0x100>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	f003 020f 	and.w	r2, r3, #15
 80061da:	6879      	ldr	r1, [r7, #4]
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	440b      	add	r3, r1
 80061e6:	3324      	adds	r3, #36	@ 0x24
 80061e8:	2200      	movs	r2, #0
 80061ea:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80061ec:	4b1f      	ldr	r3, [pc, #124]	@ (800626c <USBD_CDC_DeInit+0x100>)
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	f003 020f 	and.w	r2, r3, #15
 80061f4:	6879      	ldr	r1, [r7, #4]
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	440b      	add	r3, r1
 8006200:	3326      	adds	r3, #38	@ 0x26
 8006202:	2200      	movs	r2, #0
 8006204:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	32b0      	adds	r2, #176	@ 0xb0
 8006210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01f      	beq.n	8006258 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	33b0      	adds	r3, #176	@ 0xb0
 8006222:	009b      	lsls	r3, r3, #2
 8006224:	4413      	add	r3, r2
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	32b0      	adds	r2, #176	@ 0xb0
 8006236:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623a:	4618      	mov	r0, r3
 800623c:	f002 fb62 	bl	8008904 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32b0      	adds	r2, #176	@ 0xb0
 800624a:	2100      	movs	r1, #0
 800624c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2200      	movs	r2, #0
 8006254:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000093 	.word	0x20000093
 8006268:	20000094 	.word	0x20000094
 800626c:	20000095 	.word	0x20000095

08006270 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b086      	sub	sp, #24
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	32b0      	adds	r2, #176	@ 0xb0
 8006284:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006288:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800628a:	2300      	movs	r3, #0
 800628c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800628e:	2300      	movs	r3, #0
 8006290:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006292:	2300      	movs	r3, #0
 8006294:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e0bf      	b.n	8006420 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	781b      	ldrb	r3, [r3, #0]
 80062a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d050      	beq.n	800634e <USBD_CDC_Setup+0xde>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	f040 80af 	bne.w	8006410 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d03a      	beq.n	8006330 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	b25b      	sxtb	r3, r3
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	da1b      	bge.n	80062fc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	33b0      	adds	r3, #176	@ 0xb0
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	4413      	add	r3, r2
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80062da:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	88d2      	ldrh	r2, [r2, #6]
 80062e0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	88db      	ldrh	r3, [r3, #6]
 80062e6:	2b07      	cmp	r3, #7
 80062e8:	bf28      	it	cs
 80062ea:	2307      	movcs	r3, #7
 80062ec:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	89fa      	ldrh	r2, [r7, #14]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f001 fd93 	bl	8007e20 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80062fa:	e090      	b.n	800641e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	785a      	ldrb	r2, [r3, #1]
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	88db      	ldrh	r3, [r3, #6]
 800630a:	2b3f      	cmp	r3, #63	@ 0x3f
 800630c:	d803      	bhi.n	8006316 <USBD_CDC_Setup+0xa6>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	88db      	ldrh	r3, [r3, #6]
 8006312:	b2da      	uxtb	r2, r3
 8006314:	e000      	b.n	8006318 <USBD_CDC_Setup+0xa8>
 8006316:	2240      	movs	r2, #64	@ 0x40
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800631e:	6939      	ldr	r1, [r7, #16]
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006326:	461a      	mov	r2, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f001 fda5 	bl	8007e78 <USBD_CtlPrepareRx>
      break;
 800632e:	e076      	b.n	800641e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	33b0      	adds	r3, #176	@ 0xb0
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	7850      	ldrb	r0, [r2, #1]
 8006346:	2200      	movs	r2, #0
 8006348:	6839      	ldr	r1, [r7, #0]
 800634a:	4798      	blx	r3
      break;
 800634c:	e067      	b.n	800641e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	785b      	ldrb	r3, [r3, #1]
 8006352:	2b0b      	cmp	r3, #11
 8006354:	d851      	bhi.n	80063fa <USBD_CDC_Setup+0x18a>
 8006356:	a201      	add	r2, pc, #4	@ (adr r2, 800635c <USBD_CDC_Setup+0xec>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800638d 	.word	0x0800638d
 8006360:	08006409 	.word	0x08006409
 8006364:	080063fb 	.word	0x080063fb
 8006368:	080063fb 	.word	0x080063fb
 800636c:	080063fb 	.word	0x080063fb
 8006370:	080063fb 	.word	0x080063fb
 8006374:	080063fb 	.word	0x080063fb
 8006378:	080063fb 	.word	0x080063fb
 800637c:	080063fb 	.word	0x080063fb
 8006380:	080063fb 	.word	0x080063fb
 8006384:	080063b7 	.word	0x080063b7
 8006388:	080063e1 	.word	0x080063e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b03      	cmp	r3, #3
 8006396:	d107      	bne.n	80063a8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006398:	f107 030a 	add.w	r3, r7, #10
 800639c:	2202      	movs	r2, #2
 800639e:	4619      	mov	r1, r3
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fd3d 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063a6:	e032      	b.n	800640e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f001 fcbb 	bl	8007d26 <USBD_CtlError>
            ret = USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	75fb      	strb	r3, [r7, #23]
          break;
 80063b4:	e02b      	b.n	800640e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d107      	bne.n	80063d2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80063c2:	f107 030d 	add.w	r3, r7, #13
 80063c6:	2201      	movs	r2, #1
 80063c8:	4619      	mov	r1, r3
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f001 fd28 	bl	8007e20 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80063d0:	e01d      	b.n	800640e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f001 fca6 	bl	8007d26 <USBD_CtlError>
            ret = USBD_FAIL;
 80063da:	2303      	movs	r3, #3
 80063dc:	75fb      	strb	r3, [r7, #23]
          break;
 80063de:	e016      	b.n	800640e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b03      	cmp	r3, #3
 80063ea:	d00f      	beq.n	800640c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80063ec:	6839      	ldr	r1, [r7, #0]
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f001 fc99 	bl	8007d26 <USBD_CtlError>
            ret = USBD_FAIL;
 80063f4:	2303      	movs	r3, #3
 80063f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80063f8:	e008      	b.n	800640c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fc92 	bl	8007d26 <USBD_CtlError>
          ret = USBD_FAIL;
 8006402:	2303      	movs	r3, #3
 8006404:	75fb      	strb	r3, [r7, #23]
          break;
 8006406:	e002      	b.n	800640e <USBD_CDC_Setup+0x19e>
          break;
 8006408:	bf00      	nop
 800640a:	e008      	b.n	800641e <USBD_CDC_Setup+0x1ae>
          break;
 800640c:	bf00      	nop
      }
      break;
 800640e:	e006      	b.n	800641e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8006410:	6839      	ldr	r1, [r7, #0]
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fc87 	bl	8007d26 <USBD_CtlError>
      ret = USBD_FAIL;
 8006418:	2303      	movs	r3, #3
 800641a:	75fb      	strb	r3, [r7, #23]
      break;
 800641c:	bf00      	nop
  }

  return (uint8_t)ret;
 800641e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3718      	adds	r7, #24
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800643a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	32b0      	adds	r2, #176	@ 0xb0
 8006446:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d101      	bne.n	8006452 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800644e:	2303      	movs	r3, #3
 8006450:	e065      	b.n	800651e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	32b0      	adds	r2, #176	@ 0xb0
 800645c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006460:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8006462:	78fb      	ldrb	r3, [r7, #3]
 8006464:	f003 020f 	and.w	r2, r3, #15
 8006468:	6879      	ldr	r1, [r7, #4]
 800646a:	4613      	mov	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	440b      	add	r3, r1
 8006474:	3318      	adds	r3, #24
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d02f      	beq.n	80064dc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	f003 020f 	and.w	r2, r3, #15
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	3318      	adds	r3, #24
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	78fb      	ldrb	r3, [r7, #3]
 8006494:	f003 010f 	and.w	r1, r3, #15
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	460b      	mov	r3, r1
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	440b      	add	r3, r1
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	4403      	add	r3, r0
 80064a4:	331c      	adds	r3, #28
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	fbb2 f1f3 	udiv	r1, r2, r3
 80064ac:	fb01 f303 	mul.w	r3, r1, r3
 80064b0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d112      	bne.n	80064dc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	f003 020f 	and.w	r2, r3, #15
 80064bc:	6879      	ldr	r1, [r7, #4]
 80064be:	4613      	mov	r3, r2
 80064c0:	009b      	lsls	r3, r3, #2
 80064c2:	4413      	add	r3, r2
 80064c4:	009b      	lsls	r3, r3, #2
 80064c6:	440b      	add	r3, r1
 80064c8:	3318      	adds	r3, #24
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80064ce:	78f9      	ldrb	r1, [r7, #3]
 80064d0:	2300      	movs	r3, #0
 80064d2:	2200      	movs	r2, #0
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f002 f9b2 	bl	800883e <USBD_LL_Transmit>
 80064da:	e01f      	b.n	800651c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2200      	movs	r2, #0
 80064e0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	33b0      	adds	r3, #176	@ 0xb0
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	4413      	add	r3, r2
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d010      	beq.n	800651c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	33b0      	adds	r3, #176	@ 0xb0
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	4413      	add	r3, r2
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006518:	78fa      	ldrb	r2, [r7, #3]
 800651a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}

08006526 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006526:	b580      	push	{r7, lr}
 8006528:	b084      	sub	sp, #16
 800652a:	af00      	add	r7, sp, #0
 800652c:	6078      	str	r0, [r7, #4]
 800652e:	460b      	mov	r3, r1
 8006530:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	32b0      	adds	r2, #176	@ 0xb0
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	32b0      	adds	r2, #176	@ 0xb0
 800654c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	e01a      	b.n	800658e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	4619      	mov	r1, r3
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f002 f9b0 	bl	80088c2 <USBD_LL_GetRxDataSize>
 8006562:	4602      	mov	r2, r0
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	33b0      	adds	r3, #176	@ 0xb0
 8006574:	009b      	lsls	r3, r3, #2
 8006576:	4413      	add	r3, r2
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	68fa      	ldr	r2, [r7, #12]
 800657e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006588:	4611      	mov	r1, r2
 800658a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	32b0      	adds	r2, #176	@ 0xb0
 80065a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d101      	bne.n	80065b8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80065b4:	2303      	movs	r3, #3
 80065b6:	e024      	b.n	8006602 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	33b0      	adds	r3, #176	@ 0xb0
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d019      	beq.n	8006600 <USBD_CDC_EP0_RxReady+0x6a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80065d2:	2bff      	cmp	r3, #255	@ 0xff
 80065d4:	d014      	beq.n	8006600 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	33b0      	adds	r3, #176	@ 0xb0
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	68fa      	ldr	r2, [r7, #12]
 80065ea:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80065ee:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80065f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	22ff      	movs	r2, #255	@ 0xff
 80065fc:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
	...

0800660c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006614:	2182      	movs	r1, #130	@ 0x82
 8006616:	4818      	ldr	r0, [pc, #96]	@ (8006678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006618:	f000 fd4f 	bl	80070ba <USBD_GetEpDesc>
 800661c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800661e:	2101      	movs	r1, #1
 8006620:	4815      	ldr	r0, [pc, #84]	@ (8006678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006622:	f000 fd4a 	bl	80070ba <USBD_GetEpDesc>
 8006626:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006628:	2181      	movs	r1, #129	@ 0x81
 800662a:	4813      	ldr	r0, [pc, #76]	@ (8006678 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800662c:	f000 fd45 	bl	80070ba <USBD_GetEpDesc>
 8006630:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2210      	movs	r2, #16
 800663c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d006      	beq.n	8006652 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	2200      	movs	r2, #0
 8006648:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800664c:	711a      	strb	r2, [r3, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d006      	beq.n	8006666 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2200      	movs	r2, #0
 800665c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006660:	711a      	strb	r2, [r3, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2243      	movs	r2, #67	@ 0x43
 800666a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800666c:	4b02      	ldr	r3, [pc, #8]	@ (8006678 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000050 	.word	0x20000050

0800667c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006684:	2182      	movs	r1, #130	@ 0x82
 8006686:	4818      	ldr	r0, [pc, #96]	@ (80066e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006688:	f000 fd17 	bl	80070ba <USBD_GetEpDesc>
 800668c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800668e:	2101      	movs	r1, #1
 8006690:	4815      	ldr	r0, [pc, #84]	@ (80066e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006692:	f000 fd12 	bl	80070ba <USBD_GetEpDesc>
 8006696:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006698:	2181      	movs	r1, #129	@ 0x81
 800669a:	4813      	ldr	r0, [pc, #76]	@ (80066e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800669c:	f000 fd0d 	bl	80070ba <USBD_GetEpDesc>
 80066a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	2210      	movs	r2, #16
 80066ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d006      	beq.n	80066c2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	2200      	movs	r2, #0
 80066b8:	711a      	strb	r2, [r3, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f042 0202 	orr.w	r2, r2, #2
 80066c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d006      	beq.n	80066d6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2200      	movs	r2, #0
 80066cc:	711a      	strb	r2, [r3, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f042 0202 	orr.w	r2, r2, #2
 80066d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2243      	movs	r2, #67	@ 0x43
 80066da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80066dc:	4b02      	ldr	r3, [pc, #8]	@ (80066e8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000050 	.word	0x20000050

080066ec <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b086      	sub	sp, #24
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80066f4:	2182      	movs	r1, #130	@ 0x82
 80066f6:	4818      	ldr	r0, [pc, #96]	@ (8006758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80066f8:	f000 fcdf 	bl	80070ba <USBD_GetEpDesc>
 80066fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80066fe:	2101      	movs	r1, #1
 8006700:	4815      	ldr	r0, [pc, #84]	@ (8006758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006702:	f000 fcda 	bl	80070ba <USBD_GetEpDesc>
 8006706:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006708:	2181      	movs	r1, #129	@ 0x81
 800670a:	4813      	ldr	r0, [pc, #76]	@ (8006758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800670c:	f000 fcd5 	bl	80070ba <USBD_GetEpDesc>
 8006710:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	2210      	movs	r2, #16
 800671c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800671e:	693b      	ldr	r3, [r7, #16]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d006      	beq.n	8006732 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	2200      	movs	r2, #0
 8006728:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800672c:	711a      	strb	r2, [r3, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d006      	beq.n	8006746 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2200      	movs	r2, #0
 800673c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006740:	711a      	strb	r2, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2243      	movs	r2, #67	@ 0x43
 800674a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800674c:	4b02      	ldr	r3, [pc, #8]	@ (8006758 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800674e:	4618      	mov	r0, r3
 8006750:	3718      	adds	r7, #24
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop
 8006758:	20000050 	.word	0x20000050

0800675c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	220a      	movs	r2, #10
 8006768:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800676a:	4b03      	ldr	r3, [pc, #12]	@ (8006778 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800676c:	4618      	mov	r0, r3
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	2000000c 	.word	0x2000000c

0800677c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d101      	bne.n	8006790 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800678c:	2303      	movs	r3, #3
 800678e:	e009      	b.n	80067a4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	33b0      	adds	r3, #176	@ 0xb0
 800679a:	009b      	lsls	r3, r3, #2
 800679c:	4413      	add	r3, r2
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80067a2:	2300      	movs	r3, #0
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	370c      	adds	r7, #12
 80067a8:	46bd      	mov	sp, r7
 80067aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ae:	4770      	bx	lr

080067b0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	32b0      	adds	r2, #176	@ 0xb0
 80067c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ca:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80067d2:	2303      	movs	r3, #3
 80067d4:	e008      	b.n	80067e8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	32b0      	adds	r2, #176	@ 0xb0
 8006808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d101      	bne.n	8006818 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006814:	2303      	movs	r3, #3
 8006816:	e004      	b.n	8006822 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
	...

08006830 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	32b0      	adds	r2, #176	@ 0xb0
 8006842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006846:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006852:	2303      	movs	r3, #3
 8006854:	e025      	b.n	80068a2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800685c:	2b00      	cmp	r3, #0
 800685e:	d11f      	bne.n	80068a0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2201      	movs	r2, #1
 8006864:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006868:	4b10      	ldr	r3, [pc, #64]	@ (80068ac <USBD_CDC_TransmitPacket+0x7c>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f003 020f 	and.w	r2, r3, #15
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	4613      	mov	r3, r2
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	4403      	add	r3, r0
 8006882:	3318      	adds	r3, #24
 8006884:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006886:	4b09      	ldr	r3, [pc, #36]	@ (80068ac <USBD_CDC_TransmitPacket+0x7c>)
 8006888:	7819      	ldrb	r1, [r3, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f001 ffd1 	bl	800883e <USBD_LL_Transmit>

    ret = USBD_OK;
 800689c:	2300      	movs	r3, #0
 800689e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	20000093 	.word	0x20000093

080068b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	32b0      	adds	r2, #176	@ 0xb0
 80068c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	32b0      	adds	r2, #176	@ 0xb0
 80068d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80068da:	2303      	movs	r3, #3
 80068dc:	e018      	b.n	8006910 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	7c1b      	ldrb	r3, [r3, #16]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d10a      	bne.n	80068fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068e6:	4b0c      	ldr	r3, [pc, #48]	@ (8006918 <USBD_CDC_ReceivePacket+0x68>)
 80068e8:	7819      	ldrb	r1, [r3, #0]
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80068f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 ffc3 	bl	8008880 <USBD_LL_PrepareReceive>
 80068fa:	e008      	b.n	800690e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <USBD_CDC_ReceivePacket+0x68>)
 80068fe:	7819      	ldrb	r1, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006906:	2340      	movs	r3, #64	@ 0x40
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f001 ffb9 	bl	8008880 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000094 	.word	0x20000094

0800691c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	4613      	mov	r3, r2
 8006928:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e01f      	b.n	8006974 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2200      	movs	r2, #0
 8006948:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d003      	beq.n	800695a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	79fa      	ldrb	r2, [r7, #7]
 8006966:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006968:	68f8      	ldr	r0, [r7, #12]
 800696a:	f001 fe33 	bl	80085d4 <USBD_LL_Init>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006972:	7dfb      	ldrb	r3, [r7, #23]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3718      	adds	r7, #24
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006986:	2300      	movs	r3, #0
 8006988:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006990:	2303      	movs	r3, #3
 8006992:	e025      	b.n	80069e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	683a      	ldr	r2, [r7, #0]
 8006998:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	32ae      	adds	r2, #174	@ 0xae
 80069a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00f      	beq.n	80069d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	32ae      	adds	r2, #174	@ 0xae
 80069ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	f107 020e 	add.w	r2, r7, #14
 80069c4:	4610      	mov	r0, r2
 80069c6:	4798      	blx	r3
 80069c8:	4602      	mov	r2, r0
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b082      	sub	sp, #8
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fe3b 	bl	800866c <USBD_LL_Start>
 80069f6:	4603      	mov	r3, r0
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3708      	adds	r7, #8
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b083      	sub	sp, #12
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006a08:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	370c      	adds	r7, #12
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr

08006a16 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b084      	sub	sp, #16
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	460b      	mov	r3, r1
 8006a20:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d009      	beq.n	8006a44 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	78fa      	ldrb	r2, [r7, #3]
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	4798      	blx	r3
 8006a40:	4603      	mov	r3, r0
 8006a42:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b084      	sub	sp, #16
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	460b      	mov	r3, r1
 8006a58:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	78fa      	ldrb	r2, [r7, #3]
 8006a68:	4611      	mov	r1, r2
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	4798      	blx	r3
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006a74:	2303      	movs	r3, #3
 8006a76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a82:	b580      	push	{r7, lr}
 8006a84:	b084      	sub	sp, #16
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 f90c 	bl	8007cb2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2201      	movs	r2, #1
 8006a9e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006ab6:	f003 031f 	and.w	r3, r3, #31
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d01a      	beq.n	8006af4 <USBD_LL_SetupStage+0x72>
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d822      	bhi.n	8006b08 <USBD_LL_SetupStage+0x86>
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d002      	beq.n	8006acc <USBD_LL_SetupStage+0x4a>
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d00a      	beq.n	8006ae0 <USBD_LL_SetupStage+0x5e>
 8006aca:	e01d      	b.n	8006b08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fb63 	bl	80071a0 <USBD_StdDevReq>
 8006ada:	4603      	mov	r3, r0
 8006adc:	73fb      	strb	r3, [r7, #15]
      break;
 8006ade:	e020      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 fbcb 	bl	8007284 <USBD_StdItfReq>
 8006aee:	4603      	mov	r3, r0
 8006af0:	73fb      	strb	r3, [r7, #15]
      break;
 8006af2:	e016      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006afa:	4619      	mov	r1, r3
 8006afc:	6878      	ldr	r0, [r7, #4]
 8006afe:	f000 fc2d 	bl	800735c <USBD_StdEPReq>
 8006b02:	4603      	mov	r3, r0
 8006b04:	73fb      	strb	r3, [r7, #15]
      break;
 8006b06:	e00c      	b.n	8006b22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f001 fe08 	bl	800872c <USBD_LL_StallEP>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b20:	bf00      	nop
  }

  return ret;
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3710      	adds	r7, #16
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	460b      	mov	r3, r1
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006b3e:	7afb      	ldrb	r3, [r7, #11]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d16e      	bne.n	8006c22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8006b4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006b52:	2b03      	cmp	r3, #3
 8006b54:	f040 8098 	bne.w	8006c88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	689a      	ldr	r2, [r3, #8]
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d913      	bls.n	8006b8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	68db      	ldr	r3, [r3, #12]
 8006b6c:	1ad2      	subs	r2, r2, r3
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	bf28      	it	cs
 8006b7e:	4613      	movcs	r3, r2
 8006b80:	461a      	mov	r2, r3
 8006b82:	6879      	ldr	r1, [r7, #4]
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f001 f994 	bl	8007eb2 <USBD_CtlContinueRx>
 8006b8a:	e07d      	b.n	8006c88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006b92:	f003 031f 	and.w	r3, r3, #31
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d014      	beq.n	8006bc4 <USBD_LL_DataOutStage+0x98>
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d81d      	bhi.n	8006bda <USBD_LL_DataOutStage+0xae>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d002      	beq.n	8006ba8 <USBD_LL_DataOutStage+0x7c>
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d003      	beq.n	8006bae <USBD_LL_DataOutStage+0x82>
 8006ba6:	e018      	b.n	8006bda <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	75bb      	strb	r3, [r7, #22]
            break;
 8006bac:	e018      	b.n	8006be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 fa64 	bl	8007086 <USBD_CoreFindIF>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75bb      	strb	r3, [r7, #22]
            break;
 8006bc2:	e00d      	b.n	8006be0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	4619      	mov	r1, r3
 8006bce:	68f8      	ldr	r0, [r7, #12]
 8006bd0:	f000 fa66 	bl	80070a0 <USBD_CoreFindEP>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	75bb      	strb	r3, [r7, #22]
            break;
 8006bd8:	e002      	b.n	8006be0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	75bb      	strb	r3, [r7, #22]
            break;
 8006bde:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006be0:	7dbb      	ldrb	r3, [r7, #22]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d119      	bne.n	8006c1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	2b03      	cmp	r3, #3
 8006bf0:	d113      	bne.n	8006c1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006bf2:	7dba      	ldrb	r2, [r7, #22]
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	32ae      	adds	r2, #174	@ 0xae
 8006bf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d00b      	beq.n	8006c1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006c02:	7dba      	ldrb	r2, [r7, #22]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006c0a:	7dba      	ldrb	r2, [r7, #22]
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	32ae      	adds	r2, #174	@ 0xae
 8006c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f001 f95a 	bl	8007ed4 <USBD_CtlSendStatus>
 8006c20:	e032      	b.n	8006c88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006c22:	7afb      	ldrb	r3, [r7, #11]
 8006c24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4619      	mov	r1, r3
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 fa37 	bl	80070a0 <USBD_CoreFindEP>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c36:	7dbb      	ldrb	r3, [r7, #22]
 8006c38:	2bff      	cmp	r3, #255	@ 0xff
 8006c3a:	d025      	beq.n	8006c88 <USBD_LL_DataOutStage+0x15c>
 8006c3c:	7dbb      	ldrb	r3, [r7, #22]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d122      	bne.n	8006c88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b03      	cmp	r3, #3
 8006c4c:	d117      	bne.n	8006c7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006c4e:	7dba      	ldrb	r2, [r7, #22]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	32ae      	adds	r2, #174	@ 0xae
 8006c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00f      	beq.n	8006c7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006c5e:	7dba      	ldrb	r2, [r7, #22]
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006c66:	7dba      	ldrb	r2, [r7, #22]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	32ae      	adds	r2, #174	@ 0xae
 8006c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c70:	699b      	ldr	r3, [r3, #24]
 8006c72:	7afa      	ldrb	r2, [r7, #11]
 8006c74:	4611      	mov	r1, r2
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	4798      	blx	r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006c7e:	7dfb      	ldrb	r3, [r7, #23]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d001      	beq.n	8006c88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006c84:	7dfb      	ldrb	r3, [r7, #23]
 8006c86:	e000      	b.n	8006c8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b086      	sub	sp, #24
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	60f8      	str	r0, [r7, #12]
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	607a      	str	r2, [r7, #4]
 8006c9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006ca0:	7afb      	ldrb	r3, [r7, #11]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d16f      	bne.n	8006d86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	3314      	adds	r3, #20
 8006caa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006cb2:	2b02      	cmp	r3, #2
 8006cb4:	d15a      	bne.n	8006d6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	429a      	cmp	r2, r3
 8006cc0:	d914      	bls.n	8006cec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	1ad2      	subs	r2, r2, r3
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	68f8      	ldr	r0, [r7, #12]
 8006cda:	f001 f8bc 	bl	8007e56 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006cde:	2300      	movs	r3, #0
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f001 fdcb 	bl	8008880 <USBD_LL_PrepareReceive>
 8006cea:	e03f      	b.n	8006d6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d11c      	bne.n	8006d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	685a      	ldr	r2, [r3, #4]
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d316      	bcc.n	8006d32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	d20f      	bcs.n	8006d32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006d12:	2200      	movs	r2, #0
 8006d14:	2100      	movs	r1, #0
 8006d16:	68f8      	ldr	r0, [r7, #12]
 8006d18:	f001 f89d 	bl	8007e56 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d24:	2300      	movs	r3, #0
 8006d26:	2200      	movs	r2, #0
 8006d28:	2100      	movs	r1, #0
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	f001 fda8 	bl	8008880 <USBD_LL_PrepareReceive>
 8006d30:	e01c      	b.n	8006d6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	2b03      	cmp	r3, #3
 8006d3c:	d10f      	bne.n	8006d5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d44:	68db      	ldr	r3, [r3, #12]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	68f8      	ldr	r0, [r7, #12]
 8006d5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d5e:	2180      	movs	r1, #128	@ 0x80
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f001 fce3 	bl	800872c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006d66:	68f8      	ldr	r0, [r7, #12]
 8006d68:	f001 f8c7 	bl	8007efa <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d03a      	beq.n	8006dec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006d76:	68f8      	ldr	r0, [r7, #12]
 8006d78:	f7ff fe42 	bl	8006a00 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	2200      	movs	r2, #0
 8006d80:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006d84:	e032      	b.n	8006dec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006d86:	7afb      	ldrb	r3, [r7, #11]
 8006d88:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	4619      	mov	r1, r3
 8006d90:	68f8      	ldr	r0, [r7, #12]
 8006d92:	f000 f985 	bl	80070a0 <USBD_CoreFindEP>
 8006d96:	4603      	mov	r3, r0
 8006d98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2bff      	cmp	r3, #255	@ 0xff
 8006d9e:	d025      	beq.n	8006dec <USBD_LL_DataInStage+0x15a>
 8006da0:	7dfb      	ldrb	r3, [r7, #23]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d122      	bne.n	8006dec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d11c      	bne.n	8006dec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006db2:	7dfa      	ldrb	r2, [r7, #23]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	32ae      	adds	r2, #174	@ 0xae
 8006db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dbc:	695b      	ldr	r3, [r3, #20]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d014      	beq.n	8006dec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006dc2:	7dfa      	ldrb	r2, [r7, #23]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006dca:	7dfa      	ldrb	r2, [r7, #23]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	32ae      	adds	r2, #174	@ 0xae
 8006dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dd4:	695b      	ldr	r3, [r3, #20]
 8006dd6:	7afa      	ldrb	r2, [r7, #11]
 8006dd8:	4611      	mov	r1, r2
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	4798      	blx	r3
 8006dde:	4603      	mov	r3, r0
 8006de0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006de2:	7dbb      	ldrb	r3, [r7, #22]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006de8:	7dbb      	ldrb	r3, [r7, #22]
 8006dea:	e000      	b.n	8006dee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}

08006df6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006df6:	b580      	push	{r7, lr}
 8006df8:	b084      	sub	sp, #16
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2201      	movs	r2, #1
 8006e06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2200      	movs	r2, #0
 8006e24:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d014      	beq.n	8006e5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00e      	beq.n	8006e5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	6852      	ldr	r2, [r2, #4]
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	4798      	blx	r3
 8006e52:	4603      	mov	r3, r0
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d001      	beq.n	8006e5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e5c:	2340      	movs	r3, #64	@ 0x40
 8006e5e:	2200      	movs	r2, #0
 8006e60:	2100      	movs	r1, #0
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fc1d 	bl	80086a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2240      	movs	r2, #64	@ 0x40
 8006e74:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e78:	2340      	movs	r3, #64	@ 0x40
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	2180      	movs	r1, #128	@ 0x80
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f001 fc0f 	bl	80086a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2240      	movs	r2, #64	@ 0x40
 8006e8e:	621a      	str	r2, [r3, #32]

  return ret;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006e9a:	b480      	push	{r7}
 8006e9c:	b083      	sub	sp, #12
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	78fa      	ldrb	r2, [r7, #3]
 8006eaa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	370c      	adds	r7, #12
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b083      	sub	sp, #12
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b04      	cmp	r3, #4
 8006ecc:	d006      	beq.n	8006edc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ed4:	b2da      	uxtb	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2204      	movs	r2, #4
 8006ee0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f00:	b2db      	uxtb	r3, r3
 8006f02:	2b04      	cmp	r3, #4
 8006f04:	d106      	bne.n	8006f14 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006f0c:	b2da      	uxtb	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	370c      	adds	r7, #12
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b082      	sub	sp, #8
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b03      	cmp	r3, #3
 8006f34:	d110      	bne.n	8006f58 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00b      	beq.n	8006f58 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d005      	beq.n	8006f58 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006f52:	69db      	ldr	r3, [r3, #28]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32ae      	adds	r2, #174	@ 0xae
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006f80:	2303      	movs	r3, #3
 8006f82:	e01c      	b.n	8006fbe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d115      	bne.n	8006fbc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	32ae      	adds	r2, #174	@ 0xae
 8006f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	32ae      	adds	r2, #174	@ 0xae
 8006fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fb2:	6a1b      	ldr	r3, [r3, #32]
 8006fb4:	78fa      	ldrb	r2, [r7, #3]
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fbc:	2300      	movs	r3, #0
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b082      	sub	sp, #8
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
 8006fce:	460b      	mov	r3, r1
 8006fd0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	32ae      	adds	r2, #174	@ 0xae
 8006fdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d101      	bne.n	8006fe8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006fe4:	2303      	movs	r3, #3
 8006fe6:	e01c      	b.n	8007022 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b03      	cmp	r3, #3
 8006ff2:	d115      	bne.n	8007020 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	32ae      	adds	r2, #174	@ 0xae
 8006ffe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00b      	beq.n	8007020 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	32ae      	adds	r2, #174	@ 0xae
 8007012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007018:	78fa      	ldrb	r2, [r7, #3]
 800701a:	4611      	mov	r1, r2
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}

0800702a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800702a:	b480      	push	{r7}
 800702c:	b083      	sub	sp, #12
 800702e:	af00      	add	r7, sp, #0
 8007030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007048:	2300      	movs	r3, #0
 800704a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	6852      	ldr	r2, [r2, #4]
 800706a:	b2d2      	uxtb	r2, r2
 800706c:	4611      	mov	r1, r2
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	4798      	blx	r3
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007078:	2303      	movs	r3, #3
 800707a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800707c:	7bfb      	ldrb	r3, [r7, #15]
}
 800707e:	4618      	mov	r0, r3
 8007080:	3710      	adds	r7, #16
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}

08007086 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007086:	b480      	push	{r7}
 8007088:	b083      	sub	sp, #12
 800708a:	af00      	add	r7, sp, #0
 800708c:	6078      	str	r0, [r7, #4]
 800708e:	460b      	mov	r3, r1
 8007090:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007092:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
 80070a8:	460b      	mov	r3, r1
 80070aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80070ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	370c      	adds	r7, #12
 80070b2:	46bd      	mov	sp, r7
 80070b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b8:	4770      	bx	lr

080070ba <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b086      	sub	sp, #24
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	460b      	mov	r3, r1
 80070c4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80070ce:	2300      	movs	r3, #0
 80070d0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	885b      	ldrh	r3, [r3, #2]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	7812      	ldrb	r2, [r2, #0]
 80070dc:	4293      	cmp	r3, r2
 80070de:	d91f      	bls.n	8007120 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80070e6:	e013      	b.n	8007110 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80070e8:	f107 030a 	add.w	r3, r7, #10
 80070ec:	4619      	mov	r1, r3
 80070ee:	6978      	ldr	r0, [r7, #20]
 80070f0:	f000 f81b 	bl	800712a <USBD_GetNextDesc>
 80070f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	785b      	ldrb	r3, [r3, #1]
 80070fa:	2b05      	cmp	r3, #5
 80070fc:	d108      	bne.n	8007110 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	789b      	ldrb	r3, [r3, #2]
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	429a      	cmp	r2, r3
 800710a:	d008      	beq.n	800711e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800710c:	2300      	movs	r3, #0
 800710e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	885b      	ldrh	r3, [r3, #2]
 8007114:	b29a      	uxth	r2, r3
 8007116:	897b      	ldrh	r3, [r7, #10]
 8007118:	429a      	cmp	r2, r3
 800711a:	d8e5      	bhi.n	80070e8 <USBD_GetEpDesc+0x2e>
 800711c:	e000      	b.n	8007120 <USBD_GetEpDesc+0x66>
          break;
 800711e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007120:	693b      	ldr	r3, [r7, #16]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
 8007132:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	881b      	ldrh	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	7812      	ldrb	r2, [r2, #0]
 8007140:	4413      	add	r3, r2
 8007142:	b29a      	uxth	r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	461a      	mov	r2, r3
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4413      	add	r3, r2
 8007152:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007154:	68fb      	ldr	r3, [r7, #12]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3714      	adds	r7, #20
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007162:	b480      	push	{r7}
 8007164:	b087      	sub	sp, #28
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	3301      	adds	r3, #1
 8007178:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	781b      	ldrb	r3, [r3, #0]
 800717e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007180:	8a3b      	ldrh	r3, [r7, #16]
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	b21a      	sxth	r2, r3
 8007186:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800718a:	4313      	orrs	r3, r2
 800718c:	b21b      	sxth	r3, r3
 800718e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007190:	89fb      	ldrh	r3, [r7, #14]
}
 8007192:	4618      	mov	r0, r3
 8007194:	371c      	adds	r7, #28
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
	...

080071a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
 80071a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071aa:	2300      	movs	r3, #0
 80071ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80071b6:	2b40      	cmp	r3, #64	@ 0x40
 80071b8:	d005      	beq.n	80071c6 <USBD_StdDevReq+0x26>
 80071ba:	2b40      	cmp	r3, #64	@ 0x40
 80071bc:	d857      	bhi.n	800726e <USBD_StdDevReq+0xce>
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00f      	beq.n	80071e2 <USBD_StdDevReq+0x42>
 80071c2:	2b20      	cmp	r3, #32
 80071c4:	d153      	bne.n	800726e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	32ae      	adds	r2, #174	@ 0xae
 80071d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	6839      	ldr	r1, [r7, #0]
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	4798      	blx	r3
 80071dc:	4603      	mov	r3, r0
 80071de:	73fb      	strb	r3, [r7, #15]
      break;
 80071e0:	e04a      	b.n	8007278 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80071e2:	683b      	ldr	r3, [r7, #0]
 80071e4:	785b      	ldrb	r3, [r3, #1]
 80071e6:	2b09      	cmp	r3, #9
 80071e8:	d83b      	bhi.n	8007262 <USBD_StdDevReq+0xc2>
 80071ea:	a201      	add	r2, pc, #4	@ (adr r2, 80071f0 <USBD_StdDevReq+0x50>)
 80071ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f0:	08007245 	.word	0x08007245
 80071f4:	08007259 	.word	0x08007259
 80071f8:	08007263 	.word	0x08007263
 80071fc:	0800724f 	.word	0x0800724f
 8007200:	08007263 	.word	0x08007263
 8007204:	08007223 	.word	0x08007223
 8007208:	08007219 	.word	0x08007219
 800720c:	08007263 	.word	0x08007263
 8007210:	0800723b 	.word	0x0800723b
 8007214:	0800722d 	.word	0x0800722d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007218:	6839      	ldr	r1, [r7, #0]
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 fa3c 	bl	8007698 <USBD_GetDescriptor>
          break;
 8007220:	e024      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fba1 	bl	800796c <USBD_SetAddress>
          break;
 800722a:	e01f      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800722c:	6839      	ldr	r1, [r7, #0]
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f000 fbe0 	bl	80079f4 <USBD_SetConfig>
 8007234:	4603      	mov	r3, r0
 8007236:	73fb      	strb	r3, [r7, #15]
          break;
 8007238:	e018      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800723a:	6839      	ldr	r1, [r7, #0]
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc83 	bl	8007b48 <USBD_GetConfig>
          break;
 8007242:	e013      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fcb4 	bl	8007bb4 <USBD_GetStatus>
          break;
 800724c:	e00e      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fce3 	bl	8007c1c <USBD_SetFeature>
          break;
 8007256:	e009      	b.n	800726c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f000 fd07 	bl	8007c6e <USBD_ClrFeature>
          break;
 8007260:	e004      	b.n	800726c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007262:	6839      	ldr	r1, [r7, #0]
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fd5e 	bl	8007d26 <USBD_CtlError>
          break;
 800726a:	bf00      	nop
      }
      break;
 800726c:	e004      	b.n	8007278 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800726e:	6839      	ldr	r1, [r7, #0]
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 fd58 	bl	8007d26 <USBD_CtlError>
      break;
 8007276:	bf00      	nop
  }

  return ret;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop

08007284 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800728e:	2300      	movs	r3, #0
 8007290:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800729a:	2b40      	cmp	r3, #64	@ 0x40
 800729c:	d005      	beq.n	80072aa <USBD_StdItfReq+0x26>
 800729e:	2b40      	cmp	r3, #64	@ 0x40
 80072a0:	d852      	bhi.n	8007348 <USBD_StdItfReq+0xc4>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <USBD_StdItfReq+0x26>
 80072a6:	2b20      	cmp	r3, #32
 80072a8:	d14e      	bne.n	8007348 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072b0:	b2db      	uxtb	r3, r3
 80072b2:	3b01      	subs	r3, #1
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d840      	bhi.n	800733a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	889b      	ldrh	r3, [r3, #4]
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d836      	bhi.n	8007330 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	889b      	ldrh	r3, [r3, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	4619      	mov	r1, r3
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fedb 	bl	8007086 <USBD_CoreFindIF>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80072d4:	7bbb      	ldrb	r3, [r7, #14]
 80072d6:	2bff      	cmp	r3, #255	@ 0xff
 80072d8:	d01d      	beq.n	8007316 <USBD_StdItfReq+0x92>
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d11a      	bne.n	8007316 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80072e0:	7bba      	ldrb	r2, [r7, #14]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	32ae      	adds	r2, #174	@ 0xae
 80072e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00f      	beq.n	8007310 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80072f0:	7bba      	ldrb	r2, [r7, #14]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80072f8:	7bba      	ldrb	r2, [r7, #14]
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	32ae      	adds	r2, #174	@ 0xae
 80072fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
 800730a:	4603      	mov	r3, r0
 800730c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800730e:	e004      	b.n	800731a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007310:	2303      	movs	r3, #3
 8007312:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007314:	e001      	b.n	800731a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007316:	2303      	movs	r3, #3
 8007318:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	88db      	ldrh	r3, [r3, #6]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d110      	bne.n	8007344 <USBD_StdItfReq+0xc0>
 8007322:	7bfb      	ldrb	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10d      	bne.n	8007344 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 fdd3 	bl	8007ed4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800732e:	e009      	b.n	8007344 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fcf7 	bl	8007d26 <USBD_CtlError>
          break;
 8007338:	e004      	b.n	8007344 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fcf2 	bl	8007d26 <USBD_CtlError>
          break;
 8007342:	e000      	b.n	8007346 <USBD_StdItfReq+0xc2>
          break;
 8007344:	bf00      	nop
      }
      break;
 8007346:	e004      	b.n	8007352 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 fceb 	bl	8007d26 <USBD_CtlError>
      break;
 8007350:	bf00      	nop
  }

  return ret;
 8007352:	7bfb      	ldrb	r3, [r7, #15]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	889b      	ldrh	r3, [r3, #4]
 800736e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	781b      	ldrb	r3, [r3, #0]
 8007374:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007378:	2b40      	cmp	r3, #64	@ 0x40
 800737a:	d007      	beq.n	800738c <USBD_StdEPReq+0x30>
 800737c:	2b40      	cmp	r3, #64	@ 0x40
 800737e:	f200 817f 	bhi.w	8007680 <USBD_StdEPReq+0x324>
 8007382:	2b00      	cmp	r3, #0
 8007384:	d02a      	beq.n	80073dc <USBD_StdEPReq+0x80>
 8007386:	2b20      	cmp	r3, #32
 8007388:	f040 817a 	bne.w	8007680 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800738c:	7bbb      	ldrb	r3, [r7, #14]
 800738e:	4619      	mov	r1, r3
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7ff fe85 	bl	80070a0 <USBD_CoreFindEP>
 8007396:	4603      	mov	r3, r0
 8007398:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800739a:	7b7b      	ldrb	r3, [r7, #13]
 800739c:	2bff      	cmp	r3, #255	@ 0xff
 800739e:	f000 8174 	beq.w	800768a <USBD_StdEPReq+0x32e>
 80073a2:	7b7b      	ldrb	r3, [r7, #13]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	f040 8170 	bne.w	800768a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80073aa:	7b7a      	ldrb	r2, [r7, #13]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80073b2:	7b7a      	ldrb	r2, [r7, #13]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	32ae      	adds	r2, #174	@ 0xae
 80073b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 8163 	beq.w	800768a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80073c4:	7b7a      	ldrb	r2, [r7, #13]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	32ae      	adds	r2, #174	@ 0xae
 80073ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	6839      	ldr	r1, [r7, #0]
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	4798      	blx	r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80073da:	e156      	b.n	800768a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	785b      	ldrb	r3, [r3, #1]
 80073e0:	2b03      	cmp	r3, #3
 80073e2:	d008      	beq.n	80073f6 <USBD_StdEPReq+0x9a>
 80073e4:	2b03      	cmp	r3, #3
 80073e6:	f300 8145 	bgt.w	8007674 <USBD_StdEPReq+0x318>
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f000 809b 	beq.w	8007526 <USBD_StdEPReq+0x1ca>
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d03c      	beq.n	800746e <USBD_StdEPReq+0x112>
 80073f4:	e13e      	b.n	8007674 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80073fc:	b2db      	uxtb	r3, r3
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d002      	beq.n	8007408 <USBD_StdEPReq+0xac>
 8007402:	2b03      	cmp	r3, #3
 8007404:	d016      	beq.n	8007434 <USBD_StdEPReq+0xd8>
 8007406:	e02c      	b.n	8007462 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00d      	beq.n	800742a <USBD_StdEPReq+0xce>
 800740e:	7bbb      	ldrb	r3, [r7, #14]
 8007410:	2b80      	cmp	r3, #128	@ 0x80
 8007412:	d00a      	beq.n	800742a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f987 	bl	800872c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800741e:	2180      	movs	r1, #128	@ 0x80
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f001 f983 	bl	800872c <USBD_LL_StallEP>
 8007426:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007428:	e020      	b.n	800746c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800742a:	6839      	ldr	r1, [r7, #0]
 800742c:	6878      	ldr	r0, [r7, #4]
 800742e:	f000 fc7a 	bl	8007d26 <USBD_CtlError>
              break;
 8007432:	e01b      	b.n	800746c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	885b      	ldrh	r3, [r3, #2]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10e      	bne.n	800745a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800743c:	7bbb      	ldrb	r3, [r7, #14]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d00b      	beq.n	800745a <USBD_StdEPReq+0xfe>
 8007442:	7bbb      	ldrb	r3, [r7, #14]
 8007444:	2b80      	cmp	r3, #128	@ 0x80
 8007446:	d008      	beq.n	800745a <USBD_StdEPReq+0xfe>
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	88db      	ldrh	r3, [r3, #6]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d104      	bne.n	800745a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007450:	7bbb      	ldrb	r3, [r7, #14]
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f001 f969 	bl	800872c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fd3a 	bl	8007ed4 <USBD_CtlSendStatus>

              break;
 8007460:	e004      	b.n	800746c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007462:	6839      	ldr	r1, [r7, #0]
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 fc5e 	bl	8007d26 <USBD_CtlError>
              break;
 800746a:	bf00      	nop
          }
          break;
 800746c:	e107      	b.n	800767e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007474:	b2db      	uxtb	r3, r3
 8007476:	2b02      	cmp	r3, #2
 8007478:	d002      	beq.n	8007480 <USBD_StdEPReq+0x124>
 800747a:	2b03      	cmp	r3, #3
 800747c:	d016      	beq.n	80074ac <USBD_StdEPReq+0x150>
 800747e:	e04b      	b.n	8007518 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007480:	7bbb      	ldrb	r3, [r7, #14]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00d      	beq.n	80074a2 <USBD_StdEPReq+0x146>
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	2b80      	cmp	r3, #128	@ 0x80
 800748a:	d00a      	beq.n	80074a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800748c:	7bbb      	ldrb	r3, [r7, #14]
 800748e:	4619      	mov	r1, r3
 8007490:	6878      	ldr	r0, [r7, #4]
 8007492:	f001 f94b 	bl	800872c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007496:	2180      	movs	r1, #128	@ 0x80
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f001 f947 	bl	800872c <USBD_LL_StallEP>
 800749e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074a0:	e040      	b.n	8007524 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fc3e 	bl	8007d26 <USBD_CtlError>
              break;
 80074aa:	e03b      	b.n	8007524 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	885b      	ldrh	r3, [r3, #2]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d136      	bne.n	8007522 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80074b4:	7bbb      	ldrb	r3, [r7, #14]
 80074b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d004      	beq.n	80074c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f951 	bl	800876a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 fd03 	bl	8007ed4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	4619      	mov	r1, r3
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f7ff fde4 	bl	80070a0 <USBD_CoreFindEP>
 80074d8:	4603      	mov	r3, r0
 80074da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80074dc:	7b7b      	ldrb	r3, [r7, #13]
 80074de:	2bff      	cmp	r3, #255	@ 0xff
 80074e0:	d01f      	beq.n	8007522 <USBD_StdEPReq+0x1c6>
 80074e2:	7b7b      	ldrb	r3, [r7, #13]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d11c      	bne.n	8007522 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80074e8:	7b7a      	ldrb	r2, [r7, #13]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80074f0:	7b7a      	ldrb	r2, [r7, #13]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	32ae      	adds	r2, #174	@ 0xae
 80074f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d010      	beq.n	8007522 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007500:	7b7a      	ldrb	r2, [r7, #13]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	@ 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	4798      	blx	r3
 8007512:	4603      	mov	r3, r0
 8007514:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007516:	e004      	b.n	8007522 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007518:	6839      	ldr	r1, [r7, #0]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f000 fc03 	bl	8007d26 <USBD_CtlError>
              break;
 8007520:	e000      	b.n	8007524 <USBD_StdEPReq+0x1c8>
              break;
 8007522:	bf00      	nop
          }
          break;
 8007524:	e0ab      	b.n	800767e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800752c:	b2db      	uxtb	r3, r3
 800752e:	2b02      	cmp	r3, #2
 8007530:	d002      	beq.n	8007538 <USBD_StdEPReq+0x1dc>
 8007532:	2b03      	cmp	r3, #3
 8007534:	d032      	beq.n	800759c <USBD_StdEPReq+0x240>
 8007536:	e097      	b.n	8007668 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d007      	beq.n	800754e <USBD_StdEPReq+0x1f2>
 800753e:	7bbb      	ldrb	r3, [r7, #14]
 8007540:	2b80      	cmp	r3, #128	@ 0x80
 8007542:	d004      	beq.n	800754e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 fbed 	bl	8007d26 <USBD_CtlError>
                break;
 800754c:	e091      	b.n	8007672 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800754e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007552:	2b00      	cmp	r3, #0
 8007554:	da0b      	bge.n	800756e <USBD_StdEPReq+0x212>
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800755c:	4613      	mov	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	4413      	add	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	3310      	adds	r3, #16
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	4413      	add	r3, r2
 800756a:	3304      	adds	r3, #4
 800756c:	e00b      	b.n	8007586 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800756e:	7bbb      	ldrb	r3, [r7, #14]
 8007570:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007574:	4613      	mov	r3, r2
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4413      	add	r3, r2
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	4413      	add	r3, r2
 8007584:	3304      	adds	r3, #4
 8007586:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2200      	movs	r2, #0
 800758c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	2202      	movs	r2, #2
 8007592:	4619      	mov	r1, r3
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 fc43 	bl	8007e20 <USBD_CtlSendData>
              break;
 800759a:	e06a      	b.n	8007672 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800759c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da11      	bge.n	80075c8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075a4:	7bbb      	ldrb	r3, [r7, #14]
 80075a6:	f003 020f 	and.w	r2, r3, #15
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4613      	mov	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	3324      	adds	r3, #36	@ 0x24
 80075b8:	881b      	ldrh	r3, [r3, #0]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d117      	bne.n	80075ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 fbb0 	bl	8007d26 <USBD_CtlError>
                  break;
 80075c6:	e054      	b.n	8007672 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	f003 020f 	and.w	r2, r3, #15
 80075ce:	6879      	ldr	r1, [r7, #4]
 80075d0:	4613      	mov	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4413      	add	r3, r2
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80075de:	881b      	ldrh	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d104      	bne.n	80075ee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80075e4:	6839      	ldr	r1, [r7, #0]
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 fb9d 	bl	8007d26 <USBD_CtlError>
                  break;
 80075ec:	e041      	b.n	8007672 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	da0b      	bge.n	800760e <USBD_StdEPReq+0x2b2>
 80075f6:	7bbb      	ldrb	r3, [r7, #14]
 80075f8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075fc:	4613      	mov	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4413      	add	r3, r2
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	3310      	adds	r3, #16
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	4413      	add	r3, r2
 800760a:	3304      	adds	r3, #4
 800760c:	e00b      	b.n	8007626 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800760e:	7bbb      	ldrb	r3, [r7, #14]
 8007610:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007614:	4613      	mov	r3, r2
 8007616:	009b      	lsls	r3, r3, #2
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	3304      	adds	r3, #4
 8007626:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007628:	7bbb      	ldrb	r3, [r7, #14]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <USBD_StdEPReq+0x2d8>
 800762e:	7bbb      	ldrb	r3, [r7, #14]
 8007630:	2b80      	cmp	r3, #128	@ 0x80
 8007632:	d103      	bne.n	800763c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2200      	movs	r2, #0
 8007638:	601a      	str	r2, [r3, #0]
 800763a:	e00e      	b.n	800765a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800763c:	7bbb      	ldrb	r3, [r7, #14]
 800763e:	4619      	mov	r1, r3
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f001 f8b1 	bl	80087a8 <USBD_LL_IsStallEP>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2201      	movs	r2, #1
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	e002      	b.n	800765a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2202      	movs	r2, #2
 800765e:	4619      	mov	r1, r3
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 fbdd 	bl	8007e20 <USBD_CtlSendData>
              break;
 8007666:	e004      	b.n	8007672 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 fb5b 	bl	8007d26 <USBD_CtlError>
              break;
 8007670:	bf00      	nop
          }
          break;
 8007672:	e004      	b.n	800767e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 fb55 	bl	8007d26 <USBD_CtlError>
          break;
 800767c:	bf00      	nop
      }
      break;
 800767e:	e005      	b.n	800768c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007680:	6839      	ldr	r1, [r7, #0]
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fb4f 	bl	8007d26 <USBD_CtlError>
      break;
 8007688:	e000      	b.n	800768c <USBD_StdEPReq+0x330>
      break;
 800768a:	bf00      	nop
  }

  return ret;
 800768c:	7bfb      	ldrb	r3, [r7, #15]
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}
	...

08007698 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b084      	sub	sp, #16
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80076aa:	2300      	movs	r3, #0
 80076ac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	885b      	ldrh	r3, [r3, #2]
 80076b2:	0a1b      	lsrs	r3, r3, #8
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b06      	cmp	r3, #6
 80076ba:	f200 8128 	bhi.w	800790e <USBD_GetDescriptor+0x276>
 80076be:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <USBD_GetDescriptor+0x2c>)
 80076c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c4:	080076e1 	.word	0x080076e1
 80076c8:	080076f9 	.word	0x080076f9
 80076cc:	08007739 	.word	0x08007739
 80076d0:	0800790f 	.word	0x0800790f
 80076d4:	0800790f 	.word	0x0800790f
 80076d8:	080078af 	.word	0x080078af
 80076dc:	080078db 	.word	0x080078db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	7c12      	ldrb	r2, [r2, #16]
 80076ec:	f107 0108 	add.w	r1, r7, #8
 80076f0:	4610      	mov	r0, r2
 80076f2:	4798      	blx	r3
 80076f4:	60f8      	str	r0, [r7, #12]
      break;
 80076f6:	e112      	b.n	800791e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	7c1b      	ldrb	r3, [r3, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10d      	bne.n	800771c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007706:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007708:	f107 0208 	add.w	r2, r7, #8
 800770c:	4610      	mov	r0, r2
 800770e:	4798      	blx	r3
 8007710:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	3301      	adds	r3, #1
 8007716:	2202      	movs	r2, #2
 8007718:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800771a:	e100      	b.n	800791e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	f107 0208 	add.w	r2, r7, #8
 8007728:	4610      	mov	r0, r2
 800772a:	4798      	blx	r3
 800772c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	3301      	adds	r3, #1
 8007732:	2202      	movs	r2, #2
 8007734:	701a      	strb	r2, [r3, #0]
      break;
 8007736:	e0f2      	b.n	800791e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	885b      	ldrh	r3, [r3, #2]
 800773c:	b2db      	uxtb	r3, r3
 800773e:	2b05      	cmp	r3, #5
 8007740:	f200 80ac 	bhi.w	800789c <USBD_GetDescriptor+0x204>
 8007744:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <USBD_GetDescriptor+0xb4>)
 8007746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774a:	bf00      	nop
 800774c:	08007765 	.word	0x08007765
 8007750:	08007799 	.word	0x08007799
 8007754:	080077cd 	.word	0x080077cd
 8007758:	08007801 	.word	0x08007801
 800775c:	08007835 	.word	0x08007835
 8007760:	08007869 	.word	0x08007869
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	7c12      	ldrb	r2, [r2, #16]
 800777c:	f107 0108 	add.w	r1, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007786:	e091      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007788:	6839      	ldr	r1, [r7, #0]
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f000 facb 	bl	8007d26 <USBD_CtlError>
            err++;
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	3301      	adds	r3, #1
 8007794:	72fb      	strb	r3, [r7, #11]
          break;
 8007796:	e089      	b.n	80078ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	7c12      	ldrb	r2, [r2, #16]
 80077b0:	f107 0108 	add.w	r1, r7, #8
 80077b4:	4610      	mov	r0, r2
 80077b6:	4798      	blx	r3
 80077b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ba:	e077      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077bc:	6839      	ldr	r1, [r7, #0]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fab1 	bl	8007d26 <USBD_CtlError>
            err++;
 80077c4:	7afb      	ldrb	r3, [r7, #11]
 80077c6:	3301      	adds	r3, #1
 80077c8:	72fb      	strb	r3, [r7, #11]
          break;
 80077ca:	e06f      	b.n	80078ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00b      	beq.n	80077f0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80077de:	68db      	ldr	r3, [r3, #12]
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	7c12      	ldrb	r2, [r2, #16]
 80077e4:	f107 0108 	add.w	r1, r7, #8
 80077e8:	4610      	mov	r0, r2
 80077ea:	4798      	blx	r3
 80077ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077ee:	e05d      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa97 	bl	8007d26 <USBD_CtlError>
            err++;
 80077f8:	7afb      	ldrb	r3, [r7, #11]
 80077fa:	3301      	adds	r3, #1
 80077fc:	72fb      	strb	r3, [r7, #11]
          break;
 80077fe:	e055      	b.n	80078ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00b      	beq.n	8007824 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	7c12      	ldrb	r2, [r2, #16]
 8007818:	f107 0108 	add.w	r1, r7, #8
 800781c:	4610      	mov	r0, r2
 800781e:	4798      	blx	r3
 8007820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007822:	e043      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007824:	6839      	ldr	r1, [r7, #0]
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 fa7d 	bl	8007d26 <USBD_CtlError>
            err++;
 800782c:	7afb      	ldrb	r3, [r7, #11]
 800782e:	3301      	adds	r3, #1
 8007830:	72fb      	strb	r3, [r7, #11]
          break;
 8007832:	e03b      	b.n	80078ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800783a:	695b      	ldr	r3, [r3, #20]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00b      	beq.n	8007858 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007846:	695b      	ldr	r3, [r3, #20]
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	7c12      	ldrb	r2, [r2, #16]
 800784c:	f107 0108 	add.w	r1, r7, #8
 8007850:	4610      	mov	r0, r2
 8007852:	4798      	blx	r3
 8007854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007856:	e029      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007858:	6839      	ldr	r1, [r7, #0]
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f000 fa63 	bl	8007d26 <USBD_CtlError>
            err++;
 8007860:	7afb      	ldrb	r3, [r7, #11]
 8007862:	3301      	adds	r3, #1
 8007864:	72fb      	strb	r3, [r7, #11]
          break;
 8007866:	e021      	b.n	80078ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800786e:	699b      	ldr	r3, [r3, #24]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d00b      	beq.n	800788c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	687a      	ldr	r2, [r7, #4]
 800787e:	7c12      	ldrb	r2, [r2, #16]
 8007880:	f107 0108 	add.w	r1, r7, #8
 8007884:	4610      	mov	r0, r2
 8007886:	4798      	blx	r3
 8007888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800788a:	e00f      	b.n	80078ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 fa49 	bl	8007d26 <USBD_CtlError>
            err++;
 8007894:	7afb      	ldrb	r3, [r7, #11]
 8007896:	3301      	adds	r3, #1
 8007898:	72fb      	strb	r3, [r7, #11]
          break;
 800789a:	e007      	b.n	80078ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fa41 	bl	8007d26 <USBD_CtlError>
          err++;
 80078a4:	7afb      	ldrb	r3, [r7, #11]
 80078a6:	3301      	adds	r3, #1
 80078a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80078aa:	bf00      	nop
      }
      break;
 80078ac:	e037      	b.n	800791e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	7c1b      	ldrb	r3, [r3, #16]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d109      	bne.n	80078ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078be:	f107 0208 	add.w	r2, r7, #8
 80078c2:	4610      	mov	r0, r2
 80078c4:	4798      	blx	r3
 80078c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078c8:	e029      	b.n	800791e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078ca:	6839      	ldr	r1, [r7, #0]
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fa2a 	bl	8007d26 <USBD_CtlError>
        err++;
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	3301      	adds	r3, #1
 80078d6:	72fb      	strb	r3, [r7, #11]
      break;
 80078d8:	e021      	b.n	800791e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	7c1b      	ldrb	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d10d      	bne.n	80078fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80078e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ea:	f107 0208 	add.w	r2, r7, #8
 80078ee:	4610      	mov	r0, r2
 80078f0:	4798      	blx	r3
 80078f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	3301      	adds	r3, #1
 80078f8:	2207      	movs	r2, #7
 80078fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80078fc:	e00f      	b.n	800791e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 fa10 	bl	8007d26 <USBD_CtlError>
        err++;
 8007906:	7afb      	ldrb	r3, [r7, #11]
 8007908:	3301      	adds	r3, #1
 800790a:	72fb      	strb	r3, [r7, #11]
      break;
 800790c:	e007      	b.n	800791e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800790e:	6839      	ldr	r1, [r7, #0]
 8007910:	6878      	ldr	r0, [r7, #4]
 8007912:	f000 fa08 	bl	8007d26 <USBD_CtlError>
      err++;
 8007916:	7afb      	ldrb	r3, [r7, #11]
 8007918:	3301      	adds	r3, #1
 800791a:	72fb      	strb	r3, [r7, #11]
      break;
 800791c:	bf00      	nop
  }

  if (err != 0U)
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d11e      	bne.n	8007962 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	88db      	ldrh	r3, [r3, #6]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d016      	beq.n	800795a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800792c:	893b      	ldrh	r3, [r7, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d00e      	beq.n	8007950 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	88da      	ldrh	r2, [r3, #6]
 8007936:	893b      	ldrh	r3, [r7, #8]
 8007938:	4293      	cmp	r3, r2
 800793a:	bf28      	it	cs
 800793c:	4613      	movcs	r3, r2
 800793e:	b29b      	uxth	r3, r3
 8007940:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007942:	893b      	ldrh	r3, [r7, #8]
 8007944:	461a      	mov	r2, r3
 8007946:	68f9      	ldr	r1, [r7, #12]
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fa69 	bl	8007e20 <USBD_CtlSendData>
 800794e:	e009      	b.n	8007964 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007950:	6839      	ldr	r1, [r7, #0]
 8007952:	6878      	ldr	r0, [r7, #4]
 8007954:	f000 f9e7 	bl	8007d26 <USBD_CtlError>
 8007958:	e004      	b.n	8007964 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 faba 	bl	8007ed4 <USBD_CtlSendStatus>
 8007960:	e000      	b.n	8007964 <USBD_GetDescriptor+0x2cc>
    return;
 8007962:	bf00      	nop
  }
}
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
 800796a:	bf00      	nop

0800796c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	889b      	ldrh	r3, [r3, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d131      	bne.n	80079e2 <USBD_SetAddress+0x76>
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	88db      	ldrh	r3, [r3, #6]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d12d      	bne.n	80079e2 <USBD_SetAddress+0x76>
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	885b      	ldrh	r3, [r3, #2]
 800798a:	2b7f      	cmp	r3, #127	@ 0x7f
 800798c:	d829      	bhi.n	80079e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	885b      	ldrh	r3, [r3, #2]
 8007992:	b2db      	uxtb	r3, r3
 8007994:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007998:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079a0:	b2db      	uxtb	r3, r3
 80079a2:	2b03      	cmp	r3, #3
 80079a4:	d104      	bne.n	80079b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80079a6:	6839      	ldr	r1, [r7, #0]
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 f9bc 	bl	8007d26 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ae:	e01d      	b.n	80079ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	7bfa      	ldrb	r2, [r7, #15]
 80079b4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f000 ff1f 	bl	8008800 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa86 	bl	8007ed4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d004      	beq.n	80079d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2202      	movs	r2, #2
 80079d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079d6:	e009      	b.n	80079ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079e0:	e004      	b.n	80079ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80079e2:	6839      	ldr	r1, [r7, #0]
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f000 f99e 	bl	8007d26 <USBD_CtlError>
  }
}
 80079ea:	bf00      	nop
 80079ec:	bf00      	nop
 80079ee:	3710      	adds	r7, #16
 80079f0:	46bd      	mov	sp, r7
 80079f2:	bd80      	pop	{r7, pc}

080079f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	885b      	ldrh	r3, [r3, #2]
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	4b4e      	ldr	r3, [pc, #312]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a0c:	4b4d      	ldr	r3, [pc, #308]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	d905      	bls.n	8007a20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007a14:	6839      	ldr	r1, [r7, #0]
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f985 	bl	8007d26 <USBD_CtlError>
    return USBD_FAIL;
 8007a1c:	2303      	movs	r3, #3
 8007a1e:	e08c      	b.n	8007b3a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b02      	cmp	r3, #2
 8007a2a:	d002      	beq.n	8007a32 <USBD_SetConfig+0x3e>
 8007a2c:	2b03      	cmp	r3, #3
 8007a2e:	d029      	beq.n	8007a84 <USBD_SetConfig+0x90>
 8007a30:	e075      	b.n	8007b1e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007a32:	4b44      	ldr	r3, [pc, #272]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a34:	781b      	ldrb	r3, [r3, #0]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d020      	beq.n	8007a7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007a3a:	4b42      	ldr	r3, [pc, #264]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	461a      	mov	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007a44:	4b3f      	ldr	r3, [pc, #252]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	4619      	mov	r1, r3
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7fe ffe3 	bl	8006a16 <USBD_SetClassConfig>
 8007a50:	4603      	mov	r3, r0
 8007a52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007a54:	7bfb      	ldrb	r3, [r7, #15]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d008      	beq.n	8007a6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007a5a:	6839      	ldr	r1, [r7, #0]
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 f962 	bl	8007d26 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2202      	movs	r2, #2
 8007a66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007a6a:	e065      	b.n	8007b38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 fa31 	bl	8007ed4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2203      	movs	r2, #3
 8007a76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007a7a:	e05d      	b.n	8007b38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fa29 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007a82:	e059      	b.n	8007b38 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007a84:	4b2f      	ldr	r3, [pc, #188]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d112      	bne.n	8007ab2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007a94:	4b2b      	ldr	r3, [pc, #172]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	461a      	mov	r2, r3
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007a9e:	4b29      	ldr	r3, [pc, #164]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fe ffd2 	bl	8006a4e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 fa12 	bl	8007ed4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007ab0:	e042      	b.n	8007b38 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007ab2:	4b24      	ldr	r3, [pc, #144]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007ab4:	781b      	ldrb	r3, [r3, #0]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d02a      	beq.n	8007b16 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	4619      	mov	r1, r3
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f7fe ffc0 	bl	8006a4e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007ace:	4b1d      	ldr	r3, [pc, #116]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	461a      	mov	r2, r3
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fe ff99 	bl	8006a16 <USBD_SetClassConfig>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007ae8:	7bfb      	ldrb	r3, [r7, #15]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00f      	beq.n	8007b0e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007aee:	6839      	ldr	r1, [r7, #0]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f918 	bl	8007d26 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	685b      	ldr	r3, [r3, #4]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	4619      	mov	r1, r3
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f7fe ffa5 	bl	8006a4e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007b0c:	e014      	b.n	8007b38 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9e0 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007b14:	e010      	b.n	8007b38 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f9dc 	bl	8007ed4 <USBD_CtlSendStatus>
      break;
 8007b1c:	e00c      	b.n	8007b38 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007b1e:	6839      	ldr	r1, [r7, #0]
 8007b20:	6878      	ldr	r0, [r7, #4]
 8007b22:	f000 f900 	bl	8007d26 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007b26:	4b07      	ldr	r3, [pc, #28]	@ (8007b44 <USBD_SetConfig+0x150>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7fe ff8e 	bl	8006a4e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007b32:	2303      	movs	r3, #3
 8007b34:	73fb      	strb	r3, [r7, #15]
      break;
 8007b36:	bf00      	nop
  }

  return ret;
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	2000029c 	.word	0x2000029c

08007b48 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b082      	sub	sp, #8
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	88db      	ldrh	r3, [r3, #6]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d004      	beq.n	8007b64 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f8e2 	bl	8007d26 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b62:	e023      	b.n	8007bac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	dc02      	bgt.n	8007b76 <USBD_GetConfig+0x2e>
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	dc03      	bgt.n	8007b7c <USBD_GetConfig+0x34>
 8007b74:	e015      	b.n	8007ba2 <USBD_GetConfig+0x5a>
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d00b      	beq.n	8007b92 <USBD_GetConfig+0x4a>
 8007b7a:	e012      	b.n	8007ba2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	3308      	adds	r3, #8
 8007b86:	2201      	movs	r2, #1
 8007b88:	4619      	mov	r1, r3
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f948 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007b90:	e00c      	b.n	8007bac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	3304      	adds	r3, #4
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f940 	bl	8007e20 <USBD_CtlSendData>
        break;
 8007ba0:	e004      	b.n	8007bac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007ba2:	6839      	ldr	r1, [r7, #0]
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f8be 	bl	8007d26 <USBD_CtlError>
        break;
 8007baa:	bf00      	nop
}
 8007bac:	bf00      	nop
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d81e      	bhi.n	8007c0a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007bcc:	683b      	ldr	r3, [r7, #0]
 8007bce:	88db      	ldrh	r3, [r3, #6]
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d004      	beq.n	8007bde <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f8a5 	bl	8007d26 <USBD_CtlError>
        break;
 8007bdc:	e01a      	b.n	8007c14 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d005      	beq.n	8007bfa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f043 0202 	orr.w	r2, r3, #2
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	330c      	adds	r3, #12
 8007bfe:	2202      	movs	r2, #2
 8007c00:	4619      	mov	r1, r3
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f90c 	bl	8007e20 <USBD_CtlSendData>
      break;
 8007c08:	e004      	b.n	8007c14 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007c0a:	6839      	ldr	r1, [r7, #0]
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f88a 	bl	8007d26 <USBD_CtlError>
      break;
 8007c12:	bf00      	nop
  }
}
 8007c14:	bf00      	nop
 8007c16:	3708      	adds	r7, #8
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
 8007c24:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	885b      	ldrh	r3, [r3, #2]
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d107      	bne.n	8007c3e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 f94c 	bl	8007ed4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007c3c:	e013      	b.n	8007c66 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d10b      	bne.n	8007c5e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	889b      	ldrh	r3, [r3, #4]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	b29b      	uxth	r3, r3
 8007c4e:	b2da      	uxtb	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f93c 	bl	8007ed4 <USBD_CtlSendStatus>
}
 8007c5c:	e003      	b.n	8007c66 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f860 	bl	8007d26 <USBD_CtlError>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d80b      	bhi.n	8007c9e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	885b      	ldrh	r3, [r3, #2]
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d10c      	bne.n	8007ca8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 f91c 	bl	8007ed4 <USBD_CtlSendStatus>
      }
      break;
 8007c9c:	e004      	b.n	8007ca8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f840 	bl	8007d26 <USBD_CtlError>
      break;
 8007ca6:	e000      	b.n	8007caa <USBD_ClrFeature+0x3c>
      break;
 8007ca8:	bf00      	nop
  }
}
 8007caa:	bf00      	nop
 8007cac:	3708      	adds	r7, #8
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}

08007cb2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007cb2:	b580      	push	{r7, lr}
 8007cb4:	b084      	sub	sp, #16
 8007cb6:	af00      	add	r7, sp, #0
 8007cb8:	6078      	str	r0, [r7, #4]
 8007cba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	781a      	ldrb	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	3301      	adds	r3, #1
 8007ccc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	781a      	ldrb	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	3301      	adds	r3, #1
 8007cda:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	f7ff fa40 	bl	8007162 <SWAPBYTE>
 8007ce2:	4603      	mov	r3, r0
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	3301      	adds	r3, #1
 8007cee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	3301      	adds	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f7ff fa33 	bl	8007162 <SWAPBYTE>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f7ff fa26 	bl	8007162 <SWAPBYTE>
 8007d16:	4603      	mov	r3, r0
 8007d18:	461a      	mov	r2, r3
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	80da      	strh	r2, [r3, #6]
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d26:	b580      	push	{r7, lr}
 8007d28:	b082      	sub	sp, #8
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007d30:	2180      	movs	r1, #128	@ 0x80
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 fcfa 	bl	800872c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007d38:	2100      	movs	r1, #0
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fcf6 	bl	800872c <USBD_LL_StallEP>
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d54:	2300      	movs	r3, #0
 8007d56:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d042      	beq.n	8007de4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f000 f842 	bl	8007dec <USBD_GetLen>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	005b      	lsls	r3, r3, #1
 8007d6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d72:	d808      	bhi.n	8007d86 <USBD_GetString+0x3e>
 8007d74:	6938      	ldr	r0, [r7, #16]
 8007d76:	f000 f839 	bl	8007dec <USBD_GetLen>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	005b      	lsls	r3, r3, #1
 8007d82:	b29a      	uxth	r2, r3
 8007d84:	e001      	b.n	8007d8a <USBD_GetString+0x42>
 8007d86:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007d8e:	7dfb      	ldrb	r3, [r7, #23]
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	4413      	add	r3, r2
 8007d94:	687a      	ldr	r2, [r7, #4]
 8007d96:	7812      	ldrb	r2, [r2, #0]
 8007d98:	701a      	strb	r2, [r3, #0]
  idx++;
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	3301      	adds	r3, #1
 8007d9e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4413      	add	r3, r2
 8007da6:	2203      	movs	r2, #3
 8007da8:	701a      	strb	r2, [r3, #0]
  idx++;
 8007daa:	7dfb      	ldrb	r3, [r7, #23]
 8007dac:	3301      	adds	r3, #1
 8007dae:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007db0:	e013      	b.n	8007dda <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8007db2:	7dfb      	ldrb	r3, [r7, #23]
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	4413      	add	r3, r2
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	7812      	ldrb	r2, [r2, #0]
 8007dbc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	613b      	str	r3, [r7, #16]
    idx++;
 8007dc4:	7dfb      	ldrb	r3, [r7, #23]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007dca:	7dfb      	ldrb	r3, [r7, #23]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4413      	add	r3, r2
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	701a      	strb	r2, [r3, #0]
    idx++;
 8007dd4:	7dfb      	ldrb	r3, [r7, #23]
 8007dd6:	3301      	adds	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d1e7      	bne.n	8007db2 <USBD_GetString+0x6a>
 8007de2:	e000      	b.n	8007de6 <USBD_GetString+0x9e>
    return;
 8007de4:	bf00      	nop
  }
}
 8007de6:	3718      	adds	r7, #24
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}

08007dec <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007dfc:	e005      	b.n	8007e0a <USBD_GetLen+0x1e>
  {
    len++;
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	3301      	adds	r3, #1
 8007e02:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	3301      	adds	r3, #1
 8007e08:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d1f5      	bne.n	8007dfe <USBD_GetLen+0x12>
  }

  return len;
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	3714      	adds	r7, #20
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	60f8      	str	r0, [r7, #12]
 8007e28:	60b9      	str	r1, [r7, #8]
 8007e2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	2202      	movs	r2, #2
 8007e30:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	68ba      	ldr	r2, [r7, #8]
 8007e44:	2100      	movs	r1, #0
 8007e46:	68f8      	ldr	r0, [r7, #12]
 8007e48:	f000 fcf9 	bl	800883e <USBD_LL_Transmit>

  return USBD_OK;
 8007e4c:	2300      	movs	r3, #0
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	60f8      	str	r0, [r7, #12]
 8007e5e:	60b9      	str	r1, [r7, #8]
 8007e60:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	2100      	movs	r1, #0
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f000 fce8 	bl	800883e <USBD_LL_Transmit>

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2203      	movs	r2, #3
 8007e88:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68ba      	ldr	r2, [r7, #8]
 8007ea0:	2100      	movs	r1, #0
 8007ea2:	68f8      	ldr	r0, [r7, #12]
 8007ea4:	f000 fcec 	bl	8008880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ea8:	2300      	movs	r3, #0
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3710      	adds	r7, #16
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b084      	sub	sp, #16
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	60f8      	str	r0, [r7, #12]
 8007eba:	60b9      	str	r1, [r7, #8]
 8007ebc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	68ba      	ldr	r2, [r7, #8]
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 fcdb 	bl	8008880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b082      	sub	sp, #8
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2204      	movs	r2, #4
 8007ee0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	2100      	movs	r1, #0
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f000 fca7 	bl	800883e <USBD_LL_Transmit>

  return USBD_OK;
 8007ef0:	2300      	movs	r3, #0
}
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	3708      	adds	r7, #8
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	bd80      	pop	{r7, pc}

08007efa <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007efa:	b580      	push	{r7, lr}
 8007efc:	b082      	sub	sp, #8
 8007efe:	af00      	add	r7, sp, #0
 8007f00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2205      	movs	r2, #5
 8007f06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	2100      	movs	r1, #0
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fcb5 	bl	8008880 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007f16:	2300      	movs	r3, #0
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	3708      	adds	r7, #8
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	bd80      	pop	{r7, pc}

08007f20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007f24:	2200      	movs	r2, #0
 8007f26:	4912      	ldr	r1, [pc, #72]	@ (8007f70 <MX_USB_DEVICE_Init+0x50>)
 8007f28:	4812      	ldr	r0, [pc, #72]	@ (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f2a:	f7fe fcf7 	bl	800691c <USBD_Init>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f34:	f7f8 fe60 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f38:	490f      	ldr	r1, [pc, #60]	@ (8007f78 <MX_USB_DEVICE_Init+0x58>)
 8007f3a:	480e      	ldr	r0, [pc, #56]	@ (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f3c:	f7fe fd1e 	bl	800697c <USBD_RegisterClass>
 8007f40:	4603      	mov	r3, r0
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d001      	beq.n	8007f4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f46:	f7f8 fe57 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f4a:	490c      	ldr	r1, [pc, #48]	@ (8007f7c <MX_USB_DEVICE_Init+0x5c>)
 8007f4c:	4809      	ldr	r0, [pc, #36]	@ (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f4e:	f7fe fc15 	bl	800677c <USBD_CDC_RegisterInterface>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f58:	f7f8 fe4e 	bl	8000bf8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f5c:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <MX_USB_DEVICE_Init+0x54>)
 8007f5e:	f7fe fd43 	bl	80069e8 <USBD_Start>
 8007f62:	4603      	mov	r3, r0
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f68:	f7f8 fe46 	bl	8000bf8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f6c:	bf00      	nop
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200000ac 	.word	0x200000ac
 8007f74:	200002a0 	.word	0x200002a0
 8007f78:	20000018 	.word	0x20000018
 8007f7c:	20000098 	.word	0x20000098

08007f80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f84:	2200      	movs	r2, #0
 8007f86:	4905      	ldr	r1, [pc, #20]	@ (8007f9c <CDC_Init_FS+0x1c>)
 8007f88:	4805      	ldr	r0, [pc, #20]	@ (8007fa0 <CDC_Init_FS+0x20>)
 8007f8a:	f7fe fc11 	bl	80067b0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f8e:	4905      	ldr	r1, [pc, #20]	@ (8007fa4 <CDC_Init_FS+0x24>)
 8007f90:	4803      	ldr	r0, [pc, #12]	@ (8007fa0 <CDC_Init_FS+0x20>)
 8007f92:	f7fe fc2f 	bl	80067f4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	20000d7c 	.word	0x20000d7c
 8007fa0:	200002a0 	.word	0x200002a0
 8007fa4:	2000057c 	.word	0x2000057c

08007fa8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007fac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	6039      	str	r1, [r7, #0]
 8007fc2:	71fb      	strb	r3, [r7, #7]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007fc8:	79fb      	ldrb	r3, [r7, #7]
 8007fca:	2b23      	cmp	r3, #35	@ 0x23
 8007fcc:	d84a      	bhi.n	8008064 <CDC_Control_FS+0xac>
 8007fce:	a201      	add	r2, pc, #4	@ (adr r2, 8007fd4 <CDC_Control_FS+0x1c>)
 8007fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd4:	08008065 	.word	0x08008065
 8007fd8:	08008065 	.word	0x08008065
 8007fdc:	08008065 	.word	0x08008065
 8007fe0:	08008065 	.word	0x08008065
 8007fe4:	08008065 	.word	0x08008065
 8007fe8:	08008065 	.word	0x08008065
 8007fec:	08008065 	.word	0x08008065
 8007ff0:	08008065 	.word	0x08008065
 8007ff4:	08008065 	.word	0x08008065
 8007ff8:	08008065 	.word	0x08008065
 8007ffc:	08008065 	.word	0x08008065
 8008000:	08008065 	.word	0x08008065
 8008004:	08008065 	.word	0x08008065
 8008008:	08008065 	.word	0x08008065
 800800c:	08008065 	.word	0x08008065
 8008010:	08008065 	.word	0x08008065
 8008014:	08008065 	.word	0x08008065
 8008018:	08008065 	.word	0x08008065
 800801c:	08008065 	.word	0x08008065
 8008020:	08008065 	.word	0x08008065
 8008024:	08008065 	.word	0x08008065
 8008028:	08008065 	.word	0x08008065
 800802c:	08008065 	.word	0x08008065
 8008030:	08008065 	.word	0x08008065
 8008034:	08008065 	.word	0x08008065
 8008038:	08008065 	.word	0x08008065
 800803c:	08008065 	.word	0x08008065
 8008040:	08008065 	.word	0x08008065
 8008044:	08008065 	.word	0x08008065
 8008048:	08008065 	.word	0x08008065
 800804c:	08008065 	.word	0x08008065
 8008050:	08008065 	.word	0x08008065
 8008054:	08008065 	.word	0x08008065
 8008058:	08008065 	.word	0x08008065
 800805c:	08008065 	.word	0x08008065
 8008060:	08008065 	.word	0x08008065
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008064:	bf00      	nop
  }

  return (USBD_OK);
 8008066:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008068:	4618      	mov	r0, r3
 800806a:	370c      	adds	r7, #12
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800807e:	6879      	ldr	r1, [r7, #4]
 8008080:	4805      	ldr	r0, [pc, #20]	@ (8008098 <CDC_Receive_FS+0x24>)
 8008082:	f7fe fbb7 	bl	80067f4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008086:	4804      	ldr	r0, [pc, #16]	@ (8008098 <CDC_Receive_FS+0x24>)
 8008088:	f7fe fc12 	bl	80068b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800808c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
 8008096:	bf00      	nop
 8008098:	200002a0 	.word	0x200002a0

0800809c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b084      	sub	sp, #16
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
 80080a4:	460b      	mov	r3, r1
 80080a6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80080ac:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <CDC_Transmit_FS+0x48>)
 80080ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80080b2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80080be:	2301      	movs	r3, #1
 80080c0:	e00b      	b.n	80080da <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080c2:	887b      	ldrh	r3, [r7, #2]
 80080c4:	461a      	mov	r2, r3
 80080c6:	6879      	ldr	r1, [r7, #4]
 80080c8:	4806      	ldr	r0, [pc, #24]	@ (80080e4 <CDC_Transmit_FS+0x48>)
 80080ca:	f7fe fb71 	bl	80067b0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080ce:	4805      	ldr	r0, [pc, #20]	@ (80080e4 <CDC_Transmit_FS+0x48>)
 80080d0:	f7fe fbae 	bl	8006830 <USBD_CDC_TransmitPacket>
 80080d4:	4603      	mov	r3, r0
 80080d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
 80080e2:	bf00      	nop
 80080e4:	200002a0 	.word	0x200002a0

080080e8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	4613      	mov	r3, r2
 80080f4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80080f6:	2300      	movs	r3, #0
 80080f8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80080fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	2212      	movs	r2, #18
 800811c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800811e:	4b03      	ldr	r3, [pc, #12]	@ (800812c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	200000c8 	.word	0x200000c8

08008130 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	4603      	mov	r3, r0
 8008138:	6039      	str	r1, [r7, #0]
 800813a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2204      	movs	r2, #4
 8008140:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008142:	4b03      	ldr	r3, [pc, #12]	@ (8008150 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008144:	4618      	mov	r0, r3
 8008146:	370c      	adds	r7, #12
 8008148:	46bd      	mov	sp, r7
 800814a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814e:	4770      	bx	lr
 8008150:	200000dc 	.word	0x200000dc

08008154 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	4603      	mov	r3, r0
 800815c:	6039      	str	r1, [r7, #0]
 800815e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d105      	bne.n	8008172 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4907      	ldr	r1, [pc, #28]	@ (8008188 <USBD_FS_ProductStrDescriptor+0x34>)
 800816a:	4808      	ldr	r0, [pc, #32]	@ (800818c <USBD_FS_ProductStrDescriptor+0x38>)
 800816c:	f7ff fdec 	bl	8007d48 <USBD_GetString>
 8008170:	e004      	b.n	800817c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008172:	683a      	ldr	r2, [r7, #0]
 8008174:	4904      	ldr	r1, [pc, #16]	@ (8008188 <USBD_FS_ProductStrDescriptor+0x34>)
 8008176:	4805      	ldr	r0, [pc, #20]	@ (800818c <USBD_FS_ProductStrDescriptor+0x38>)
 8008178:	f7ff fde6 	bl	8007d48 <USBD_GetString>
  }
  return USBD_StrDesc;
 800817c:	4b02      	ldr	r3, [pc, #8]	@ (8008188 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800817e:	4618      	mov	r0, r3
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	2000157c 	.word	0x2000157c
 800818c:	080092d8 	.word	0x080092d8

08008190 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b082      	sub	sp, #8
 8008194:	af00      	add	r7, sp, #0
 8008196:	4603      	mov	r3, r0
 8008198:	6039      	str	r1, [r7, #0]
 800819a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800819c:	683a      	ldr	r2, [r7, #0]
 800819e:	4904      	ldr	r1, [pc, #16]	@ (80081b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80081a0:	4804      	ldr	r0, [pc, #16]	@ (80081b4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80081a2:	f7ff fdd1 	bl	8007d48 <USBD_GetString>
  return USBD_StrDesc;
 80081a6:	4b02      	ldr	r3, [pc, #8]	@ (80081b0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3708      	adds	r7, #8
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	2000157c 	.word	0x2000157c
 80081b4:	080092f0 	.word	0x080092f0

080081b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	221a      	movs	r2, #26
 80081c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80081ca:	f000 f843 	bl	8008254 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80081ce:	4b02      	ldr	r3, [pc, #8]	@ (80081d8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	200000e0 	.word	0x200000e0

080081dc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	4603      	mov	r3, r0
 80081e4:	6039      	str	r1, [r7, #0]
 80081e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081e8:	79fb      	ldrb	r3, [r7, #7]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d105      	bne.n	80081fa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081ee:	683a      	ldr	r2, [r7, #0]
 80081f0:	4907      	ldr	r1, [pc, #28]	@ (8008210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081f2:	4808      	ldr	r0, [pc, #32]	@ (8008214 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081f4:	f7ff fda8 	bl	8007d48 <USBD_GetString>
 80081f8:	e004      	b.n	8008204 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081fa:	683a      	ldr	r2, [r7, #0]
 80081fc:	4904      	ldr	r1, [pc, #16]	@ (8008210 <USBD_FS_ConfigStrDescriptor+0x34>)
 80081fe:	4805      	ldr	r0, [pc, #20]	@ (8008214 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008200:	f7ff fda2 	bl	8007d48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008204:	4b02      	ldr	r3, [pc, #8]	@ (8008210 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
 800820e:	bf00      	nop
 8008210:	2000157c 	.word	0x2000157c
 8008214:	08009304 	.word	0x08009304

08008218 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	4603      	mov	r3, r0
 8008220:	6039      	str	r1, [r7, #0]
 8008222:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008224:	79fb      	ldrb	r3, [r7, #7]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d105      	bne.n	8008236 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800822a:	683a      	ldr	r2, [r7, #0]
 800822c:	4907      	ldr	r1, [pc, #28]	@ (800824c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800822e:	4808      	ldr	r0, [pc, #32]	@ (8008250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008230:	f7ff fd8a 	bl	8007d48 <USBD_GetString>
 8008234:	e004      	b.n	8008240 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	4904      	ldr	r1, [pc, #16]	@ (800824c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800823a:	4805      	ldr	r0, [pc, #20]	@ (8008250 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800823c:	f7ff fd84 	bl	8007d48 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008240:	4b02      	ldr	r3, [pc, #8]	@ (800824c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008242:	4618      	mov	r0, r3
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	2000157c 	.word	0x2000157c
 8008250:	08009310 	.word	0x08009310

08008254 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800825a:	4b0f      	ldr	r3, [pc, #60]	@ (8008298 <Get_SerialNum+0x44>)
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008260:	4b0e      	ldr	r3, [pc, #56]	@ (800829c <Get_SerialNum+0x48>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008266:	4b0e      	ldr	r3, [pc, #56]	@ (80082a0 <Get_SerialNum+0x4c>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4413      	add	r3, r2
 8008272:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d009      	beq.n	800828e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800827a:	2208      	movs	r2, #8
 800827c:	4909      	ldr	r1, [pc, #36]	@ (80082a4 <Get_SerialNum+0x50>)
 800827e:	68f8      	ldr	r0, [r7, #12]
 8008280:	f000 f814 	bl	80082ac <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008284:	2204      	movs	r2, #4
 8008286:	4908      	ldr	r1, [pc, #32]	@ (80082a8 <Get_SerialNum+0x54>)
 8008288:	68b8      	ldr	r0, [r7, #8]
 800828a:	f000 f80f 	bl	80082ac <IntToUnicode>
  }
}
 800828e:	bf00      	nop
 8008290:	3710      	adds	r7, #16
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	1fff7a10 	.word	0x1fff7a10
 800829c:	1fff7a14 	.word	0x1fff7a14
 80082a0:	1fff7a18 	.word	0x1fff7a18
 80082a4:	200000e2 	.word	0x200000e2
 80082a8:	200000f2 	.word	0x200000f2

080082ac <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	4613      	mov	r3, r2
 80082b8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80082be:	2300      	movs	r3, #0
 80082c0:	75fb      	strb	r3, [r7, #23]
 80082c2:	e027      	b.n	8008314 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	0f1b      	lsrs	r3, r3, #28
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d80b      	bhi.n	80082e4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	0f1b      	lsrs	r3, r3, #28
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	005b      	lsls	r3, r3, #1
 80082d6:	4619      	mov	r1, r3
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	440b      	add	r3, r1
 80082dc:	3230      	adds	r2, #48	@ 0x30
 80082de:	b2d2      	uxtb	r2, r2
 80082e0:	701a      	strb	r2, [r3, #0]
 80082e2:	e00a      	b.n	80082fa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	0f1b      	lsrs	r3, r3, #28
 80082e8:	b2da      	uxtb	r2, r3
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	4619      	mov	r1, r3
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	440b      	add	r3, r1
 80082f4:	3237      	adds	r2, #55	@ 0x37
 80082f6:	b2d2      	uxtb	r2, r2
 80082f8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	011b      	lsls	r3, r3, #4
 80082fe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008300:	7dfb      	ldrb	r3, [r7, #23]
 8008302:	005b      	lsls	r3, r3, #1
 8008304:	3301      	adds	r3, #1
 8008306:	68ba      	ldr	r2, [r7, #8]
 8008308:	4413      	add	r3, r2
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800830e:	7dfb      	ldrb	r3, [r7, #23]
 8008310:	3301      	adds	r3, #1
 8008312:	75fb      	strb	r3, [r7, #23]
 8008314:	7dfa      	ldrb	r2, [r7, #23]
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	429a      	cmp	r2, r3
 800831a:	d3d3      	bcc.n	80082c4 <IntToUnicode+0x18>
  }
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	371c      	adds	r7, #28
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
	...

0800832c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b08a      	sub	sp, #40	@ 0x28
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008334:	f107 0314 	add.w	r3, r7, #20
 8008338:	2200      	movs	r2, #0
 800833a:	601a      	str	r2, [r3, #0]
 800833c:	605a      	str	r2, [r3, #4]
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	60da      	str	r2, [r3, #12]
 8008342:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800834c:	d147      	bne.n	80083de <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800834e:	2300      	movs	r3, #0
 8008350:	613b      	str	r3, [r7, #16]
 8008352:	4b25      	ldr	r3, [pc, #148]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 8008354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008356:	4a24      	ldr	r2, [pc, #144]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 8008358:	f043 0301 	orr.w	r3, r3, #1
 800835c:	6313      	str	r3, [r2, #48]	@ 0x30
 800835e:	4b22      	ldr	r3, [pc, #136]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 8008360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008362:	f003 0301 	and.w	r3, r3, #1
 8008366:	613b      	str	r3, [r7, #16]
 8008368:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800836a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800836e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008370:	2300      	movs	r3, #0
 8008372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008374:	2300      	movs	r3, #0
 8008376:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008378:	f107 0314 	add.w	r3, r7, #20
 800837c:	4619      	mov	r1, r3
 800837e:	481b      	ldr	r0, [pc, #108]	@ (80083ec <HAL_PCD_MspInit+0xc0>)
 8008380:	f7f9 f82a 	bl	80013d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008384:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800838a:	2302      	movs	r3, #2
 800838c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008396:	230a      	movs	r3, #10
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800839a:	f107 0314 	add.w	r3, r7, #20
 800839e:	4619      	mov	r1, r3
 80083a0:	4812      	ldr	r0, [pc, #72]	@ (80083ec <HAL_PCD_MspInit+0xc0>)
 80083a2:	f7f9 f819 	bl	80013d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083a6:	4b10      	ldr	r3, [pc, #64]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 80083a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083aa:	4a0f      	ldr	r2, [pc, #60]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 80083ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b0:	6353      	str	r3, [r2, #52]	@ 0x34
 80083b2:	2300      	movs	r3, #0
 80083b4:	60fb      	str	r3, [r7, #12]
 80083b6:	4b0c      	ldr	r3, [pc, #48]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 80083b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083ba:	4a0b      	ldr	r2, [pc, #44]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 80083bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80083c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80083c2:	4b09      	ldr	r3, [pc, #36]	@ (80083e8 <HAL_PCD_MspInit+0xbc>)
 80083c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80083ca:	60fb      	str	r3, [r7, #12]
 80083cc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80083ce:	2200      	movs	r2, #0
 80083d0:	2100      	movs	r1, #0
 80083d2:	2043      	movs	r0, #67	@ 0x43
 80083d4:	f7f8 fecd 	bl	8001172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80083d8:	2043      	movs	r0, #67	@ 0x43
 80083da:	f7f8 fee6 	bl	80011aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80083de:	bf00      	nop
 80083e0:	3728      	adds	r7, #40	@ 0x28
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	40023800 	.word	0x40023800
 80083ec:	40020000 	.word	0x40020000

080083f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008404:	4619      	mov	r1, r3
 8008406:	4610      	mov	r0, r2
 8008408:	f7fe fb3b 	bl	8006a82 <USBD_LL_SetupStage>
}
 800840c:	bf00      	nop
 800840e:	3708      	adds	r7, #8
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	460b      	mov	r3, r1
 800841e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8008426:	78fa      	ldrb	r2, [r7, #3]
 8008428:	6879      	ldr	r1, [r7, #4]
 800842a:	4613      	mov	r3, r2
 800842c:	00db      	lsls	r3, r3, #3
 800842e:	4413      	add	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	440b      	add	r3, r1
 8008434:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	78fb      	ldrb	r3, [r7, #3]
 800843c:	4619      	mov	r1, r3
 800843e:	f7fe fb75 	bl	8006b2c <USBD_LL_DataOutStage>
}
 8008442:	bf00      	nop
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	460b      	mov	r3, r1
 8008454:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800845c:	78fa      	ldrb	r2, [r7, #3]
 800845e:	6879      	ldr	r1, [r7, #4]
 8008460:	4613      	mov	r3, r2
 8008462:	00db      	lsls	r3, r3, #3
 8008464:	4413      	add	r3, r2
 8008466:	009b      	lsls	r3, r3, #2
 8008468:	440b      	add	r3, r1
 800846a:	3320      	adds	r3, #32
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	78fb      	ldrb	r3, [r7, #3]
 8008470:	4619      	mov	r1, r3
 8008472:	f7fe fc0e 	bl	8006c92 <USBD_LL_DataInStage>
}
 8008476:	bf00      	nop
 8008478:	3708      	adds	r7, #8
 800847a:	46bd      	mov	sp, r7
 800847c:	bd80      	pop	{r7, pc}

0800847e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800847e:	b580      	push	{r7, lr}
 8008480:	b082      	sub	sp, #8
 8008482:	af00      	add	r7, sp, #0
 8008484:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800848c:	4618      	mov	r0, r3
 800848e:	f7fe fd48 	bl	8006f22 <USBD_LL_SOF>
}
 8008492:	bf00      	nop
 8008494:	3708      	adds	r7, #8
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80084a2:	2301      	movs	r3, #1
 80084a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	79db      	ldrb	r3, [r3, #7]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d102      	bne.n	80084b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]
 80084b2:	e008      	b.n	80084c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	79db      	ldrb	r3, [r3, #7]
 80084b8:	2b02      	cmp	r3, #2
 80084ba:	d102      	bne.n	80084c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80084bc:	2301      	movs	r3, #1
 80084be:	73fb      	strb	r3, [r7, #15]
 80084c0:	e001      	b.n	80084c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80084c2:	f7f8 fb99 	bl	8000bf8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084cc:	7bfa      	ldrb	r2, [r7, #15]
 80084ce:	4611      	mov	r1, r2
 80084d0:	4618      	mov	r0, r3
 80084d2:	f7fe fce2 	bl	8006e9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084dc:	4618      	mov	r0, r3
 80084de:	f7fe fc8a 	bl	8006df6 <USBD_LL_Reset>
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
	...

080084ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80084ec:	b580      	push	{r7, lr}
 80084ee:	b082      	sub	sp, #8
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fcdd 	bl	8006eba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	6812      	ldr	r2, [r2, #0]
 800850e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	7adb      	ldrb	r3, [r3, #11]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d005      	beq.n	800852c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008520:	4b04      	ldr	r3, [pc, #16]	@ (8008534 <HAL_PCD_SuspendCallback+0x48>)
 8008522:	691b      	ldr	r3, [r3, #16]
 8008524:	4a03      	ldr	r2, [pc, #12]	@ (8008534 <HAL_PCD_SuspendCallback+0x48>)
 8008526:	f043 0306 	orr.w	r3, r3, #6
 800852a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	e000ed00 	.word	0xe000ed00

08008538 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008546:	4618      	mov	r0, r3
 8008548:	f7fe fcd3 	bl	8006ef2 <USBD_LL_Resume>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
 800855c:	460b      	mov	r3, r1
 800855e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	4611      	mov	r1, r2
 800856a:	4618      	mov	r0, r3
 800856c:	f7fe fd2b 	bl	8006fc6 <USBD_LL_IsoOUTIncomplete>
}
 8008570:	bf00      	nop
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	460b      	mov	r3, r1
 8008582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800858a:	78fa      	ldrb	r2, [r7, #3]
 800858c:	4611      	mov	r1, r2
 800858e:	4618      	mov	r0, r3
 8008590:	f7fe fce7 	bl	8006f62 <USBD_LL_IsoINIncomplete>
}
 8008594:	bf00      	nop
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085aa:	4618      	mov	r0, r3
 80085ac:	f7fe fd3d 	bl	800702a <USBD_LL_DevConnected>
}
 80085b0:	bf00      	nop
 80085b2:	3708      	adds	r7, #8
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}

080085b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fd3a 	bl	8007040 <USBD_LL_DevDisconnected>
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	781b      	ldrb	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d13c      	bne.n	800865e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80085e4:	4a20      	ldr	r2, [pc, #128]	@ (8008668 <USBD_LL_Init+0x94>)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	4a1e      	ldr	r2, [pc, #120]	@ (8008668 <USBD_LL_Init+0x94>)
 80085f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80085f4:	4b1c      	ldr	r3, [pc, #112]	@ (8008668 <USBD_LL_Init+0x94>)
 80085f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80085fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80085fc:	4b1a      	ldr	r3, [pc, #104]	@ (8008668 <USBD_LL_Init+0x94>)
 80085fe:	2204      	movs	r2, #4
 8008600:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008602:	4b19      	ldr	r3, [pc, #100]	@ (8008668 <USBD_LL_Init+0x94>)
 8008604:	2202      	movs	r2, #2
 8008606:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008608:	4b17      	ldr	r3, [pc, #92]	@ (8008668 <USBD_LL_Init+0x94>)
 800860a:	2200      	movs	r2, #0
 800860c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800860e:	4b16      	ldr	r3, [pc, #88]	@ (8008668 <USBD_LL_Init+0x94>)
 8008610:	2202      	movs	r2, #2
 8008612:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008614:	4b14      	ldr	r3, [pc, #80]	@ (8008668 <USBD_LL_Init+0x94>)
 8008616:	2200      	movs	r2, #0
 8008618:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800861a:	4b13      	ldr	r3, [pc, #76]	@ (8008668 <USBD_LL_Init+0x94>)
 800861c:	2200      	movs	r2, #0
 800861e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008620:	4b11      	ldr	r3, [pc, #68]	@ (8008668 <USBD_LL_Init+0x94>)
 8008622:	2200      	movs	r2, #0
 8008624:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008626:	4b10      	ldr	r3, [pc, #64]	@ (8008668 <USBD_LL_Init+0x94>)
 8008628:	2201      	movs	r2, #1
 800862a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800862c:	4b0e      	ldr	r3, [pc, #56]	@ (8008668 <USBD_LL_Init+0x94>)
 800862e:	2200      	movs	r2, #0
 8008630:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008632:	480d      	ldr	r0, [pc, #52]	@ (8008668 <USBD_LL_Init+0x94>)
 8008634:	f7f9 fe6a 	bl	800230c <HAL_PCD_Init>
 8008638:	4603      	mov	r3, r0
 800863a:	2b00      	cmp	r3, #0
 800863c:	d001      	beq.n	8008642 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800863e:	f7f8 fadb 	bl	8000bf8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008642:	2180      	movs	r1, #128	@ 0x80
 8008644:	4808      	ldr	r0, [pc, #32]	@ (8008668 <USBD_LL_Init+0x94>)
 8008646:	f7fb f896 	bl	8003776 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800864a:	2240      	movs	r2, #64	@ 0x40
 800864c:	2100      	movs	r1, #0
 800864e:	4806      	ldr	r0, [pc, #24]	@ (8008668 <USBD_LL_Init+0x94>)
 8008650:	f7fb f84a 	bl	80036e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008654:	2280      	movs	r2, #128	@ 0x80
 8008656:	2101      	movs	r1, #1
 8008658:	4803      	ldr	r0, [pc, #12]	@ (8008668 <USBD_LL_Init+0x94>)
 800865a:	f7fb f845 	bl	80036e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3708      	adds	r7, #8
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	2000177c 	.word	0x2000177c

0800866c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008674:	2300      	movs	r3, #0
 8008676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008678:	2300      	movs	r3, #0
 800867a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008682:	4618      	mov	r0, r3
 8008684:	f7f9 ff51 	bl	800252a <HAL_PCD_Start>
 8008688:	4603      	mov	r3, r0
 800868a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800868c:	7bfb      	ldrb	r3, [r7, #15]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 f942 	bl	8008918 <USBD_Get_USB_Status>
 8008694:	4603      	mov	r3, r0
 8008696:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008698:	7bbb      	ldrb	r3, [r7, #14]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b084      	sub	sp, #16
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	6078      	str	r0, [r7, #4]
 80086aa:	4608      	mov	r0, r1
 80086ac:	4611      	mov	r1, r2
 80086ae:	461a      	mov	r2, r3
 80086b0:	4603      	mov	r3, r0
 80086b2:	70fb      	strb	r3, [r7, #3]
 80086b4:	460b      	mov	r3, r1
 80086b6:	70bb      	strb	r3, [r7, #2]
 80086b8:	4613      	mov	r3, r2
 80086ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80086ca:	78bb      	ldrb	r3, [r7, #2]
 80086cc:	883a      	ldrh	r2, [r7, #0]
 80086ce:	78f9      	ldrb	r1, [r7, #3]
 80086d0:	f7fa fc25 	bl	8002f1e <HAL_PCD_EP_Open>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f91c 	bl	8008918 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b084      	sub	sp, #16
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	460b      	mov	r3, r1
 80086f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086fa:	2300      	movs	r3, #0
 80086fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086fe:	2300      	movs	r3, #0
 8008700:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	4611      	mov	r1, r2
 800870c:	4618      	mov	r0, r3
 800870e:	f7fa fc70 	bl	8002ff2 <HAL_PCD_EP_Close>
 8008712:	4603      	mov	r3, r0
 8008714:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008716:	7bfb      	ldrb	r3, [r7, #15]
 8008718:	4618      	mov	r0, r3
 800871a:	f000 f8fd 	bl	8008918 <USBD_Get_USB_Status>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008722:	7bbb      	ldrb	r3, [r7, #14]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008738:	2300      	movs	r3, #0
 800873a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800873c:	2300      	movs	r3, #0
 800873e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008746:	78fa      	ldrb	r2, [r7, #3]
 8008748:	4611      	mov	r1, r2
 800874a:	4618      	mov	r0, r3
 800874c:	f7fa fd28 	bl	80031a0 <HAL_PCD_EP_SetStall>
 8008750:	4603      	mov	r3, r0
 8008752:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	4618      	mov	r0, r3
 8008758:	f000 f8de 	bl	8008918 <USBD_Get_USB_Status>
 800875c:	4603      	mov	r3, r0
 800875e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008760:	7bbb      	ldrb	r3, [r7, #14]
}
 8008762:	4618      	mov	r0, r3
 8008764:	3710      	adds	r7, #16
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800876a:	b580      	push	{r7, lr}
 800876c:	b084      	sub	sp, #16
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	460b      	mov	r3, r1
 8008774:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008784:	78fa      	ldrb	r2, [r7, #3]
 8008786:	4611      	mov	r1, r2
 8008788:	4618      	mov	r0, r3
 800878a:	f7fa fd6c 	bl	8003266 <HAL_PCD_EP_ClrStall>
 800878e:	4603      	mov	r3, r0
 8008790:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	4618      	mov	r0, r3
 8008796:	f000 f8bf 	bl	8008918 <USBD_Get_USB_Status>
 800879a:	4603      	mov	r3, r0
 800879c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800879e:	7bbb      	ldrb	r3, [r7, #14]
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	460b      	mov	r3, r1
 80087b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80087ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80087bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	da0b      	bge.n	80087dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80087c4:	78fb      	ldrb	r3, [r7, #3]
 80087c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087ca:	68f9      	ldr	r1, [r7, #12]
 80087cc:	4613      	mov	r3, r2
 80087ce:	00db      	lsls	r3, r3, #3
 80087d0:	4413      	add	r3, r2
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	440b      	add	r3, r1
 80087d6:	3316      	adds	r3, #22
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	e00b      	b.n	80087f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80087dc:	78fb      	ldrb	r3, [r7, #3]
 80087de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80087e2:	68f9      	ldr	r1, [r7, #12]
 80087e4:	4613      	mov	r3, r2
 80087e6:	00db      	lsls	r3, r3, #3
 80087e8:	4413      	add	r3, r2
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	440b      	add	r3, r1
 80087ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80087f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b084      	sub	sp, #16
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	460b      	mov	r3, r1
 800880a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008810:	2300      	movs	r3, #0
 8008812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fa fb59 	bl	8002ed6 <HAL_PCD_SetAddress>
 8008824:	4603      	mov	r3, r0
 8008826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008828:	7bfb      	ldrb	r3, [r7, #15]
 800882a:	4618      	mov	r0, r3
 800882c:	f000 f874 	bl	8008918 <USBD_Get_USB_Status>
 8008830:	4603      	mov	r3, r0
 8008832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008834:	7bbb      	ldrb	r3, [r7, #14]
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}

0800883e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800883e:	b580      	push	{r7, lr}
 8008840:	b086      	sub	sp, #24
 8008842:	af00      	add	r7, sp, #0
 8008844:	60f8      	str	r0, [r7, #12]
 8008846:	607a      	str	r2, [r7, #4]
 8008848:	603b      	str	r3, [r7, #0]
 800884a:	460b      	mov	r3, r1
 800884c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800884e:	2300      	movs	r3, #0
 8008850:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008852:	2300      	movs	r3, #0
 8008854:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800885c:	7af9      	ldrb	r1, [r7, #11]
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	f7fa fc63 	bl	800312c <HAL_PCD_EP_Transmit>
 8008866:	4603      	mov	r3, r0
 8008868:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800886a:	7dfb      	ldrb	r3, [r7, #23]
 800886c:	4618      	mov	r0, r3
 800886e:	f000 f853 	bl	8008918 <USBD_Get_USB_Status>
 8008872:	4603      	mov	r3, r0
 8008874:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008876:	7dbb      	ldrb	r3, [r7, #22]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}

08008880 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	60f8      	str	r0, [r7, #12]
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	603b      	str	r3, [r7, #0]
 800888c:	460b      	mov	r3, r1
 800888e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008890:	2300      	movs	r3, #0
 8008892:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800889e:	7af9      	ldrb	r1, [r7, #11]
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	f7fa fbef 	bl	8003086 <HAL_PCD_EP_Receive>
 80088a8:	4603      	mov	r3, r0
 80088aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80088ac:	7dfb      	ldrb	r3, [r7, #23]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f000 f832 	bl	8008918 <USBD_Get_USB_Status>
 80088b4:	4603      	mov	r3, r0
 80088b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80088b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}

080088c2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80088c2:	b580      	push	{r7, lr}
 80088c4:	b082      	sub	sp, #8
 80088c6:	af00      	add	r7, sp, #0
 80088c8:	6078      	str	r0, [r7, #4]
 80088ca:	460b      	mov	r3, r1
 80088cc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80088d4:	78fa      	ldrb	r2, [r7, #3]
 80088d6:	4611      	mov	r1, r2
 80088d8:	4618      	mov	r0, r3
 80088da:	f7fa fc0f 	bl	80030fc <HAL_PCD_EP_GetRxCount>
 80088de:	4603      	mov	r3, r0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b083      	sub	sp, #12
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80088f0:	4b03      	ldr	r3, [pc, #12]	@ (8008900 <USBD_static_malloc+0x18>)
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	20001c60 	.word	0x20001c60

08008904 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]

}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	4603      	mov	r3, r0
 8008920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008926:	79fb      	ldrb	r3, [r7, #7]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d817      	bhi.n	800895c <USBD_Get_USB_Status+0x44>
 800892c:	a201      	add	r2, pc, #4	@ (adr r2, 8008934 <USBD_Get_USB_Status+0x1c>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008945 	.word	0x08008945
 8008938:	0800894b 	.word	0x0800894b
 800893c:	08008951 	.word	0x08008951
 8008940:	08008957 	.word	0x08008957
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008944:	2300      	movs	r3, #0
 8008946:	73fb      	strb	r3, [r7, #15]
    break;
 8008948:	e00b      	b.n	8008962 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	73fb      	strb	r3, [r7, #15]
    break;
 800894e:	e008      	b.n	8008962 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
    break;
 8008954:	e005      	b.n	8008962 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008956:	2303      	movs	r3, #3
 8008958:	73fb      	strb	r3, [r7, #15]
    break;
 800895a:	e002      	b.n	8008962 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800895c:	2303      	movs	r3, #3
 800895e:	73fb      	strb	r3, [r7, #15]
    break;
 8008960:	bf00      	nop
  }
  return usb_status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <siprintf>:
 8008970:	b40e      	push	{r1, r2, r3}
 8008972:	b500      	push	{lr}
 8008974:	b09c      	sub	sp, #112	@ 0x70
 8008976:	ab1d      	add	r3, sp, #116	@ 0x74
 8008978:	9002      	str	r0, [sp, #8]
 800897a:	9006      	str	r0, [sp, #24]
 800897c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008980:	4809      	ldr	r0, [pc, #36]	@ (80089a8 <siprintf+0x38>)
 8008982:	9107      	str	r1, [sp, #28]
 8008984:	9104      	str	r1, [sp, #16]
 8008986:	4909      	ldr	r1, [pc, #36]	@ (80089ac <siprintf+0x3c>)
 8008988:	f853 2b04 	ldr.w	r2, [r3], #4
 800898c:	9105      	str	r1, [sp, #20]
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	a902      	add	r1, sp, #8
 8008994:	f000 f994 	bl	8008cc0 <_svfiprintf_r>
 8008998:	9b02      	ldr	r3, [sp, #8]
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	b01c      	add	sp, #112	@ 0x70
 80089a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089a4:	b003      	add	sp, #12
 80089a6:	4770      	bx	lr
 80089a8:	200000fc 	.word	0x200000fc
 80089ac:	ffff0208 	.word	0xffff0208

080089b0 <memset>:
 80089b0:	4402      	add	r2, r0
 80089b2:	4603      	mov	r3, r0
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d100      	bne.n	80089ba <memset+0xa>
 80089b8:	4770      	bx	lr
 80089ba:	f803 1b01 	strb.w	r1, [r3], #1
 80089be:	e7f9      	b.n	80089b4 <memset+0x4>

080089c0 <__errno>:
 80089c0:	4b01      	ldr	r3, [pc, #4]	@ (80089c8 <__errno+0x8>)
 80089c2:	6818      	ldr	r0, [r3, #0]
 80089c4:	4770      	bx	lr
 80089c6:	bf00      	nop
 80089c8:	200000fc 	.word	0x200000fc

080089cc <__libc_init_array>:
 80089cc:	b570      	push	{r4, r5, r6, lr}
 80089ce:	4d0d      	ldr	r5, [pc, #52]	@ (8008a04 <__libc_init_array+0x38>)
 80089d0:	4c0d      	ldr	r4, [pc, #52]	@ (8008a08 <__libc_init_array+0x3c>)
 80089d2:	1b64      	subs	r4, r4, r5
 80089d4:	10a4      	asrs	r4, r4, #2
 80089d6:	2600      	movs	r6, #0
 80089d8:	42a6      	cmp	r6, r4
 80089da:	d109      	bne.n	80089f0 <__libc_init_array+0x24>
 80089dc:	4d0b      	ldr	r5, [pc, #44]	@ (8008a0c <__libc_init_array+0x40>)
 80089de:	4c0c      	ldr	r4, [pc, #48]	@ (8008a10 <__libc_init_array+0x44>)
 80089e0:	f000 fc66 	bl	80092b0 <_init>
 80089e4:	1b64      	subs	r4, r4, r5
 80089e6:	10a4      	asrs	r4, r4, #2
 80089e8:	2600      	movs	r6, #0
 80089ea:	42a6      	cmp	r6, r4
 80089ec:	d105      	bne.n	80089fa <__libc_init_array+0x2e>
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80089f4:	4798      	blx	r3
 80089f6:	3601      	adds	r6, #1
 80089f8:	e7ee      	b.n	80089d8 <__libc_init_array+0xc>
 80089fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80089fe:	4798      	blx	r3
 8008a00:	3601      	adds	r6, #1
 8008a02:	e7f2      	b.n	80089ea <__libc_init_array+0x1e>
 8008a04:	08009374 	.word	0x08009374
 8008a08:	08009374 	.word	0x08009374
 8008a0c:	08009374 	.word	0x08009374
 8008a10:	08009378 	.word	0x08009378

08008a14 <__retarget_lock_acquire_recursive>:
 8008a14:	4770      	bx	lr

08008a16 <__retarget_lock_release_recursive>:
 8008a16:	4770      	bx	lr

08008a18 <_free_r>:
 8008a18:	b538      	push	{r3, r4, r5, lr}
 8008a1a:	4605      	mov	r5, r0
 8008a1c:	2900      	cmp	r1, #0
 8008a1e:	d041      	beq.n	8008aa4 <_free_r+0x8c>
 8008a20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a24:	1f0c      	subs	r4, r1, #4
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	bfb8      	it	lt
 8008a2a:	18e4      	addlt	r4, r4, r3
 8008a2c:	f000 f8e0 	bl	8008bf0 <__malloc_lock>
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <_free_r+0x90>)
 8008a32:	6813      	ldr	r3, [r2, #0]
 8008a34:	b933      	cbnz	r3, 8008a44 <_free_r+0x2c>
 8008a36:	6063      	str	r3, [r4, #4]
 8008a38:	6014      	str	r4, [r2, #0]
 8008a3a:	4628      	mov	r0, r5
 8008a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a40:	f000 b8dc 	b.w	8008bfc <__malloc_unlock>
 8008a44:	42a3      	cmp	r3, r4
 8008a46:	d908      	bls.n	8008a5a <_free_r+0x42>
 8008a48:	6820      	ldr	r0, [r4, #0]
 8008a4a:	1821      	adds	r1, r4, r0
 8008a4c:	428b      	cmp	r3, r1
 8008a4e:	bf01      	itttt	eq
 8008a50:	6819      	ldreq	r1, [r3, #0]
 8008a52:	685b      	ldreq	r3, [r3, #4]
 8008a54:	1809      	addeq	r1, r1, r0
 8008a56:	6021      	streq	r1, [r4, #0]
 8008a58:	e7ed      	b.n	8008a36 <_free_r+0x1e>
 8008a5a:	461a      	mov	r2, r3
 8008a5c:	685b      	ldr	r3, [r3, #4]
 8008a5e:	b10b      	cbz	r3, 8008a64 <_free_r+0x4c>
 8008a60:	42a3      	cmp	r3, r4
 8008a62:	d9fa      	bls.n	8008a5a <_free_r+0x42>
 8008a64:	6811      	ldr	r1, [r2, #0]
 8008a66:	1850      	adds	r0, r2, r1
 8008a68:	42a0      	cmp	r0, r4
 8008a6a:	d10b      	bne.n	8008a84 <_free_r+0x6c>
 8008a6c:	6820      	ldr	r0, [r4, #0]
 8008a6e:	4401      	add	r1, r0
 8008a70:	1850      	adds	r0, r2, r1
 8008a72:	4283      	cmp	r3, r0
 8008a74:	6011      	str	r1, [r2, #0]
 8008a76:	d1e0      	bne.n	8008a3a <_free_r+0x22>
 8008a78:	6818      	ldr	r0, [r3, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	6053      	str	r3, [r2, #4]
 8008a7e:	4408      	add	r0, r1
 8008a80:	6010      	str	r0, [r2, #0]
 8008a82:	e7da      	b.n	8008a3a <_free_r+0x22>
 8008a84:	d902      	bls.n	8008a8c <_free_r+0x74>
 8008a86:	230c      	movs	r3, #12
 8008a88:	602b      	str	r3, [r5, #0]
 8008a8a:	e7d6      	b.n	8008a3a <_free_r+0x22>
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	1821      	adds	r1, r4, r0
 8008a90:	428b      	cmp	r3, r1
 8008a92:	bf04      	itt	eq
 8008a94:	6819      	ldreq	r1, [r3, #0]
 8008a96:	685b      	ldreq	r3, [r3, #4]
 8008a98:	6063      	str	r3, [r4, #4]
 8008a9a:	bf04      	itt	eq
 8008a9c:	1809      	addeq	r1, r1, r0
 8008a9e:	6021      	streq	r1, [r4, #0]
 8008aa0:	6054      	str	r4, [r2, #4]
 8008aa2:	e7ca      	b.n	8008a3a <_free_r+0x22>
 8008aa4:	bd38      	pop	{r3, r4, r5, pc}
 8008aa6:	bf00      	nop
 8008aa8:	20001fc4 	.word	0x20001fc4

08008aac <sbrk_aligned>:
 8008aac:	b570      	push	{r4, r5, r6, lr}
 8008aae:	4e0f      	ldr	r6, [pc, #60]	@ (8008aec <sbrk_aligned+0x40>)
 8008ab0:	460c      	mov	r4, r1
 8008ab2:	6831      	ldr	r1, [r6, #0]
 8008ab4:	4605      	mov	r5, r0
 8008ab6:	b911      	cbnz	r1, 8008abe <sbrk_aligned+0x12>
 8008ab8:	f000 fba6 	bl	8009208 <_sbrk_r>
 8008abc:	6030      	str	r0, [r6, #0]
 8008abe:	4621      	mov	r1, r4
 8008ac0:	4628      	mov	r0, r5
 8008ac2:	f000 fba1 	bl	8009208 <_sbrk_r>
 8008ac6:	1c43      	adds	r3, r0, #1
 8008ac8:	d103      	bne.n	8008ad2 <sbrk_aligned+0x26>
 8008aca:	f04f 34ff 	mov.w	r4, #4294967295
 8008ace:	4620      	mov	r0, r4
 8008ad0:	bd70      	pop	{r4, r5, r6, pc}
 8008ad2:	1cc4      	adds	r4, r0, #3
 8008ad4:	f024 0403 	bic.w	r4, r4, #3
 8008ad8:	42a0      	cmp	r0, r4
 8008ada:	d0f8      	beq.n	8008ace <sbrk_aligned+0x22>
 8008adc:	1a21      	subs	r1, r4, r0
 8008ade:	4628      	mov	r0, r5
 8008ae0:	f000 fb92 	bl	8009208 <_sbrk_r>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d1f2      	bne.n	8008ace <sbrk_aligned+0x22>
 8008ae8:	e7ef      	b.n	8008aca <sbrk_aligned+0x1e>
 8008aea:	bf00      	nop
 8008aec:	20001fc0 	.word	0x20001fc0

08008af0 <_malloc_r>:
 8008af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af4:	1ccd      	adds	r5, r1, #3
 8008af6:	f025 0503 	bic.w	r5, r5, #3
 8008afa:	3508      	adds	r5, #8
 8008afc:	2d0c      	cmp	r5, #12
 8008afe:	bf38      	it	cc
 8008b00:	250c      	movcc	r5, #12
 8008b02:	2d00      	cmp	r5, #0
 8008b04:	4606      	mov	r6, r0
 8008b06:	db01      	blt.n	8008b0c <_malloc_r+0x1c>
 8008b08:	42a9      	cmp	r1, r5
 8008b0a:	d904      	bls.n	8008b16 <_malloc_r+0x26>
 8008b0c:	230c      	movs	r3, #12
 8008b0e:	6033      	str	r3, [r6, #0]
 8008b10:	2000      	movs	r0, #0
 8008b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008bec <_malloc_r+0xfc>
 8008b1a:	f000 f869 	bl	8008bf0 <__malloc_lock>
 8008b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b22:	461c      	mov	r4, r3
 8008b24:	bb44      	cbnz	r4, 8008b78 <_malloc_r+0x88>
 8008b26:	4629      	mov	r1, r5
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ffbf 	bl	8008aac <sbrk_aligned>
 8008b2e:	1c43      	adds	r3, r0, #1
 8008b30:	4604      	mov	r4, r0
 8008b32:	d158      	bne.n	8008be6 <_malloc_r+0xf6>
 8008b34:	f8d8 4000 	ldr.w	r4, [r8]
 8008b38:	4627      	mov	r7, r4
 8008b3a:	2f00      	cmp	r7, #0
 8008b3c:	d143      	bne.n	8008bc6 <_malloc_r+0xd6>
 8008b3e:	2c00      	cmp	r4, #0
 8008b40:	d04b      	beq.n	8008bda <_malloc_r+0xea>
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	4639      	mov	r1, r7
 8008b46:	4630      	mov	r0, r6
 8008b48:	eb04 0903 	add.w	r9, r4, r3
 8008b4c:	f000 fb5c 	bl	8009208 <_sbrk_r>
 8008b50:	4581      	cmp	r9, r0
 8008b52:	d142      	bne.n	8008bda <_malloc_r+0xea>
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	1a6d      	subs	r5, r5, r1
 8008b58:	4629      	mov	r1, r5
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	f7ff ffa6 	bl	8008aac <sbrk_aligned>
 8008b60:	3001      	adds	r0, #1
 8008b62:	d03a      	beq.n	8008bda <_malloc_r+0xea>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	442b      	add	r3, r5
 8008b68:	6023      	str	r3, [r4, #0]
 8008b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	bb62      	cbnz	r2, 8008bcc <_malloc_r+0xdc>
 8008b72:	f8c8 7000 	str.w	r7, [r8]
 8008b76:	e00f      	b.n	8008b98 <_malloc_r+0xa8>
 8008b78:	6822      	ldr	r2, [r4, #0]
 8008b7a:	1b52      	subs	r2, r2, r5
 8008b7c:	d420      	bmi.n	8008bc0 <_malloc_r+0xd0>
 8008b7e:	2a0b      	cmp	r2, #11
 8008b80:	d917      	bls.n	8008bb2 <_malloc_r+0xc2>
 8008b82:	1961      	adds	r1, r4, r5
 8008b84:	42a3      	cmp	r3, r4
 8008b86:	6025      	str	r5, [r4, #0]
 8008b88:	bf18      	it	ne
 8008b8a:	6059      	strne	r1, [r3, #4]
 8008b8c:	6863      	ldr	r3, [r4, #4]
 8008b8e:	bf08      	it	eq
 8008b90:	f8c8 1000 	streq.w	r1, [r8]
 8008b94:	5162      	str	r2, [r4, r5]
 8008b96:	604b      	str	r3, [r1, #4]
 8008b98:	4630      	mov	r0, r6
 8008b9a:	f000 f82f 	bl	8008bfc <__malloc_unlock>
 8008b9e:	f104 000b 	add.w	r0, r4, #11
 8008ba2:	1d23      	adds	r3, r4, #4
 8008ba4:	f020 0007 	bic.w	r0, r0, #7
 8008ba8:	1ac2      	subs	r2, r0, r3
 8008baa:	bf1c      	itt	ne
 8008bac:	1a1b      	subne	r3, r3, r0
 8008bae:	50a3      	strne	r3, [r4, r2]
 8008bb0:	e7af      	b.n	8008b12 <_malloc_r+0x22>
 8008bb2:	6862      	ldr	r2, [r4, #4]
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	bf0c      	ite	eq
 8008bb8:	f8c8 2000 	streq.w	r2, [r8]
 8008bbc:	605a      	strne	r2, [r3, #4]
 8008bbe:	e7eb      	b.n	8008b98 <_malloc_r+0xa8>
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	6864      	ldr	r4, [r4, #4]
 8008bc4:	e7ae      	b.n	8008b24 <_malloc_r+0x34>
 8008bc6:	463c      	mov	r4, r7
 8008bc8:	687f      	ldr	r7, [r7, #4]
 8008bca:	e7b6      	b.n	8008b3a <_malloc_r+0x4a>
 8008bcc:	461a      	mov	r2, r3
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	42a3      	cmp	r3, r4
 8008bd2:	d1fb      	bne.n	8008bcc <_malloc_r+0xdc>
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	6053      	str	r3, [r2, #4]
 8008bd8:	e7de      	b.n	8008b98 <_malloc_r+0xa8>
 8008bda:	230c      	movs	r3, #12
 8008bdc:	6033      	str	r3, [r6, #0]
 8008bde:	4630      	mov	r0, r6
 8008be0:	f000 f80c 	bl	8008bfc <__malloc_unlock>
 8008be4:	e794      	b.n	8008b10 <_malloc_r+0x20>
 8008be6:	6005      	str	r5, [r0, #0]
 8008be8:	e7d6      	b.n	8008b98 <_malloc_r+0xa8>
 8008bea:	bf00      	nop
 8008bec:	20001fc4 	.word	0x20001fc4

08008bf0 <__malloc_lock>:
 8008bf0:	4801      	ldr	r0, [pc, #4]	@ (8008bf8 <__malloc_lock+0x8>)
 8008bf2:	f7ff bf0f 	b.w	8008a14 <__retarget_lock_acquire_recursive>
 8008bf6:	bf00      	nop
 8008bf8:	20001fbc 	.word	0x20001fbc

08008bfc <__malloc_unlock>:
 8008bfc:	4801      	ldr	r0, [pc, #4]	@ (8008c04 <__malloc_unlock+0x8>)
 8008bfe:	f7ff bf0a 	b.w	8008a16 <__retarget_lock_release_recursive>
 8008c02:	bf00      	nop
 8008c04:	20001fbc 	.word	0x20001fbc

08008c08 <__ssputs_r>:
 8008c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c0c:	688e      	ldr	r6, [r1, #8]
 8008c0e:	461f      	mov	r7, r3
 8008c10:	42be      	cmp	r6, r7
 8008c12:	680b      	ldr	r3, [r1, #0]
 8008c14:	4682      	mov	sl, r0
 8008c16:	460c      	mov	r4, r1
 8008c18:	4690      	mov	r8, r2
 8008c1a:	d82d      	bhi.n	8008c78 <__ssputs_r+0x70>
 8008c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c24:	d026      	beq.n	8008c74 <__ssputs_r+0x6c>
 8008c26:	6965      	ldr	r5, [r4, #20]
 8008c28:	6909      	ldr	r1, [r1, #16]
 8008c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c2e:	eba3 0901 	sub.w	r9, r3, r1
 8008c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c36:	1c7b      	adds	r3, r7, #1
 8008c38:	444b      	add	r3, r9
 8008c3a:	106d      	asrs	r5, r5, #1
 8008c3c:	429d      	cmp	r5, r3
 8008c3e:	bf38      	it	cc
 8008c40:	461d      	movcc	r5, r3
 8008c42:	0553      	lsls	r3, r2, #21
 8008c44:	d527      	bpl.n	8008c96 <__ssputs_r+0x8e>
 8008c46:	4629      	mov	r1, r5
 8008c48:	f7ff ff52 	bl	8008af0 <_malloc_r>
 8008c4c:	4606      	mov	r6, r0
 8008c4e:	b360      	cbz	r0, 8008caa <__ssputs_r+0xa2>
 8008c50:	6921      	ldr	r1, [r4, #16]
 8008c52:	464a      	mov	r2, r9
 8008c54:	f000 fae8 	bl	8009228 <memcpy>
 8008c58:	89a3      	ldrh	r3, [r4, #12]
 8008c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c62:	81a3      	strh	r3, [r4, #12]
 8008c64:	6126      	str	r6, [r4, #16]
 8008c66:	6165      	str	r5, [r4, #20]
 8008c68:	444e      	add	r6, r9
 8008c6a:	eba5 0509 	sub.w	r5, r5, r9
 8008c6e:	6026      	str	r6, [r4, #0]
 8008c70:	60a5      	str	r5, [r4, #8]
 8008c72:	463e      	mov	r6, r7
 8008c74:	42be      	cmp	r6, r7
 8008c76:	d900      	bls.n	8008c7a <__ssputs_r+0x72>
 8008c78:	463e      	mov	r6, r7
 8008c7a:	6820      	ldr	r0, [r4, #0]
 8008c7c:	4632      	mov	r2, r6
 8008c7e:	4641      	mov	r1, r8
 8008c80:	f000 faa8 	bl	80091d4 <memmove>
 8008c84:	68a3      	ldr	r3, [r4, #8]
 8008c86:	1b9b      	subs	r3, r3, r6
 8008c88:	60a3      	str	r3, [r4, #8]
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	4433      	add	r3, r6
 8008c8e:	6023      	str	r3, [r4, #0]
 8008c90:	2000      	movs	r0, #0
 8008c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c96:	462a      	mov	r2, r5
 8008c98:	f000 fad4 	bl	8009244 <_realloc_r>
 8008c9c:	4606      	mov	r6, r0
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d1e0      	bne.n	8008c64 <__ssputs_r+0x5c>
 8008ca2:	6921      	ldr	r1, [r4, #16]
 8008ca4:	4650      	mov	r0, sl
 8008ca6:	f7ff feb7 	bl	8008a18 <_free_r>
 8008caa:	230c      	movs	r3, #12
 8008cac:	f8ca 3000 	str.w	r3, [sl]
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cb6:	81a3      	strh	r3, [r4, #12]
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	e7e9      	b.n	8008c92 <__ssputs_r+0x8a>
	...

08008cc0 <_svfiprintf_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	4698      	mov	r8, r3
 8008cc6:	898b      	ldrh	r3, [r1, #12]
 8008cc8:	061b      	lsls	r3, r3, #24
 8008cca:	b09d      	sub	sp, #116	@ 0x74
 8008ccc:	4607      	mov	r7, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	4614      	mov	r4, r2
 8008cd2:	d510      	bpl.n	8008cf6 <_svfiprintf_r+0x36>
 8008cd4:	690b      	ldr	r3, [r1, #16]
 8008cd6:	b973      	cbnz	r3, 8008cf6 <_svfiprintf_r+0x36>
 8008cd8:	2140      	movs	r1, #64	@ 0x40
 8008cda:	f7ff ff09 	bl	8008af0 <_malloc_r>
 8008cde:	6028      	str	r0, [r5, #0]
 8008ce0:	6128      	str	r0, [r5, #16]
 8008ce2:	b930      	cbnz	r0, 8008cf2 <_svfiprintf_r+0x32>
 8008ce4:	230c      	movs	r3, #12
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cec:	b01d      	add	sp, #116	@ 0x74
 8008cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cf2:	2340      	movs	r3, #64	@ 0x40
 8008cf4:	616b      	str	r3, [r5, #20]
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cfa:	2320      	movs	r3, #32
 8008cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d00:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d04:	2330      	movs	r3, #48	@ 0x30
 8008d06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008ea4 <_svfiprintf_r+0x1e4>
 8008d0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d0e:	f04f 0901 	mov.w	r9, #1
 8008d12:	4623      	mov	r3, r4
 8008d14:	469a      	mov	sl, r3
 8008d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d1a:	b10a      	cbz	r2, 8008d20 <_svfiprintf_r+0x60>
 8008d1c:	2a25      	cmp	r2, #37	@ 0x25
 8008d1e:	d1f9      	bne.n	8008d14 <_svfiprintf_r+0x54>
 8008d20:	ebba 0b04 	subs.w	fp, sl, r4
 8008d24:	d00b      	beq.n	8008d3e <_svfiprintf_r+0x7e>
 8008d26:	465b      	mov	r3, fp
 8008d28:	4622      	mov	r2, r4
 8008d2a:	4629      	mov	r1, r5
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	f7ff ff6b 	bl	8008c08 <__ssputs_r>
 8008d32:	3001      	adds	r0, #1
 8008d34:	f000 80a7 	beq.w	8008e86 <_svfiprintf_r+0x1c6>
 8008d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d3a:	445a      	add	r2, fp
 8008d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 809f 	beq.w	8008e86 <_svfiprintf_r+0x1c6>
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d52:	f10a 0a01 	add.w	sl, sl, #1
 8008d56:	9304      	str	r3, [sp, #16]
 8008d58:	9307      	str	r3, [sp, #28]
 8008d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d60:	4654      	mov	r4, sl
 8008d62:	2205      	movs	r2, #5
 8008d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d68:	484e      	ldr	r0, [pc, #312]	@ (8008ea4 <_svfiprintf_r+0x1e4>)
 8008d6a:	f7f7 fa31 	bl	80001d0 <memchr>
 8008d6e:	9a04      	ldr	r2, [sp, #16]
 8008d70:	b9d8      	cbnz	r0, 8008daa <_svfiprintf_r+0xea>
 8008d72:	06d0      	lsls	r0, r2, #27
 8008d74:	bf44      	itt	mi
 8008d76:	2320      	movmi	r3, #32
 8008d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d7c:	0711      	lsls	r1, r2, #28
 8008d7e:	bf44      	itt	mi
 8008d80:	232b      	movmi	r3, #43	@ 0x2b
 8008d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d86:	f89a 3000 	ldrb.w	r3, [sl]
 8008d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d8c:	d015      	beq.n	8008dba <_svfiprintf_r+0xfa>
 8008d8e:	9a07      	ldr	r2, [sp, #28]
 8008d90:	4654      	mov	r4, sl
 8008d92:	2000      	movs	r0, #0
 8008d94:	f04f 0c0a 	mov.w	ip, #10
 8008d98:	4621      	mov	r1, r4
 8008d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d9e:	3b30      	subs	r3, #48	@ 0x30
 8008da0:	2b09      	cmp	r3, #9
 8008da2:	d94b      	bls.n	8008e3c <_svfiprintf_r+0x17c>
 8008da4:	b1b0      	cbz	r0, 8008dd4 <_svfiprintf_r+0x114>
 8008da6:	9207      	str	r2, [sp, #28]
 8008da8:	e014      	b.n	8008dd4 <_svfiprintf_r+0x114>
 8008daa:	eba0 0308 	sub.w	r3, r0, r8
 8008dae:	fa09 f303 	lsl.w	r3, r9, r3
 8008db2:	4313      	orrs	r3, r2
 8008db4:	9304      	str	r3, [sp, #16]
 8008db6:	46a2      	mov	sl, r4
 8008db8:	e7d2      	b.n	8008d60 <_svfiprintf_r+0xa0>
 8008dba:	9b03      	ldr	r3, [sp, #12]
 8008dbc:	1d19      	adds	r1, r3, #4
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	9103      	str	r1, [sp, #12]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bfbb      	ittet	lt
 8008dc6:	425b      	neglt	r3, r3
 8008dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dcc:	9307      	strge	r3, [sp, #28]
 8008dce:	9307      	strlt	r3, [sp, #28]
 8008dd0:	bfb8      	it	lt
 8008dd2:	9204      	strlt	r2, [sp, #16]
 8008dd4:	7823      	ldrb	r3, [r4, #0]
 8008dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8008dd8:	d10a      	bne.n	8008df0 <_svfiprintf_r+0x130>
 8008dda:	7863      	ldrb	r3, [r4, #1]
 8008ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dde:	d132      	bne.n	8008e46 <_svfiprintf_r+0x186>
 8008de0:	9b03      	ldr	r3, [sp, #12]
 8008de2:	1d1a      	adds	r2, r3, #4
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	9203      	str	r2, [sp, #12]
 8008de8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008dec:	3402      	adds	r4, #2
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008eb4 <_svfiprintf_r+0x1f4>
 8008df4:	7821      	ldrb	r1, [r4, #0]
 8008df6:	2203      	movs	r2, #3
 8008df8:	4650      	mov	r0, sl
 8008dfa:	f7f7 f9e9 	bl	80001d0 <memchr>
 8008dfe:	b138      	cbz	r0, 8008e10 <_svfiprintf_r+0x150>
 8008e00:	9b04      	ldr	r3, [sp, #16]
 8008e02:	eba0 000a 	sub.w	r0, r0, sl
 8008e06:	2240      	movs	r2, #64	@ 0x40
 8008e08:	4082      	lsls	r2, r0
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	3401      	adds	r4, #1
 8008e0e:	9304      	str	r3, [sp, #16]
 8008e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e14:	4824      	ldr	r0, [pc, #144]	@ (8008ea8 <_svfiprintf_r+0x1e8>)
 8008e16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e1a:	2206      	movs	r2, #6
 8008e1c:	f7f7 f9d8 	bl	80001d0 <memchr>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d036      	beq.n	8008e92 <_svfiprintf_r+0x1d2>
 8008e24:	4b21      	ldr	r3, [pc, #132]	@ (8008eac <_svfiprintf_r+0x1ec>)
 8008e26:	bb1b      	cbnz	r3, 8008e70 <_svfiprintf_r+0x1b0>
 8008e28:	9b03      	ldr	r3, [sp, #12]
 8008e2a:	3307      	adds	r3, #7
 8008e2c:	f023 0307 	bic.w	r3, r3, #7
 8008e30:	3308      	adds	r3, #8
 8008e32:	9303      	str	r3, [sp, #12]
 8008e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e36:	4433      	add	r3, r6
 8008e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e3a:	e76a      	b.n	8008d12 <_svfiprintf_r+0x52>
 8008e3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e40:	460c      	mov	r4, r1
 8008e42:	2001      	movs	r0, #1
 8008e44:	e7a8      	b.n	8008d98 <_svfiprintf_r+0xd8>
 8008e46:	2300      	movs	r3, #0
 8008e48:	3401      	adds	r4, #1
 8008e4a:	9305      	str	r3, [sp, #20]
 8008e4c:	4619      	mov	r1, r3
 8008e4e:	f04f 0c0a 	mov.w	ip, #10
 8008e52:	4620      	mov	r0, r4
 8008e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e58:	3a30      	subs	r2, #48	@ 0x30
 8008e5a:	2a09      	cmp	r2, #9
 8008e5c:	d903      	bls.n	8008e66 <_svfiprintf_r+0x1a6>
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d0c6      	beq.n	8008df0 <_svfiprintf_r+0x130>
 8008e62:	9105      	str	r1, [sp, #20]
 8008e64:	e7c4      	b.n	8008df0 <_svfiprintf_r+0x130>
 8008e66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e6a:	4604      	mov	r4, r0
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e7f0      	b.n	8008e52 <_svfiprintf_r+0x192>
 8008e70:	ab03      	add	r3, sp, #12
 8008e72:	9300      	str	r3, [sp, #0]
 8008e74:	462a      	mov	r2, r5
 8008e76:	4b0e      	ldr	r3, [pc, #56]	@ (8008eb0 <_svfiprintf_r+0x1f0>)
 8008e78:	a904      	add	r1, sp, #16
 8008e7a:	4638      	mov	r0, r7
 8008e7c:	f3af 8000 	nop.w
 8008e80:	1c42      	adds	r2, r0, #1
 8008e82:	4606      	mov	r6, r0
 8008e84:	d1d6      	bne.n	8008e34 <_svfiprintf_r+0x174>
 8008e86:	89ab      	ldrh	r3, [r5, #12]
 8008e88:	065b      	lsls	r3, r3, #25
 8008e8a:	f53f af2d 	bmi.w	8008ce8 <_svfiprintf_r+0x28>
 8008e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e90:	e72c      	b.n	8008cec <_svfiprintf_r+0x2c>
 8008e92:	ab03      	add	r3, sp, #12
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	462a      	mov	r2, r5
 8008e98:	4b05      	ldr	r3, [pc, #20]	@ (8008eb0 <_svfiprintf_r+0x1f0>)
 8008e9a:	a904      	add	r1, sp, #16
 8008e9c:	4638      	mov	r0, r7
 8008e9e:	f000 f879 	bl	8008f94 <_printf_i>
 8008ea2:	e7ed      	b.n	8008e80 <_svfiprintf_r+0x1c0>
 8008ea4:	08009338 	.word	0x08009338
 8008ea8:	08009342 	.word	0x08009342
 8008eac:	00000000 	.word	0x00000000
 8008eb0:	08008c09 	.word	0x08008c09
 8008eb4:	0800933e 	.word	0x0800933e

08008eb8 <_printf_common>:
 8008eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ebc:	4616      	mov	r6, r2
 8008ebe:	4698      	mov	r8, r3
 8008ec0:	688a      	ldr	r2, [r1, #8]
 8008ec2:	690b      	ldr	r3, [r1, #16]
 8008ec4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	bfb8      	it	lt
 8008ecc:	4613      	movlt	r3, r2
 8008ece:	6033      	str	r3, [r6, #0]
 8008ed0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008ed4:	4607      	mov	r7, r0
 8008ed6:	460c      	mov	r4, r1
 8008ed8:	b10a      	cbz	r2, 8008ede <_printf_common+0x26>
 8008eda:	3301      	adds	r3, #1
 8008edc:	6033      	str	r3, [r6, #0]
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	0699      	lsls	r1, r3, #26
 8008ee2:	bf42      	ittt	mi
 8008ee4:	6833      	ldrmi	r3, [r6, #0]
 8008ee6:	3302      	addmi	r3, #2
 8008ee8:	6033      	strmi	r3, [r6, #0]
 8008eea:	6825      	ldr	r5, [r4, #0]
 8008eec:	f015 0506 	ands.w	r5, r5, #6
 8008ef0:	d106      	bne.n	8008f00 <_printf_common+0x48>
 8008ef2:	f104 0a19 	add.w	sl, r4, #25
 8008ef6:	68e3      	ldr	r3, [r4, #12]
 8008ef8:	6832      	ldr	r2, [r6, #0]
 8008efa:	1a9b      	subs	r3, r3, r2
 8008efc:	42ab      	cmp	r3, r5
 8008efe:	dc26      	bgt.n	8008f4e <_printf_common+0x96>
 8008f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f04:	6822      	ldr	r2, [r4, #0]
 8008f06:	3b00      	subs	r3, #0
 8008f08:	bf18      	it	ne
 8008f0a:	2301      	movne	r3, #1
 8008f0c:	0692      	lsls	r2, r2, #26
 8008f0e:	d42b      	bmi.n	8008f68 <_printf_common+0xb0>
 8008f10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f14:	4641      	mov	r1, r8
 8008f16:	4638      	mov	r0, r7
 8008f18:	47c8      	blx	r9
 8008f1a:	3001      	adds	r0, #1
 8008f1c:	d01e      	beq.n	8008f5c <_printf_common+0xa4>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	6922      	ldr	r2, [r4, #16]
 8008f22:	f003 0306 	and.w	r3, r3, #6
 8008f26:	2b04      	cmp	r3, #4
 8008f28:	bf02      	ittt	eq
 8008f2a:	68e5      	ldreq	r5, [r4, #12]
 8008f2c:	6833      	ldreq	r3, [r6, #0]
 8008f2e:	1aed      	subeq	r5, r5, r3
 8008f30:	68a3      	ldr	r3, [r4, #8]
 8008f32:	bf0c      	ite	eq
 8008f34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f38:	2500      	movne	r5, #0
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bfc4      	itt	gt
 8008f3e:	1a9b      	subgt	r3, r3, r2
 8008f40:	18ed      	addgt	r5, r5, r3
 8008f42:	2600      	movs	r6, #0
 8008f44:	341a      	adds	r4, #26
 8008f46:	42b5      	cmp	r5, r6
 8008f48:	d11a      	bne.n	8008f80 <_printf_common+0xc8>
 8008f4a:	2000      	movs	r0, #0
 8008f4c:	e008      	b.n	8008f60 <_printf_common+0xa8>
 8008f4e:	2301      	movs	r3, #1
 8008f50:	4652      	mov	r2, sl
 8008f52:	4641      	mov	r1, r8
 8008f54:	4638      	mov	r0, r7
 8008f56:	47c8      	blx	r9
 8008f58:	3001      	adds	r0, #1
 8008f5a:	d103      	bne.n	8008f64 <_printf_common+0xac>
 8008f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8008f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f64:	3501      	adds	r5, #1
 8008f66:	e7c6      	b.n	8008ef6 <_printf_common+0x3e>
 8008f68:	18e1      	adds	r1, r4, r3
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	2030      	movs	r0, #48	@ 0x30
 8008f6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008f72:	4422      	add	r2, r4
 8008f74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008f78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008f7c:	3302      	adds	r3, #2
 8008f7e:	e7c7      	b.n	8008f10 <_printf_common+0x58>
 8008f80:	2301      	movs	r3, #1
 8008f82:	4622      	mov	r2, r4
 8008f84:	4641      	mov	r1, r8
 8008f86:	4638      	mov	r0, r7
 8008f88:	47c8      	blx	r9
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	d0e6      	beq.n	8008f5c <_printf_common+0xa4>
 8008f8e:	3601      	adds	r6, #1
 8008f90:	e7d9      	b.n	8008f46 <_printf_common+0x8e>
	...

08008f94 <_printf_i>:
 8008f94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f98:	7e0f      	ldrb	r7, [r1, #24]
 8008f9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f9c:	2f78      	cmp	r7, #120	@ 0x78
 8008f9e:	4691      	mov	r9, r2
 8008fa0:	4680      	mov	r8, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	469a      	mov	sl, r3
 8008fa6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008faa:	d807      	bhi.n	8008fbc <_printf_i+0x28>
 8008fac:	2f62      	cmp	r7, #98	@ 0x62
 8008fae:	d80a      	bhi.n	8008fc6 <_printf_i+0x32>
 8008fb0:	2f00      	cmp	r7, #0
 8008fb2:	f000 80d2 	beq.w	800915a <_printf_i+0x1c6>
 8008fb6:	2f58      	cmp	r7, #88	@ 0x58
 8008fb8:	f000 80b9 	beq.w	800912e <_printf_i+0x19a>
 8008fbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008fc4:	e03a      	b.n	800903c <_printf_i+0xa8>
 8008fc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008fca:	2b15      	cmp	r3, #21
 8008fcc:	d8f6      	bhi.n	8008fbc <_printf_i+0x28>
 8008fce:	a101      	add	r1, pc, #4	@ (adr r1, 8008fd4 <_printf_i+0x40>)
 8008fd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008fd4:	0800902d 	.word	0x0800902d
 8008fd8:	08009041 	.word	0x08009041
 8008fdc:	08008fbd 	.word	0x08008fbd
 8008fe0:	08008fbd 	.word	0x08008fbd
 8008fe4:	08008fbd 	.word	0x08008fbd
 8008fe8:	08008fbd 	.word	0x08008fbd
 8008fec:	08009041 	.word	0x08009041
 8008ff0:	08008fbd 	.word	0x08008fbd
 8008ff4:	08008fbd 	.word	0x08008fbd
 8008ff8:	08008fbd 	.word	0x08008fbd
 8008ffc:	08008fbd 	.word	0x08008fbd
 8009000:	08009141 	.word	0x08009141
 8009004:	0800906b 	.word	0x0800906b
 8009008:	080090fb 	.word	0x080090fb
 800900c:	08008fbd 	.word	0x08008fbd
 8009010:	08008fbd 	.word	0x08008fbd
 8009014:	08009163 	.word	0x08009163
 8009018:	08008fbd 	.word	0x08008fbd
 800901c:	0800906b 	.word	0x0800906b
 8009020:	08008fbd 	.word	0x08008fbd
 8009024:	08008fbd 	.word	0x08008fbd
 8009028:	08009103 	.word	0x08009103
 800902c:	6833      	ldr	r3, [r6, #0]
 800902e:	1d1a      	adds	r2, r3, #4
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	6032      	str	r2, [r6, #0]
 8009034:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009038:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800903c:	2301      	movs	r3, #1
 800903e:	e09d      	b.n	800917c <_printf_i+0x1e8>
 8009040:	6833      	ldr	r3, [r6, #0]
 8009042:	6820      	ldr	r0, [r4, #0]
 8009044:	1d19      	adds	r1, r3, #4
 8009046:	6031      	str	r1, [r6, #0]
 8009048:	0606      	lsls	r6, r0, #24
 800904a:	d501      	bpl.n	8009050 <_printf_i+0xbc>
 800904c:	681d      	ldr	r5, [r3, #0]
 800904e:	e003      	b.n	8009058 <_printf_i+0xc4>
 8009050:	0645      	lsls	r5, r0, #25
 8009052:	d5fb      	bpl.n	800904c <_printf_i+0xb8>
 8009054:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009058:	2d00      	cmp	r5, #0
 800905a:	da03      	bge.n	8009064 <_printf_i+0xd0>
 800905c:	232d      	movs	r3, #45	@ 0x2d
 800905e:	426d      	negs	r5, r5
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009064:	4859      	ldr	r0, [pc, #356]	@ (80091cc <_printf_i+0x238>)
 8009066:	230a      	movs	r3, #10
 8009068:	e011      	b.n	800908e <_printf_i+0xfa>
 800906a:	6821      	ldr	r1, [r4, #0]
 800906c:	6833      	ldr	r3, [r6, #0]
 800906e:	0608      	lsls	r0, r1, #24
 8009070:	f853 5b04 	ldr.w	r5, [r3], #4
 8009074:	d402      	bmi.n	800907c <_printf_i+0xe8>
 8009076:	0649      	lsls	r1, r1, #25
 8009078:	bf48      	it	mi
 800907a:	b2ad      	uxthmi	r5, r5
 800907c:	2f6f      	cmp	r7, #111	@ 0x6f
 800907e:	4853      	ldr	r0, [pc, #332]	@ (80091cc <_printf_i+0x238>)
 8009080:	6033      	str	r3, [r6, #0]
 8009082:	bf14      	ite	ne
 8009084:	230a      	movne	r3, #10
 8009086:	2308      	moveq	r3, #8
 8009088:	2100      	movs	r1, #0
 800908a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800908e:	6866      	ldr	r6, [r4, #4]
 8009090:	60a6      	str	r6, [r4, #8]
 8009092:	2e00      	cmp	r6, #0
 8009094:	bfa2      	ittt	ge
 8009096:	6821      	ldrge	r1, [r4, #0]
 8009098:	f021 0104 	bicge.w	r1, r1, #4
 800909c:	6021      	strge	r1, [r4, #0]
 800909e:	b90d      	cbnz	r5, 80090a4 <_printf_i+0x110>
 80090a0:	2e00      	cmp	r6, #0
 80090a2:	d04b      	beq.n	800913c <_printf_i+0x1a8>
 80090a4:	4616      	mov	r6, r2
 80090a6:	fbb5 f1f3 	udiv	r1, r5, r3
 80090aa:	fb03 5711 	mls	r7, r3, r1, r5
 80090ae:	5dc7      	ldrb	r7, [r0, r7]
 80090b0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090b4:	462f      	mov	r7, r5
 80090b6:	42bb      	cmp	r3, r7
 80090b8:	460d      	mov	r5, r1
 80090ba:	d9f4      	bls.n	80090a6 <_printf_i+0x112>
 80090bc:	2b08      	cmp	r3, #8
 80090be:	d10b      	bne.n	80090d8 <_printf_i+0x144>
 80090c0:	6823      	ldr	r3, [r4, #0]
 80090c2:	07df      	lsls	r7, r3, #31
 80090c4:	d508      	bpl.n	80090d8 <_printf_i+0x144>
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4299      	cmp	r1, r3
 80090cc:	bfde      	ittt	le
 80090ce:	2330      	movle	r3, #48	@ 0x30
 80090d0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80090d4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80090d8:	1b92      	subs	r2, r2, r6
 80090da:	6122      	str	r2, [r4, #16]
 80090dc:	f8cd a000 	str.w	sl, [sp]
 80090e0:	464b      	mov	r3, r9
 80090e2:	aa03      	add	r2, sp, #12
 80090e4:	4621      	mov	r1, r4
 80090e6:	4640      	mov	r0, r8
 80090e8:	f7ff fee6 	bl	8008eb8 <_printf_common>
 80090ec:	3001      	adds	r0, #1
 80090ee:	d14a      	bne.n	8009186 <_printf_i+0x1f2>
 80090f0:	f04f 30ff 	mov.w	r0, #4294967295
 80090f4:	b004      	add	sp, #16
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	6823      	ldr	r3, [r4, #0]
 80090fc:	f043 0320 	orr.w	r3, r3, #32
 8009100:	6023      	str	r3, [r4, #0]
 8009102:	4833      	ldr	r0, [pc, #204]	@ (80091d0 <_printf_i+0x23c>)
 8009104:	2778      	movs	r7, #120	@ 0x78
 8009106:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	6831      	ldr	r1, [r6, #0]
 800910e:	061f      	lsls	r7, r3, #24
 8009110:	f851 5b04 	ldr.w	r5, [r1], #4
 8009114:	d402      	bmi.n	800911c <_printf_i+0x188>
 8009116:	065f      	lsls	r7, r3, #25
 8009118:	bf48      	it	mi
 800911a:	b2ad      	uxthmi	r5, r5
 800911c:	6031      	str	r1, [r6, #0]
 800911e:	07d9      	lsls	r1, r3, #31
 8009120:	bf44      	itt	mi
 8009122:	f043 0320 	orrmi.w	r3, r3, #32
 8009126:	6023      	strmi	r3, [r4, #0]
 8009128:	b11d      	cbz	r5, 8009132 <_printf_i+0x19e>
 800912a:	2310      	movs	r3, #16
 800912c:	e7ac      	b.n	8009088 <_printf_i+0xf4>
 800912e:	4827      	ldr	r0, [pc, #156]	@ (80091cc <_printf_i+0x238>)
 8009130:	e7e9      	b.n	8009106 <_printf_i+0x172>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	f023 0320 	bic.w	r3, r3, #32
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	e7f6      	b.n	800912a <_printf_i+0x196>
 800913c:	4616      	mov	r6, r2
 800913e:	e7bd      	b.n	80090bc <_printf_i+0x128>
 8009140:	6833      	ldr	r3, [r6, #0]
 8009142:	6825      	ldr	r5, [r4, #0]
 8009144:	6961      	ldr	r1, [r4, #20]
 8009146:	1d18      	adds	r0, r3, #4
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	062e      	lsls	r6, r5, #24
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	d501      	bpl.n	8009154 <_printf_i+0x1c0>
 8009150:	6019      	str	r1, [r3, #0]
 8009152:	e002      	b.n	800915a <_printf_i+0x1c6>
 8009154:	0668      	lsls	r0, r5, #25
 8009156:	d5fb      	bpl.n	8009150 <_printf_i+0x1bc>
 8009158:	8019      	strh	r1, [r3, #0]
 800915a:	2300      	movs	r3, #0
 800915c:	6123      	str	r3, [r4, #16]
 800915e:	4616      	mov	r6, r2
 8009160:	e7bc      	b.n	80090dc <_printf_i+0x148>
 8009162:	6833      	ldr	r3, [r6, #0]
 8009164:	1d1a      	adds	r2, r3, #4
 8009166:	6032      	str	r2, [r6, #0]
 8009168:	681e      	ldr	r6, [r3, #0]
 800916a:	6862      	ldr	r2, [r4, #4]
 800916c:	2100      	movs	r1, #0
 800916e:	4630      	mov	r0, r6
 8009170:	f7f7 f82e 	bl	80001d0 <memchr>
 8009174:	b108      	cbz	r0, 800917a <_printf_i+0x1e6>
 8009176:	1b80      	subs	r0, r0, r6
 8009178:	6060      	str	r0, [r4, #4]
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	6123      	str	r3, [r4, #16]
 800917e:	2300      	movs	r3, #0
 8009180:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009184:	e7aa      	b.n	80090dc <_printf_i+0x148>
 8009186:	6923      	ldr	r3, [r4, #16]
 8009188:	4632      	mov	r2, r6
 800918a:	4649      	mov	r1, r9
 800918c:	4640      	mov	r0, r8
 800918e:	47d0      	blx	sl
 8009190:	3001      	adds	r0, #1
 8009192:	d0ad      	beq.n	80090f0 <_printf_i+0x15c>
 8009194:	6823      	ldr	r3, [r4, #0]
 8009196:	079b      	lsls	r3, r3, #30
 8009198:	d413      	bmi.n	80091c2 <_printf_i+0x22e>
 800919a:	68e0      	ldr	r0, [r4, #12]
 800919c:	9b03      	ldr	r3, [sp, #12]
 800919e:	4298      	cmp	r0, r3
 80091a0:	bfb8      	it	lt
 80091a2:	4618      	movlt	r0, r3
 80091a4:	e7a6      	b.n	80090f4 <_printf_i+0x160>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4632      	mov	r2, r6
 80091aa:	4649      	mov	r1, r9
 80091ac:	4640      	mov	r0, r8
 80091ae:	47d0      	blx	sl
 80091b0:	3001      	adds	r0, #1
 80091b2:	d09d      	beq.n	80090f0 <_printf_i+0x15c>
 80091b4:	3501      	adds	r5, #1
 80091b6:	68e3      	ldr	r3, [r4, #12]
 80091b8:	9903      	ldr	r1, [sp, #12]
 80091ba:	1a5b      	subs	r3, r3, r1
 80091bc:	42ab      	cmp	r3, r5
 80091be:	dcf2      	bgt.n	80091a6 <_printf_i+0x212>
 80091c0:	e7eb      	b.n	800919a <_printf_i+0x206>
 80091c2:	2500      	movs	r5, #0
 80091c4:	f104 0619 	add.w	r6, r4, #25
 80091c8:	e7f5      	b.n	80091b6 <_printf_i+0x222>
 80091ca:	bf00      	nop
 80091cc:	08009349 	.word	0x08009349
 80091d0:	0800935a 	.word	0x0800935a

080091d4 <memmove>:
 80091d4:	4288      	cmp	r0, r1
 80091d6:	b510      	push	{r4, lr}
 80091d8:	eb01 0402 	add.w	r4, r1, r2
 80091dc:	d902      	bls.n	80091e4 <memmove+0x10>
 80091de:	4284      	cmp	r4, r0
 80091e0:	4623      	mov	r3, r4
 80091e2:	d807      	bhi.n	80091f4 <memmove+0x20>
 80091e4:	1e43      	subs	r3, r0, #1
 80091e6:	42a1      	cmp	r1, r4
 80091e8:	d008      	beq.n	80091fc <memmove+0x28>
 80091ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80091ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80091f2:	e7f8      	b.n	80091e6 <memmove+0x12>
 80091f4:	4402      	add	r2, r0
 80091f6:	4601      	mov	r1, r0
 80091f8:	428a      	cmp	r2, r1
 80091fa:	d100      	bne.n	80091fe <memmove+0x2a>
 80091fc:	bd10      	pop	{r4, pc}
 80091fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009206:	e7f7      	b.n	80091f8 <memmove+0x24>

08009208 <_sbrk_r>:
 8009208:	b538      	push	{r3, r4, r5, lr}
 800920a:	4d06      	ldr	r5, [pc, #24]	@ (8009224 <_sbrk_r+0x1c>)
 800920c:	2300      	movs	r3, #0
 800920e:	4604      	mov	r4, r0
 8009210:	4608      	mov	r0, r1
 8009212:	602b      	str	r3, [r5, #0]
 8009214:	f7f7 fd58 	bl	8000cc8 <_sbrk>
 8009218:	1c43      	adds	r3, r0, #1
 800921a:	d102      	bne.n	8009222 <_sbrk_r+0x1a>
 800921c:	682b      	ldr	r3, [r5, #0]
 800921e:	b103      	cbz	r3, 8009222 <_sbrk_r+0x1a>
 8009220:	6023      	str	r3, [r4, #0]
 8009222:	bd38      	pop	{r3, r4, r5, pc}
 8009224:	20001fb8 	.word	0x20001fb8

08009228 <memcpy>:
 8009228:	440a      	add	r2, r1
 800922a:	4291      	cmp	r1, r2
 800922c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009230:	d100      	bne.n	8009234 <memcpy+0xc>
 8009232:	4770      	bx	lr
 8009234:	b510      	push	{r4, lr}
 8009236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800923a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800923e:	4291      	cmp	r1, r2
 8009240:	d1f9      	bne.n	8009236 <memcpy+0xe>
 8009242:	bd10      	pop	{r4, pc}

08009244 <_realloc_r>:
 8009244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009248:	4680      	mov	r8, r0
 800924a:	4615      	mov	r5, r2
 800924c:	460c      	mov	r4, r1
 800924e:	b921      	cbnz	r1, 800925a <_realloc_r+0x16>
 8009250:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009254:	4611      	mov	r1, r2
 8009256:	f7ff bc4b 	b.w	8008af0 <_malloc_r>
 800925a:	b92a      	cbnz	r2, 8009268 <_realloc_r+0x24>
 800925c:	f7ff fbdc 	bl	8008a18 <_free_r>
 8009260:	2400      	movs	r4, #0
 8009262:	4620      	mov	r0, r4
 8009264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009268:	f000 f81a 	bl	80092a0 <_malloc_usable_size_r>
 800926c:	4285      	cmp	r5, r0
 800926e:	4606      	mov	r6, r0
 8009270:	d802      	bhi.n	8009278 <_realloc_r+0x34>
 8009272:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009276:	d8f4      	bhi.n	8009262 <_realloc_r+0x1e>
 8009278:	4629      	mov	r1, r5
 800927a:	4640      	mov	r0, r8
 800927c:	f7ff fc38 	bl	8008af0 <_malloc_r>
 8009280:	4607      	mov	r7, r0
 8009282:	2800      	cmp	r0, #0
 8009284:	d0ec      	beq.n	8009260 <_realloc_r+0x1c>
 8009286:	42b5      	cmp	r5, r6
 8009288:	462a      	mov	r2, r5
 800928a:	4621      	mov	r1, r4
 800928c:	bf28      	it	cs
 800928e:	4632      	movcs	r2, r6
 8009290:	f7ff ffca 	bl	8009228 <memcpy>
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f7ff fbbe 	bl	8008a18 <_free_r>
 800929c:	463c      	mov	r4, r7
 800929e:	e7e0      	b.n	8009262 <_realloc_r+0x1e>

080092a0 <_malloc_usable_size_r>:
 80092a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092a4:	1f18      	subs	r0, r3, #4
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	bfbc      	itt	lt
 80092aa:	580b      	ldrlt	r3, [r1, r0]
 80092ac:	18c0      	addlt	r0, r0, r3
 80092ae:	4770      	bx	lr

080092b0 <_init>:
 80092b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b2:	bf00      	nop
 80092b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092b6:	bc08      	pop	{r3}
 80092b8:	469e      	mov	lr, r3
 80092ba:	4770      	bx	lr

080092bc <_fini>:
 80092bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092be:	bf00      	nop
 80092c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092c2:	bc08      	pop	{r3}
 80092c4:	469e      	mov	lr, r3
 80092c6:	4770      	bx	lr
