
ADC-DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009420  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095c4  080095c4  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  080095c4  080095c4  0000a5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095cc  080095cc  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095cc  080095cc  0000a5cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095d0  080095d0  0000a5d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  080095d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000a24  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000aa0  20000aa0  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015eda  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c5c  00000000  00000000  00020f86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  00024be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d6b  00000000  00000000  00025da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024dbb  00000000  00000000  00026b0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019a87  00000000  00000000  0004b8c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7eb0  00000000  00000000  0006534d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013d1fd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c6c  00000000  00000000  0013d240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  00141eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009590 	.word	0x08009590

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009590 	.word	0x08009590

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fcb6 	bl	8000e2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f836 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f978 	bl	80007b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f918 	bl	80006fc <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f944 	bl	8000758 <MX_I2S3_Init>
  MX_USB_HOST_Init();
 80004d0:	f008 fc08 	bl	8008ce4 <MX_USB_HOST_Init>
  MX_ADC1_Init();
 80004d4:	f000 f896 	bl	8000604 <MX_ADC1_Init>
  MX_DAC_Init();
 80004d8:	f000 f8e6 	bl	80006a8 <MX_DAC_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004dc:	f008 fc28 	bl	8008d30 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_ADC_Start(&hadc1);
 80004e0:	4810      	ldr	r0, [pc, #64]	@ (8000524 <main+0x6c>)
 80004e2:	f000 fd7d 	bl	8000fe0 <HAL_ADC_Start>


    if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK) //timeout ms cinsinden
 80004e6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ea:	480e      	ldr	r0, [pc, #56]	@ (8000524 <main+0x6c>)
 80004ec:	f000 fe4a 	bl	8001184 <HAL_ADC_PollForConversion>
 80004f0:	4603      	mov	r3, r0
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d1f2      	bne.n	80004dc <main+0x24>
    {
    	adc_value = HAL_ADC_GetValue(&hadc1);
 80004f6:	480b      	ldr	r0, [pc, #44]	@ (8000524 <main+0x6c>)
 80004f8:	f000 fecf 	bl	800129a <HAL_ADC_GetValue>
 80004fc:	4603      	mov	r3, r0
 80004fe:	b29a      	uxth	r2, r3
 8000500:	4b09      	ldr	r3, [pc, #36]	@ (8000528 <main+0x70>)
 8000502:	801a      	strh	r2, [r3, #0]

    	HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, adc_value);
 8000504:	4b08      	ldr	r3, [pc, #32]	@ (8000528 <main+0x70>)
 8000506:	881b      	ldrh	r3, [r3, #0]
 8000508:	2200      	movs	r2, #0
 800050a:	2100      	movs	r1, #0
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <main+0x74>)
 800050e:	f001 facf 	bl	8001ab0 <HAL_DAC_SetValue>

    	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 8000512:	2100      	movs	r1, #0
 8000514:	4805      	ldr	r0, [pc, #20]	@ (800052c <main+0x74>)
 8000516:	f001 fa1e 	bl	8001956 <HAL_DAC_Start>

    	HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800051e:	f000 fcf7 	bl	8000f10 <HAL_Delay>
    MX_USB_HOST_Process();
 8000522:	e7db      	b.n	80004dc <main+0x24>
 8000524:	2000009c 	.word	0x2000009c
 8000528:	20000098 	.word	0x20000098
 800052c:	200000e4 	.word	0x200000e4

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	@ 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	@ 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 ff98 	bl	8009474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	@ (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	@ (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	@ 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	@ (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	@ (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	@ (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	@ (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000594:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a0:	2308      	movs	r3, #8
 80005a2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fbe0 	bl	8004d7c <HAL_RCC_OscConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005c2:	f000 f9f7 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c6:	230f      	movs	r3, #15
 80005c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ca:	2302      	movs	r3, #2
 80005cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2105      	movs	r1, #5
 80005e4:	4618      	mov	r0, r3
 80005e6:	f004 fe41 	bl	800526c <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005f0:	f000 f9e0 	bl	80009b4 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	@ 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000616:	4b21      	ldr	r3, [pc, #132]	@ (800069c <MX_ADC1_Init+0x98>)
 8000618:	4a21      	ldr	r2, [pc, #132]	@ (80006a0 <MX_ADC1_Init+0x9c>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_ADC1_Init+0x98>)
 800061e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b1d      	ldr	r3, [pc, #116]	@ (800069c <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000630:	4b1a      	ldr	r3, [pc, #104]	@ (800069c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	@ (800069c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b17      	ldr	r3, [pc, #92]	@ (800069c <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000644:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_ADC1_Init+0x98>)
 8000646:	4a17      	ldr	r2, [pc, #92]	@ (80006a4 <MX_ADC1_Init+0xa0>)
 8000648:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064a:	4b14      	ldr	r3, [pc, #80]	@ (800069c <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000650:	4b12      	ldr	r3, [pc, #72]	@ (800069c <MX_ADC1_Init+0x98>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065e:	4b0f      	ldr	r3, [pc, #60]	@ (800069c <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	@ (800069c <MX_ADC1_Init+0x98>)
 8000666:	f000 fc77 	bl	8000f58 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 f9a0 	bl	80009b4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000674:	2301      	movs	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_ADC1_Init+0x98>)
 8000686:	f000 fe15 	bl	80012b4 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000690:	f000 f990 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000009c 	.word	0x2000009c
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80006b6:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_DAC_Init+0x4c>)
 80006b8:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <MX_DAC_Init+0x50>)
 80006ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80006bc:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <MX_DAC_Init+0x4c>)
 80006be:	f001 f928 	bl	8001912 <HAL_DAC_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80006c8:	f000 f974 	bl	80009b4 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80006d4:	463b      	mov	r3, r7
 80006d6:	2210      	movs	r2, #16
 80006d8:	4619      	mov	r1, r3
 80006da:	4806      	ldr	r0, [pc, #24]	@ (80006f4 <MX_DAC_Init+0x4c>)
 80006dc:	f001 fa1c 	bl	8001b18 <HAL_DAC_ConfigChannel>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80006e6:	f000 f965 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000e4 	.word	0x200000e4
 80006f8:	40007400 	.word	0x40007400

080006fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_I2C1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_I2C1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_I2C1_Init+0x50>)
 8000708:	4a12      	ldr	r2, [pc, #72]	@ (8000754 <MX_I2C1_Init+0x58>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_I2C1_Init+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b0e      	ldr	r3, [pc, #56]	@ (800074c <MX_I2C1_Init+0x50>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_I2C1_Init+0x50>)
 800071a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_I2C1_Init+0x50>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_I2C1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_I2C1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_I2C1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_I2C1_Init+0x50>)
 800073a:	f003 fd3b 	bl	80041b4 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f936 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	200000f8 	.word	0x200000f8
 8000750:	40005400 	.word	0x40005400
 8000754:	000186a0 	.word	0x000186a0

08000758 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800075c:	4b13      	ldr	r3, [pc, #76]	@ (80007ac <MX_I2S3_Init+0x54>)
 800075e:	4a14      	ldr	r2, [pc, #80]	@ (80007b0 <MX_I2S3_Init+0x58>)
 8000760:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000762:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000764:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000768:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800076a:	4b10      	ldr	r3, [pc, #64]	@ (80007ac <MX_I2S3_Init+0x54>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000776:	4b0d      	ldr	r3, [pc, #52]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800077c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800077e:	4b0b      	ldr	r3, [pc, #44]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	@ (80007b4 <MX_I2S3_Init+0x5c>)
 8000782:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000784:	4b09      	ldr	r3, [pc, #36]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000786:	2200      	movs	r2, #0
 8000788:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800078a:	4b08      	ldr	r3, [pc, #32]	@ (80007ac <MX_I2S3_Init+0x54>)
 800078c:	2200      	movs	r2, #0
 800078e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000792:	2200      	movs	r2, #0
 8000794:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	@ (80007ac <MX_I2S3_Init+0x54>)
 8000798:	f003 fe50 	bl	800443c <HAL_I2S_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007a2:	f000 f907 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000014c 	.word	0x2000014c
 80007b0:	40003c00 	.word	0x40003c00
 80007b4:	00017700 	.word	0x00017700

080007b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08c      	sub	sp, #48	@ 0x30
 80007bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	2200      	movs	r2, #0
 80007c4:	601a      	str	r2, [r3, #0]
 80007c6:	605a      	str	r2, [r3, #4]
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	60da      	str	r2, [r3, #12]
 80007cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	4b72      	ldr	r3, [pc, #456]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a71      	ldr	r2, [pc, #452]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007d8:	f043 0310 	orr.w	r3, r3, #16
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b6f      	ldr	r3, [pc, #444]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0310 	and.w	r3, r3, #16
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	4b6b      	ldr	r3, [pc, #428]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a6a      	ldr	r2, [pc, #424]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b68      	ldr	r3, [pc, #416]	@ (800099c <MX_GPIO_Init+0x1e4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b64      	ldr	r3, [pc, #400]	@ (800099c <MX_GPIO_Init+0x1e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a63      	ldr	r2, [pc, #396]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000810:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b61      	ldr	r3, [pc, #388]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b5d      	ldr	r3, [pc, #372]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a5c      	ldr	r2, [pc, #368]	@ (800099c <MX_GPIO_Init+0x1e4>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b5a      	ldr	r3, [pc, #360]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b56      	ldr	r3, [pc, #344]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a55      	ldr	r2, [pc, #340]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000848:	f043 0302 	orr.w	r3, r3, #2
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b53      	ldr	r3, [pc, #332]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0302 	and.w	r3, r3, #2
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b4f      	ldr	r3, [pc, #316]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a4e      	ldr	r2, [pc, #312]	@ (800099c <MX_GPIO_Init+0x1e4>)
 8000864:	f043 0308 	orr.w	r3, r3, #8
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b4c      	ldr	r3, [pc, #304]	@ (800099c <MX_GPIO_Init+0x1e4>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0308 	and.w	r3, r3, #8
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2108      	movs	r1, #8
 800087a:	4849      	ldr	r0, [pc, #292]	@ (80009a0 <MX_GPIO_Init+0x1e8>)
 800087c:	f001 fb4c 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	2101      	movs	r1, #1
 8000884:	4847      	ldr	r0, [pc, #284]	@ (80009a4 <MX_GPIO_Init+0x1ec>)
 8000886:	f001 fb47 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800088a:	2200      	movs	r2, #0
 800088c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000890:	4845      	ldr	r0, [pc, #276]	@ (80009a8 <MX_GPIO_Init+0x1f0>)
 8000892:	f001 fb41 	bl	8001f18 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000896:	2308      	movs	r3, #8
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	483c      	ldr	r0, [pc, #240]	@ (80009a0 <MX_GPIO_Init+0x1e8>)
 80008ae:	f001 f997 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008b2:	2301      	movs	r3, #1
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4836      	ldr	r0, [pc, #216]	@ (80009a4 <MX_GPIO_Init+0x1ec>)
 80008ca:	f001 f989 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ce:	2308      	movs	r3, #8
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d2:	2302      	movs	r3, #2
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008de:	2305      	movs	r3, #5
 80008e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	482e      	ldr	r0, [pc, #184]	@ (80009a4 <MX_GPIO_Init+0x1ec>)
 80008ea:	f001 f979 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	482a      	ldr	r0, [pc, #168]	@ (80009ac <MX_GPIO_Init+0x1f4>)
 8000904:	f001 f96c 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000908:	2304      	movs	r3, #4
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4825      	ldr	r0, [pc, #148]	@ (80009b0 <MX_GPIO_Init+0x1f8>)
 800091c:	f001 f960 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000932:	2305      	movs	r3, #5
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <MX_GPIO_Init+0x1f8>)
 800093e:	f001 f94f 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000942:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000946:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	4813      	ldr	r0, [pc, #76]	@ (80009a8 <MX_GPIO_Init+0x1f0>)
 800095c:	f001 f940 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000960:	2320      	movs	r3, #32
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000964:	2300      	movs	r3, #0
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 031c 	add.w	r3, r7, #28
 8000970:	4619      	mov	r1, r3
 8000972:	480d      	ldr	r0, [pc, #52]	@ (80009a8 <MX_GPIO_Init+0x1f0>)
 8000974:	f001 f934 	bl	8001be0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800097c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <MX_GPIO_Init+0x1e8>)
 800098e:	f001 f927 	bl	8001be0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000992:	bf00      	nop
 8000994:	3730      	adds	r7, #48	@ 0x30
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40021000 	.word	0x40021000
 80009a4:	40020800 	.word	0x40020800
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	40020000 	.word	0x40020000
 80009b0:	40020400 	.word	0x40020400

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 ff46 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	@ 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a17      	ldr	r2, [pc, #92]	@ (8000a8c <HAL_ADC_MspInit+0x7c>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d127      	bne.n	8000a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
 8000a36:	4b16      	ldr	r3, [pc, #88]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3a:	4a15      	ldr	r2, [pc, #84]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a42:	4b13      	ldr	r3, [pc, #76]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	4b0f      	ldr	r3, [pc, #60]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a56:	4a0e      	ldr	r2, [pc, #56]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a90 <HAL_ADC_MspInit+0x80>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <HAL_ADC_MspInit+0x84>)
 8000a7e:	f001 f8af 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012000 	.word	0x40012000
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020000 	.word	0x40020000

08000a98 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b08a      	sub	sp, #40	@ 0x28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	601a      	str	r2, [r3, #0]
 8000aa8:	605a      	str	r2, [r3, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
 8000aac:	60da      	str	r2, [r3, #12]
 8000aae:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b24 <HAL_DAC_MspInit+0x8c>)
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d12f      	bne.n	8000b1a <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b1a      	ldr	r3, [pc, #104]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a19      	ldr	r2, [pc, #100]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000ac4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b17      	ldr	r3, [pc, #92]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_DAC_MspInit+0x90>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000af2:	2320      	movs	r3, #32
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af6:	2303      	movs	r3, #3
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4809      	ldr	r0, [pc, #36]	@ (8000b2c <HAL_DAC_MspInit+0x94>)
 8000b06:	f001 f86b 	bl	8001be0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	2036      	movs	r0, #54	@ 0x36
 8000b10:	f000 fec9 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b14:	2036      	movs	r0, #54	@ 0x36
 8000b16:	f000 fee2 	bl	80018de <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	@ 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40007400 	.word	0x40007400
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020000 	.word	0x40020000

08000b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	@ 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	@ (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b6e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480c      	ldr	r0, [pc, #48]	@ (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8c:	f001 f828 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b98:	4a07      	ldr	r2, [pc, #28]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b9a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	@ 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a31      	ldr	r2, [pc, #196]	@ (8000cb0 <HAL_I2S_MspInit+0xf0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d15a      	bne.n	8000ca6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bf4:	23c0      	movs	r3, #192	@ 0xc0
 8000bf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f004 fd3f 	bl	8005684 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c0c:	f7ff fed2 	bl	80009b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	4b27      	ldr	r3, [pc, #156]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c18:	4a26      	ldr	r2, [pc, #152]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c1e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c20:	4b24      	ldr	r3, [pc, #144]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b20      	ldr	r3, [pc, #128]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c34:	4a1f      	ldr	r2, [pc, #124]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c50:	4a18      	ldr	r2, [pc, #96]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c58:	4b16      	ldr	r3, [pc, #88]	@ (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c64:	2310      	movs	r3, #16
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c74:	2306      	movs	r3, #6
 8000c76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	@ (8000cb8 <HAL_I2S_MspInit+0xf8>)
 8000c80:	f000 ffae 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c84:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c96:	2306      	movs	r3, #6
 8000c98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4806      	ldr	r0, [pc, #24]	@ (8000cbc <HAL_I2S_MspInit+0xfc>)
 8000ca2:	f000 ff9d 	bl	8001be0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	@ 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40003c00 	.word	0x40003c00
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cc4:	bf00      	nop
 8000cc6:	e7fd      	b.n	8000cc4 <NMI_Handler+0x4>

08000cc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ccc:	bf00      	nop
 8000cce:	e7fd      	b.n	8000ccc <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	bf00      	nop
 8000cd6:	e7fd      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	bf00      	nop
 8000ce6:	e7fd      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cec:	bf00      	nop
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d16:	f000 f8db 	bl	8000ed0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8000d24:	4802      	ldr	r0, [pc, #8]	@ (8000d30 <TIM6_DAC_IRQHandler+0x10>)
 8000d26:	f000 fe6d 	bl	8001a04 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	200000e4 	.word	0x200000e4

08000d34 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000d38:	4802      	ldr	r0, [pc, #8]	@ (8000d44 <OTG_FS_IRQHandler+0x10>)
 8000d3a:	f001 fbe7 	bl	800250c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000578 	.word	0x20000578

08000d48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b086      	sub	sp, #24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d50:	4a14      	ldr	r2, [pc, #80]	@ (8000da4 <_sbrk+0x5c>)
 8000d52:	4b15      	ldr	r3, [pc, #84]	@ (8000da8 <_sbrk+0x60>)
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d5c:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <_sbrk+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d102      	bne.n	8000d6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d64:	4b11      	ldr	r3, [pc, #68]	@ (8000dac <_sbrk+0x64>)
 8000d66:	4a12      	ldr	r2, [pc, #72]	@ (8000db0 <_sbrk+0x68>)
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d6a:	4b10      	ldr	r3, [pc, #64]	@ (8000dac <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d207      	bcs.n	8000d88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d78:	f008 fb94 	bl	80094a4 <__errno>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	220c      	movs	r2, #12
 8000d80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d82:	f04f 33ff 	mov.w	r3, #4294967295
 8000d86:	e009      	b.n	8000d9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d88:	4b08      	ldr	r3, [pc, #32]	@ (8000dac <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d8e:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <_sbrk+0x64>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4413      	add	r3, r2
 8000d96:	4a05      	ldr	r2, [pc, #20]	@ (8000dac <_sbrk+0x64>)
 8000d98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3718      	adds	r7, #24
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	20020000 	.word	0x20020000
 8000da8:	00000400 	.word	0x00000400
 8000dac:	20000194 	.word	0x20000194
 8000db0:	20000aa0 	.word	0x20000aa0

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <SystemInit+0x20>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <SystemInit+0x20>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e10 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ddc:	f7ff ffea 	bl	8000db4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000de2:	490d      	ldr	r1, [pc, #52]	@ (8000e18 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000de6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000de8:	e002      	b.n	8000df0 <LoopCopyDataInit>

08000dea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dee:	3304      	adds	r3, #4

08000df0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df4:	d3f9      	bcc.n	8000dea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000df6:	4a0a      	ldr	r2, [pc, #40]	@ (8000e20 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000df8:	4c0a      	ldr	r4, [pc, #40]	@ (8000e24 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dfc:	e001      	b.n	8000e02 <LoopFillZerobss>

08000dfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e00:	3204      	adds	r2, #4

08000e02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e04:	d3fb      	bcc.n	8000dfe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e06:	f008 fb53 	bl	80094b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e0a:	f7ff fb55 	bl	80004b8 <main>
  bx  lr    
 8000e0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e18:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000e1c:	080095d4 	.word	0x080095d4
  ldr r2, =_sbss
 8000e20:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000e24:	20000aa0 	.word	0x20000aa0

08000e28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e28:	e7fe      	b.n	8000e28 <ADC_IRQHandler>
	...

08000e2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e30:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a0d      	ldr	r2, [pc, #52]	@ (8000e6c <HAL_Init+0x40>)
 8000e36:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e6c <HAL_Init+0x40>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <HAL_Init+0x40>)
 8000e42:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	4b08      	ldr	r3, [pc, #32]	@ (8000e6c <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a07      	ldr	r2, [pc, #28]	@ (8000e6c <HAL_Init+0x40>)
 8000e4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 fd1b 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f808 	bl	8000e70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e60:	f7ff fdae 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023c00 	.word	0x40023c00

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e78:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_InitTick+0x54>)
 8000e7a:	681a      	ldr	r2, [r3, #0]
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <HAL_InitTick+0x58>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	4619      	mov	r1, r3
 8000e82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fd33 	bl	80018fa <HAL_SYSTICK_Config>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e00e      	b.n	8000ebc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2b0f      	cmp	r3, #15
 8000ea2:	d80a      	bhi.n	8000eba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	6879      	ldr	r1, [r7, #4]
 8000ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8000eac:	f000 fcfb 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb0:	4a06      	ldr	r2, [pc, #24]	@ (8000ecc <HAL_InitTick+0x5c>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	e000      	b.n	8000ebc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000000 	.word	0x20000000
 8000ec8:	20000008 	.word	0x20000008
 8000ecc:	20000004 	.word	0x20000004

08000ed0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed4:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <HAL_IncTick+0x20>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4413      	add	r3, r2
 8000ee0:	4a04      	ldr	r2, [pc, #16]	@ (8000ef4 <HAL_IncTick+0x24>)
 8000ee2:	6013      	str	r3, [r2, #0]
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000198 	.word	0x20000198

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b03      	ldr	r3, [pc, #12]	@ (8000f0c <HAL_GetTick+0x14>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	20000198 	.word	0x20000198

08000f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f18:	f7ff ffee 	bl	8000ef8 <HAL_GetTick>
 8000f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f28:	d005      	beq.n	8000f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f54 <HAL_Delay+0x44>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	4413      	add	r3, r2
 8000f34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f36:	bf00      	nop
 8000f38:	f7ff ffde 	bl	8000ef8 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	68fa      	ldr	r2, [r7, #12]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8f7      	bhi.n	8000f38 <HAL_Delay+0x28>
  {
  }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3710      	adds	r7, #16
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f60:	2300      	movs	r3, #0
 8000f62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e033      	b.n	8000fd6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fd4a 	bl	8000a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d118      	bne.n	8000fc8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000f9e:	f023 0302 	bic.w	r3, r3, #2
 8000fa2:	f043 0202 	orr.w	r2, r3, #2
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f000 faa4 	bl	80014f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fba:	f023 0303 	bic.w	r3, r3, #3
 8000fbe:	f043 0201 	orr.w	r2, r3, #1
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000fc6:	e001      	b.n	8000fcc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
	...

08000fe0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Start+0x1a>
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	e0b2      	b.n	8001160 <HAL_ADC_Start+0x180>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689b      	ldr	r3, [r3, #8]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b01      	cmp	r3, #1
 800100e:	d018      	beq.n	8001042 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f042 0201 	orr.w	r2, r2, #1
 800101e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001020:	4b52      	ldr	r3, [pc, #328]	@ (800116c <HAL_ADC_Start+0x18c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a52      	ldr	r2, [pc, #328]	@ (8001170 <HAL_ADC_Start+0x190>)
 8001026:	fba2 2303 	umull	r2, r3, r2, r3
 800102a:	0c9a      	lsrs	r2, r3, #18
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001034:	e002      	b.n	800103c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	3b01      	subs	r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1f9      	bne.n	8001036 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	2b01      	cmp	r3, #1
 800104e:	d17a      	bne.n	8001146 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001054:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001058:	f023 0301 	bic.w	r3, r3, #1
 800105c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800107a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800108a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800108e:	d106      	bne.n	800109e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001094:	f023 0206 	bic.w	r2, r3, #6
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	645a      	str	r2, [r3, #68]	@ 0x44
 800109c:	e002      	b.n	80010a4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010ac:	4b31      	ldr	r3, [pc, #196]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010ae:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80010b8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f003 031f 	and.w	r3, r3, #31
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d12a      	bne.n	800111c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a2b      	ldr	r2, [pc, #172]	@ (8001178 <HAL_ADC_Start+0x198>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d015      	beq.n	80010fc <HAL_ADC_Start+0x11c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a29      	ldr	r2, [pc, #164]	@ (800117c <HAL_ADC_Start+0x19c>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d105      	bne.n	80010e6 <HAL_ADC_Start+0x106>
 80010da:	4b26      	ldr	r3, [pc, #152]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 031f 	and.w	r3, r3, #31
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a25      	ldr	r2, [pc, #148]	@ (8001180 <HAL_ADC_Start+0x1a0>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d136      	bne.n	800115e <HAL_ADC_Start+0x17e>
 80010f0:	4b20      	ldr	r3, [pc, #128]	@ (8001174 <HAL_ADC_Start+0x194>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d130      	bne.n	800115e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	689b      	ldr	r3, [r3, #8]
 8001102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d129      	bne.n	800115e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689a      	ldr	r2, [r3, #8]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001118:	609a      	str	r2, [r3, #8]
 800111a:	e020      	b.n	800115e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a15      	ldr	r2, [pc, #84]	@ (8001178 <HAL_ADC_Start+0x198>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d11b      	bne.n	800115e <HAL_ADC_Start+0x17e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689b      	ldr	r3, [r3, #8]
 800112c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d114      	bne.n	800115e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	e00b      	b.n	800115e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f043 0210 	orr.w	r2, r3, #16
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001156:	f043 0201 	orr.w	r2, r3, #1
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3714      	adds	r7, #20
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	20000000 	.word	0x20000000
 8001170:	431bde83 	.word	0x431bde83
 8001174:	40012300 	.word	0x40012300
 8001178:	40012000 	.word	0x40012000
 800117c:	40012100 	.word	0x40012100
 8001180:	40012200 	.word	0x40012200

08001184 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b084      	sub	sp, #16
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800119c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80011a0:	d113      	bne.n	80011ca <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80011b0:	d10b      	bne.n	80011ca <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f043 0220 	orr.w	r2, r3, #32
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2200      	movs	r2, #0
 80011c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e063      	b.n	8001292 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80011ca:	f7ff fe95 	bl	8000ef8 <HAL_GetTick>
 80011ce:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011d0:	e021      	b.n	8001216 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d8:	d01d      	beq.n	8001216 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_ADC_PollForConversion+0x6c>
 80011e0:	f7ff fe8a 	bl	8000ef8 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d212      	bcs.n	8001216 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b02      	cmp	r3, #2
 80011fc:	d00b      	beq.n	8001216 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001202:	f043 0204 	orr.w	r2, r3, #4
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001212:	2303      	movs	r3, #3
 8001214:	e03d      	b.n	8001292 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b02      	cmp	r3, #2
 8001222:	d1d6      	bne.n	80011d2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f06f 0212 	mvn.w	r2, #18
 800122c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001232:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d123      	bne.n	8001290 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800124c:	2b00      	cmp	r3, #0
 800124e:	d11f      	bne.n	8001290 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001256:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800125a:	2b00      	cmp	r3, #0
 800125c:	d006      	beq.n	800126c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001268:	2b00      	cmp	r3, #0
 800126a:	d111      	bne.n	8001290 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d105      	bne.n	8001290 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f043 0201 	orr.w	r2, r3, #1
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800129a:	b480      	push	{r7}
 800129c:	b083      	sub	sp, #12
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1c>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e105      	b.n	80014dc <HAL_ADC_ConfigChannel+0x228>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d925      	bls.n	800132c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68d9      	ldr	r1, [r3, #12]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	3b1e      	subs	r3, #30
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43da      	mvns	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	4603      	mov	r3, r0
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4403      	add	r3, r0
 800131e:	3b1e      	subs	r3, #30
 8001320:	409a      	lsls	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	e022      	b.n	8001372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6919      	ldr	r1, [r3, #16]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	2207      	movs	r2, #7
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6919      	ldr	r1, [r3, #16]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	4603      	mov	r3, r0
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4403      	add	r3, r0
 8001368:	409a      	lsls	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d824      	bhi.n	80013c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	3b05      	subs	r3, #5
 800138c:	221f      	movs	r2, #31
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	400a      	ands	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b05      	subs	r3, #5
 80013b6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80013c2:	e04c      	b.n	800145e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d824      	bhi.n	8001416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b23      	subs	r3, #35	@ 0x23
 80013de:	221f      	movs	r2, #31
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43da      	mvns	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	400a      	ands	r2, r1
 80013ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b23      	subs	r3, #35	@ 0x23
 8001408:	fa00 f203 	lsl.w	r2, r0, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	631a      	str	r2, [r3, #48]	@ 0x30
 8001414:	e023      	b.n	800145e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	3b41      	subs	r3, #65	@ 0x41
 8001428:	221f      	movs	r2, #31
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b41      	subs	r3, #65	@ 0x41
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b22      	ldr	r3, [pc, #136]	@ (80014e8 <HAL_ADC_ConfigChannel+0x234>)
 8001460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <HAL_ADC_ConfigChannel+0x238>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d109      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1cc>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b12      	cmp	r3, #18
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	@ (80014ec <HAL_ADC_ConfigChannel+0x238>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d123      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d003      	beq.n	800149a <HAL_ADC_ConfigChannel+0x1e6>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b11      	cmp	r3, #17
 8001498:	d11b      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d111      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <HAL_ADC_ConfigChannel+0x23c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a10      	ldr	r2, [pc, #64]	@ (80014f4 <HAL_ADC_ConfigChannel+0x240>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9a      	lsrs	r2, r3, #18
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40012300 	.word	0x40012300
 80014ec:	40012000 	.word	0x40012000
 80014f0:	20000000 	.word	0x20000000
 80014f4:	431bde83 	.word	0x431bde83

080014f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001500:	4b79      	ldr	r3, [pc, #484]	@ (80016e8 <ADC_Init+0x1f0>)
 8001502:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	431a      	orrs	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	021a      	lsls	r2, r3, #8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800158a:	4a58      	ldr	r2, [pc, #352]	@ (80016ec <ADC_Init+0x1f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d022      	beq.n	80015d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800159e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e00f      	b.n	80015f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80015f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0202 	bic.w	r2, r2, #2
 8001604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
 8001610:	005a      	lsls	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001632:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	3b01      	subs	r3, #1
 8001650:	035a      	lsls	r2, r3, #13
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e007      	b.n	800166c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800166a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800167a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	3b01      	subs	r3, #1
 8001688:	051a      	lsls	r2, r3, #20
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80016a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6899      	ldr	r1, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016ae:	025a      	lsls	r2, r3, #9
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6899      	ldr	r1, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	029a      	lsls	r2, r3, #10
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40012300 	.word	0x40012300
 80016ec:	0f000001 	.word	0x0f000001

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	@ (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	@ (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	@ (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	@ 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	@ 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	@ (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	@ (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	@ (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b082      	sub	sp, #8
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d101      	bne.n	8001924 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e014      	b.n	800194e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	791b      	ldrb	r3, [r3, #4]
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d105      	bne.n	800193a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff f8af 	bl	8000a98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2202      	movs	r2, #2
 800193e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d101      	bne.n	800196a <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e046      	b.n	80019f8 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	795b      	ldrb	r3, [r3, #5]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d101      	bne.n	8001976 <HAL_DAC_Start+0x20>
 8001972:	2302      	movs	r3, #2
 8001974:	e040      	b.n	80019f8 <HAL_DAC_Start+0xa2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6819      	ldr	r1, [r3, #0]
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	f003 0310 	and.w	r3, r3, #16
 800198e:	2201      	movs	r2, #1
 8001990:	409a      	lsls	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10f      	bne.n	80019c0 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80019aa:	2b3c      	cmp	r3, #60	@ 0x3c
 80019ac:	d11d      	bne.n	80019ea <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	685a      	ldr	r2, [r3, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	e014      	b.n	80019ea <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	f003 0310 	and.w	r3, r3, #16
 80019d0:	213c      	movs	r1, #60	@ 0x3c
 80019d2:	fa01 f303 	lsl.w	r3, r1, r3
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d107      	bne.n	80019ea <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f042 0202 	orr.w	r2, r2, #2
 80019e8:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr

08001a04 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a1a:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d01d      	beq.n	8001a62 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8001a26:	68bb      	ldr	r3, [r7, #8]
 8001a28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d018      	beq.n	8001a62 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2204      	movs	r2, #4
 8001a34:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	691b      	ldr	r3, [r3, #16]
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001a5a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 f851 	bl	8001b04 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d01d      	beq.n	8001aa8 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d018      	beq.n	8001aa8 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2204      	movs	r2, #4
 8001a7a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	f043 0202 	orr.w	r2, r3, #2
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8001aa0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f891 	bl	8001bca <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8001aa8:	bf00      	nop
 8001aaa:	3710      	adds	r7, #16
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b087      	sub	sp, #28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	60b9      	str	r1, [r7, #8]
 8001aba:	607a      	str	r2, [r7, #4]
 8001abc:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d101      	bne.n	8001acc <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e015      	b.n	8001af8 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d105      	bne.n	8001ae4 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	3308      	adds	r3, #8
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e004      	b.n	8001aee <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ae4:	697a      	ldr	r2, [r7, #20]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4413      	add	r3, r2
 8001aea:	3314      	adds	r3, #20
 8001aec:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	461a      	mov	r2, r3
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	371c      	adds	r7, #28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b24:	2300      	movs	r3, #0
 8001b26:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d002      	beq.n	8001b34 <HAL_DAC_ConfigChannel+0x1c>
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e042      	b.n	8001bbe <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	795b      	ldrb	r3, [r3, #5]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d101      	bne.n	8001b44 <HAL_DAC_ConfigChannel+0x2c>
 8001b40:	2302      	movs	r3, #2
 8001b42:	e03c      	b.n	8001bbe <HAL_DAC_ConfigChannel+0xa6>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2201      	movs	r2, #1
 8001b48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0310 	and.w	r3, r3, #16
 8001b5e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	69ba      	ldr	r2, [r7, #24]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6819      	ldr	r1, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	22c0      	movs	r2, #192	@ 0xc0
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	400a      	ands	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001bbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3724      	adds	r7, #36	@ 0x24
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
	...

08001be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	@ 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e16b      	b.n	8001ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 815a 	bne.w	8001ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d005      	beq.n	8001c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d017      	beq.n	8001cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d123      	bne.n	8001d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80b4 	beq.w	8001ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	4b60      	ldr	r3, [pc, #384]	@ (8001eec <HAL_GPIO_Init+0x30c>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8001eec <HAL_GPIO_Init+0x30c>)
 8001d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d76:	4b5d      	ldr	r3, [pc, #372]	@ (8001eec <HAL_GPIO_Init+0x30c>)
 8001d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d7e:	60fb      	str	r3, [r7, #12]
 8001d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d82:	4a5b      	ldr	r2, [pc, #364]	@ (8001ef0 <HAL_GPIO_Init+0x310>)
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	089b      	lsrs	r3, r3, #2
 8001d88:	3302      	adds	r3, #2
 8001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	f003 0303 	and.w	r3, r3, #3
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a52      	ldr	r2, [pc, #328]	@ (8001ef4 <HAL_GPIO_Init+0x314>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d02b      	beq.n	8001e06 <HAL_GPIO_Init+0x226>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a51      	ldr	r2, [pc, #324]	@ (8001ef8 <HAL_GPIO_Init+0x318>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d025      	beq.n	8001e02 <HAL_GPIO_Init+0x222>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a50      	ldr	r2, [pc, #320]	@ (8001efc <HAL_GPIO_Init+0x31c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d01f      	beq.n	8001dfe <HAL_GPIO_Init+0x21e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f00 <HAL_GPIO_Init+0x320>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_Init+0x21a>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f04 <HAL_GPIO_Init+0x324>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_GPIO_Init+0x216>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8001f08 <HAL_GPIO_Init+0x328>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d00d      	beq.n	8001df2 <HAL_GPIO_Init+0x212>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8001f0c <HAL_GPIO_Init+0x32c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d007      	beq.n	8001dee <HAL_GPIO_Init+0x20e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a4b      	ldr	r2, [pc, #300]	@ (8001f10 <HAL_GPIO_Init+0x330>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d101      	bne.n	8001dea <HAL_GPIO_Init+0x20a>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00e      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001dea:	2308      	movs	r3, #8
 8001dec:	e00c      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001dee:	2306      	movs	r3, #6
 8001df0:	e00a      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001df2:	2305      	movs	r3, #5
 8001df4:	e008      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001df6:	2304      	movs	r3, #4
 8001df8:	e006      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e004      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e002      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <HAL_GPIO_Init+0x228>
 8001e06:	2300      	movs	r3, #0
 8001e08:	69fa      	ldr	r2, [r7, #28]
 8001e0a:	f002 0203 	and.w	r2, r2, #3
 8001e0e:	0092      	lsls	r2, r2, #2
 8001e10:	4093      	lsls	r3, r2
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e18:	4935      	ldr	r1, [pc, #212]	@ (8001ef0 <HAL_GPIO_Init+0x310>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	089b      	lsrs	r3, r3, #2
 8001e1e:	3302      	adds	r3, #2
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e26:	4b3b      	ldr	r3, [pc, #236]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	43db      	mvns	r3, r3
 8001e30:	69ba      	ldr	r2, [r7, #24]
 8001e32:	4013      	ands	r3, r2
 8001e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4a:	4a32      	ldr	r2, [pc, #200]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e50:	4b30      	ldr	r3, [pc, #192]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d003      	beq.n	8001e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	4313      	orrs	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e74:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e76:	69bb      	ldr	r3, [r7, #24]
 8001e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7a:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	43db      	mvns	r3, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4013      	ands	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d003      	beq.n	8001e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	693b      	ldr	r3, [r7, #16]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec8:	4a12      	ldr	r2, [pc, #72]	@ (8001f14 <HAL_GPIO_Init+0x334>)
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	61fb      	str	r3, [r7, #28]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b0f      	cmp	r3, #15
 8001ed8:	f67f ae90 	bls.w	8001bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
 8001eea:	bf00      	nop
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e059      	b.n	8002010 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d106      	bne.n	8001f7c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f006 ff12 	bl	8008da0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2203      	movs	r2, #3
 8001f80:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f8a:	d102      	bne.n	8001f92 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fd2b 	bl	80059f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	7c1a      	ldrb	r2, [r3, #16]
 8001fa4:	f88d 2000 	strb.w	r2, [sp]
 8001fa8:	3304      	adds	r3, #4
 8001faa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fac:	f003 fcac 	bl	8005908 <USB_CoreInit>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2202      	movs	r2, #2
 8001fba:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e026      	b.n	8002010 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f003 fd23 	bl	8005a14 <USB_SetCurrentMode>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2202      	movs	r2, #2
 8001fd8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e017      	b.n	8002010 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6818      	ldr	r0, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7c1a      	ldrb	r2, [r3, #16]
 8001fe8:	f88d 2000 	strb.w	r2, [sp]
 8001fec:	3304      	adds	r3, #4
 8001fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff0:	f003 fec6 	bl	8005d80 <USB_HostInit>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d005      	beq.n	8002006 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2202      	movs	r2, #2
 8001ffe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e004      	b.n	8002010 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800200e:	2300      	movs	r3, #0
}
 8002010:	4618      	mov	r0, r3
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b08b      	sub	sp, #44	@ 0x2c
 800201c:	af04      	add	r7, sp, #16
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	4608      	mov	r0, r1
 8002022:	4611      	mov	r1, r2
 8002024:	461a      	mov	r2, r3
 8002026:	4603      	mov	r3, r0
 8002028:	70fb      	strb	r3, [r7, #3]
 800202a:	460b      	mov	r3, r1
 800202c:	70bb      	strb	r3, [r7, #2]
 800202e:	4613      	mov	r3, r2
 8002030:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002032:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002034:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_HCD_HC_Init+0x2c>
 8002040:	2302      	movs	r3, #2
 8002042:	e09d      	b.n	8002180 <HAL_HCD_HC_Init+0x168>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	4613      	mov	r3, r2
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	1a9b      	subs	r3, r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	3319      	adds	r3, #25
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002060:	78fa      	ldrb	r2, [r7, #3]
 8002062:	6879      	ldr	r1, [r7, #4]
 8002064:	4613      	mov	r3, r2
 8002066:	011b      	lsls	r3, r3, #4
 8002068:	1a9b      	subs	r3, r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	440b      	add	r3, r1
 800206e:	3314      	adds	r3, #20
 8002070:	787a      	ldrb	r2, [r7, #1]
 8002072:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3315      	adds	r3, #21
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3326      	adds	r3, #38	@ 0x26
 8002098:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800209c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	78bb      	ldrb	r3, [r7, #2]
 80020a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020a6:	b2d8      	uxtb	r0, r3
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3316      	adds	r3, #22
 80020b6:	4602      	mov	r2, r0
 80020b8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80020ba:	78fb      	ldrb	r3, [r7, #3]
 80020bc:	4619      	mov	r1, r3
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 fbc8 	bl	8002854 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80020c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	da0a      	bge.n	80020e2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020cc:	78fa      	ldrb	r2, [r7, #3]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	3317      	adds	r3, #23
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e009      	b.n	80020f6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3317      	adds	r3, #23
 80020f2:	2200      	movs	r2, #0
 80020f4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f003 ffa4 	bl	8006048 <USB_GetHostSpeed>
 8002100:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002102:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10b      	bne.n	8002122 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800210a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800210e:	2b01      	cmp	r3, #1
 8002110:	d107      	bne.n	8002122 <HAL_HCD_HC_Init+0x10a>
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d104      	bne.n	8002122 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	2bbc      	cmp	r3, #188	@ 0xbc
 800211c:	d901      	bls.n	8002122 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800211e:	23bc      	movs	r3, #188	@ 0xbc
 8002120:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3318      	adds	r3, #24
 8002132:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002136:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002138:	78fa      	ldrb	r2, [r7, #3]
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	b298      	uxth	r0, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3328      	adds	r3, #40	@ 0x28
 800214c:	4602      	mov	r2, r0
 800214e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	b29b      	uxth	r3, r3
 8002158:	787c      	ldrb	r4, [r7, #1]
 800215a:	78ba      	ldrb	r2, [r7, #2]
 800215c:	78f9      	ldrb	r1, [r7, #3]
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002164:	9301      	str	r3, [sp, #4]
 8002166:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	4623      	mov	r3, r4
 800216e:	f003 ff93 	bl	8006098 <USB_HC_Init>
 8002172:	4603      	mov	r3, r0
 8002174:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800217e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002180:	4618      	mov	r0, r3
 8002182:	371c      	adds	r7, #28
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}

08002188 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002194:	2300      	movs	r3, #0
 8002196:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_HCD_HC_Halt+0x1e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e00f      	b.n	80021c6 <HAL_HCD_HC_Halt+0x3e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	78fa      	ldrb	r2, [r7, #3]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f004 fb25 	bl	8006806 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
	...

080021d0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	4608      	mov	r0, r1
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	70fb      	strb	r3, [r7, #3]
 80021e2:	460b      	mov	r3, r1
 80021e4:	70bb      	strb	r3, [r7, #2]
 80021e6:	4613      	mov	r3, r2
 80021e8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	011b      	lsls	r3, r3, #4
 80021f2:	1a9b      	subs	r3, r3, r2
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	440b      	add	r3, r1
 80021f8:	3317      	adds	r3, #23
 80021fa:	78ba      	ldrb	r2, [r7, #2]
 80021fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80021fe:	78fa      	ldrb	r2, [r7, #3]
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	011b      	lsls	r3, r3, #4
 8002206:	1a9b      	subs	r3, r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	440b      	add	r3, r1
 800220c:	3326      	adds	r3, #38	@ 0x26
 800220e:	787a      	ldrb	r2, [r7, #1]
 8002210:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002212:	7c3b      	ldrb	r3, [r7, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d114      	bne.n	8002242 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002218:	78fa      	ldrb	r2, [r7, #3]
 800221a:	6879      	ldr	r1, [r7, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	011b      	lsls	r3, r3, #4
 8002220:	1a9b      	subs	r3, r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	440b      	add	r3, r1
 8002226:	332a      	adds	r3, #42	@ 0x2a
 8002228:	2203      	movs	r2, #3
 800222a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3319      	adds	r3, #25
 800223c:	7f3a      	ldrb	r2, [r7, #28]
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	e009      	b.n	8002256 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	332a      	adds	r3, #42	@ 0x2a
 8002252:	2202      	movs	r2, #2
 8002254:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002256:	787b      	ldrb	r3, [r7, #1]
 8002258:	2b03      	cmp	r3, #3
 800225a:	f200 8102 	bhi.w	8002462 <HAL_HCD_HC_SubmitRequest+0x292>
 800225e:	a201      	add	r2, pc, #4	@ (adr r2, 8002264 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800244d 	.word	0x0800244d
 800226c:	08002339 	.word	0x08002339
 8002270:	080023c3 	.word	0x080023c3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002274:	7c3b      	ldrb	r3, [r7, #16]
 8002276:	2b01      	cmp	r3, #1
 8002278:	f040 80f5 	bne.w	8002466 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800227c:	78bb      	ldrb	r3, [r7, #2]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d12d      	bne.n	80022de <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002282:	8b3b      	ldrh	r3, [r7, #24]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002288:	78fa      	ldrb	r2, [r7, #3]
 800228a:	6879      	ldr	r1, [r7, #4]
 800228c:	4613      	mov	r3, r2
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	1a9b      	subs	r3, r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	440b      	add	r3, r1
 8002296:	333d      	adds	r3, #61	@ 0x3d
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800229c:	78fa      	ldrb	r2, [r7, #3]
 800229e:	6879      	ldr	r1, [r7, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	011b      	lsls	r3, r3, #4
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	440b      	add	r3, r1
 80022aa:	333d      	adds	r3, #61	@ 0x3d
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d10a      	bne.n	80022c8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022b2:	78fa      	ldrb	r2, [r7, #3]
 80022b4:	6879      	ldr	r1, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	011b      	lsls	r3, r3, #4
 80022ba:	1a9b      	subs	r3, r3, r2
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	440b      	add	r3, r1
 80022c0:	332a      	adds	r3, #42	@ 0x2a
 80022c2:	2200      	movs	r2, #0
 80022c4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80022c6:	e0ce      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c8:	78fa      	ldrb	r2, [r7, #3]
 80022ca:	6879      	ldr	r1, [r7, #4]
 80022cc:	4613      	mov	r3, r2
 80022ce:	011b      	lsls	r3, r3, #4
 80022d0:	1a9b      	subs	r3, r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	332a      	adds	r3, #42	@ 0x2a
 80022d8:	2202      	movs	r2, #2
 80022da:	701a      	strb	r2, [r3, #0]
      break;
 80022dc:	e0c3      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80022de:	78fa      	ldrb	r2, [r7, #3]
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4613      	mov	r3, r2
 80022e4:	011b      	lsls	r3, r3, #4
 80022e6:	1a9b      	subs	r3, r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	440b      	add	r3, r1
 80022ec:	331a      	adds	r3, #26
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	f040 80b8 	bne.w	8002466 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80022f6:	78fa      	ldrb	r2, [r7, #3]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	1a9b      	subs	r3, r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	333c      	adds	r3, #60	@ 0x3c
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10a      	bne.n	8002322 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	332a      	adds	r3, #42	@ 0x2a
 800231c:	2200      	movs	r2, #0
 800231e:	701a      	strb	r2, [r3, #0]
      break;
 8002320:	e0a1      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	332a      	adds	r3, #42	@ 0x2a
 8002332:	2202      	movs	r2, #2
 8002334:	701a      	strb	r2, [r3, #0]
      break;
 8002336:	e096      	b.n	8002466 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002338:	78bb      	ldrb	r3, [r7, #2]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d120      	bne.n	8002380 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	6879      	ldr	r1, [r7, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	1a9b      	subs	r3, r3, r2
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	440b      	add	r3, r1
 800234c:	333d      	adds	r3, #61	@ 0x3d
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10a      	bne.n	800236a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002354:	78fa      	ldrb	r2, [r7, #3]
 8002356:	6879      	ldr	r1, [r7, #4]
 8002358:	4613      	mov	r3, r2
 800235a:	011b      	lsls	r3, r3, #4
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	440b      	add	r3, r1
 8002362:	332a      	adds	r3, #42	@ 0x2a
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002368:	e07e      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800236a:	78fa      	ldrb	r2, [r7, #3]
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	4613      	mov	r3, r2
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	332a      	adds	r3, #42	@ 0x2a
 800237a:	2202      	movs	r2, #2
 800237c:	701a      	strb	r2, [r3, #0]
      break;
 800237e:	e073      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002380:	78fa      	ldrb	r2, [r7, #3]
 8002382:	6879      	ldr	r1, [r7, #4]
 8002384:	4613      	mov	r3, r2
 8002386:	011b      	lsls	r3, r3, #4
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	440b      	add	r3, r1
 800238e:	333c      	adds	r3, #60	@ 0x3c
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002396:	78fa      	ldrb	r2, [r7, #3]
 8002398:	6879      	ldr	r1, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	011b      	lsls	r3, r3, #4
 800239e:	1a9b      	subs	r3, r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	440b      	add	r3, r1
 80023a4:	332a      	adds	r3, #42	@ 0x2a
 80023a6:	2200      	movs	r2, #0
 80023a8:	701a      	strb	r2, [r3, #0]
      break;
 80023aa:	e05d      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	011b      	lsls	r3, r3, #4
 80023b4:	1a9b      	subs	r3, r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	440b      	add	r3, r1
 80023ba:	332a      	adds	r3, #42	@ 0x2a
 80023bc:	2202      	movs	r2, #2
 80023be:	701a      	strb	r2, [r3, #0]
      break;
 80023c0:	e052      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023c2:	78bb      	ldrb	r3, [r7, #2]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d120      	bne.n	800240a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	333d      	adds	r3, #61	@ 0x3d
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10a      	bne.n	80023f4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	332a      	adds	r3, #42	@ 0x2a
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80023f2:	e039      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023f4:	78fa      	ldrb	r2, [r7, #3]
 80023f6:	6879      	ldr	r1, [r7, #4]
 80023f8:	4613      	mov	r3, r2
 80023fa:	011b      	lsls	r3, r3, #4
 80023fc:	1a9b      	subs	r3, r3, r2
 80023fe:	009b      	lsls	r3, r3, #2
 8002400:	440b      	add	r3, r1
 8002402:	332a      	adds	r3, #42	@ 0x2a
 8002404:	2202      	movs	r2, #2
 8002406:	701a      	strb	r2, [r3, #0]
      break;
 8002408:	e02e      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800240a:	78fa      	ldrb	r2, [r7, #3]
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	4613      	mov	r3, r2
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	1a9b      	subs	r3, r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	333c      	adds	r3, #60	@ 0x3c
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d10a      	bne.n	8002436 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002420:	78fa      	ldrb	r2, [r7, #3]
 8002422:	6879      	ldr	r1, [r7, #4]
 8002424:	4613      	mov	r3, r2
 8002426:	011b      	lsls	r3, r3, #4
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	440b      	add	r3, r1
 800242e:	332a      	adds	r3, #42	@ 0x2a
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
      break;
 8002434:	e018      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002436:	78fa      	ldrb	r2, [r7, #3]
 8002438:	6879      	ldr	r1, [r7, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	440b      	add	r3, r1
 8002444:	332a      	adds	r3, #42	@ 0x2a
 8002446:	2202      	movs	r2, #2
 8002448:	701a      	strb	r2, [r3, #0]
      break;
 800244a:	e00d      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800244c:	78fa      	ldrb	r2, [r7, #3]
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	1a9b      	subs	r3, r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	440b      	add	r3, r1
 800245a:	332a      	adds	r3, #42	@ 0x2a
 800245c:	2200      	movs	r2, #0
 800245e:	701a      	strb	r2, [r3, #0]
      break;
 8002460:	e002      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002462:	bf00      	nop
 8002464:	e000      	b.n	8002468 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002466:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	332c      	adds	r3, #44	@ 0x2c
 8002478:	697a      	ldr	r2, [r7, #20]
 800247a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800247c:	78fa      	ldrb	r2, [r7, #3]
 800247e:	8b39      	ldrh	r1, [r7, #24]
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	4403      	add	r3, r0
 800248c:	3334      	adds	r3, #52	@ 0x34
 800248e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	334c      	adds	r3, #76	@ 0x4c
 80024a0:	2200      	movs	r2, #0
 80024a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	3338      	adds	r3, #56	@ 0x38
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3315      	adds	r3, #21
 80024c8:	78fa      	ldrb	r2, [r7, #3]
 80024ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	334d      	adds	r3, #77	@ 0x4d
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6818      	ldr	r0, [r3, #0]
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	3310      	adds	r3, #16
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	4413      	add	r3, r2
 80024f4:	1d19      	adds	r1, r3, #4
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	799b      	ldrb	r3, [r3, #6]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f003 fef8 	bl	80062f0 <USB_HC_StartXfer>
 8002500:	4603      	mov	r3, r0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop

0800250c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f003 fbec 	bl	8005d00 <USB_GetMode>
 8002528:	4603      	mov	r3, r0
 800252a:	2b01      	cmp	r3, #1
 800252c:	f040 80fb 	bne.w	8002726 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fbaf 	bl	8005c98 <USB_ReadInterrupts>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80f1 	beq.w	8002724 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f003 fba6 	bl	8005c98 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002552:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002556:	d104      	bne.n	8002562 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002560:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f003 fb96 	bl	8005c98 <USB_ReadInterrupts>
 800256c:	4603      	mov	r3, r0
 800256e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002576:	d104      	bne.n	8002582 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002580:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 fb86 	bl	8005c98 <USB_ReadInterrupts>
 800258c:	4603      	mov	r3, r0
 800258e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002592:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002596:	d104      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fb76 	bl	8005c98 <USB_ReadInterrupts>
 80025ac:	4603      	mov	r3, r0
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d103      	bne.n	80025be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2202      	movs	r2, #2
 80025bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f003 fb68 	bl	8005c98 <USB_ReadInterrupts>
 80025c8:	4603      	mov	r3, r0
 80025ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025d2:	d120      	bne.n	8002616 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80025dc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d113      	bne.n	8002616 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80025ee:	2110      	movs	r1, #16
 80025f0:	6938      	ldr	r0, [r7, #16]
 80025f2:	f003 fa5b 	bl	8005aac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80025f6:	6938      	ldr	r0, [r7, #16]
 80025f8:	f003 fa8a 	bl	8005b10 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	7a5b      	ldrb	r3, [r3, #9]
 8002600:	2b02      	cmp	r3, #2
 8002602:	d105      	bne.n	8002610 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	2101      	movs	r1, #1
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fc7c 	bl	8005f08 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f006 fc43 	bl	8008e9c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f003 fb3c 	bl	8005c98 <USB_ReadInterrupts>
 8002620:	4603      	mov	r3, r0
 8002622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002626:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800262a:	d102      	bne.n	8002632 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f001 fd4d 	bl	80040cc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f003 fb2e 	bl	8005c98 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b08      	cmp	r3, #8
 8002644:	d106      	bne.n	8002654 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f006 fc0c 	bl	8008e64 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2208      	movs	r2, #8
 8002652:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f003 fb1d 	bl	8005c98 <USB_ReadInterrupts>
 800265e:	4603      	mov	r3, r0
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002668:	d139      	bne.n	80026de <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f004 f8b8 	bl	80067e4 <USB_HC_ReadInterrupt>
 8002674:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002676:	2300      	movs	r3, #0
 8002678:	617b      	str	r3, [r7, #20]
 800267a:	e025      	b.n	80026c8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	68ba      	ldr	r2, [r7, #8]
 8002684:	fa22 f303 	lsr.w	r3, r2, r3
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	2b00      	cmp	r3, #0
 800268e:	d018      	beq.n	80026c2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	015a      	lsls	r2, r3, #5
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4413      	add	r3, r2
 8002698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026a6:	d106      	bne.n	80026b6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f905 	bl	80028be <HCD_HC_IN_IRQHandler>
 80026b4:	e005      	b.n	80026c2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	b2db      	uxtb	r3, r3
 80026ba:	4619      	mov	r1, r3
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 ff67 	bl	8003590 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3301      	adds	r3, #1
 80026c6:	617b      	str	r3, [r7, #20]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	795b      	ldrb	r3, [r3, #5]
 80026cc:	461a      	mov	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d3d3      	bcc.n	800267c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f003 fad8 	bl	8005c98 <USB_ReadInterrupts>
 80026e8:	4603      	mov	r3, r0
 80026ea:	f003 0310 	and.w	r3, r3, #16
 80026ee:	2b10      	cmp	r3, #16
 80026f0:	d101      	bne.n	80026f6 <HAL_HCD_IRQHandler+0x1ea>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e000      	b.n	80026f8 <HAL_HCD_IRQHandler+0x1ec>
 80026f6:	2300      	movs	r3, #0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d014      	beq.n	8002726 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699a      	ldr	r2, [r3, #24]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f001 fbfe 	bl	8003f0e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	699a      	ldr	r2, [r3, #24]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f042 0210 	orr.w	r2, r2, #16
 8002720:	619a      	str	r2, [r3, #24]
 8002722:	e000      	b.n	8002726 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002724:	bf00      	nop
    }
  }
}
 8002726:	3718      	adds	r7, #24
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800273a:	2b01      	cmp	r3, #1
 800273c:	d101      	bne.n	8002742 <HAL_HCD_Start+0x16>
 800273e:	2302      	movs	r3, #2
 8002740:	e013      	b.n	800276a <HAL_HCD_Start+0x3e>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f003 fc40 	bl	8005fd6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f003 f938 	bl	80059d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b082      	sub	sp, #8
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_HCD_Stop+0x16>
 8002784:	2302      	movs	r3, #2
 8002786:	e00d      	b.n	80027a4 <HAL_HCD_Stop+0x32>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4618      	mov	r0, r3
 8002796:	f004 f993 	bl	8006ac0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80027a2:	2300      	movs	r3, #0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fbe2 	bl	8005f82 <USB_ResetPort>
 80027be:	4603      	mov	r3, r0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3708      	adds	r7, #8
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	334c      	adds	r3, #76	@ 0x4c
 80027e4:	781b      	ldrb	r3, [r3, #0]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	460b      	mov	r3, r1
 80027fc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3338      	adds	r3, #56	@ 0x38
 800280e:	681b      	ldr	r3, [r3, #0]
}
 8002810:	4618      	mov	r0, r3
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4618      	mov	r0, r3
 800282a:	f003 fc24 	bl	8006076 <USB_GetCurrentFrame>
 800282e:	4603      	mov	r3, r0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fbff 	bl	8006048 <USB_GetHostSpeed>
 800284a:	4603      	mov	r3, r0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	460b      	mov	r3, r1
 800285e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	331a      	adds	r3, #26
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	331b      	adds	r3, #27
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	3325      	adds	r3, #37	@ 0x25
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	3324      	adds	r3, #36	@ 0x24
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
 80028c6:	460b      	mov	r3, r1
 80028c8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f003 f9ee 	bl	8005cbe <USB_ReadChInterrupts>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b04      	cmp	r3, #4
 80028ea:	d11a      	bne.n	8002922 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028f8:	461a      	mov	r2, r3
 80028fa:	2304      	movs	r3, #4
 80028fc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028fe:	78fa      	ldrb	r2, [r7, #3]
 8002900:	6879      	ldr	r1, [r7, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	1a9b      	subs	r3, r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	334d      	adds	r3, #77	@ 0x4d
 800290e:	2207      	movs	r2, #7
 8002910:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f003 ff73 	bl	8006806 <USB_HC_Halt>
 8002920:	e09e      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f003 f9c7 	bl	8005cbe <USB_ReadChInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800293a:	d11b      	bne.n	8002974 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800293c:	78fb      	ldrb	r3, [r7, #3]
 800293e:	015a      	lsls	r2, r3, #5
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	4413      	add	r3, r2
 8002944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002948:	461a      	mov	r2, r3
 800294a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800294e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	334d      	adds	r3, #77	@ 0x4d
 8002960:	2208      	movs	r2, #8
 8002962:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	4611      	mov	r1, r2
 800296c:	4618      	mov	r0, r3
 800296e:	f003 ff4a 	bl	8006806 <USB_HC_Halt>
 8002972:	e075      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f003 f99e 	bl	8005cbe <USB_ReadChInterrupts>
 8002982:	4603      	mov	r3, r0
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b08      	cmp	r3, #8
 800298a:	d11a      	bne.n	80029c2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800298c:	78fb      	ldrb	r3, [r7, #3]
 800298e:	015a      	lsls	r2, r3, #5
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4413      	add	r3, r2
 8002994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002998:	461a      	mov	r2, r3
 800299a:	2308      	movs	r3, #8
 800299c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800299e:	78fa      	ldrb	r2, [r7, #3]
 80029a0:	6879      	ldr	r1, [r7, #4]
 80029a2:	4613      	mov	r3, r2
 80029a4:	011b      	lsls	r3, r3, #4
 80029a6:	1a9b      	subs	r3, r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	440b      	add	r3, r1
 80029ac:	334d      	adds	r3, #77	@ 0x4d
 80029ae:	2206      	movs	r2, #6
 80029b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	78fa      	ldrb	r2, [r7, #3]
 80029b8:	4611      	mov	r1, r2
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 ff23 	bl	8006806 <USB_HC_Halt>
 80029c0:	e04e      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	4611      	mov	r1, r2
 80029ca:	4618      	mov	r0, r3
 80029cc:	f003 f977 	bl	8005cbe <USB_ReadChInterrupts>
 80029d0:	4603      	mov	r3, r0
 80029d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029da:	d11b      	bne.n	8002a14 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	334d      	adds	r3, #77	@ 0x4d
 8002a00:	2209      	movs	r2, #9
 8002a02:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fefa 	bl	8006806 <USB_HC_Halt>
 8002a12:	e025      	b.n	8002a60 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 f94e 	bl	8005cbe <USB_ReadChInterrupts>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a28:	2b80      	cmp	r3, #128	@ 0x80
 8002a2a:	d119      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	2380      	movs	r3, #128	@ 0x80
 8002a3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	334d      	adds	r3, #77	@ 0x4d
 8002a4e:	2207      	movs	r2, #7
 8002a50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	78fa      	ldrb	r2, [r7, #3]
 8002a58:	4611      	mov	r1, r2
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f003 fed3 	bl	8006806 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	4611      	mov	r1, r2
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f003 f928 	bl	8005cbe <USB_ReadChInterrupts>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a78:	d112      	bne.n	8002aa0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f003 febf 	bl	8006806 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a88:	78fb      	ldrb	r3, [r7, #3]
 8002a8a:	015a      	lsls	r2, r3, #5
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	4413      	add	r3, r2
 8002a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a94:	461a      	mov	r2, r3
 8002a96:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a9a:	6093      	str	r3, [r2, #8]
 8002a9c:	f000 bd75 	b.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	78fa      	ldrb	r2, [r7, #3]
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f003 f908 	bl	8005cbe <USB_ReadChInterrupts>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	f003 0301 	and.w	r3, r3, #1
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	f040 8128 	bne.w	8002d0a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	015a      	lsls	r2, r3, #5
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	2320      	movs	r3, #32
 8002aca:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	331b      	adds	r3, #27
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d119      	bne.n	8002b16 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	1a9b      	subs	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	440b      	add	r3, r1
 8002af0:	331b      	adds	r3, #27
 8002af2:	2200      	movs	r2, #0
 8002af4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af6:	78fb      	ldrb	r3, [r7, #3]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	0151      	lsls	r1, r2, #5
 8002b08:	693a      	ldr	r2, [r7, #16]
 8002b0a:	440a      	add	r2, r1
 8002b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b14:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	799b      	ldrb	r3, [r3, #6]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d01b      	beq.n	8002b56 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b1e:	78fa      	ldrb	r2, [r7, #3]
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	4613      	mov	r3, r2
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	1a9b      	subs	r3, r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3330      	adds	r3, #48	@ 0x30
 8002b2e:	6819      	ldr	r1, [r3, #0]
 8002b30:	78fb      	ldrb	r3, [r7, #3]
 8002b32:	015a      	lsls	r2, r3, #5
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4413      	add	r3, r2
 8002b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b42:	78fa      	ldrb	r2, [r7, #3]
 8002b44:	1ac9      	subs	r1, r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4403      	add	r3, r0
 8002b52:	3338      	adds	r3, #56	@ 0x38
 8002b54:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	334d      	adds	r3, #77	@ 0x4d
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	3344      	adds	r3, #68	@ 0x44
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	015a      	lsls	r2, r3, #5
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	4413      	add	r3, r2
 8002b86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3326      	adds	r3, #38	@ 0x26
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3326      	adds	r3, #38	@ 0x26
 8002bb6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d110      	bne.n	8002bde <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 fe1e 	bl	8006806 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bca:	78fb      	ldrb	r3, [r7, #3]
 8002bcc:	015a      	lsls	r2, r3, #5
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	4413      	add	r3, r2
 8002bd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	2310      	movs	r3, #16
 8002bda:	6093      	str	r3, [r2, #8]
 8002bdc:	e03d      	b.n	8002c5a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3326      	adds	r3, #38	@ 0x26
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d00a      	beq.n	8002c0a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	6879      	ldr	r1, [r7, #4]
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	1a9b      	subs	r3, r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3326      	adds	r3, #38	@ 0x26
 8002c04:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d127      	bne.n	8002c5a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c0a:	78fb      	ldrb	r3, [r7, #3]
 8002c0c:	015a      	lsls	r2, r3, #5
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	4413      	add	r3, r2
 8002c12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	0151      	lsls	r1, r2, #5
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	440a      	add	r2, r1
 8002c20:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c24:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c28:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	334c      	adds	r3, #76	@ 0x4c
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	@ 0x4c
 8002c4e:	781a      	ldrb	r2, [r3, #0]
 8002c50:	78fb      	ldrb	r3, [r7, #3]
 8002c52:	4619      	mov	r1, r3
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f006 f92f 	bl	8008eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	799b      	ldrb	r3, [r3, #6]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d13b      	bne.n	8002cda <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3338      	adds	r3, #56	@ 0x38
 8002c72:	6819      	ldr	r1, [r3, #0]
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	4403      	add	r3, r0
 8002c82:	3328      	adds	r3, #40	@ 0x28
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	440b      	add	r3, r1
 8002c88:	1e59      	subs	r1, r3, #1
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4403      	add	r3, r0
 8002c98:	3328      	adds	r3, #40	@ 0x28
 8002c9a:	881b      	ldrh	r3, [r3, #0]
 8002c9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ca0:	f003 0301 	and.w	r3, r3, #1
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 8470 	beq.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002caa:	78fa      	ldrb	r2, [r7, #3]
 8002cac:	6879      	ldr	r1, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	011b      	lsls	r3, r3, #4
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	333c      	adds	r3, #60	@ 0x3c
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	f083 0301 	eor.w	r3, r3, #1
 8002cc2:	b2d8      	uxtb	r0, r3
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	333c      	adds	r3, #60	@ 0x3c
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	701a      	strb	r2, [r3, #0]
 8002cd6:	f000 bc58 	b.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002cda:	78fa      	ldrb	r2, [r7, #3]
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	4613      	mov	r3, r2
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	1a9b      	subs	r3, r3, r2
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	440b      	add	r3, r1
 8002ce8:	333c      	adds	r3, #60	@ 0x3c
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2d8      	uxtb	r0, r3
 8002cf4:	6879      	ldr	r1, [r7, #4]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	009b      	lsls	r3, r3, #2
 8002cfe:	440b      	add	r3, r1
 8002d00:	333c      	adds	r3, #60	@ 0x3c
 8002d02:	4602      	mov	r2, r0
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	f000 bc40 	b.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	4611      	mov	r1, r2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f002 ffd3 	bl	8005cbe <USB_ReadChInterrupts>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d131      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2320      	movs	r3, #32
 8002d32:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331a      	adds	r3, #26
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	f040 841f 	bne.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d60:	78fa      	ldrb	r2, [r7, #3]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	011b      	lsls	r3, r3, #4
 8002d68:	1a9b      	subs	r3, r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	334d      	adds	r3, #77	@ 0x4d
 8002d70:	2203      	movs	r2, #3
 8002d72:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f003 fd42 	bl	8006806 <USB_HC_Halt>
 8002d82:	f000 bc02 	b.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f002 ff95 	bl	8005cbe <USB_ReadChInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	f040 8305 	bne.w	80033aa <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	015a      	lsls	r2, r3, #5
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dac:	461a      	mov	r2, r3
 8002dae:	2302      	movs	r3, #2
 8002db0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	334d      	adds	r3, #77	@ 0x4d
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d114      	bne.n	8002df2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002dc8:	78fa      	ldrb	r2, [r7, #3]
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	011b      	lsls	r3, r3, #4
 8002dd0:	1a9b      	subs	r3, r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	334d      	adds	r3, #77	@ 0x4d
 8002dd8:	2202      	movs	r2, #2
 8002dda:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	334c      	adds	r3, #76	@ 0x4c
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e2cc      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	6879      	ldr	r1, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	334d      	adds	r3, #77	@ 0x4d
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b06      	cmp	r3, #6
 8002e06:	d114      	bne.n	8002e32 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e08:	78fa      	ldrb	r2, [r7, #3]
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	011b      	lsls	r3, r3, #4
 8002e10:	1a9b      	subs	r3, r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	440b      	add	r3, r1
 8002e16:	334d      	adds	r3, #77	@ 0x4d
 8002e18:	2202      	movs	r2, #2
 8002e1a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	334c      	adds	r3, #76	@ 0x4c
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	701a      	strb	r2, [r3, #0]
 8002e30:	e2ac      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	334d      	adds	r3, #77	@ 0x4d
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d00b      	beq.n	8002e60 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e48:	78fa      	ldrb	r2, [r7, #3]
 8002e4a:	6879      	ldr	r1, [r7, #4]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	1a9b      	subs	r3, r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	334d      	adds	r3, #77	@ 0x4d
 8002e58:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e5a:	2b09      	cmp	r3, #9
 8002e5c:	f040 80a6 	bne.w	8002fac <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	4613      	mov	r3, r2
 8002e66:	011b      	lsls	r3, r3, #4
 8002e68:	1a9b      	subs	r3, r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	334d      	adds	r3, #77	@ 0x4d
 8002e70:	2202      	movs	r2, #2
 8002e72:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3344      	adds	r3, #68	@ 0x44
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1c59      	adds	r1, r3, #1
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	011b      	lsls	r3, r3, #4
 8002e8e:	1a9b      	subs	r3, r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4403      	add	r3, r0
 8002e94:	3344      	adds	r3, #68	@ 0x44
 8002e96:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	6879      	ldr	r1, [r7, #4]
 8002e9c:	4613      	mov	r3, r2
 8002e9e:	011b      	lsls	r3, r3, #4
 8002ea0:	1a9b      	subs	r3, r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	440b      	add	r3, r1
 8002ea6:	3344      	adds	r3, #68	@ 0x44
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d943      	bls.n	8002f36 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	440b      	add	r3, r1
 8002ebc:	3344      	adds	r3, #68	@ 0x44
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	331a      	adds	r3, #26
 8002ed2:	781b      	ldrb	r3, [r3, #0]
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d123      	bne.n	8002f20 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	331b      	adds	r3, #27
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002eec:	78fa      	ldrb	r2, [r7, #3]
 8002eee:	6879      	ldr	r1, [r7, #4]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	1a9b      	subs	r3, r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	331c      	adds	r3, #28
 8002efc:	2200      	movs	r2, #0
 8002efe:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	015a      	lsls	r2, r3, #5
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	4413      	add	r3, r2
 8002f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	0151      	lsls	r1, r2, #5
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	440a      	add	r2, r1
 8002f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	011b      	lsls	r3, r3, #4
 8002f28:	1a9b      	subs	r3, r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	334c      	adds	r3, #76	@ 0x4c
 8002f30:	2204      	movs	r2, #4
 8002f32:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f34:	e229      	b.n	800338a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334c      	adds	r3, #76	@ 0x4c
 8002f46:	2202      	movs	r2, #2
 8002f48:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3326      	adds	r3, #38	@ 0x26
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00b      	beq.n	8002f78 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	3326      	adds	r3, #38	@ 0x26
 8002f70:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f72:	2b02      	cmp	r3, #2
 8002f74:	f040 8209 	bne.w	800338a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f8e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f96:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	015a      	lsls	r2, r3, #5
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002faa:	e1ee      	b.n	800338a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	334d      	adds	r3, #77	@ 0x4d
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b05      	cmp	r3, #5
 8002fc0:	f040 80c8 	bne.w	8003154 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334d      	adds	r3, #77	@ 0x4d
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	331b      	adds	r3, #27
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	f040 81ce 	bne.w	800338c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3326      	adds	r3, #38	@ 0x26
 8003000:	781b      	ldrb	r3, [r3, #0]
 8003002:	2b03      	cmp	r3, #3
 8003004:	d16b      	bne.n	80030de <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003006:	78fa      	ldrb	r2, [r7, #3]
 8003008:	6879      	ldr	r1, [r7, #4]
 800300a:	4613      	mov	r3, r2
 800300c:	011b      	lsls	r3, r3, #4
 800300e:	1a9b      	subs	r3, r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	440b      	add	r3, r1
 8003014:	3348      	adds	r3, #72	@ 0x48
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	1c59      	adds	r1, r3, #1
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4403      	add	r3, r0
 8003026:	3348      	adds	r3, #72	@ 0x48
 8003028:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	1a9b      	subs	r3, r3, r2
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	440b      	add	r3, r1
 8003038:	3348      	adds	r3, #72	@ 0x48
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d943      	bls.n	80030c8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3348      	adds	r3, #72	@ 0x48
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	331b      	adds	r3, #27
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3344      	adds	r3, #68	@ 0x44
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d809      	bhi.n	8003092 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	331c      	adds	r3, #28
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003092:	78fb      	ldrb	r3, [r7, #3]
 8003094:	015a      	lsls	r2, r3, #5
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4413      	add	r3, r2
 800309a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	0151      	lsls	r1, r2, #5
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	440a      	add	r2, r1
 80030a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030b0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334c      	adds	r3, #76	@ 0x4c
 80030c2:	2204      	movs	r2, #4
 80030c4:	701a      	strb	r2, [r3, #0]
 80030c6:	e014      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334c      	adds	r3, #76	@ 0x4c
 80030d8:	2202      	movs	r2, #2
 80030da:	701a      	strb	r2, [r3, #0]
 80030dc:	e009      	b.n	80030f2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334c      	adds	r3, #76	@ 0x4c
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3326      	adds	r3, #38	@ 0x26
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3326      	adds	r3, #38	@ 0x26
 8003118:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 8136 	bne.w	800338c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003136:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800313e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	e11b      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b03      	cmp	r3, #3
 8003168:	f040 8081 	bne.w	800326e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	331b      	adds	r3, #27
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	f040 80fa 	bne.w	800338c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	334c      	adds	r3, #76	@ 0x4c
 80031a8:	2202      	movs	r2, #2
 80031aa:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80031ac:	78fb      	ldrb	r3, [r7, #3]
 80031ae:	015a      	lsls	r2, r3, #5
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4413      	add	r3, r2
 80031b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	78fa      	ldrb	r2, [r7, #3]
 80031bc:	0151      	lsls	r1, r2, #5
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	440a      	add	r2, r1
 80031c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031c6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031ca:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80031cc:	78fb      	ldrb	r3, [r7, #3]
 80031ce:	015a      	lsls	r2, r3, #5
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	4413      	add	r3, r2
 80031d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	0151      	lsls	r1, r2, #5
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	440a      	add	r2, r1
 80031e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80031ea:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80031ec:	78fb      	ldrb	r3, [r7, #3]
 80031ee:	015a      	lsls	r2, r3, #5
 80031f0:	693b      	ldr	r3, [r7, #16]
 80031f2:	4413      	add	r3, r2
 80031f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	78fa      	ldrb	r2, [r7, #3]
 80031fc:	0151      	lsls	r1, r2, #5
 80031fe:	693a      	ldr	r2, [r7, #16]
 8003200:	440a      	add	r2, r1
 8003202:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003206:	f023 0320 	bic.w	r3, r3, #32
 800320a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800320c:	78fa      	ldrb	r2, [r7, #3]
 800320e:	6879      	ldr	r1, [r7, #4]
 8003210:	4613      	mov	r3, r2
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	1a9b      	subs	r3, r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	440b      	add	r3, r1
 800321a:	3326      	adds	r3, #38	@ 0x26
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00b      	beq.n	800323a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	6879      	ldr	r1, [r7, #4]
 8003226:	4613      	mov	r3, r2
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	1a9b      	subs	r3, r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	440b      	add	r3, r1
 8003230:	3326      	adds	r3, #38	@ 0x26
 8003232:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003234:	2b02      	cmp	r3, #2
 8003236:	f040 80a9 	bne.w	800338c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003250:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003258:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	015a      	lsls	r2, r3, #5
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	4413      	add	r3, r2
 8003262:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6013      	str	r3, [r2, #0]
 800326c:	e08e      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800326e:	78fa      	ldrb	r2, [r7, #3]
 8003270:	6879      	ldr	r1, [r7, #4]
 8003272:	4613      	mov	r3, r2
 8003274:	011b      	lsls	r3, r3, #4
 8003276:	1a9b      	subs	r3, r3, r2
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	440b      	add	r3, r1
 800327c:	334d      	adds	r3, #77	@ 0x4d
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d143      	bne.n	800330c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	334d      	adds	r3, #77	@ 0x4d
 8003294:	2202      	movs	r2, #2
 8003296:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	334c      	adds	r3, #76	@ 0x4c
 80032a8:	2202      	movs	r2, #2
 80032aa:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3326      	adds	r3, #38	@ 0x26
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3326      	adds	r3, #38	@ 0x26
 80032d2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d159      	bne.n	800338c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80032d8:	78fb      	ldrb	r3, [r7, #3]
 80032da:	015a      	lsls	r2, r3, #5
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	4413      	add	r3, r2
 80032e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80032f8:	78fb      	ldrb	r3, [r7, #3]
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003304:	461a      	mov	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6013      	str	r3, [r2, #0]
 800330a:	e03f      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	334d      	adds	r3, #77	@ 0x4d
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b08      	cmp	r3, #8
 8003320:	d126      	bne.n	8003370 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	334d      	adds	r3, #77	@ 0x4d
 8003332:	2202      	movs	r2, #2
 8003334:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	3344      	adds	r3, #68	@ 0x44
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	1c59      	adds	r1, r3, #1
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4403      	add	r3, r0
 8003356:	3344      	adds	r3, #68	@ 0x44
 8003358:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334c      	adds	r3, #76	@ 0x4c
 800336a:	2204      	movs	r2, #4
 800336c:	701a      	strb	r2, [r3, #0]
 800336e:	e00d      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	334d      	adds	r3, #77	@ 0x4d
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b02      	cmp	r3, #2
 8003384:	f000 8100 	beq.w	8003588 <HCD_HC_IN_IRQHandler+0xcca>
 8003388:	e000      	b.n	800338c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800338a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334c      	adds	r3, #76	@ 0x4c
 800339c:	781a      	ldrb	r2, [r3, #0]
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f005 fd88 	bl	8008eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033a8:	e0ef      	b.n	800358a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	4611      	mov	r1, r2
 80033b2:	4618      	mov	r0, r3
 80033b4:	f002 fc83 	bl	8005cbe <USB_ReadChInterrupts>
 80033b8:	4603      	mov	r3, r0
 80033ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033be:	2b40      	cmp	r3, #64	@ 0x40
 80033c0:	d12f      	bne.n	8003422 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	015a      	lsls	r2, r3, #5
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ce:	461a      	mov	r2, r3
 80033d0:	2340      	movs	r3, #64	@ 0x40
 80033d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	2205      	movs	r2, #5
 80033e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80033e8:	78fa      	ldrb	r2, [r7, #3]
 80033ea:	6879      	ldr	r1, [r7, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	011b      	lsls	r3, r3, #4
 80033f0:	1a9b      	subs	r3, r3, r2
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	440b      	add	r3, r1
 80033f6:	331a      	adds	r3, #26
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d109      	bne.n	8003412 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3344      	adds	r3, #68	@ 0x44
 800340e:	2200      	movs	r2, #0
 8003410:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	4611      	mov	r1, r2
 800341a:	4618      	mov	r0, r3
 800341c:	f003 f9f3 	bl	8006806 <USB_HC_Halt>
 8003420:	e0b3      	b.n	800358a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4611      	mov	r1, r2
 800342a:	4618      	mov	r0, r3
 800342c:	f002 fc47 	bl	8005cbe <USB_ReadChInterrupts>
 8003430:	4603      	mov	r3, r0
 8003432:	f003 0310 	and.w	r3, r3, #16
 8003436:	2b10      	cmp	r3, #16
 8003438:	f040 80a7 	bne.w	800358a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3326      	adds	r3, #38	@ 0x26
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b03      	cmp	r3, #3
 8003450:	d11b      	bne.n	800348a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	3344      	adds	r3, #68	@ 0x44
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	334d      	adds	r3, #77	@ 0x4d
 8003476:	2204      	movs	r2, #4
 8003478:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f003 f9bf 	bl	8006806 <USB_HC_Halt>
 8003488:	e03f      	b.n	800350a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800348a:	78fa      	ldrb	r2, [r7, #3]
 800348c:	6879      	ldr	r1, [r7, #4]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3326      	adds	r3, #38	@ 0x26
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3326      	adds	r3, #38	@ 0x26
 80034b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d129      	bne.n	800350a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	3344      	adds	r3, #68	@ 0x44
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	799b      	ldrb	r3, [r3, #6]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HCD_HC_IN_IRQHandler+0xc2a>
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	331b      	adds	r3, #27
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d110      	bne.n	800350a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	334d      	adds	r3, #77	@ 0x4d
 80034f8:	2204      	movs	r2, #4
 80034fa:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f003 f97e 	bl	8006806 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800350a:	78fa      	ldrb	r2, [r7, #3]
 800350c:	6879      	ldr	r1, [r7, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	011b      	lsls	r3, r3, #4
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	440b      	add	r3, r1
 8003518:	331b      	adds	r3, #27
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d129      	bne.n	8003574 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	331b      	adds	r3, #27
 8003530:	2200      	movs	r2, #0
 8003532:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	0151      	lsls	r1, r2, #5
 8003546:	693a      	ldr	r2, [r7, #16]
 8003548:	440a      	add	r2, r1
 800354a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800354e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003552:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003554:	78fb      	ldrb	r3, [r7, #3]
 8003556:	015a      	lsls	r2, r3, #5
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	4413      	add	r3, r2
 800355c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	0151      	lsls	r1, r2, #5
 8003566:	693a      	ldr	r2, [r7, #16]
 8003568:	440a      	add	r2, r1
 800356a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800356e:	f043 0320 	orr.w	r3, r3, #32
 8003572:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	2310      	movs	r3, #16
 8003584:	6093      	str	r3, [r2, #8]
 8003586:	e000      	b.n	800358a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003588:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800358a:	3718      	adds	r7, #24
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b086      	sub	sp, #24
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	78fa      	ldrb	r2, [r7, #3]
 80035ac:	4611      	mov	r1, r2
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 fb85 	bl	8005cbe <USB_ReadChInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f003 0304 	and.w	r3, r3, #4
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d11b      	bne.n	80035f6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ca:	461a      	mov	r2, r3
 80035cc:	2304      	movs	r3, #4
 80035ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	2207      	movs	r2, #7
 80035e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 f90a 	bl	8006806 <USB_HC_Halt>
 80035f2:	f000 bc89 	b.w	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	4611      	mov	r1, r2
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 fb5d 	bl	8005cbe <USB_ReadChInterrupts>
 8003604:	4603      	mov	r3, r0
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b20      	cmp	r3, #32
 800360c:	f040 8082 	bne.w	8003714 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	015a      	lsls	r2, r3, #5
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4413      	add	r3, r2
 8003618:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800361c:	461a      	mov	r2, r3
 800361e:	2320      	movs	r3, #32
 8003620:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3319      	adds	r3, #25
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d124      	bne.n	8003682 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003638:	78fa      	ldrb	r2, [r7, #3]
 800363a:	6879      	ldr	r1, [r7, #4]
 800363c:	4613      	mov	r3, r2
 800363e:	011b      	lsls	r3, r3, #4
 8003640:	1a9b      	subs	r3, r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	440b      	add	r3, r1
 8003646:	3319      	adds	r3, #25
 8003648:	2200      	movs	r2, #0
 800364a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800364c:	78fa      	ldrb	r2, [r7, #3]
 800364e:	6879      	ldr	r1, [r7, #4]
 8003650:	4613      	mov	r3, r2
 8003652:	011b      	lsls	r3, r3, #4
 8003654:	1a9b      	subs	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	334c      	adds	r3, #76	@ 0x4c
 800365c:	2202      	movs	r2, #2
 800365e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	334d      	adds	r3, #77	@ 0x4d
 8003670:	2203      	movs	r2, #3
 8003672:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f003 f8c2 	bl	8006806 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003682:	78fa      	ldrb	r2, [r7, #3]
 8003684:	6879      	ldr	r1, [r7, #4]
 8003686:	4613      	mov	r3, r2
 8003688:	011b      	lsls	r3, r3, #4
 800368a:	1a9b      	subs	r3, r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	440b      	add	r3, r1
 8003690:	331a      	adds	r3, #26
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	f040 8437 	bne.w	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	6879      	ldr	r1, [r7, #4]
 800369e:	4613      	mov	r3, r2
 80036a0:	011b      	lsls	r3, r3, #4
 80036a2:	1a9b      	subs	r3, r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	331b      	adds	r3, #27
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	f040 842b 	bne.w	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	3326      	adds	r3, #38	@ 0x26
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d009      	beq.n	80036dc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	331b      	adds	r3, #27
 80036d8:	2201      	movs	r2, #1
 80036da:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	334d      	adds	r3, #77	@ 0x4d
 80036ec:	2203      	movs	r2, #3
 80036ee:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 f884 	bl	8006806 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	4613      	mov	r3, r2
 8003704:	011b      	lsls	r3, r3, #4
 8003706:	1a9b      	subs	r3, r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	3344      	adds	r3, #68	@ 0x44
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e3f9      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	4611      	mov	r1, r2
 800371c:	4618      	mov	r0, r3
 800371e:	f002 face 	bl	8005cbe <USB_ReadChInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003728:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800372c:	d111      	bne.n	8003752 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800372e:	78fb      	ldrb	r3, [r7, #3]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373a:	461a      	mov	r2, r3
 800373c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003740:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	4611      	mov	r1, r2
 800374a:	4618      	mov	r0, r3
 800374c:	f003 f85b 	bl	8006806 <USB_HC_Halt>
 8003750:	e3da      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	4611      	mov	r1, r2
 800375a:	4618      	mov	r0, r3
 800375c:	f002 faaf 	bl	8005cbe <USB_ReadChInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d168      	bne.n	800383c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	3344      	adds	r3, #68	@ 0x44
 800377a:	2200      	movs	r2, #0
 800377c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	4611      	mov	r1, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f002 fa99 	bl	8005cbe <USB_ReadChInterrupts>
 800378c:	4603      	mov	r3, r0
 800378e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003792:	2b40      	cmp	r3, #64	@ 0x40
 8003794:	d112      	bne.n	80037bc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	6879      	ldr	r1, [r7, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	011b      	lsls	r3, r3, #4
 800379e:	1a9b      	subs	r3, r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	3319      	adds	r3, #25
 80037a6:	2201      	movs	r2, #1
 80037a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037b6:	461a      	mov	r2, r3
 80037b8:	2340      	movs	r3, #64	@ 0x40
 80037ba:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	6879      	ldr	r1, [r7, #4]
 80037c0:	4613      	mov	r3, r2
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	331b      	adds	r3, #27
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d019      	beq.n	8003806 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037d2:	78fa      	ldrb	r2, [r7, #3]
 80037d4:	6879      	ldr	r1, [r7, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	1a9b      	subs	r3, r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	440b      	add	r3, r1
 80037e0:	331b      	adds	r3, #27
 80037e2:	2200      	movs	r2, #0
 80037e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	015a      	lsls	r2, r3, #5
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4413      	add	r3, r2
 80037ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	0151      	lsls	r1, r2, #5
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	440a      	add	r2, r1
 80037fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003800:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003804:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003812:	461a      	mov	r2, r3
 8003814:	2301      	movs	r3, #1
 8003816:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003818:	78fa      	ldrb	r2, [r7, #3]
 800381a:	6879      	ldr	r1, [r7, #4]
 800381c:	4613      	mov	r3, r2
 800381e:	011b      	lsls	r3, r3, #4
 8003820:	1a9b      	subs	r3, r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	334d      	adds	r3, #77	@ 0x4d
 8003828:	2201      	movs	r2, #1
 800382a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	4611      	mov	r1, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f002 ffe6 	bl	8006806 <USB_HC_Halt>
 800383a:	e365      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	4611      	mov	r1, r2
 8003844:	4618      	mov	r0, r3
 8003846:	f002 fa3a 	bl	8005cbe <USB_ReadChInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d139      	bne.n	80038c8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	6879      	ldr	r1, [r7, #4]
 8003858:	4613      	mov	r3, r2
 800385a:	011b      	lsls	r3, r3, #4
 800385c:	1a9b      	subs	r3, r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	334d      	adds	r3, #77	@ 0x4d
 8003864:	2205      	movs	r2, #5
 8003866:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	4613      	mov	r3, r2
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	1a9b      	subs	r3, r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	331a      	adds	r3, #26
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d109      	bne.n	8003892 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3319      	adds	r3, #25
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3344      	adds	r3, #68	@ 0x44
 80038a2:	2200      	movs	r2, #0
 80038a4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	4611      	mov	r1, r2
 80038ae:	4618      	mov	r0, r3
 80038b0:	f002 ffa9 	bl	8006806 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c0:	461a      	mov	r2, r3
 80038c2:	2340      	movs	r3, #64	@ 0x40
 80038c4:	6093      	str	r3, [r2, #8]
 80038c6:	e31f      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f002 f9f4 	bl	8005cbe <USB_ReadChInterrupts>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d11a      	bne.n	8003916 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ec:	461a      	mov	r2, r3
 80038ee:	2308      	movs	r3, #8
 80038f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80038f2:	78fa      	ldrb	r2, [r7, #3]
 80038f4:	6879      	ldr	r1, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	1a9b      	subs	r3, r3, r2
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	440b      	add	r3, r1
 8003900:	334d      	adds	r3, #77	@ 0x4d
 8003902:	2206      	movs	r2, #6
 8003904:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f002 ff79 	bl	8006806 <USB_HC_Halt>
 8003914:	e2f8      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	4611      	mov	r1, r2
 800391e:	4618      	mov	r0, r3
 8003920:	f002 f9cd 	bl	8005cbe <USB_ReadChInterrupts>
 8003924:	4603      	mov	r3, r0
 8003926:	f003 0310 	and.w	r3, r3, #16
 800392a:	2b10      	cmp	r3, #16
 800392c:	d144      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	3344      	adds	r3, #68	@ 0x44
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	4613      	mov	r3, r2
 8003948:	011b      	lsls	r3, r3, #4
 800394a:	1a9b      	subs	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	334d      	adds	r3, #77	@ 0x4d
 8003952:	2204      	movs	r2, #4
 8003954:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3319      	adds	r3, #25
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d114      	bne.n	8003996 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800396c:	78fa      	ldrb	r2, [r7, #3]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	3318      	adds	r3, #24
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d109      	bne.n	8003996 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3319      	adds	r3, #25
 8003992:	2201      	movs	r2, #1
 8003994:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f002 ff31 	bl	8006806 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	2310      	movs	r3, #16
 80039b4:	6093      	str	r3, [r2, #8]
 80039b6:	e2a7      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f002 f97c 	bl	8005cbe <USB_ReadChInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039cc:	2b80      	cmp	r3, #128	@ 0x80
 80039ce:	f040 8083 	bne.w	8003ad8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	799b      	ldrb	r3, [r3, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d111      	bne.n	80039fe <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	4613      	mov	r3, r2
 80039e0:	011b      	lsls	r3, r3, #4
 80039e2:	1a9b      	subs	r3, r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	440b      	add	r3, r1
 80039e8:	334d      	adds	r3, #77	@ 0x4d
 80039ea:	2207      	movs	r2, #7
 80039ec:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	4611      	mov	r1, r2
 80039f6:	4618      	mov	r0, r3
 80039f8:	f002 ff05 	bl	8006806 <USB_HC_Halt>
 80039fc:	e062      	b.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	3344      	adds	r3, #68	@ 0x44
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4403      	add	r3, r0
 8003a1e:	3344      	adds	r3, #68	@ 0x44
 8003a20:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	4613      	mov	r3, r2
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	1a9b      	subs	r3, r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	440b      	add	r3, r1
 8003a30:	3344      	adds	r3, #68	@ 0x44
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d922      	bls.n	8003a7e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a38:	78fa      	ldrb	r2, [r7, #3]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3344      	adds	r3, #68	@ 0x44
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	334c      	adds	r3, #76	@ 0x4c
 8003a5c:	2204      	movs	r2, #4
 8003a5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	334c      	adds	r3, #76	@ 0x4c
 8003a70:	781a      	ldrb	r2, [r3, #0]
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	4619      	mov	r1, r3
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f005 fa1e 	bl	8008eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003a7c:	e022      	b.n	8003ac4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a7e:	78fa      	ldrb	r2, [r7, #3]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	011b      	lsls	r3, r3, #4
 8003a86:	1a9b      	subs	r3, r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	334c      	adds	r3, #76	@ 0x4c
 8003a8e:	2202      	movs	r2, #2
 8003a90:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003a92:	78fb      	ldrb	r3, [r7, #3]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003aa8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ab0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ab2:	78fb      	ldrb	r3, [r7, #3]
 8003ab4:	015a      	lsls	r2, r3, #5
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4413      	add	r3, r2
 8003aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003abe:	461a      	mov	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	015a      	lsls	r2, r3, #5
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4413      	add	r3, r2
 8003acc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2380      	movs	r3, #128	@ 0x80
 8003ad4:	6093      	str	r3, [r2, #8]
 8003ad6:	e217      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	4611      	mov	r1, r2
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 f8ec 	bl	8005cbe <USB_ReadChInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003aec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003af0:	d11b      	bne.n	8003b2a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	334d      	adds	r3, #77	@ 0x4d
 8003b02:	2209      	movs	r2, #9
 8003b04:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	4611      	mov	r1, r2
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f002 fe79 	bl	8006806 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b14:	78fb      	ldrb	r3, [r7, #3]
 8003b16:	015a      	lsls	r2, r3, #5
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b20:	461a      	mov	r2, r3
 8003b22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b26:	6093      	str	r3, [r2, #8]
 8003b28:	e1ee      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	78fa      	ldrb	r2, [r7, #3]
 8003b30:	4611      	mov	r1, r2
 8003b32:	4618      	mov	r0, r3
 8003b34:	f002 f8c3 	bl	8005cbe <USB_ReadChInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	f040 81df 	bne.w	8003f02 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	015a      	lsls	r2, r3, #5
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	4413      	add	r3, r2
 8003b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b50:	461a      	mov	r2, r3
 8003b52:	2302      	movs	r3, #2
 8003b54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	334d      	adds	r3, #77	@ 0x4d
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	f040 8093 	bne.w	8003c94 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334d      	adds	r3, #77	@ 0x4d
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334c      	adds	r3, #76	@ 0x4c
 8003b92:	2201      	movs	r2, #1
 8003b94:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	3326      	adds	r3, #38	@ 0x26
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d00b      	beq.n	8003bc4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003bac:	78fa      	ldrb	r2, [r7, #3]
 8003bae:	6879      	ldr	r1, [r7, #4]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	1a9b      	subs	r3, r3, r2
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	440b      	add	r3, r1
 8003bba:	3326      	adds	r3, #38	@ 0x26
 8003bbc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003bbe:	2b03      	cmp	r3, #3
 8003bc0:	f040 8190 	bne.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	799b      	ldrb	r3, [r3, #6]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d115      	bne.n	8003bf8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	6879      	ldr	r1, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	333d      	adds	r3, #61	@ 0x3d
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	f083 0301 	eor.w	r3, r3, #1
 8003be4:	b2d8      	uxtb	r0, r3
 8003be6:	6879      	ldr	r1, [r7, #4]
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	1a9b      	subs	r3, r3, r2
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	440b      	add	r3, r1
 8003bf2:	333d      	adds	r3, #61	@ 0x3d
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	799b      	ldrb	r3, [r3, #6]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	f040 8171 	bne.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3334      	adds	r3, #52	@ 0x34
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f000 8165 	beq.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	3334      	adds	r3, #52	@ 0x34
 8003c2a:	6819      	ldr	r1, [r3, #0]
 8003c2c:	78fa      	ldrb	r2, [r7, #3]
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	4613      	mov	r3, r2
 8003c32:	011b      	lsls	r3, r3, #4
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4403      	add	r3, r0
 8003c3a:	3328      	adds	r3, #40	@ 0x28
 8003c3c:	881b      	ldrh	r3, [r3, #0]
 8003c3e:	440b      	add	r3, r1
 8003c40:	1e59      	subs	r1, r3, #1
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	4403      	add	r3, r0
 8003c50:	3328      	adds	r3, #40	@ 0x28
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c58:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 813f 	beq.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	333d      	adds	r3, #61	@ 0x3d
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	f083 0301 	eor.w	r3, r3, #1
 8003c7e:	b2d8      	uxtb	r0, r3
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	333d      	adds	r3, #61	@ 0x3d
 8003c8e:	4602      	mov	r2, r0
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e127      	b.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334d      	adds	r3, #77	@ 0x4d
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d120      	bne.n	8003cec <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	334d      	adds	r3, #77	@ 0x4d
 8003cba:	2202      	movs	r2, #2
 8003cbc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	331b      	adds	r3, #27
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 8107 	bne.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	6879      	ldr	r1, [r7, #4]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	1a9b      	subs	r3, r3, r2
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	440b      	add	r3, r1
 8003ce4:	334c      	adds	r3, #76	@ 0x4c
 8003ce6:	2202      	movs	r2, #2
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e0fb      	b.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	334d      	adds	r3, #77	@ 0x4d
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	d13a      	bne.n	8003d78 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d02:	78fa      	ldrb	r2, [r7, #3]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	011b      	lsls	r3, r3, #4
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	334d      	adds	r3, #77	@ 0x4d
 8003d12:	2202      	movs	r2, #2
 8003d14:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	334c      	adds	r3, #76	@ 0x4c
 8003d26:	2202      	movs	r2, #2
 8003d28:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	331b      	adds	r3, #27
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 80d1 	bne.w	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d42:	78fa      	ldrb	r2, [r7, #3]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	1a9b      	subs	r3, r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	331b      	adds	r3, #27
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	015a      	lsls	r2, r3, #5
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	78fa      	ldrb	r2, [r7, #3]
 8003d66:	0151      	lsls	r1, r2, #5
 8003d68:	693a      	ldr	r2, [r7, #16]
 8003d6a:	440a      	add	r2, r1
 8003d6c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d74:	6053      	str	r3, [r2, #4]
 8003d76:	e0b5      	b.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003d78:	78fa      	ldrb	r2, [r7, #3]
 8003d7a:	6879      	ldr	r1, [r7, #4]
 8003d7c:	4613      	mov	r3, r2
 8003d7e:	011b      	lsls	r3, r3, #4
 8003d80:	1a9b      	subs	r3, r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	440b      	add	r3, r1
 8003d86:	334d      	adds	r3, #77	@ 0x4d
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d114      	bne.n	8003db8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	@ 0x4d
 8003d9e:	2202      	movs	r2, #2
 8003da0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	334c      	adds	r3, #76	@ 0x4c
 8003db2:	2202      	movs	r2, #2
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	e095      	b.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003db8:	78fa      	ldrb	r2, [r7, #3]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	011b      	lsls	r3, r3, #4
 8003dc0:	1a9b      	subs	r3, r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	334d      	adds	r3, #77	@ 0x4d
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b06      	cmp	r3, #6
 8003dcc:	d114      	bne.n	8003df8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	334d      	adds	r3, #77	@ 0x4d
 8003dde:	2202      	movs	r2, #2
 8003de0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003de2:	78fa      	ldrb	r2, [r7, #3]
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	4613      	mov	r3, r2
 8003de8:	011b      	lsls	r3, r3, #4
 8003dea:	1a9b      	subs	r3, r3, r2
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	440b      	add	r3, r1
 8003df0:	334c      	adds	r3, #76	@ 0x4c
 8003df2:	2205      	movs	r2, #5
 8003df4:	701a      	strb	r2, [r3, #0]
 8003df6:	e075      	b.n	8003ee4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	334d      	adds	r3, #77	@ 0x4d
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	2b07      	cmp	r3, #7
 8003e0c:	d00a      	beq.n	8003e24 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334d      	adds	r3, #77	@ 0x4d
 8003e1e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d170      	bne.n	8003f06 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	6879      	ldr	r1, [r7, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	011b      	lsls	r3, r3, #4
 8003e2c:	1a9b      	subs	r3, r3, r2
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	334d      	adds	r3, #77	@ 0x4d
 8003e34:	2202      	movs	r2, #2
 8003e36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3344      	adds	r3, #68	@ 0x44
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	1c59      	adds	r1, r3, #1
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4403      	add	r3, r0
 8003e58:	3344      	adds	r3, #68	@ 0x44
 8003e5a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e5c:	78fa      	ldrb	r2, [r7, #3]
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3344      	adds	r3, #68	@ 0x44
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d914      	bls.n	8003e9c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e72:	78fa      	ldrb	r2, [r7, #3]
 8003e74:	6879      	ldr	r1, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	440b      	add	r3, r1
 8003e80:	3344      	adds	r3, #68	@ 0x44
 8003e82:	2200      	movs	r2, #0
 8003e84:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e86:	78fa      	ldrb	r2, [r7, #3]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	334c      	adds	r3, #76	@ 0x4c
 8003e96:	2204      	movs	r2, #4
 8003e98:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e9a:	e022      	b.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e9c:	78fa      	ldrb	r2, [r7, #3]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	334c      	adds	r3, #76	@ 0x4c
 8003eac:	2202      	movs	r2, #2
 8003eae:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003eb0:	78fb      	ldrb	r3, [r7, #3]
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ec6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ece:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ed0:	78fb      	ldrb	r3, [r7, #3]
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003edc:	461a      	mov	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ee2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ee4:	78fa      	ldrb	r2, [r7, #3]
 8003ee6:	6879      	ldr	r1, [r7, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	1a9b      	subs	r3, r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	334c      	adds	r3, #76	@ 0x4c
 8003ef4:	781a      	ldrb	r2, [r3, #0]
 8003ef6:	78fb      	ldrb	r3, [r7, #3]
 8003ef8:	4619      	mov	r1, r3
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f004 ffdc 	bl	8008eb8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f00:	e002      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003f06:	bf00      	nop
  }
}
 8003f08:	3718      	adds	r7, #24
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}

08003f0e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b08a      	sub	sp, #40	@ 0x28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f1e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 030f 	and.w	r3, r3, #15
 8003f2e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	0c5b      	lsrs	r3, r3, #17
 8003f34:	f003 030f 	and.w	r3, r3, #15
 8003f38:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f42:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d004      	beq.n	8003f54 <HCD_RXQLVL_IRQHandler+0x46>
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	f000 80b6 	beq.w	80040be <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f52:	e0b7      	b.n	80040c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80b3 	beq.w	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	4613      	mov	r3, r2
 8003f62:	011b      	lsls	r3, r3, #4
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	332c      	adds	r3, #44	@ 0x2c
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f000 80a7 	beq.w	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f74:	6879      	ldr	r1, [r7, #4]
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	1a9b      	subs	r3, r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	440b      	add	r3, r1
 8003f82:	3338      	adds	r3, #56	@ 0x38
 8003f84:	681a      	ldr	r2, [r3, #0]
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	18d1      	adds	r1, r2, r3
 8003f8a:	6878      	ldr	r0, [r7, #4]
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4403      	add	r3, r0
 8003f98:	3334      	adds	r3, #52	@ 0x34
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4299      	cmp	r1, r3
 8003f9e:	f200 8083 	bhi.w	80040a8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	6879      	ldr	r1, [r7, #4]
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4613      	mov	r3, r2
 8003fac:	011b      	lsls	r3, r3, #4
 8003fae:	1a9b      	subs	r3, r3, r2
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	440b      	add	r3, r1
 8003fb4:	332c      	adds	r3, #44	@ 0x2c
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	693a      	ldr	r2, [r7, #16]
 8003fba:	b292      	uxth	r2, r2
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	f001 fe13 	bl	8005be8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	332c      	adds	r3, #44	@ 0x2c
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	18d1      	adds	r1, r2, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	011b      	lsls	r3, r3, #4
 8003fe0:	1a9b      	subs	r3, r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4403      	add	r3, r0
 8003fe6:	332c      	adds	r3, #44	@ 0x2c
 8003fe8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	3338      	adds	r3, #56	@ 0x38
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	18d1      	adds	r1, r2, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4403      	add	r3, r0
 800400e:	3338      	adds	r3, #56	@ 0x38
 8004010:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	6a3b      	ldr	r3, [r7, #32]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	0cdb      	lsrs	r3, r3, #19
 8004022:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004026:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004028:	6879      	ldr	r1, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	3328      	adds	r3, #40	@ 0x28
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	4293      	cmp	r3, r2
 8004040:	d13f      	bne.n	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d03c      	beq.n	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004048:	69bb      	ldr	r3, [r7, #24]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	6a3b      	ldr	r3, [r7, #32]
 800404e:	4413      	add	r3, r2
 8004050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800405e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004066:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	6a3b      	ldr	r3, [r7, #32]
 800406e:	4413      	add	r3, r2
 8004070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004074:	461a      	mov	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	440b      	add	r3, r1
 8004088:	333c      	adds	r3, #60	@ 0x3c
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	f083 0301 	eor.w	r3, r3, #1
 8004090:	b2d8      	uxtb	r0, r3
 8004092:	6879      	ldr	r1, [r7, #4]
 8004094:	69ba      	ldr	r2, [r7, #24]
 8004096:	4613      	mov	r3, r2
 8004098:	011b      	lsls	r3, r3, #4
 800409a:	1a9b      	subs	r3, r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	333c      	adds	r3, #60	@ 0x3c
 80040a2:	4602      	mov	r2, r0
 80040a4:	701a      	strb	r2, [r3, #0]
      break;
 80040a6:	e00c      	b.n	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	69ba      	ldr	r2, [r7, #24]
 80040ac:	4613      	mov	r3, r2
 80040ae:	011b      	lsls	r3, r3, #4
 80040b0:	1a9b      	subs	r3, r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	334c      	adds	r3, #76	@ 0x4c
 80040b8:	2204      	movs	r2, #4
 80040ba:	701a      	strb	r2, [r3, #0]
      break;
 80040bc:	e001      	b.n	80040c2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80040be:	bf00      	nop
 80040c0:	e000      	b.n	80040c4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80040c2:	bf00      	nop
  }
}
 80040c4:	bf00      	nop
 80040c6:	3728      	adds	r7, #40	@ 0x28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}

080040cc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b086      	sub	sp, #24
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80040f8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d10b      	bne.n	800411c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d102      	bne.n	8004114 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f004 feb6 	bl	8008e80 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f043 0302 	orr.w	r3, r3, #2
 800411a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	f003 0308 	and.w	r3, r3, #8
 8004122:	2b08      	cmp	r3, #8
 8004124:	d132      	bne.n	800418c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	f043 0308 	orr.w	r3, r3, #8
 800412c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b04      	cmp	r3, #4
 8004136:	d126      	bne.n	8004186 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	7a5b      	ldrb	r3, [r3, #9]
 800413c:	2b02      	cmp	r3, #2
 800413e:	d113      	bne.n	8004168 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004146:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800414a:	d106      	bne.n	800415a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f001 fed8 	bl	8005f08 <USB_InitFSLSPClkSel>
 8004158:	e011      	b.n	800417e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2101      	movs	r1, #1
 8004160:	4618      	mov	r0, r3
 8004162:	f001 fed1 	bl	8005f08 <USB_InitFSLSPClkSel>
 8004166:	e00a      	b.n	800417e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	79db      	ldrb	r3, [r3, #7]
 800416c:	2b01      	cmp	r3, #1
 800416e:	d106      	bne.n	800417e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004176:	461a      	mov	r2, r3
 8004178:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800417c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f004 fea8 	bl	8008ed4 <HAL_HCD_PortEnabled_Callback>
 8004184:	e002      	b.n	800418c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f004 feb2 	bl	8008ef0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b20      	cmp	r3, #32
 8004194:	d103      	bne.n	800419e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f043 0320 	orr.w	r3, r3, #32
 800419c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041a4:	461a      	mov	r2, r3
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	6013      	str	r3, [r2, #0]
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
	...

080041b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e12b      	b.n	800441e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fc fca8 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	@ 0x24
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f022 0201 	bic.w	r2, r2, #1
 80041f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004218:	f001 fa20 	bl	800565c <HAL_RCC_GetPCLK1Freq>
 800421c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	4a81      	ldr	r2, [pc, #516]	@ (8004428 <HAL_I2C_Init+0x274>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d807      	bhi.n	8004238 <HAL_I2C_Init+0x84>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4a80      	ldr	r2, [pc, #512]	@ (800442c <HAL_I2C_Init+0x278>)
 800422c:	4293      	cmp	r3, r2
 800422e:	bf94      	ite	ls
 8004230:	2301      	movls	r3, #1
 8004232:	2300      	movhi	r3, #0
 8004234:	b2db      	uxtb	r3, r3
 8004236:	e006      	b.n	8004246 <HAL_I2C_Init+0x92>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4a7d      	ldr	r2, [pc, #500]	@ (8004430 <HAL_I2C_Init+0x27c>)
 800423c:	4293      	cmp	r3, r2
 800423e:	bf94      	ite	ls
 8004240:	2301      	movls	r3, #1
 8004242:	2300      	movhi	r3, #0
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e0e7      	b.n	800441e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	4a78      	ldr	r2, [pc, #480]	@ (8004434 <HAL_I2C_Init+0x280>)
 8004252:	fba2 2303 	umull	r2, r3, r2, r3
 8004256:	0c9b      	lsrs	r3, r3, #18
 8004258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68ba      	ldr	r2, [r7, #8]
 800426a:	430a      	orrs	r2, r1
 800426c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a6a      	ldr	r2, [pc, #424]	@ (8004428 <HAL_I2C_Init+0x274>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d802      	bhi.n	8004288 <HAL_I2C_Init+0xd4>
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	3301      	adds	r3, #1
 8004286:	e009      	b.n	800429c <HAL_I2C_Init+0xe8>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800428e:	fb02 f303 	mul.w	r3, r2, r3
 8004292:	4a69      	ldr	r2, [pc, #420]	@ (8004438 <HAL_I2C_Init+0x284>)
 8004294:	fba2 2303 	umull	r2, r3, r2, r3
 8004298:	099b      	lsrs	r3, r3, #6
 800429a:	3301      	adds	r3, #1
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	6812      	ldr	r2, [r2, #0]
 80042a0:	430b      	orrs	r3, r1
 80042a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	495c      	ldr	r1, [pc, #368]	@ (8004428 <HAL_I2C_Init+0x274>)
 80042b8:	428b      	cmp	r3, r1
 80042ba:	d819      	bhi.n	80042f0 <HAL_I2C_Init+0x13c>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	1e59      	subs	r1, r3, #1
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042d0:	400b      	ands	r3, r1
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <HAL_I2C_Init+0x138>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1e59      	subs	r1, r3, #1
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	005b      	lsls	r3, r3, #1
 80042e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80042e4:	3301      	adds	r3, #1
 80042e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042ea:	e051      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 80042ec:	2304      	movs	r3, #4
 80042ee:	e04f      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d111      	bne.n	800431c <HAL_I2C_Init+0x168>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1e58      	subs	r0, r3, #1
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	460b      	mov	r3, r1
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	440b      	add	r3, r1
 8004306:	fbb0 f3f3 	udiv	r3, r0, r3
 800430a:	3301      	adds	r3, #1
 800430c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	e012      	b.n	8004342 <HAL_I2C_Init+0x18e>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	1e58      	subs	r0, r3, #1
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6859      	ldr	r1, [r3, #4]
 8004324:	460b      	mov	r3, r1
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	0099      	lsls	r1, r3, #2
 800432c:	440b      	add	r3, r1
 800432e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <HAL_I2C_Init+0x196>
 8004346:	2301      	movs	r3, #1
 8004348:	e022      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10e      	bne.n	8004370 <HAL_I2C_Init+0x1bc>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1e58      	subs	r0, r3, #1
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6859      	ldr	r1, [r3, #4]
 800435a:	460b      	mov	r3, r1
 800435c:	005b      	lsls	r3, r3, #1
 800435e:	440b      	add	r3, r1
 8004360:	fbb0 f3f3 	udiv	r3, r0, r3
 8004364:	3301      	adds	r3, #1
 8004366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800436a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800436e:	e00f      	b.n	8004390 <HAL_I2C_Init+0x1dc>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e58      	subs	r0, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6859      	ldr	r1, [r3, #4]
 8004378:	460b      	mov	r3, r1
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	0099      	lsls	r1, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	fbb0 f3f3 	udiv	r3, r0, r3
 8004386:	3301      	adds	r3, #1
 8004388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6809      	ldr	r1, [r1, #0]
 8004394:	4313      	orrs	r3, r2
 8004396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	69da      	ldr	r2, [r3, #28]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	431a      	orrs	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	430a      	orrs	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6911      	ldr	r1, [r2, #16]
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	68d2      	ldr	r2, [r2, #12]
 80043ca:	4311      	orrs	r1, r2
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	695a      	ldr	r2, [r3, #20]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	431a      	orrs	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f042 0201 	orr.w	r2, r2, #1
 80043fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	000186a0 	.word	0x000186a0
 800442c:	001e847f 	.word	0x001e847f
 8004430:	003d08ff 	.word	0x003d08ff
 8004434:	431bde83 	.word	0x431bde83
 8004438:	10624dd3 	.word	0x10624dd3

0800443c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b088      	sub	sp, #32
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e128      	b.n	80046a0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a90      	ldr	r2, [pc, #576]	@ (80046a8 <HAL_I2S_Init+0x26c>)
 8004466:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7fc fba9 	bl	8000bc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004484:	f023 030f 	bic.w	r3, r3, #15
 8004488:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2202      	movs	r2, #2
 8004490:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b02      	cmp	r3, #2
 8004498:	d060      	beq.n	800455c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d102      	bne.n	80044a8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044a2:	2310      	movs	r3, #16
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	e001      	b.n	80044ac <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044a8:	2320      	movs	r3, #32
 80044aa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d802      	bhi.n	80044ba <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	005b      	lsls	r3, r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f001 f9c4 	bl	8005848 <HAL_RCCEx_GetPeriphCLKFreq>
 80044c0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ca:	d125      	bne.n	8004518 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	fbb2 f2f3 	udiv	r2, r2, r3
 80044de:	4613      	mov	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4413      	add	r3, r2
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	461a      	mov	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f0:	3305      	adds	r3, #5
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	e01f      	b.n	8004536 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004500:	4613      	mov	r3, r2
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4413      	add	r3, r2
 8004506:	005b      	lsls	r3, r3, #1
 8004508:	461a      	mov	r2, r3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004512:	3305      	adds	r3, #5
 8004514:	613b      	str	r3, [r7, #16]
 8004516:	e00e      	b.n	8004536 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004520:	4613      	mov	r3, r2
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	4413      	add	r3, r2
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	3305      	adds	r3, #5
 8004534:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	4a5c      	ldr	r2, [pc, #368]	@ (80046ac <HAL_I2S_Init+0x270>)
 800453a:	fba2 2303 	umull	r2, r3, r2, r3
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f003 0301 	and.w	r3, r3, #1
 8004548:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	021b      	lsls	r3, r3, #8
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800455c:	2302      	movs	r3, #2
 800455e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d902      	bls.n	8004570 <HAL_I2S_Init+0x134>
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	2bff      	cmp	r3, #255	@ 0xff
 800456e:	d907      	bls.n	8004580 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004574:	f043 0210 	orr.w	r2, r3, #16
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e08f      	b.n	80046a0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691a      	ldr	r2, [r3, #16]
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	ea42 0103 	orr.w	r1, r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	430a      	orrs	r2, r1
 8004592:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800459e:	f023 030f 	bic.w	r3, r3, #15
 80045a2:	687a      	ldr	r2, [r7, #4]
 80045a4:	6851      	ldr	r1, [r2, #4]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	6892      	ldr	r2, [r2, #8]
 80045aa:	4311      	orrs	r1, r2
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	68d2      	ldr	r2, [r2, #12]
 80045b0:	4311      	orrs	r1, r2
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	6992      	ldr	r2, [r2, #24]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045c2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a1b      	ldr	r3, [r3, #32]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d161      	bne.n	8004690 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	4a38      	ldr	r2, [pc, #224]	@ (80046b0 <HAL_I2S_Init+0x274>)
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a37      	ldr	r2, [pc, #220]	@ (80046b4 <HAL_I2S_Init+0x278>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d101      	bne.n	80045e0 <HAL_I2S_Init+0x1a4>
 80045dc:	4b36      	ldr	r3, [pc, #216]	@ (80046b8 <HAL_I2S_Init+0x27c>)
 80045de:	e001      	b.n	80045e4 <HAL_I2S_Init+0x1a8>
 80045e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	6812      	ldr	r2, [r2, #0]
 80045ea:	4932      	ldr	r1, [pc, #200]	@ (80046b4 <HAL_I2S_Init+0x278>)
 80045ec:	428a      	cmp	r2, r1
 80045ee:	d101      	bne.n	80045f4 <HAL_I2S_Init+0x1b8>
 80045f0:	4a31      	ldr	r2, [pc, #196]	@ (80046b8 <HAL_I2S_Init+0x27c>)
 80045f2:	e001      	b.n	80045f8 <HAL_I2S_Init+0x1bc>
 80045f4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045f8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80045fc:	f023 030f 	bic.w	r3, r3, #15
 8004600:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a2b      	ldr	r2, [pc, #172]	@ (80046b4 <HAL_I2S_Init+0x278>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d101      	bne.n	8004610 <HAL_I2S_Init+0x1d4>
 800460c:	4b2a      	ldr	r3, [pc, #168]	@ (80046b8 <HAL_I2S_Init+0x27c>)
 800460e:	e001      	b.n	8004614 <HAL_I2S_Init+0x1d8>
 8004610:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004614:	2202      	movs	r2, #2
 8004616:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a25      	ldr	r2, [pc, #148]	@ (80046b4 <HAL_I2S_Init+0x278>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d101      	bne.n	8004626 <HAL_I2S_Init+0x1ea>
 8004622:	4b25      	ldr	r3, [pc, #148]	@ (80046b8 <HAL_I2S_Init+0x27c>)
 8004624:	e001      	b.n	800462a <HAL_I2S_Init+0x1ee>
 8004626:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800462a:	69db      	ldr	r3, [r3, #28]
 800462c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004636:	d003      	beq.n	8004640 <HAL_I2S_Init+0x204>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d103      	bne.n	8004648 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004640:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004644:	613b      	str	r3, [r7, #16]
 8004646:	e001      	b.n	800464c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004648:	2300      	movs	r3, #0
 800464a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004656:	4313      	orrs	r3, r2
 8004658:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004660:	4313      	orrs	r3, r2
 8004662:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	699b      	ldr	r3, [r3, #24]
 8004668:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800466a:	4313      	orrs	r3, r2
 800466c:	b29a      	uxth	r2, r3
 800466e:	897b      	ldrh	r3, [r7, #10]
 8004670:	4313      	orrs	r3, r2
 8004672:	b29b      	uxth	r3, r3
 8004674:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004678:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a0d      	ldr	r2, [pc, #52]	@ (80046b4 <HAL_I2S_Init+0x278>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <HAL_I2S_Init+0x24c>
 8004684:	4b0c      	ldr	r3, [pc, #48]	@ (80046b8 <HAL_I2S_Init+0x27c>)
 8004686:	e001      	b.n	800468c <HAL_I2S_Init+0x250>
 8004688:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800468c:	897a      	ldrh	r2, [r7, #10]
 800468e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2201      	movs	r2, #1
 800469a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	080047b3 	.word	0x080047b3
 80046ac:	cccccccd 	.word	0xcccccccd
 80046b0:	080048c9 	.word	0x080048c9
 80046b4:	40003800 	.word	0x40003800
 80046b8:	40003400 	.word	0x40003400

080046bc <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004704:	881a      	ldrh	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004710:	1c9a      	adds	r2, r3, #2
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004728:	b29b      	uxth	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d10e      	bne.n	800474c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685a      	ldr	r2, [r3, #4]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800473c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2201      	movs	r2, #1
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff ffb8 	bl	80046bc <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800474c:	bf00      	nop
 800474e:	3708      	adds	r7, #8
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b082      	sub	sp, #8
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004766:	b292      	uxth	r2, r2
 8004768:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	1c9a      	adds	r2, r3, #2
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004778:	b29b      	uxth	r3, r3
 800477a:	3b01      	subs	r3, #1
 800477c:	b29a      	uxth	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004786:	b29b      	uxth	r3, r3
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10e      	bne.n	80047aa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685a      	ldr	r2, [r3, #4]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800479a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff ff93 	bl	80046d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047aa:	bf00      	nop
 80047ac:	3708      	adds	r7, #8
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b086      	sub	sp, #24
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b04      	cmp	r3, #4
 80047cc:	d13a      	bne.n	8004844 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d109      	bne.n	80047ec <I2S_IRQHandler+0x3a>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047e2:	2b40      	cmp	r3, #64	@ 0x40
 80047e4:	d102      	bne.n	80047ec <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ffb4 	bl	8004754 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047f2:	2b40      	cmp	r3, #64	@ 0x40
 80047f4:	d126      	bne.n	8004844 <I2S_IRQHandler+0x92>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b20      	cmp	r3, #32
 8004802:	d11f      	bne.n	8004844 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004812:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004814:	2300      	movs	r3, #0
 8004816:	613b      	str	r3, [r7, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	613b      	str	r3, [r7, #16]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2201      	movs	r2, #1
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7ff ff50 	bl	80046e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b03      	cmp	r3, #3
 800484e:	d136      	bne.n	80048be <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b02      	cmp	r3, #2
 8004858:	d109      	bne.n	800486e <I2S_IRQHandler+0xbc>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004864:	2b80      	cmp	r3, #128	@ 0x80
 8004866:	d102      	bne.n	800486e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f7ff ff45 	bl	80046f8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f003 0308 	and.w	r3, r3, #8
 8004874:	2b08      	cmp	r3, #8
 8004876:	d122      	bne.n	80048be <I2S_IRQHandler+0x10c>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b20      	cmp	r3, #32
 8004884:	d11b      	bne.n	80048be <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685a      	ldr	r2, [r3, #4]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004894:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004896:	2300      	movs	r3, #0
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	60fb      	str	r3, [r7, #12]
 80048a2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048b0:	f043 0204 	orr.w	r2, r3, #4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f7ff ff13 	bl	80046e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048be:	bf00      	nop
 80048c0:	3718      	adds	r7, #24
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b088      	sub	sp, #32
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a92      	ldr	r2, [pc, #584]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d101      	bne.n	80048e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80048e2:	4b92      	ldr	r3, [pc, #584]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048e4:	e001      	b.n	80048ea <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80048e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a8b      	ldr	r2, [pc, #556]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004900:	4b8a      	ldr	r3, [pc, #552]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004902:	e001      	b.n	8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004904:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004914:	d004      	beq.n	8004920 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	f040 8099 	bne.w	8004a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0302 	and.w	r3, r3, #2
 8004926:	2b02      	cmp	r3, #2
 8004928:	d107      	bne.n	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f925 	bl	8004b84 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b01      	cmp	r3, #1
 8004942:	d107      	bne.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d002      	beq.n	8004954 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f9c8 	bl	8004ce4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495a:	2b40      	cmp	r3, #64	@ 0x40
 800495c:	d13a      	bne.n	80049d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f003 0320 	and.w	r3, r3, #32
 8004964:	2b00      	cmp	r3, #0
 8004966:	d035      	beq.n	80049d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a6e      	ldr	r2, [pc, #440]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d101      	bne.n	8004976 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004972:	4b6e      	ldr	r3, [pc, #440]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004974:	e001      	b.n	800497a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800497a:	685a      	ldr	r2, [r3, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4969      	ldr	r1, [pc, #420]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004982:	428b      	cmp	r3, r1
 8004984:	d101      	bne.n	800498a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004986:	4b69      	ldr	r3, [pc, #420]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004988:	e001      	b.n	800498e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800498a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800498e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004992:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	685a      	ldr	r2, [r3, #4]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049a2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049a4:	2300      	movs	r3, #0
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	60fb      	str	r3, [r7, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049c6:	f043 0202 	orr.w	r2, r3, #2
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff fe88 	bl	80046e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b08      	cmp	r3, #8
 80049dc:	f040 80c3 	bne.w	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f000 80bd 	beq.w	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049fa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a49      	ldr	r2, [pc, #292]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d101      	bne.n	8004a0a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a06:	4b49      	ldr	r3, [pc, #292]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a08:	e001      	b.n	8004a0e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a0e:	685a      	ldr	r2, [r3, #4]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4944      	ldr	r1, [pc, #272]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a16:	428b      	cmp	r3, r1
 8004a18:	d101      	bne.n	8004a1e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a1a:	4b44      	ldr	r3, [pc, #272]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a1c:	e001      	b.n	8004a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a22:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a26:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a28:	2300      	movs	r3, #0
 8004a2a:	60bb      	str	r3, [r7, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a42:	f043 0204 	orr.w	r2, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff fe4a 	bl	80046e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a50:	e089      	b.n	8004b66 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b02      	cmp	r3, #2
 8004a5a:	d107      	bne.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8be 	bl	8004be8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	d107      	bne.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d002      	beq.n	8004a86 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8fd 	bl	8004c80 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d12f      	bne.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f003 0320 	and.w	r3, r3, #32
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d02a      	beq.n	8004af0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	685a      	ldr	r2, [r3, #4]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004aa8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a1e      	ldr	r2, [pc, #120]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d101      	bne.n	8004ab8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004ab4:	4b1d      	ldr	r3, [pc, #116]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ab6:	e001      	b.n	8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ab8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004abc:	685a      	ldr	r2, [r3, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4919      	ldr	r1, [pc, #100]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ac4:	428b      	cmp	r3, r1
 8004ac6:	d101      	bne.n	8004acc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004ac8:	4b18      	ldr	r3, [pc, #96]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aca:	e001      	b.n	8004ad0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004acc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ad0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004ad4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	f043 0202 	orr.w	r2, r3, #2
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff fdfa 	bl	80046e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d136      	bne.n	8004b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d031      	beq.n	8004b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a07      	ldr	r2, [pc, #28]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b0e:	4b07      	ldr	r3, [pc, #28]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b10:	e001      	b.n	8004b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b12:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b16:	685a      	ldr	r2, [r3, #4]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4902      	ldr	r1, [pc, #8]	@ (8004b28 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b1e:	428b      	cmp	r3, r1
 8004b20:	d106      	bne.n	8004b30 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b22:	4b02      	ldr	r3, [pc, #8]	@ (8004b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b24:	e006      	b.n	8004b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b26:	bf00      	nop
 8004b28:	40003800 	.word	0x40003800
 8004b2c:	40003400 	.word	0x40003400
 8004b30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b34:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b38:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b48:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b56:	f043 0204 	orr.w	r2, r3, #4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fdc0 	bl	80046e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b64:	e000      	b.n	8004b68 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b66:	bf00      	nop
}
 8004b68:	bf00      	nop
 8004b6a:	3720      	adds	r7, #32
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b90:	1c99      	adds	r1, r3, #2
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6251      	str	r1, [r2, #36]	@ 0x24
 8004b96:	881a      	ldrh	r2, [r3, #0]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d113      	bne.n	8004bde <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bc4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7ff ffc9 	bl	8004b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bde:	bf00      	nop
 8004be0:	3708      	adds	r7, #8
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd80      	pop	{r7, pc}
	...

08004be8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf4:	1c99      	adds	r1, r3, #2
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6251      	str	r1, [r2, #36]	@ 0x24
 8004bfa:	8819      	ldrh	r1, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1d      	ldr	r2, [pc, #116]	@ (8004c78 <I2SEx_TxISR_I2SExt+0x90>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d101      	bne.n	8004c0a <I2SEx_TxISR_I2SExt+0x22>
 8004c06:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <I2SEx_TxISR_I2SExt+0x94>)
 8004c08:	e001      	b.n	8004c0e <I2SEx_TxISR_I2SExt+0x26>
 8004c0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c0e:	460a      	mov	r2, r1
 8004c10:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d121      	bne.n	8004c6e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a12      	ldr	r2, [pc, #72]	@ (8004c78 <I2SEx_TxISR_I2SExt+0x90>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <I2SEx_TxISR_I2SExt+0x50>
 8004c34:	4b11      	ldr	r3, [pc, #68]	@ (8004c7c <I2SEx_TxISR_I2SExt+0x94>)
 8004c36:	e001      	b.n	8004c3c <I2SEx_TxISR_I2SExt+0x54>
 8004c38:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	490d      	ldr	r1, [pc, #52]	@ (8004c78 <I2SEx_TxISR_I2SExt+0x90>)
 8004c44:	428b      	cmp	r3, r1
 8004c46:	d101      	bne.n	8004c4c <I2SEx_TxISR_I2SExt+0x64>
 8004c48:	4b0c      	ldr	r3, [pc, #48]	@ (8004c7c <I2SEx_TxISR_I2SExt+0x94>)
 8004c4a:	e001      	b.n	8004c50 <I2SEx_TxISR_I2SExt+0x68>
 8004c4c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d106      	bne.n	8004c6e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff ff81 	bl	8004b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	40003800 	.word	0x40003800
 8004c7c:	40003400 	.word	0x40003400

08004c80 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68d8      	ldr	r0, [r3, #12]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	1c99      	adds	r1, r3, #2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004c98:	b282      	uxth	r2, r0
 8004c9a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	3b01      	subs	r3, #1
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d113      	bne.n	8004cdc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	685a      	ldr	r2, [r3, #4]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cc2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d106      	bne.n	8004cdc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff ff4a 	bl	8004b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cdc:	bf00      	nop
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b082      	sub	sp, #8
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a20      	ldr	r2, [pc, #128]	@ (8004d74 <I2SEx_RxISR_I2SExt+0x90>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d101      	bne.n	8004cfa <I2SEx_RxISR_I2SExt+0x16>
 8004cf6:	4b20      	ldr	r3, [pc, #128]	@ (8004d78 <I2SEx_RxISR_I2SExt+0x94>)
 8004cf8:	e001      	b.n	8004cfe <I2SEx_RxISR_I2SExt+0x1a>
 8004cfa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004cfe:	68d8      	ldr	r0, [r3, #12]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d04:	1c99      	adds	r1, r3, #2
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d0a:	b282      	uxth	r2, r0
 8004d0c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29a      	uxth	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d20:	b29b      	uxth	r3, r3
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d121      	bne.n	8004d6a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a12      	ldr	r2, [pc, #72]	@ (8004d74 <I2SEx_RxISR_I2SExt+0x90>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d101      	bne.n	8004d34 <I2SEx_RxISR_I2SExt+0x50>
 8004d30:	4b11      	ldr	r3, [pc, #68]	@ (8004d78 <I2SEx_RxISR_I2SExt+0x94>)
 8004d32:	e001      	b.n	8004d38 <I2SEx_RxISR_I2SExt+0x54>
 8004d34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	490d      	ldr	r1, [pc, #52]	@ (8004d74 <I2SEx_RxISR_I2SExt+0x90>)
 8004d40:	428b      	cmp	r3, r1
 8004d42:	d101      	bne.n	8004d48 <I2SEx_RxISR_I2SExt+0x64>
 8004d44:	4b0c      	ldr	r3, [pc, #48]	@ (8004d78 <I2SEx_RxISR_I2SExt+0x94>)
 8004d46:	e001      	b.n	8004d4c <I2SEx_RxISR_I2SExt+0x68>
 8004d48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d4c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d50:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7ff ff03 	bl	8004b70 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d6a:	bf00      	nop
 8004d6c:	3708      	adds	r7, #8
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40003800 	.word	0x40003800
 8004d78:	40003400 	.word	0x40003400

08004d7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e267      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d075      	beq.n	8004e86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d9a:	4b88      	ldr	r3, [pc, #544]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	f003 030c 	and.w	r3, r3, #12
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	d00c      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004da6:	4b85      	ldr	r3, [pc, #532]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dae:	2b08      	cmp	r3, #8
 8004db0:	d112      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004db2:	4b82      	ldr	r3, [pc, #520]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dbe:	d10b      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dc0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d05b      	beq.n	8004e84 <HAL_RCC_OscConfig+0x108>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d157      	bne.n	8004e84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e242      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004de0:	d106      	bne.n	8004df0 <HAL_RCC_OscConfig+0x74>
 8004de2:	4b76      	ldr	r3, [pc, #472]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a75      	ldr	r2, [pc, #468]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004de8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dec:	6013      	str	r3, [r2, #0]
 8004dee:	e01d      	b.n	8004e2c <HAL_RCC_OscConfig+0xb0>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCC_OscConfig+0x98>
 8004dfa:	4b70      	ldr	r3, [pc, #448]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a6f      	ldr	r2, [pc, #444]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e04:	6013      	str	r3, [r2, #0]
 8004e06:	4b6d      	ldr	r3, [pc, #436]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a6c      	ldr	r2, [pc, #432]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e10:	6013      	str	r3, [r2, #0]
 8004e12:	e00b      	b.n	8004e2c <HAL_RCC_OscConfig+0xb0>
 8004e14:	4b69      	ldr	r3, [pc, #420]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a68      	ldr	r2, [pc, #416]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e1e:	6013      	str	r3, [r2, #0]
 8004e20:	4b66      	ldr	r3, [pc, #408]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a65      	ldr	r2, [pc, #404]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d013      	beq.n	8004e5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e34:	f7fc f860 	bl	8000ef8 <HAL_GetTick>
 8004e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3a:	e008      	b.n	8004e4e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e3c:	f7fc f85c 	bl	8000ef8 <HAL_GetTick>
 8004e40:	4602      	mov	r2, r0
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	1ad3      	subs	r3, r2, r3
 8004e46:	2b64      	cmp	r3, #100	@ 0x64
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e207      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0f0      	beq.n	8004e3c <HAL_RCC_OscConfig+0xc0>
 8004e5a:	e014      	b.n	8004e86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fc f84c 	bl	8000ef8 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fc f848 	bl	8000ef8 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e1f3      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e76:	4b51      	ldr	r3, [pc, #324]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0xe8>
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d063      	beq.n	8004f5a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e92:	4b4a      	ldr	r3, [pc, #296]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00b      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e9e:	4b47      	ldr	r3, [pc, #284]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ea6:	2b08      	cmp	r3, #8
 8004ea8:	d11c      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eaa:	4b44      	ldr	r3, [pc, #272]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d116      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004eb6:	4b41      	ldr	r3, [pc, #260]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_RCC_OscConfig+0x152>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d001      	beq.n	8004ece <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e1c7      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ece:	4b3b      	ldr	r3, [pc, #236]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	00db      	lsls	r3, r3, #3
 8004edc:	4937      	ldr	r1, [pc, #220]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee2:	e03a      	b.n	8004f5a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68db      	ldr	r3, [r3, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d020      	beq.n	8004f2e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004eec:	4b34      	ldr	r3, [pc, #208]	@ (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004eee:	2201      	movs	r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef2:	f7fc f801 	bl	8000ef8 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004efa:	f7fb fffd 	bl	8000ef8 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e1a8      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 0302 	and.w	r3, r3, #2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f18:	4b28      	ldr	r3, [pc, #160]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4925      	ldr	r1, [pc, #148]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	600b      	str	r3, [r1, #0]
 8004f2c:	e015      	b.n	8004f5a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f2e:	4b24      	ldr	r3, [pc, #144]	@ (8004fc0 <HAL_RCC_OscConfig+0x244>)
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f34:	f7fb ffe0 	bl	8000ef8 <HAL_GetTick>
 8004f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f3a:	e008      	b.n	8004f4e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f3c:	f7fb ffdc 	bl	8000ef8 <HAL_GetTick>
 8004f40:	4602      	mov	r2, r0
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	1ad3      	subs	r3, r2, r3
 8004f46:	2b02      	cmp	r3, #2
 8004f48:	d901      	bls.n	8004f4e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f4a:	2303      	movs	r3, #3
 8004f4c:	e187      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f4e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1f0      	bne.n	8004f3c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0308 	and.w	r3, r3, #8
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d036      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d016      	beq.n	8004f9c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f6e:	4b15      	ldr	r3, [pc, #84]	@ (8004fc4 <HAL_RCC_OscConfig+0x248>)
 8004f70:	2201      	movs	r2, #1
 8004f72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f74:	f7fb ffc0 	bl	8000ef8 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7c:	f7fb ffbc 	bl	8000ef8 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e167      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004fbc <HAL_RCC_OscConfig+0x240>)
 8004f90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d0f0      	beq.n	8004f7c <HAL_RCC_OscConfig+0x200>
 8004f9a:	e01b      	b.n	8004fd4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f9c:	4b09      	ldr	r3, [pc, #36]	@ (8004fc4 <HAL_RCC_OscConfig+0x248>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fa2:	f7fb ffa9 	bl	8000ef8 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	e00e      	b.n	8004fc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004faa:	f7fb ffa5 	bl	8000ef8 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d907      	bls.n	8004fc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e150      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
 8004fbc:	40023800 	.word	0x40023800
 8004fc0:	42470000 	.word	0x42470000
 8004fc4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc8:	4b88      	ldr	r3, [pc, #544]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8004fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d1ea      	bne.n	8004faa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8097 	beq.w	8005110 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fe6:	4b81      	ldr	r3, [pc, #516]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10f      	bne.n	8005012 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60bb      	str	r3, [r7, #8]
 8004ff6:	4b7d      	ldr	r3, [pc, #500]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ffa:	4a7c      	ldr	r2, [pc, #496]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8004ffc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005000:	6413      	str	r3, [r2, #64]	@ 0x40
 8005002:	4b7a      	ldr	r3, [pc, #488]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005006:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800500a:	60bb      	str	r3, [r7, #8]
 800500c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800500e:	2301      	movs	r3, #1
 8005010:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005012:	4b77      	ldr	r3, [pc, #476]	@ (80051f0 <HAL_RCC_OscConfig+0x474>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800501a:	2b00      	cmp	r3, #0
 800501c:	d118      	bne.n	8005050 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800501e:	4b74      	ldr	r3, [pc, #464]	@ (80051f0 <HAL_RCC_OscConfig+0x474>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a73      	ldr	r2, [pc, #460]	@ (80051f0 <HAL_RCC_OscConfig+0x474>)
 8005024:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005028:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800502a:	f7fb ff65 	bl	8000ef8 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005032:	f7fb ff61 	bl	8000ef8 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e10c      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005044:	4b6a      	ldr	r3, [pc, #424]	@ (80051f0 <HAL_RCC_OscConfig+0x474>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504c:	2b00      	cmp	r3, #0
 800504e:	d0f0      	beq.n	8005032 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	2b01      	cmp	r3, #1
 8005056:	d106      	bne.n	8005066 <HAL_RCC_OscConfig+0x2ea>
 8005058:	4b64      	ldr	r3, [pc, #400]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800505a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505c:	4a63      	ldr	r2, [pc, #396]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800505e:	f043 0301 	orr.w	r3, r3, #1
 8005062:	6713      	str	r3, [r2, #112]	@ 0x70
 8005064:	e01c      	b.n	80050a0 <HAL_RCC_OscConfig+0x324>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b05      	cmp	r3, #5
 800506c:	d10c      	bne.n	8005088 <HAL_RCC_OscConfig+0x30c>
 800506e:	4b5f      	ldr	r3, [pc, #380]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005070:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005072:	4a5e      	ldr	r2, [pc, #376]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005074:	f043 0304 	orr.w	r3, r3, #4
 8005078:	6713      	str	r3, [r2, #112]	@ 0x70
 800507a:	4b5c      	ldr	r3, [pc, #368]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800507c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800507e:	4a5b      	ldr	r2, [pc, #364]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6713      	str	r3, [r2, #112]	@ 0x70
 8005086:	e00b      	b.n	80050a0 <HAL_RCC_OscConfig+0x324>
 8005088:	4b58      	ldr	r3, [pc, #352]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a57      	ldr	r2, [pc, #348]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	4b55      	ldr	r3, [pc, #340]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005098:	4a54      	ldr	r2, [pc, #336]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800509a:	f023 0304 	bic.w	r3, r3, #4
 800509e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d015      	beq.n	80050d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fb ff26 	bl	8000ef8 <HAL_GetTick>
 80050ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ae:	e00a      	b.n	80050c6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050b0:	f7fb ff22 	bl	8000ef8 <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050be:	4293      	cmp	r3, r2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0cb      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050c6:	4b49      	ldr	r3, [pc, #292]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0ee      	beq.n	80050b0 <HAL_RCC_OscConfig+0x334>
 80050d2:	e014      	b.n	80050fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050d4:	f7fb ff10 	bl	8000ef8 <HAL_GetTick>
 80050d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050da:	e00a      	b.n	80050f2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050dc:	f7fb ff0c 	bl	8000ef8 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0b5      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050f2:	4b3e      	ldr	r3, [pc, #248]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 80050f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1ee      	bne.n	80050dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050fe:	7dfb      	ldrb	r3, [r7, #23]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d105      	bne.n	8005110 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005104:	4b39      	ldr	r3, [pc, #228]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005108:	4a38      	ldr	r2, [pc, #224]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800510a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800510e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80a1 	beq.w	800525c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800511a:	4b34      	ldr	r3, [pc, #208]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f003 030c 	and.w	r3, r3, #12
 8005122:	2b08      	cmp	r3, #8
 8005124:	d05c      	beq.n	80051e0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d141      	bne.n	80051b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512e:	4b31      	ldr	r3, [pc, #196]	@ (80051f4 <HAL_RCC_OscConfig+0x478>)
 8005130:	2200      	movs	r2, #0
 8005132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fb fee0 	bl	8000ef8 <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800513c:	f7fb fedc 	bl	8000ef8 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e087      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514e:	4b27      	ldr	r3, [pc, #156]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d1f0      	bne.n	800513c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	69da      	ldr	r2, [r3, #28]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	431a      	orrs	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005168:	019b      	lsls	r3, r3, #6
 800516a:	431a      	orrs	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005170:	085b      	lsrs	r3, r3, #1
 8005172:	3b01      	subs	r3, #1
 8005174:	041b      	lsls	r3, r3, #16
 8005176:	431a      	orrs	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	491b      	ldr	r1, [pc, #108]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 8005180:	4313      	orrs	r3, r2
 8005182:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005184:	4b1b      	ldr	r3, [pc, #108]	@ (80051f4 <HAL_RCC_OscConfig+0x478>)
 8005186:	2201      	movs	r2, #1
 8005188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518a:	f7fb feb5 	bl	8000ef8 <HAL_GetTick>
 800518e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005190:	e008      	b.n	80051a4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005192:	f7fb feb1 	bl	8000ef8 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e05c      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a4:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0f0      	beq.n	8005192 <HAL_RCC_OscConfig+0x416>
 80051b0:	e054      	b.n	800525c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b2:	4b10      	ldr	r3, [pc, #64]	@ (80051f4 <HAL_RCC_OscConfig+0x478>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b8:	f7fb fe9e 	bl	8000ef8 <HAL_GetTick>
 80051bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051be:	e008      	b.n	80051d2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c0:	f7fb fe9a 	bl	8000ef8 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d901      	bls.n	80051d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e045      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d2:	4b06      	ldr	r3, [pc, #24]	@ (80051ec <HAL_RCC_OscConfig+0x470>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1f0      	bne.n	80051c0 <HAL_RCC_OscConfig+0x444>
 80051de:	e03d      	b.n	800525c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d107      	bne.n	80051f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e038      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
 80051ec:	40023800 	.word	0x40023800
 80051f0:	40007000 	.word	0x40007000
 80051f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80051f8:	4b1b      	ldr	r3, [pc, #108]	@ (8005268 <HAL_RCC_OscConfig+0x4ec>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d028      	beq.n	8005258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005210:	429a      	cmp	r2, r3
 8005212:	d121      	bne.n	8005258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800521e:	429a      	cmp	r2, r3
 8005220:	d11a      	bne.n	8005258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005228:	4013      	ands	r3, r2
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800522e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005230:	4293      	cmp	r3, r2
 8005232:	d111      	bne.n	8005258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800523e:	085b      	lsrs	r3, r3, #1
 8005240:	3b01      	subs	r3, #1
 8005242:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005244:	429a      	cmp	r2, r3
 8005246:	d107      	bne.n	8005258 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005252:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005254:	429a      	cmp	r2, r3
 8005256:	d001      	beq.n	800525c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800

0800526c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d101      	bne.n	8005280 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e0cc      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005280:	4b68      	ldr	r3, [pc, #416]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	429a      	cmp	r2, r3
 800528c:	d90c      	bls.n	80052a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800528e:	4b65      	ldr	r3, [pc, #404]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005296:	4b63      	ldr	r3, [pc, #396]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d001      	beq.n	80052a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0b8      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0302 	and.w	r3, r3, #2
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d020      	beq.n	80052f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d005      	beq.n	80052cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052c0:	4b59      	ldr	r3, [pc, #356]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a58      	ldr	r2, [pc, #352]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80052d8:	4b53      	ldr	r3, [pc, #332]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4a52      	ldr	r2, [pc, #328]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80052e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052e4:	4b50      	ldr	r3, [pc, #320]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	494d      	ldr	r1, [pc, #308]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d044      	beq.n	800538c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b01      	cmp	r3, #1
 8005308:	d107      	bne.n	800531a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800530a:	4b47      	ldr	r3, [pc, #284]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d119      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
 8005318:	e07f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b02      	cmp	r3, #2
 8005320:	d003      	beq.n	800532a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005326:	2b03      	cmp	r3, #3
 8005328:	d107      	bne.n	800533a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800532a:	4b3f      	ldr	r3, [pc, #252]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d109      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e06f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800533a:	4b3b      	ldr	r3, [pc, #236]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d101      	bne.n	800534a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e067      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800534a:	4b37      	ldr	r3, [pc, #220]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f023 0203 	bic.w	r2, r3, #3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	4934      	ldr	r1, [pc, #208]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	4313      	orrs	r3, r2
 800535a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800535c:	f7fb fdcc 	bl	8000ef8 <HAL_GetTick>
 8005360:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005362:	e00a      	b.n	800537a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005364:	f7fb fdc8 	bl	8000ef8 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005372:	4293      	cmp	r3, r2
 8005374:	d901      	bls.n	800537a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e04f      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800537a:	4b2b      	ldr	r3, [pc, #172]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 020c 	and.w	r2, r3, #12
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	429a      	cmp	r2, r3
 800538a:	d1eb      	bne.n	8005364 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	429a      	cmp	r2, r3
 8005398:	d20c      	bcs.n	80053b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539a:	4b22      	ldr	r3, [pc, #136]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 800539c:	683a      	ldr	r2, [r7, #0]
 800539e:	b2d2      	uxtb	r2, r2
 80053a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053a2:	4b20      	ldr	r3, [pc, #128]	@ (8005424 <HAL_RCC_ClockConfig+0x1b8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0307 	and.w	r3, r3, #7
 80053aa:	683a      	ldr	r2, [r7, #0]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d001      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e032      	b.n	800541a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0304 	and.w	r3, r3, #4
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d008      	beq.n	80053d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053c0:	4b19      	ldr	r3, [pc, #100]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4916      	ldr	r1, [pc, #88]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0308 	and.w	r3, r3, #8
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80053de:	4b12      	ldr	r3, [pc, #72]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	490e      	ldr	r1, [pc, #56]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80053f2:	f000 f821 	bl	8005438 <HAL_RCC_GetSysClockFreq>
 80053f6:	4602      	mov	r2, r0
 80053f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005428 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	091b      	lsrs	r3, r3, #4
 80053fe:	f003 030f 	and.w	r3, r3, #15
 8005402:	490a      	ldr	r1, [pc, #40]	@ (800542c <HAL_RCC_ClockConfig+0x1c0>)
 8005404:	5ccb      	ldrb	r3, [r1, r3]
 8005406:	fa22 f303 	lsr.w	r3, r2, r3
 800540a:	4a09      	ldr	r2, [pc, #36]	@ (8005430 <HAL_RCC_ClockConfig+0x1c4>)
 800540c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800540e:	4b09      	ldr	r3, [pc, #36]	@ (8005434 <HAL_RCC_ClockConfig+0x1c8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fb fd2c 	bl	8000e70 <HAL_InitTick>

  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	40023c00 	.word	0x40023c00
 8005428:	40023800 	.word	0x40023800
 800542c:	080095ac 	.word	0x080095ac
 8005430:	20000000 	.word	0x20000000
 8005434:	20000004 	.word	0x20000004

08005438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800543c:	b094      	sub	sp, #80	@ 0x50
 800543e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005448:	2300      	movs	r3, #0
 800544a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005450:	4b79      	ldr	r3, [pc, #484]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f003 030c 	and.w	r3, r3, #12
 8005458:	2b08      	cmp	r3, #8
 800545a:	d00d      	beq.n	8005478 <HAL_RCC_GetSysClockFreq+0x40>
 800545c:	2b08      	cmp	r3, #8
 800545e:	f200 80e1 	bhi.w	8005624 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005462:	2b00      	cmp	r3, #0
 8005464:	d002      	beq.n	800546c <HAL_RCC_GetSysClockFreq+0x34>
 8005466:	2b04      	cmp	r3, #4
 8005468:	d003      	beq.n	8005472 <HAL_RCC_GetSysClockFreq+0x3a>
 800546a:	e0db      	b.n	8005624 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800546c:	4b73      	ldr	r3, [pc, #460]	@ (800563c <HAL_RCC_GetSysClockFreq+0x204>)
 800546e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005470:	e0db      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005472:	4b73      	ldr	r3, [pc, #460]	@ (8005640 <HAL_RCC_GetSysClockFreq+0x208>)
 8005474:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005476:	e0d8      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005478:	4b6f      	ldr	r3, [pc, #444]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005480:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005482:	4b6d      	ldr	r3, [pc, #436]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d063      	beq.n	8005556 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800548e:	4b6a      	ldr	r3, [pc, #424]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	099b      	lsrs	r3, r3, #6
 8005494:	2200      	movs	r2, #0
 8005496:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005498:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800549a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a2:	2300      	movs	r3, #0
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054aa:	4622      	mov	r2, r4
 80054ac:	462b      	mov	r3, r5
 80054ae:	f04f 0000 	mov.w	r0, #0
 80054b2:	f04f 0100 	mov.w	r1, #0
 80054b6:	0159      	lsls	r1, r3, #5
 80054b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054bc:	0150      	lsls	r0, r2, #5
 80054be:	4602      	mov	r2, r0
 80054c0:	460b      	mov	r3, r1
 80054c2:	4621      	mov	r1, r4
 80054c4:	1a51      	subs	r1, r2, r1
 80054c6:	6139      	str	r1, [r7, #16]
 80054c8:	4629      	mov	r1, r5
 80054ca:	eb63 0301 	sbc.w	r3, r3, r1
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	f04f 0200 	mov.w	r2, #0
 80054d4:	f04f 0300 	mov.w	r3, #0
 80054d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054dc:	4659      	mov	r1, fp
 80054de:	018b      	lsls	r3, r1, #6
 80054e0:	4651      	mov	r1, sl
 80054e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80054e6:	4651      	mov	r1, sl
 80054e8:	018a      	lsls	r2, r1, #6
 80054ea:	4651      	mov	r1, sl
 80054ec:	ebb2 0801 	subs.w	r8, r2, r1
 80054f0:	4659      	mov	r1, fp
 80054f2:	eb63 0901 	sbc.w	r9, r3, r1
 80054f6:	f04f 0200 	mov.w	r2, #0
 80054fa:	f04f 0300 	mov.w	r3, #0
 80054fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800550a:	4690      	mov	r8, r2
 800550c:	4699      	mov	r9, r3
 800550e:	4623      	mov	r3, r4
 8005510:	eb18 0303 	adds.w	r3, r8, r3
 8005514:	60bb      	str	r3, [r7, #8]
 8005516:	462b      	mov	r3, r5
 8005518:	eb49 0303 	adc.w	r3, r9, r3
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800552a:	4629      	mov	r1, r5
 800552c:	024b      	lsls	r3, r1, #9
 800552e:	4621      	mov	r1, r4
 8005530:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005534:	4621      	mov	r1, r4
 8005536:	024a      	lsls	r2, r1, #9
 8005538:	4610      	mov	r0, r2
 800553a:	4619      	mov	r1, r3
 800553c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800553e:	2200      	movs	r2, #0
 8005540:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005542:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005544:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005548:	f7fa fe3e 	bl	80001c8 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4613      	mov	r3, r2
 8005552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005554:	e058      	b.n	8005608 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005556:	4b38      	ldr	r3, [pc, #224]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	099b      	lsrs	r3, r3, #6
 800555c:	2200      	movs	r2, #0
 800555e:	4618      	mov	r0, r3
 8005560:	4611      	mov	r1, r2
 8005562:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005566:	623b      	str	r3, [r7, #32]
 8005568:	2300      	movs	r3, #0
 800556a:	627b      	str	r3, [r7, #36]	@ 0x24
 800556c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	0159      	lsls	r1, r3, #5
 800557e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005582:	0150      	lsls	r0, r2, #5
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4641      	mov	r1, r8
 800558a:	ebb2 0a01 	subs.w	sl, r2, r1
 800558e:	4649      	mov	r1, r9
 8005590:	eb63 0b01 	sbc.w	fp, r3, r1
 8005594:	f04f 0200 	mov.w	r2, #0
 8005598:	f04f 0300 	mov.w	r3, #0
 800559c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055a8:	ebb2 040a 	subs.w	r4, r2, sl
 80055ac:	eb63 050b 	sbc.w	r5, r3, fp
 80055b0:	f04f 0200 	mov.w	r2, #0
 80055b4:	f04f 0300 	mov.w	r3, #0
 80055b8:	00eb      	lsls	r3, r5, #3
 80055ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055be:	00e2      	lsls	r2, r4, #3
 80055c0:	4614      	mov	r4, r2
 80055c2:	461d      	mov	r5, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	18e3      	adds	r3, r4, r3
 80055c8:	603b      	str	r3, [r7, #0]
 80055ca:	464b      	mov	r3, r9
 80055cc:	eb45 0303 	adc.w	r3, r5, r3
 80055d0:	607b      	str	r3, [r7, #4]
 80055d2:	f04f 0200 	mov.w	r2, #0
 80055d6:	f04f 0300 	mov.w	r3, #0
 80055da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80055de:	4629      	mov	r1, r5
 80055e0:	028b      	lsls	r3, r1, #10
 80055e2:	4621      	mov	r1, r4
 80055e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80055e8:	4621      	mov	r1, r4
 80055ea:	028a      	lsls	r2, r1, #10
 80055ec:	4610      	mov	r0, r2
 80055ee:	4619      	mov	r1, r3
 80055f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f2:	2200      	movs	r2, #0
 80055f4:	61bb      	str	r3, [r7, #24]
 80055f6:	61fa      	str	r2, [r7, #28]
 80055f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055fc:	f7fa fde4 	bl	80001c8 <__aeabi_uldivmod>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4613      	mov	r3, r2
 8005606:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x200>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	0c1b      	lsrs	r3, r3, #16
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	3301      	adds	r3, #1
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005618:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800561a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005620:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005622:	e002      	b.n	800562a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005624:	4b05      	ldr	r3, [pc, #20]	@ (800563c <HAL_RCC_GetSysClockFreq+0x204>)
 8005626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005628:	bf00      	nop
    }
  }
  return sysclockfreq;
 800562a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800562c:	4618      	mov	r0, r3
 800562e:	3750      	adds	r7, #80	@ 0x50
 8005630:	46bd      	mov	sp, r7
 8005632:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005636:	bf00      	nop
 8005638:	40023800 	.word	0x40023800
 800563c:	00f42400 	.word	0x00f42400
 8005640:	007a1200 	.word	0x007a1200

08005644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005644:	b480      	push	{r7}
 8005646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005648:	4b03      	ldr	r3, [pc, #12]	@ (8005658 <HAL_RCC_GetHCLKFreq+0x14>)
 800564a:	681b      	ldr	r3, [r3, #0]
}
 800564c:	4618      	mov	r0, r3
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	20000000 	.word	0x20000000

0800565c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005660:	f7ff fff0 	bl	8005644 <HAL_RCC_GetHCLKFreq>
 8005664:	4602      	mov	r2, r0
 8005666:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	0a9b      	lsrs	r3, r3, #10
 800566c:	f003 0307 	and.w	r3, r3, #7
 8005670:	4903      	ldr	r1, [pc, #12]	@ (8005680 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005672:	5ccb      	ldrb	r3, [r1, r3]
 8005674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005678:	4618      	mov	r0, r3
 800567a:	bd80      	pop	{r7, pc}
 800567c:	40023800 	.word	0x40023800
 8005680:	080095bc 	.word	0x080095bc

08005684 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d035      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056ac:	4b62      	ldr	r3, [pc, #392]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056ae:	2200      	movs	r2, #0
 80056b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056b2:	f7fb fc21 	bl	8000ef8 <HAL_GetTick>
 80056b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056b8:	e008      	b.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ba:	f7fb fc1d 	bl	8000ef8 <HAL_GetTick>
 80056be:	4602      	mov	r2, r0
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d901      	bls.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056c8:	2303      	movs	r3, #3
 80056ca:	e0b0      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056cc:	4b5b      	ldr	r3, [pc, #364]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1f0      	bne.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	019a      	lsls	r2, r3, #6
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	071b      	lsls	r3, r3, #28
 80056e4:	4955      	ldr	r1, [pc, #340]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056ec:	4b52      	ldr	r3, [pc, #328]	@ (8005838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056ee:	2201      	movs	r2, #1
 80056f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056f2:	f7fb fc01 	bl	8000ef8 <HAL_GetTick>
 80056f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f8:	e008      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056fa:	f7fb fbfd 	bl	8000ef8 <HAL_GetTick>
 80056fe:	4602      	mov	r2, r0
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	2b02      	cmp	r3, #2
 8005706:	d901      	bls.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e090      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800570c:	4b4b      	ldr	r3, [pc, #300]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d0f0      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0302 	and.w	r3, r3, #2
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8083 	beq.w	800582c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	4b44      	ldr	r3, [pc, #272]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572e:	4a43      	ldr	r2, [pc, #268]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	@ 0x40
 8005736:	4b41      	ldr	r3, [pc, #260]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005742:	4b3f      	ldr	r3, [pc, #252]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a3e      	ldr	r2, [pc, #248]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800574c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800574e:	f7fb fbd3 	bl	8000ef8 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005754:	e008      	b.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005756:	f7fb fbcf 	bl	8000ef8 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	2b02      	cmp	r3, #2
 8005762:	d901      	bls.n	8005768 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005764:	2303      	movs	r3, #3
 8005766:	e062      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005768:	4b35      	ldr	r3, [pc, #212]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005770:	2b00      	cmp	r3, #0
 8005772:	d0f0      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005774:	4b31      	ldr	r3, [pc, #196]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005778:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800577c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d02f      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	429a      	cmp	r2, r3
 8005790:	d028      	beq.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005792:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005796:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800579a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800579c:	4b29      	ldr	r3, [pc, #164]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800579e:	2201      	movs	r2, #1
 80057a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057a2:	4b28      	ldr	r3, [pc, #160]	@ (8005844 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057a8:	4a24      	ldr	r2, [pc, #144]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057ae:	4b23      	ldr	r3, [pc, #140]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057b2:	f003 0301 	and.w	r3, r3, #1
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d114      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057ba:	f7fb fb9d 	bl	8000ef8 <HAL_GetTick>
 80057be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c0:	e00a      	b.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c2:	f7fb fb99 	bl	8000ef8 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d901      	bls.n	80057d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057d4:	2303      	movs	r3, #3
 80057d6:	e02a      	b.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057d8:	4b18      	ldr	r3, [pc, #96]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ee      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	68db      	ldr	r3, [r3, #12]
 80057e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057f0:	d10d      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80057f2:	4b12      	ldr	r3, [pc, #72]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005802:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005806:	490d      	ldr	r1, [pc, #52]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005808:	4313      	orrs	r3, r2
 800580a:	608b      	str	r3, [r1, #8]
 800580c:	e005      	b.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	4a0a      	ldr	r2, [pc, #40]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005814:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005818:	6093      	str	r3, [r2, #8]
 800581a:	4b08      	ldr	r3, [pc, #32]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800581c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005826:	4905      	ldr	r1, [pc, #20]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005828:	4313      	orrs	r3, r2
 800582a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3718      	adds	r7, #24
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	42470068 	.word	0x42470068
 800583c:	40023800 	.word	0x40023800
 8005840:	40007000 	.word	0x40007000
 8005844:	42470e40 	.word	0x42470e40

08005848 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800585c:	2300      	movs	r3, #0
 800585e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d13f      	bne.n	80058e6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005866:	4b24      	ldr	r3, [pc, #144]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800586e:	60fb      	str	r3, [r7, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d006      	beq.n	8005884 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800587c:	d12f      	bne.n	80058de <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800587e:	4b1f      	ldr	r3, [pc, #124]	@ (80058fc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005880:	617b      	str	r3, [r7, #20]
          break;
 8005882:	e02f      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005884:	4b1c      	ldr	r3, [pc, #112]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800588c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005890:	d108      	bne.n	80058a4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005892:	4b19      	ldr	r3, [pc, #100]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800589a:	4a19      	ldr	r2, [pc, #100]	@ (8005900 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800589c:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	e007      	b.n	80058b4 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058a4:	4b14      	ldr	r3, [pc, #80]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058ac:	4a15      	ldr	r2, [pc, #84]	@ (8005904 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80058ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80058b2:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058b4:	4b10      	ldr	r3, [pc, #64]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ba:	099b      	lsrs	r3, r3, #6
 80058bc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	fb02 f303 	mul.w	r3, r2, r3
 80058c6:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058c8:	4b0b      	ldr	r3, [pc, #44]	@ (80058f8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ce:	0f1b      	lsrs	r3, r3, #28
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	617b      	str	r3, [r7, #20]
          break;
 80058dc:	e002      	b.n	80058e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80058de:	2300      	movs	r3, #0
 80058e0:	617b      	str	r3, [r7, #20]
          break;
 80058e2:	bf00      	nop
        }
      }
      break;
 80058e4:	e000      	b.n	80058e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80058e6:	bf00      	nop
    }
  }
  return frequency;
 80058e8:	697b      	ldr	r3, [r7, #20]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	371c      	adds	r7, #28
 80058ee:	46bd      	mov	sp, r7
 80058f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	40023800 	.word	0x40023800
 80058fc:	00bb8000 	.word	0x00bb8000
 8005900:	007a1200 	.word	0x007a1200
 8005904:	00f42400 	.word	0x00f42400

08005908 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005908:	b084      	sub	sp, #16
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
 8005912:	f107 001c 	add.w	r0, r7, #28
 8005916:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800591a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800591e:	2b01      	cmp	r3, #1
 8005920:	d123      	bne.n	800596a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005926:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005936:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800594a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68db      	ldr	r3, [r3, #12]
 8005956:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9dc 	bl	8005d1c <USB_CoreReset>
 8005964:	4603      	mov	r3, r0
 8005966:	73fb      	strb	r3, [r7, #15]
 8005968:	e01b      	b.n	80059a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f9d0 	bl	8005d1c <USB_CoreReset>
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005980:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800598c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	639a      	str	r2, [r3, #56]	@ 0x38
 8005994:	e005      	b.n	80059a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80059a2:	7fbb      	ldrb	r3, [r7, #30]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d10b      	bne.n	80059c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f043 0206 	orr.w	r2, r3, #6
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f043 0220 	orr.w	r2, r3, #32
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80059c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3710      	adds	r7, #16
 80059c6:	46bd      	mov	sp, r7
 80059c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059cc:	b004      	add	sp, #16
 80059ce:	4770      	bx	lr

080059d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f043 0201 	orr.w	r2, r3, #1
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	370c      	adds	r7, #12
 80059ea:	46bd      	mov	sp, r7
 80059ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f0:	4770      	bx	lr

080059f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059f2:	b480      	push	{r7}
 80059f4:	b083      	sub	sp, #12
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 0201 	bic.w	r2, r3, #1
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b084      	sub	sp, #16
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a20:	2300      	movs	r3, #0
 8005a22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a30:	78fb      	ldrb	r3, [r7, #3]
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d115      	bne.n	8005a62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a42:	200a      	movs	r0, #10
 8005a44:	f7fb fa64 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	330a      	adds	r3, #10
 8005a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 f956 	bl	8005d00 <USB_GetMode>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d01e      	beq.n	8005a98 <USB_SetCurrentMode+0x84>
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a5e:	d9f0      	bls.n	8005a42 <USB_SetCurrentMode+0x2e>
 8005a60:	e01a      	b.n	8005a98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a62:	78fb      	ldrb	r3, [r7, #3]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d115      	bne.n	8005a94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005a74:	200a      	movs	r0, #10
 8005a76:	f7fb fa4b 	bl	8000f10 <HAL_Delay>
      ms += 10U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	330a      	adds	r3, #10
 8005a7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f000 f93d 	bl	8005d00 <USB_GetMode>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d005      	beq.n	8005a98 <USB_SetCurrentMode+0x84>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005a90:	d9f0      	bls.n	8005a74 <USB_SetCurrentMode+0x60>
 8005a92:	e001      	b.n	8005a98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e005      	b.n	8005aa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	2bc8      	cmp	r3, #200	@ 0xc8
 8005a9c:	d101      	bne.n	8005aa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e000      	b.n	8005aa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b085      	sub	sp, #20
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	3301      	adds	r3, #1
 8005abe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005ac6:	d901      	bls.n	8005acc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005ac8:	2303      	movs	r3, #3
 8005aca:	e01b      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	691b      	ldr	r3, [r3, #16]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	daf2      	bge.n	8005aba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	019b      	lsls	r3, r3, #6
 8005adc:	f043 0220 	orr.w	r2, r3, #32
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005af0:	d901      	bls.n	8005af6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e006      	b.n	8005b04 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d0f0      	beq.n	8005ae4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b02:	2300      	movs	r3, #0
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3714      	adds	r7, #20
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b085      	sub	sp, #20
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b28:	d901      	bls.n	8005b2e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	e018      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	daf2      	bge.n	8005b1c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005b36:	2300      	movs	r3, #0
 8005b38:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	3301      	adds	r3, #1
 8005b44:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b4c:	d901      	bls.n	8005b52 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005b4e:	2303      	movs	r3, #3
 8005b50:	e006      	b.n	8005b60 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d0f0      	beq.n	8005b40 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	@ 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4611      	mov	r1, r2
 8005b78:	461a      	mov	r2, r3
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	71fb      	strb	r3, [r7, #7]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005b8a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d123      	bne.n	8005bda <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005b92:	88bb      	ldrh	r3, [r7, #4]
 8005b94:	3303      	adds	r3, #3
 8005b96:	089b      	lsrs	r3, r3, #2
 8005b98:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	61bb      	str	r3, [r7, #24]
 8005b9e:	e018      	b.n	8005bd2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	031a      	lsls	r2, r3, #12
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bac:	461a      	mov	r2, r3
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005bcc:	69bb      	ldr	r3, [r7, #24]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	69ba      	ldr	r2, [r7, #24]
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3e2      	bcc.n	8005ba0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005bda:	2300      	movs	r3, #0
}
 8005bdc:	4618      	mov	r0, r3
 8005bde:	3724      	adds	r7, #36	@ 0x24
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b08b      	sub	sp, #44	@ 0x2c
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	60f8      	str	r0, [r7, #12]
 8005bf0:	60b9      	str	r1, [r7, #8]
 8005bf2:	4613      	mov	r3, r2
 8005bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005bfe:	88fb      	ldrh	r3, [r7, #6]
 8005c00:	089b      	lsrs	r3, r3, #2
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c06:	88fb      	ldrh	r3, [r7, #6]
 8005c08:	f003 0303 	and.w	r3, r3, #3
 8005c0c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	e014      	b.n	8005c3e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	3301      	adds	r3, #1
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	3301      	adds	r3, #1
 8005c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	3301      	adds	r3, #1
 8005c30:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c34:	3301      	adds	r3, #1
 8005c36:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	6a3a      	ldr	r2, [r7, #32]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d3e6      	bcc.n	8005c14 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005c46:	8bfb      	ldrh	r3, [r7, #30]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d01e      	beq.n	8005c8a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c56:	461a      	mov	r2, r3
 8005c58:	f107 0310 	add.w	r3, r7, #16
 8005c5c:	6812      	ldr	r2, [r2, #0]
 8005c5e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	6a3b      	ldr	r3, [r7, #32]
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	fa22 f303 	lsr.w	r3, r2, r3
 8005c6c:	b2da      	uxtb	r2, r3
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	701a      	strb	r2, [r3, #0]
      i++;
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	3301      	adds	r3, #1
 8005c76:	623b      	str	r3, [r7, #32]
      pDest++;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005c7e:	8bfb      	ldrh	r3, [r7, #30]
 8005c80:	3b01      	subs	r3, #1
 8005c82:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005c84:	8bfb      	ldrh	r3, [r7, #30]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1ea      	bne.n	8005c60 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	372c      	adds	r7, #44	@ 0x2c
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	699b      	ldr	r3, [r3, #24]
 8005caa:	68fa      	ldr	r2, [r7, #12]
 8005cac:	4013      	ands	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3714      	adds	r7, #20
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b085      	sub	sp, #20
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005cce:	78fb      	ldrb	r3, [r7, #3]
 8005cd0:	015a      	lsls	r2, r3, #5
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005cde:	78fb      	ldrb	r3, [r7, #3]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cea:	68db      	ldr	r3, [r3, #12]
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005cf2:	68bb      	ldr	r3, [r7, #8]
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3714      	adds	r7, #20
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr

08005d00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	f003 0301 	and.w	r3, r3, #1
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d24:	2300      	movs	r3, #0
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d34:	d901      	bls.n	8005d3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d36:	2303      	movs	r3, #3
 8005d38:	e01b      	b.n	8005d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	daf2      	bge.n	8005d28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d42:	2300      	movs	r3, #0
 8005d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	f043 0201 	orr.w	r2, r3, #1
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3301      	adds	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005d5e:	d901      	bls.n	8005d64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d60:	2303      	movs	r3, #3
 8005d62:	e006      	b.n	8005d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d0f0      	beq.n	8005d52 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d70:	2300      	movs	r3, #0
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3714      	adds	r7, #20
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d80:	b084      	sub	sp, #16
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b086      	sub	sp, #24
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
 8005d8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005da0:	461a      	mov	r2, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005daa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005db6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	68db      	ldr	r3, [r3, #12]
 8005dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d119      	bne.n	8005e0a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005dd6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10a      	bne.n	8005df4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	6013      	str	r3, [r2, #0]
 8005df2:	e014      	b.n	8005e1e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68fa      	ldr	r2, [r7, #12]
 8005dfe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e02:	f023 0304 	bic.w	r3, r3, #4
 8005e06:	6013      	str	r3, [r2, #0]
 8005e08:	e009      	b.n	8005e1e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e18:	f023 0304 	bic.w	r3, r3, #4
 8005e1c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e1e:	2110      	movs	r1, #16
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe43 	bl	8005aac <USB_FlushTxFifo>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fe6d 	bl	8005b10 <USB_FlushRxFifo>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e40:	2300      	movs	r3, #0
 8005e42:	613b      	str	r3, [r7, #16]
 8005e44:	e015      	b.n	8005e72 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e52:	461a      	mov	r2, r3
 8005e54:	f04f 33ff 	mov.w	r3, #4294967295
 8005e58:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e66:	461a      	mov	r2, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005e76:	461a      	mov	r2, r3
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d3e3      	bcc.n	8005e46 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f04f 32ff 	mov.w	r2, #4294967295
 8005e8a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a18      	ldr	r2, [pc, #96]	@ (8005ef0 <USB_HostInit+0x170>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d10b      	bne.n	8005eac <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e9a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	@ (8005ef4 <USB_HostInit+0x174>)
 8005ea0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a14      	ldr	r2, [pc, #80]	@ (8005ef8 <USB_HostInit+0x178>)
 8005ea6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005eaa:	e009      	b.n	8005ec0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2280      	movs	r2, #128	@ 0x80
 8005eb0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a11      	ldr	r2, [pc, #68]	@ (8005efc <USB_HostInit+0x17c>)
 8005eb6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a11      	ldr	r2, [pc, #68]	@ (8005f00 <USB_HostInit+0x180>)
 8005ebc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ec0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f043 0210 	orr.w	r2, r3, #16
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <USB_HostInit+0x184>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005eec:	b004      	add	sp, #16
 8005eee:	4770      	bx	lr
 8005ef0:	40040000 	.word	0x40040000
 8005ef4:	01000200 	.word	0x01000200
 8005ef8:	00e00300 	.word	0x00e00300
 8005efc:	00600080 	.word	0x00600080
 8005f00:	004000e0 	.word	0x004000e0
 8005f04:	a3200008 	.word	0xa3200008

08005f08 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005f26:	f023 0303 	bic.w	r3, r3, #3
 8005f2a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	78fb      	ldrb	r3, [r7, #3]
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	68f9      	ldr	r1, [r7, #12]
 8005f3c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005f40:	4313      	orrs	r3, r2
 8005f42:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d107      	bne.n	8005f5a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f50:	461a      	mov	r2, r3
 8005f52:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005f56:	6053      	str	r3, [r2, #4]
 8005f58:	e00c      	b.n	8005f74 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d107      	bne.n	8005f70 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f66:	461a      	mov	r2, r3
 8005f68:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005f6c:	6053      	str	r3, [r2, #4]
 8005f6e:	e001      	b.n	8005f74 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e000      	b.n	8005f76 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3714      	adds	r7, #20
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b580      	push	{r7, lr}
 8005f84:	b084      	sub	sp, #16
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005fa2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fb0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005fb2:	2064      	movs	r0, #100	@ 0x64
 8005fb4:	f7fa ffac 	bl	8000f10 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	68fa      	ldr	r2, [r7, #12]
 8005fbc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	f7fa ffa2 	bl	8000f10 <HAL_Delay>

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}

08005fd6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b085      	sub	sp, #20
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	460b      	mov	r3, r1
 8005fe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ffa:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <USB_DriveVbus+0x44>
 8006006:	78fb      	ldrb	r3, [r7, #3]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d106      	bne.n	800601a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006014:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006018:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006024:	d109      	bne.n	800603a <USB_DriveVbus+0x64>
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d106      	bne.n	800603a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006034:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006038:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800603a:	2300      	movs	r3, #0
}
 800603c:	4618      	mov	r0, r3
 800603e:	3714      	adds	r7, #20
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	0c5b      	lsrs	r3, r3, #17
 8006066:	f003 0303 	and.w	r3, r3, #3
}
 800606a:	4618      	mov	r0, r3
 800606c:	3714      	adds	r7, #20
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006076:	b480      	push	{r7}
 8006078:	b085      	sub	sp, #20
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	b29b      	uxth	r3, r3
}
 800608c:	4618      	mov	r0, r3
 800608e:	3714      	adds	r7, #20
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	4608      	mov	r0, r1
 80060a2:	4611      	mov	r1, r2
 80060a4:	461a      	mov	r2, r3
 80060a6:	4603      	mov	r3, r0
 80060a8:	70fb      	strb	r3, [r7, #3]
 80060aa:	460b      	mov	r3, r1
 80060ac:	70bb      	strb	r3, [r7, #2]
 80060ae:	4613      	mov	r3, r2
 80060b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80060b2:	2300      	movs	r3, #0
 80060b4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	015a      	lsls	r2, r3, #5
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	4413      	add	r3, r2
 80060c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060c6:	461a      	mov	r2, r3
 80060c8:	f04f 33ff 	mov.w	r3, #4294967295
 80060cc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80060ce:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80060d2:	2b03      	cmp	r3, #3
 80060d4:	d87c      	bhi.n	80061d0 <USB_HC_Init+0x138>
 80060d6:	a201      	add	r2, pc, #4	@ (adr r2, 80060dc <USB_HC_Init+0x44>)
 80060d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060dc:	080060ed 	.word	0x080060ed
 80060e0:	08006193 	.word	0x08006193
 80060e4:	080060ed 	.word	0x080060ed
 80060e8:	08006155 	.word	0x08006155
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	015a      	lsls	r2, r3, #5
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	4413      	add	r3, r2
 80060f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f8:	461a      	mov	r2, r3
 80060fa:	f240 439d 	movw	r3, #1181	@ 0x49d
 80060fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006100:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006104:	2b00      	cmp	r3, #0
 8006106:	da10      	bge.n	800612a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	015a      	lsls	r2, r3, #5
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	4413      	add	r3, r2
 8006110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006114:	68db      	ldr	r3, [r3, #12]
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	0151      	lsls	r1, r2, #5
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	440a      	add	r2, r1
 800611e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006122:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006126:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006128:	e055      	b.n	80061d6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a6f      	ldr	r2, [pc, #444]	@ (80062ec <USB_HC_Init+0x254>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d151      	bne.n	80061d6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	015a      	lsls	r2, r3, #5
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	4413      	add	r3, r2
 800613a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	78fa      	ldrb	r2, [r7, #3]
 8006142:	0151      	lsls	r1, r2, #5
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	440a      	add	r2, r1
 8006148:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800614c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006150:	60d3      	str	r3, [r2, #12]
      break;
 8006152:	e040      	b.n	80061d6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	4413      	add	r3, r2
 800615c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006160:	461a      	mov	r2, r3
 8006162:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006166:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006168:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800616c:	2b00      	cmp	r3, #0
 800616e:	da34      	bge.n	80061da <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	78fa      	ldrb	r2, [r7, #3]
 8006180:	0151      	lsls	r1, r2, #5
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	440a      	add	r2, r1
 8006186:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800618a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800618e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006190:	e023      	b.n	80061da <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006192:	78fb      	ldrb	r3, [r7, #3]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	4413      	add	r3, r2
 800619a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619e:	461a      	mov	r2, r3
 80061a0:	f240 2325 	movw	r3, #549	@ 0x225
 80061a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80061a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da17      	bge.n	80061de <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	015a      	lsls	r2, r3, #5
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	78fa      	ldrb	r2, [r7, #3]
 80061be:	0151      	lsls	r1, r2, #5
 80061c0:	693a      	ldr	r2, [r7, #16]
 80061c2:	440a      	add	r2, r1
 80061c4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061c8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80061cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80061ce:	e006      	b.n	80061de <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	77fb      	strb	r3, [r7, #31]
      break;
 80061d4:	e004      	b.n	80061e0 <USB_HC_Init+0x148>
      break;
 80061d6:	bf00      	nop
 80061d8:	e002      	b.n	80061e0 <USB_HC_Init+0x148>
      break;
 80061da:	bf00      	nop
 80061dc:	e000      	b.n	80061e0 <USB_HC_Init+0x148>
      break;
 80061de:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80061e0:	78fb      	ldrb	r3, [r7, #3]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ec:	461a      	mov	r2, r3
 80061ee:	2300      	movs	r3, #0
 80061f0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	440a      	add	r2, r1
 8006208:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006218:	699a      	ldr	r2, [r3, #24]
 800621a:	78fb      	ldrb	r3, [r7, #3]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	2101      	movs	r1, #1
 8006222:	fa01 f303 	lsl.w	r3, r1, r3
 8006226:	6939      	ldr	r1, [r7, #16]
 8006228:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800622c:	4313      	orrs	r3, r2
 800622e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	699b      	ldr	r3, [r3, #24]
 8006234:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800623c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006240:	2b00      	cmp	r3, #0
 8006242:	da03      	bge.n	800624c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006248:	61bb      	str	r3, [r7, #24]
 800624a:	e001      	b.n	8006250 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f7ff fef9 	bl	8006048 <USB_GetHostSpeed>
 8006256:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006258:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800625c:	2b02      	cmp	r3, #2
 800625e:	d106      	bne.n	800626e <USB_HC_Init+0x1d6>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b02      	cmp	r3, #2
 8006264:	d003      	beq.n	800626e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006266:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	e001      	b.n	8006272 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800626e:	2300      	movs	r3, #0
 8006270:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006272:	787b      	ldrb	r3, [r7, #1]
 8006274:	059b      	lsls	r3, r3, #22
 8006276:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800627a:	78bb      	ldrb	r3, [r7, #2]
 800627c:	02db      	lsls	r3, r3, #11
 800627e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006282:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006284:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006288:	049b      	lsls	r3, r3, #18
 800628a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800628e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006290:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006292:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006296:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	431a      	orrs	r2, r3
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062a0:	78fa      	ldrb	r2, [r7, #3]
 80062a2:	0151      	lsls	r1, r2, #5
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	440a      	add	r2, r1
 80062a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80062ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80062b0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80062b2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d003      	beq.n	80062c2 <USB_HC_Init+0x22a>
 80062ba:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10f      	bne.n	80062e2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80062c2:	78fb      	ldrb	r3, [r7, #3]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	78fa      	ldrb	r2, [r7, #3]
 80062d2:	0151      	lsls	r1, r2, #5
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	440a      	add	r2, r1
 80062d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062dc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062e0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80062e2:	7ffb      	ldrb	r3, [r7, #31]
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3720      	adds	r7, #32
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	40040000 	.word	0x40040000

080062f0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08c      	sub	sp, #48	@ 0x30
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	4613      	mov	r3, r2
 80062fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	785b      	ldrb	r3, [r3, #1]
 8006306:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006308:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800630c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4a5d      	ldr	r2, [pc, #372]	@ (8006488 <USB_HC_StartXfer+0x198>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d12f      	bne.n	8006376 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d11c      	bne.n	8006356 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	7c9b      	ldrb	r3, [r3, #18]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d003      	beq.n	800632c <USB_HC_StartXfer+0x3c>
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	7c9b      	ldrb	r3, [r3, #18]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d124      	bne.n	8006376 <USB_HC_StartXfer+0x86>
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	799b      	ldrb	r3, [r3, #6]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d120      	bne.n	8006376 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	4413      	add	r3, r2
 800633c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	69fa      	ldr	r2, [r7, #28]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	6a3a      	ldr	r2, [r7, #32]
 8006348:	440a      	add	r2, r1
 800634a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800634e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006352:	60d3      	str	r3, [r2, #12]
 8006354:	e00f      	b.n	8006376 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	791b      	ldrb	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10b      	bne.n	8006376 <USB_HC_StartXfer+0x86>
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	795b      	ldrb	r3, [r3, #5]
 8006362:	2b01      	cmp	r3, #1
 8006364:	d107      	bne.n	8006376 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	785b      	ldrb	r3, [r3, #1]
 800636a:	4619      	mov	r1, r3
 800636c:	68f8      	ldr	r0, [r7, #12]
 800636e:	f000 fb6b 	bl	8006a48 <USB_DoPing>
        return HAL_OK;
 8006372:	2300      	movs	r3, #0
 8006374:	e232      	b.n	80067dc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	799b      	ldrb	r3, [r3, #6]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d158      	bne.n	8006430 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800637e:	2301      	movs	r3, #1
 8006380:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	78db      	ldrb	r3, [r3, #3]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800638a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	8a92      	ldrh	r2, [r2, #20]
 8006390:	fb03 f202 	mul.w	r2, r3, r2
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61da      	str	r2, [r3, #28]
 8006398:	e07c      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	7c9b      	ldrb	r3, [r3, #18]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d130      	bne.n	8006404 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6a1b      	ldr	r3, [r3, #32]
 80063a6:	2bbc      	cmp	r3, #188	@ 0xbc
 80063a8:	d918      	bls.n	80063dc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	8a9b      	ldrh	r3, [r3, #20]
 80063ae:	461a      	mov	r2, r3
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d003      	beq.n	80063cc <USB_HC_StartXfer+0xdc>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d103      	bne.n	80063d4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	2202      	movs	r2, #2
 80063d0:	60da      	str	r2, [r3, #12]
 80063d2:	e05f      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2201      	movs	r2, #1
 80063d8:	60da      	str	r2, [r3, #12]
 80063da:	e05b      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	6a1a      	ldr	r2, [r3, #32]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d007      	beq.n	80063fc <USB_HC_StartXfer+0x10c>
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d003      	beq.n	80063fc <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2204      	movs	r2, #4
 80063f8:	60da      	str	r2, [r3, #12]
 80063fa:	e04b      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2203      	movs	r2, #3
 8006400:	60da      	str	r2, [r3, #12]
 8006402:	e047      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d10d      	bne.n	8006426 <USB_HC_StartXfer+0x136>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	68ba      	ldr	r2, [r7, #8]
 8006410:	8a92      	ldrh	r2, [r2, #20]
 8006412:	4293      	cmp	r3, r2
 8006414:	d907      	bls.n	8006426 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006416:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	8a92      	ldrh	r2, [r2, #20]
 800641c:	fb03 f202 	mul.w	r2, r3, r2
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	61da      	str	r2, [r3, #28]
 8006424:	e036      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	6a1a      	ldr	r2, [r3, #32]
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	61da      	str	r2, [r3, #28]
 800642e:	e031      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	6a1b      	ldr	r3, [r3, #32]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d018      	beq.n	800646a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	8a92      	ldrh	r2, [r2, #20]
 8006440:	4413      	add	r3, r2
 8006442:	3b01      	subs	r3, #1
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	8a92      	ldrh	r2, [r2, #20]
 8006448:	fbb3 f3f2 	udiv	r3, r3, r2
 800644c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800644e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006450:	8b7b      	ldrh	r3, [r7, #26]
 8006452:	429a      	cmp	r2, r3
 8006454:	d90b      	bls.n	800646e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006456:	8b7b      	ldrh	r3, [r7, #26]
 8006458:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800645a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800645c:	68ba      	ldr	r2, [r7, #8]
 800645e:	8a92      	ldrh	r2, [r2, #20]
 8006460:	fb03 f202 	mul.w	r2, r3, r2
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	61da      	str	r2, [r3, #28]
 8006468:	e001      	b.n	800646e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800646a:	2301      	movs	r3, #1
 800646c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	78db      	ldrb	r3, [r3, #3]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d00a      	beq.n	800648c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006476:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006478:	68ba      	ldr	r2, [r7, #8]
 800647a:	8a92      	ldrh	r2, [r2, #20]
 800647c:	fb03 f202 	mul.w	r2, r3, r2
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	61da      	str	r2, [r3, #28]
 8006484:	e006      	b.n	8006494 <USB_HC_StartXfer+0x1a4>
 8006486:	bf00      	nop
 8006488:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	6a1a      	ldr	r2, [r3, #32]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	69db      	ldr	r3, [r3, #28]
 8006498:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800649c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800649e:	04d9      	lsls	r1, r3, #19
 80064a0:	4ba3      	ldr	r3, [pc, #652]	@ (8006730 <USB_HC_StartXfer+0x440>)
 80064a2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064a4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	7d9b      	ldrb	r3, [r3, #22]
 80064aa:	075b      	lsls	r3, r3, #29
 80064ac:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	0148      	lsls	r0, r1, #5
 80064b4:	6a39      	ldr	r1, [r7, #32]
 80064b6:	4401      	add	r1, r0
 80064b8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80064bc:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80064be:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80064c0:	79fb      	ldrb	r3, [r7, #7]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d009      	beq.n	80064da <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6999      	ldr	r1, [r3, #24]
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	015a      	lsls	r2, r3, #5
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	4413      	add	r3, r2
 80064d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064d6:	460a      	mov	r2, r1
 80064d8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064e0:	689b      	ldr	r3, [r3, #8]
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	bf0c      	ite	eq
 80064ea:	2301      	moveq	r3, #1
 80064ec:	2300      	movne	r3, #0
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	6a3b      	ldr	r3, [r7, #32]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	6a3a      	ldr	r2, [r7, #32]
 8006506:	440a      	add	r2, r1
 8006508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800650c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006510:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006512:	69fb      	ldr	r3, [r7, #28]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	6a3b      	ldr	r3, [r7, #32]
 8006518:	4413      	add	r3, r2
 800651a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	7e7b      	ldrb	r3, [r7, #25]
 8006522:	075b      	lsls	r3, r3, #29
 8006524:	69f9      	ldr	r1, [r7, #28]
 8006526:	0148      	lsls	r0, r1, #5
 8006528:	6a39      	ldr	r1, [r7, #32]
 800652a:	4401      	add	r1, r0
 800652c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006530:	4313      	orrs	r3, r2
 8006532:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	799b      	ldrb	r3, [r3, #6]
 8006538:	2b01      	cmp	r3, #1
 800653a:	f040 80c3 	bne.w	80066c4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7c5b      	ldrb	r3, [r3, #17]
 8006542:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006548:	4313      	orrs	r3, r2
 800654a:	69fa      	ldr	r2, [r7, #28]
 800654c:	0151      	lsls	r1, r2, #5
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	440a      	add	r2, r1
 8006552:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006556:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800655a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800655c:	69fb      	ldr	r3, [r7, #28]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	6a3b      	ldr	r3, [r7, #32]
 8006562:	4413      	add	r3, r2
 8006564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	69fa      	ldr	r2, [r7, #28]
 800656c:	0151      	lsls	r1, r2, #5
 800656e:	6a3a      	ldr	r2, [r7, #32]
 8006570:	440a      	add	r2, r1
 8006572:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006576:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800657a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	79db      	ldrb	r3, [r3, #7]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d123      	bne.n	80065cc <USB_HC_StartXfer+0x2dc>
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	78db      	ldrb	r3, [r3, #3]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d11f      	bne.n	80065cc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	4413      	add	r3, r2
 8006594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	69fa      	ldr	r2, [r7, #28]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	6a3a      	ldr	r2, [r7, #32]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065aa:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	6a3b      	ldr	r3, [r7, #32]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	69fa      	ldr	r2, [r7, #28]
 80065bc:	0151      	lsls	r1, r2, #5
 80065be:	6a3a      	ldr	r2, [r7, #32]
 80065c0:	440a      	add	r2, r1
 80065c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065ca:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	7c9b      	ldrb	r3, [r3, #18]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d003      	beq.n	80065dc <USB_HC_StartXfer+0x2ec>
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	7c9b      	ldrb	r3, [r3, #18]
 80065d8:	2b03      	cmp	r3, #3
 80065da:	d117      	bne.n	800660c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d113      	bne.n	800660c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	78db      	ldrb	r3, [r3, #3]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d10f      	bne.n	800660c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	69fa      	ldr	r2, [r7, #28]
 80065fc:	0151      	lsls	r1, r2, #5
 80065fe:	6a3a      	ldr	r2, [r7, #32]
 8006600:	440a      	add	r2, r1
 8006602:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800660a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	7c9b      	ldrb	r3, [r3, #18]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d162      	bne.n	80066da <USB_HC_StartXfer+0x3ea>
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	78db      	ldrb	r3, [r3, #3]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d15e      	bne.n	80066da <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	3b01      	subs	r3, #1
 8006622:	2b03      	cmp	r3, #3
 8006624:	d858      	bhi.n	80066d8 <USB_HC_StartXfer+0x3e8>
 8006626:	a201      	add	r2, pc, #4	@ (adr r2, 800662c <USB_HC_StartXfer+0x33c>)
 8006628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662c:	0800663d 	.word	0x0800663d
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006681 	.word	0x08006681
 8006638:	080066a3 	.word	0x080066a3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800663c:	69fb      	ldr	r3, [r7, #28]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	6a3b      	ldr	r3, [r7, #32]
 8006642:	4413      	add	r3, r2
 8006644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	0151      	lsls	r1, r2, #5
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	440a      	add	r2, r1
 8006652:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006656:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800665a:	6053      	str	r3, [r2, #4]
          break;
 800665c:	e03d      	b.n	80066da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	015a      	lsls	r2, r3, #5
 8006662:	6a3b      	ldr	r3, [r7, #32]
 8006664:	4413      	add	r3, r2
 8006666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	69fa      	ldr	r2, [r7, #28]
 800666e:	0151      	lsls	r1, r2, #5
 8006670:	6a3a      	ldr	r2, [r7, #32]
 8006672:	440a      	add	r2, r1
 8006674:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006678:	f043 030e 	orr.w	r3, r3, #14
 800667c:	6053      	str	r3, [r2, #4]
          break;
 800667e:	e02c      	b.n	80066da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	015a      	lsls	r2, r3, #5
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	4413      	add	r3, r2
 8006688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	69fa      	ldr	r2, [r7, #28]
 8006690:	0151      	lsls	r1, r2, #5
 8006692:	6a3a      	ldr	r2, [r7, #32]
 8006694:	440a      	add	r2, r1
 8006696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800669a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800669e:	6053      	str	r3, [r2, #4]
          break;
 80066a0:	e01b      	b.n	80066da <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	015a      	lsls	r2, r3, #5
 80066a6:	6a3b      	ldr	r3, [r7, #32]
 80066a8:	4413      	add	r3, r2
 80066aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	0151      	lsls	r1, r2, #5
 80066b4:	6a3a      	ldr	r2, [r7, #32]
 80066b6:	440a      	add	r2, r1
 80066b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80066c0:	6053      	str	r3, [r2, #4]
          break;
 80066c2:	e00a      	b.n	80066da <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80066c4:	69fb      	ldr	r3, [r7, #28]
 80066c6:	015a      	lsls	r2, r3, #5
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	4413      	add	r3, r2
 80066cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066d0:	461a      	mov	r2, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	6053      	str	r3, [r2, #4]
 80066d6:	e000      	b.n	80066da <USB_HC_StartXfer+0x3ea>
          break;
 80066d8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	015a      	lsls	r2, r3, #5
 80066de:	6a3b      	ldr	r3, [r7, #32]
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80066f0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	78db      	ldrb	r3, [r3, #3]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d004      	beq.n	8006704 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006700:	613b      	str	r3, [r7, #16]
 8006702:	e003      	b.n	800670c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800670a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006712:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	6a3b      	ldr	r3, [r7, #32]
 800671a:	4413      	add	r3, r2
 800671c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006720:	461a      	mov	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e055      	b.n	80067dc <USB_HC_StartXfer+0x4ec>
 8006730:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	78db      	ldrb	r3, [r3, #3]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d14e      	bne.n	80067da <USB_HC_StartXfer+0x4ea>
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d04a      	beq.n	80067da <USB_HC_StartXfer+0x4ea>
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	79db      	ldrb	r3, [r3, #7]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d146      	bne.n	80067da <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	7c9b      	ldrb	r3, [r3, #18]
 8006750:	2b03      	cmp	r3, #3
 8006752:	d831      	bhi.n	80067b8 <USB_HC_StartXfer+0x4c8>
 8006754:	a201      	add	r2, pc, #4	@ (adr r2, 800675c <USB_HC_StartXfer+0x46c>)
 8006756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675a:	bf00      	nop
 800675c:	0800676d 	.word	0x0800676d
 8006760:	08006791 	.word	0x08006791
 8006764:	0800676d 	.word	0x0800676d
 8006768:	08006791 	.word	0x08006791
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	6a1b      	ldr	r3, [r3, #32]
 8006770:	3303      	adds	r3, #3
 8006772:	089b      	lsrs	r3, r3, #2
 8006774:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006776:	8afa      	ldrh	r2, [r7, #22]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800677c:	b29b      	uxth	r3, r3
 800677e:	429a      	cmp	r2, r3
 8006780:	d91c      	bls.n	80067bc <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	619a      	str	r2, [r3, #24]
        }
        break;
 800678e:	e015      	b.n	80067bc <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	3303      	adds	r3, #3
 8006796:	089b      	lsrs	r3, r3, #2
 8006798:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800679a:	8afa      	ldrh	r2, [r7, #22]
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	b29b      	uxth	r3, r3
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d90a      	bls.n	80067c0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	619a      	str	r2, [r3, #24]
        }
        break;
 80067b6:	e003      	b.n	80067c0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80067b8:	bf00      	nop
 80067ba:	e002      	b.n	80067c2 <USB_HC_StartXfer+0x4d2>
        break;
 80067bc:	bf00      	nop
 80067be:	e000      	b.n	80067c2 <USB_HC_StartXfer+0x4d2>
        break;
 80067c0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	6999      	ldr	r1, [r3, #24]
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	785a      	ldrb	r2, [r3, #1]
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2000      	movs	r0, #0
 80067d2:	9000      	str	r0, [sp, #0]
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff f9c9 	bl	8005b6c <USB_WritePacket>
  }

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3728      	adds	r7, #40	@ 0x28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b085      	sub	sp, #20
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80067f6:	695b      	ldr	r3, [r3, #20]
 80067f8:	b29b      	uxth	r3, r3
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr

08006806 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006806:	b480      	push	{r7}
 8006808:	b089      	sub	sp, #36	@ 0x24
 800680a:	af00      	add	r7, sp, #0
 800680c:	6078      	str	r0, [r7, #4]
 800680e:	460b      	mov	r3, r1
 8006810:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800681a:	2300      	movs	r3, #0
 800681c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	4413      	add	r3, r2
 8006826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	0c9b      	lsrs	r3, r3, #18
 800682e:	f003 0303 	and.w	r3, r3, #3
 8006832:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	015a      	lsls	r2, r3, #5
 8006838:	69fb      	ldr	r3, [r7, #28]
 800683a:	4413      	add	r3, r2
 800683c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	0fdb      	lsrs	r3, r3, #31
 8006844:	f003 0301 	and.w	r3, r3, #1
 8006848:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800684a:	69bb      	ldr	r3, [r7, #24]
 800684c:	015a      	lsls	r2, r3, #5
 800684e:	69fb      	ldr	r3, [r7, #28]
 8006850:	4413      	add	r3, r2
 8006852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	0fdb      	lsrs	r3, r3, #31
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	f003 0320 	and.w	r3, r3, #32
 8006868:	2b20      	cmp	r3, #32
 800686a:	d10d      	bne.n	8006888 <USB_HC_Halt+0x82>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d10a      	bne.n	8006888 <USB_HC_Halt+0x82>
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d002      	beq.n	8006884 <USB_HC_Halt+0x7e>
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b03      	cmp	r3, #3
 8006882:	d101      	bne.n	8006888 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006884:	2300      	movs	r3, #0
 8006886:	e0d8      	b.n	8006a3a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d002      	beq.n	8006894 <USB_HC_Halt+0x8e>
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2b02      	cmp	r3, #2
 8006892:	d173      	bne.n	800697c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	4413      	add	r3, r2
 800689c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	0151      	lsls	r1, r2, #5
 80068a6:	69fa      	ldr	r2, [r7, #28]
 80068a8:	440a      	add	r2, r1
 80068aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80068b2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f003 0320 	and.w	r3, r3, #32
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d14a      	bne.n	8006956 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d133      	bne.n	8006934 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	69ba      	ldr	r2, [r7, #24]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	69fa      	ldr	r2, [r7, #28]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068ea:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068ec:	69bb      	ldr	r3, [r7, #24]
 80068ee:	015a      	lsls	r2, r3, #5
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	4413      	add	r3, r2
 80068f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	0151      	lsls	r1, r2, #5
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	440a      	add	r2, r1
 8006902:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006906:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800690a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	3301      	adds	r3, #1
 8006910:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006918:	d82e      	bhi.n	8006978 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	015a      	lsls	r2, r3, #5
 800691e:	69fb      	ldr	r3, [r7, #28]
 8006920:	4413      	add	r3, r2
 8006922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800692c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006930:	d0ec      	beq.n	800690c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006932:	e081      	b.n	8006a38 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	69ba      	ldr	r2, [r7, #24]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	69fa      	ldr	r2, [r7, #28]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006952:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006954:	e070      	b.n	8006a38 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	015a      	lsls	r2, r3, #5
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4413      	add	r3, r2
 800695e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	69ba      	ldr	r2, [r7, #24]
 8006966:	0151      	lsls	r1, r2, #5
 8006968:	69fa      	ldr	r2, [r7, #28]
 800696a:	440a      	add	r2, r1
 800696c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006970:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006974:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006976:	e05f      	b.n	8006a38 <USB_HC_Halt+0x232>
            break;
 8006978:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800697a:	e05d      	b.n	8006a38 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	015a      	lsls	r2, r3, #5
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	4413      	add	r3, r2
 8006984:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	0151      	lsls	r1, r2, #5
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	440a      	add	r2, r1
 8006992:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006996:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800699a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d133      	bne.n	8006a14 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	015a      	lsls	r2, r3, #5
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	4413      	add	r3, r2
 80069b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	69ba      	ldr	r2, [r7, #24]
 80069bc:	0151      	lsls	r1, r2, #5
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	440a      	add	r2, r1
 80069c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80069ca:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069ea:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	3301      	adds	r3, #1
 80069f0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069f8:	d81d      	bhi.n	8006a36 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006a0c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006a10:	d0ec      	beq.n	80069ec <USB_HC_Halt+0x1e6>
 8006a12:	e011      	b.n	8006a38 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	e000      	b.n	8006a38 <USB_HC_Halt+0x232>
          break;
 8006a36:	bf00      	nop
    }
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3724      	adds	r7, #36	@ 0x24
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
	...

08006a48 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006a58:	78fb      	ldrb	r3, [r7, #3]
 8006a5a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	04da      	lsls	r2, r3, #19
 8006a64:	4b15      	ldr	r3, [pc, #84]	@ (8006abc <USB_DoPing+0x74>)
 8006a66:	4013      	ands	r3, r2
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	0151      	lsls	r1, r2, #5
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	440a      	add	r2, r1
 8006a70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a78:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	015a      	lsls	r2, r3, #5
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	4413      	add	r3, r2
 8006a82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006a90:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a98:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	371c      	adds	r7, #28
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	1ff80000 	.word	0x1ff80000

08006ac0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f7fe ff8c 	bl	80059f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006ada:	2110      	movs	r1, #16
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7fe ffe5 	bl	8005aac <USB_FlushTxFifo>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006ae8:	2301      	movs	r3, #1
 8006aea:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff f80f 	bl	8005b10 <USB_FlushRxFifo>
 8006af2:	4603      	mov	r3, r0
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d001      	beq.n	8006afc <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006af8:	2301      	movs	r3, #1
 8006afa:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006afc:	2300      	movs	r3, #0
 8006afe:	61bb      	str	r3, [r7, #24]
 8006b00:	e01f      	b.n	8006b42 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b18:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006b20:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b28:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b36:	461a      	mov	r2, r3
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	61bb      	str	r3, [r7, #24]
 8006b42:	69bb      	ldr	r3, [r7, #24]
 8006b44:	2b0f      	cmp	r3, #15
 8006b46:	d9dc      	bls.n	8006b02 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61bb      	str	r3, [r7, #24]
 8006b4c:	e034      	b.n	8006bb8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006b64:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006b74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006b76:	69bb      	ldr	r3, [r7, #24]
 8006b78:	015a      	lsls	r2, r3, #5
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b82:	461a      	mov	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006b94:	d80c      	bhi.n	8006bb0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	015a      	lsls	r2, r3, #5
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ba8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bac:	d0ec      	beq.n	8006b88 <USB_StopHost+0xc8>
 8006bae:	e000      	b.n	8006bb2 <USB_StopHost+0xf2>
        break;
 8006bb0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	61bb      	str	r3, [r7, #24]
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	2b0f      	cmp	r3, #15
 8006bbc:	d9c7      	bls.n	8006b4e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8006bca:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f04f 32ff 	mov.w	r2, #4294967295
 8006bd2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7fe fefb 	bl	80059d0 <USB_EnableGlobalInt>

  return ret;
 8006bda:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3720      	adds	r7, #32
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006be4:	b590      	push	{r4, r7, lr}
 8006be6:	b089      	sub	sp, #36	@ 0x24
 8006be8:	af04      	add	r7, sp, #16
 8006bea:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006bec:	2301      	movs	r3, #1
 8006bee:	2202      	movs	r2, #2
 8006bf0:	2102      	movs	r1, #2
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fc85 	bl	8007502 <USBH_FindInterface>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2bff      	cmp	r3, #255	@ 0xff
 8006c00:	d002      	beq.n	8006c08 <USBH_CDC_InterfaceInit+0x24>
 8006c02:	7bfb      	ldrb	r3, [r7, #15]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d901      	bls.n	8006c0c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c08:	2302      	movs	r3, #2
 8006c0a:	e13d      	b.n	8006e88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006c0c:	7bfb      	ldrb	r3, [r7, #15]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 fc5a 	bl	80074ca <USBH_SelectInterface>
 8006c16:	4603      	mov	r3, r0
 8006c18:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006c20:	2302      	movs	r3, #2
 8006c22:	e131      	b.n	8006e88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006c2a:	2050      	movs	r0, #80	@ 0x50
 8006c2c:	f002 fb64 	bl	80092f8 <malloc>
 8006c30:	4603      	mov	r3, r0
 8006c32:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006c3a:	69db      	ldr	r3, [r3, #28]
 8006c3c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006c44:	2302      	movs	r3, #2
 8006c46:	e11f      	b.n	8006e88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006c48:	2250      	movs	r2, #80	@ 0x50
 8006c4a:	2100      	movs	r1, #0
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f002 fc11 	bl	8009474 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c52:	7bfb      	ldrb	r3, [r7, #15]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	211a      	movs	r1, #26
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	b25b      	sxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	da15      	bge.n	8006c96 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	211a      	movs	r1, #26
 8006c70:	fb01 f303 	mul.w	r3, r1, r3
 8006c74:	4413      	add	r3, r2
 8006c76:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006c7a:	781a      	ldrb	r2, [r3, #0]
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	211a      	movs	r1, #26
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	4413      	add	r3, r2
 8006c8c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006c90:	881a      	ldrh	r2, [r3, #0]
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f001 ffbe 	bl	8008c1e <USBH_AllocPipe>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	7819      	ldrb	r1, [r3, #0]
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	7858      	ldrb	r0, [r3, #1]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006cbe:	68ba      	ldr	r2, [r7, #8]
 8006cc0:	8952      	ldrh	r2, [r2, #10]
 8006cc2:	9202      	str	r2, [sp, #8]
 8006cc4:	2203      	movs	r2, #3
 8006cc6:	9201      	str	r2, [sp, #4]
 8006cc8:	9300      	str	r3, [sp, #0]
 8006cca:	4623      	mov	r3, r4
 8006ccc:	4602      	mov	r2, r0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f001 ff76 	bl	8008bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	4619      	mov	r1, r3
 8006cdc:	6878      	ldr	r0, [r7, #4]
 8006cde:	f002 fa85 	bl	80091ec <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	210a      	movs	r1, #10
 8006ce8:	6878      	ldr	r0, [r7, #4]
 8006cea:	f000 fc0a 	bl	8007502 <USBH_FindInterface>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2bff      	cmp	r3, #255	@ 0xff
 8006cf6:	d002      	beq.n	8006cfe <USBH_CDC_InterfaceInit+0x11a>
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d901      	bls.n	8006d02 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006cfe:	2302      	movs	r3, #2
 8006d00:	e0c2      	b.n	8006e88 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	211a      	movs	r1, #26
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	b25b      	sxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da16      	bge.n	8006d48 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d1a:	7bfb      	ldrb	r3, [r7, #15]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	211a      	movs	r1, #26
 8006d20:	fb01 f303 	mul.w	r3, r1, r3
 8006d24:	4413      	add	r3, r2
 8006d26:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d2a:	781a      	ldrb	r2, [r3, #0]
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	211a      	movs	r1, #26
 8006d36:	fb01 f303 	mul.w	r3, r1, r3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d40:	881a      	ldrh	r2, [r3, #0]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	835a      	strh	r2, [r3, #26]
 8006d46:	e015      	b.n	8006d74 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d48:	7bfb      	ldrb	r3, [r7, #15]
 8006d4a:	687a      	ldr	r2, [r7, #4]
 8006d4c:	211a      	movs	r1, #26
 8006d4e:	fb01 f303 	mul.w	r3, r1, r3
 8006d52:	4413      	add	r3, r2
 8006d54:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d58:	781a      	ldrb	r2, [r3, #0]
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	211a      	movs	r1, #26
 8006d64:	fb01 f303 	mul.w	r3, r1, r3
 8006d68:	4413      	add	r3, r2
 8006d6a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d6e:	881a      	ldrh	r2, [r3, #0]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006d74:	7bfb      	ldrb	r3, [r7, #15]
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	211a      	movs	r1, #26
 8006d7a:	fb01 f303 	mul.w	r3, r1, r3
 8006d7e:	4413      	add	r3, r2
 8006d80:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	b25b      	sxtb	r3, r3
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	da16      	bge.n	8006dba <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006d8c:	7bfb      	ldrb	r3, [r7, #15]
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	211a      	movs	r1, #26
 8006d92:	fb01 f303 	mul.w	r3, r1, r3
 8006d96:	4413      	add	r3, r2
 8006d98:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006d9c:	781a      	ldrb	r2, [r3, #0]
 8006d9e:	68bb      	ldr	r3, [r7, #8]
 8006da0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006da2:	7bfb      	ldrb	r3, [r7, #15]
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	211a      	movs	r1, #26
 8006da8:	fb01 f303 	mul.w	r3, r1, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006db2:	881a      	ldrh	r2, [r3, #0]
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	835a      	strh	r2, [r3, #26]
 8006db8:	e015      	b.n	8006de6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
 8006dbc:	687a      	ldr	r2, [r7, #4]
 8006dbe:	211a      	movs	r1, #26
 8006dc0:	fb01 f303 	mul.w	r3, r1, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006dca:	781a      	ldrb	r2, [r3, #0]
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	211a      	movs	r1, #26
 8006dd6:	fb01 f303 	mul.w	r3, r1, r3
 8006dda:	4413      	add	r3, r2
 8006ddc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006de0:	881a      	ldrh	r2, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	7b9b      	ldrb	r3, [r3, #14]
 8006dea:	4619      	mov	r1, r3
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	f001 ff16 	bl	8008c1e <USBH_AllocPipe>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461a      	mov	r2, r3
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	7bdb      	ldrb	r3, [r3, #15]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f001 ff0c 	bl	8008c1e <USBH_AllocPipe>
 8006e06:	4603      	mov	r3, r0
 8006e08:	461a      	mov	r2, r3
 8006e0a:	68bb      	ldr	r3, [r7, #8]
 8006e0c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	7b59      	ldrb	r1, [r3, #13]
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	7b98      	ldrb	r0, [r3, #14]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e22:	68ba      	ldr	r2, [r7, #8]
 8006e24:	8b12      	ldrh	r2, [r2, #24]
 8006e26:	9202      	str	r2, [sp, #8]
 8006e28:	2202      	movs	r2, #2
 8006e2a:	9201      	str	r2, [sp, #4]
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4623      	mov	r3, r4
 8006e30:	4602      	mov	r2, r0
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f001 fec4 	bl	8008bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	7b19      	ldrb	r1, [r3, #12]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	7bd8      	ldrb	r0, [r3, #15]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	8b52      	ldrh	r2, [r2, #26]
 8006e50:	9202      	str	r2, [sp, #8]
 8006e52:	2202      	movs	r2, #2
 8006e54:	9201      	str	r2, [sp, #4]
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4623      	mov	r3, r4
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 feaf 	bl	8008bc0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	7b5b      	ldrb	r3, [r3, #13]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f002 f9ba 	bl	80091ec <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	7b1b      	ldrb	r3, [r3, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4619      	mov	r1, r3
 8006e80:	6878      	ldr	r0, [r7, #4]
 8006e82:	f002 f9b3 	bl	80091ec <USBH_LL_SetToggle>

  return USBH_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3714      	adds	r7, #20
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd90      	pop	{r4, r7, pc}

08006e90 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b084      	sub	sp, #16
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e9e:	69db      	ldr	r3, [r3, #28]
 8006ea0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	781b      	ldrb	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00e      	beq.n	8006ec8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f001 fea4 	bl	8008bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f001 fecf 	bl	8008c60 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	7b1b      	ldrb	r3, [r3, #12]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00e      	beq.n	8006eee <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	7b1b      	ldrb	r3, [r3, #12]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 fe91 	bl	8008bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	7b1b      	ldrb	r3, [r3, #12]
 8006ee0:	4619      	mov	r1, r3
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f001 febc 	bl	8008c60 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2200      	movs	r2, #0
 8006eec:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	7b5b      	ldrb	r3, [r3, #13]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d00e      	beq.n	8006f14 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	7b5b      	ldrb	r3, [r3, #13]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f001 fe7e 	bl	8008bfe <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	7b5b      	ldrb	r3, [r3, #13]
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f001 fea9 	bl	8008c60 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2200      	movs	r2, #0
 8006f12:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00b      	beq.n	8006f38 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f26:	69db      	ldr	r3, [r3, #28]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f002 f9ed 	bl	8009308 <free>
    phost->pActiveClass->pData = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f34:	2200      	movs	r2, #0
 8006f36:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3710      	adds	r7, #16
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b084      	sub	sp, #16
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f50:	69db      	ldr	r3, [r3, #28]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	3340      	adds	r3, #64	@ 0x40
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f8b1 	bl	80070c2 <GetLineCoding>
 8006f60:	4603      	mov	r3, r0
 8006f62:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d105      	bne.n	8006f76 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f70:	2102      	movs	r1, #2
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006f76:	7afb      	ldrb	r3, [r7, #11]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}

08006f80 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f96:	69db      	ldr	r3, [r3, #28]
 8006f98:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d877      	bhi.n	8007094 <USBH_CDC_Process+0x114>
 8006fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8006fac <USBH_CDC_Process+0x2c>)
 8006fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006faa:	bf00      	nop
 8006fac:	08006fc1 	.word	0x08006fc1
 8006fb0:	08006fc7 	.word	0x08006fc7
 8006fb4:	08006ff7 	.word	0x08006ff7
 8006fb8:	0800706b 	.word	0x0800706b
 8006fbc:	08007079 	.word	0x08007079
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fc4:	e06d      	b.n	80070a2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f000 f897 	bl	8007100 <SetLineCoding>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d104      	bne.n	8006fe6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2202      	movs	r2, #2
 8006fe0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006fe4:	e058      	b.n	8007098 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d055      	beq.n	8007098 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	2204      	movs	r2, #4
 8006ff0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006ff4:	e050      	b.n	8007098 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	3340      	adds	r3, #64	@ 0x40
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f860 	bl	80070c2 <GetLineCoding>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d126      	bne.n	800705a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800701e:	791b      	ldrb	r3, [r3, #4]
 8007020:	429a      	cmp	r2, r3
 8007022:	d13b      	bne.n	800709c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800702e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007030:	429a      	cmp	r2, r3
 8007032:	d133      	bne.n	800709c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800703e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007040:	429a      	cmp	r2, r3
 8007042:	d12b      	bne.n	800709c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800704c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800704e:	429a      	cmp	r2, r3
 8007050:	d124      	bne.n	800709c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f958 	bl	8007308 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007058:	e020      	b.n	800709c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800705a:	7bbb      	ldrb	r3, [r7, #14]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d01d      	beq.n	800709c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2204      	movs	r2, #4
 8007064:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007068:	e018      	b.n	800709c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f867 	bl	800713e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f8da 	bl	800722a <CDC_ProcessReception>
      break;
 8007076:	e014      	b.n	80070a2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 f81a 	bl	80080b4 <USBH_ClrFeature>
 8007080:	4603      	mov	r3, r0
 8007082:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007084:	7bbb      	ldrb	r3, [r7, #14]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007092:	e005      	b.n	80070a0 <USBH_CDC_Process+0x120>

    default:
      break;
 8007094:	bf00      	nop
 8007096:	e004      	b.n	80070a2 <USBH_CDC_Process+0x122>
      break;
 8007098:	bf00      	nop
 800709a:	e002      	b.n	80070a2 <USBH_CDC_Process+0x122>
      break;
 800709c:	bf00      	nop
 800709e:	e000      	b.n	80070a2 <USBH_CDC_Process+0x122>
      break;
 80070a0:	bf00      	nop

  }

  return status;
 80070a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80070b4:	2300      	movs	r3, #0
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80070c2:	b580      	push	{r7, lr}
 80070c4:	b082      	sub	sp, #8
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
 80070ca:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	22a1      	movs	r2, #161	@ 0xa1
 80070d0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2221      	movs	r2, #33	@ 0x21
 80070d6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2200      	movs	r2, #0
 80070e2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2207      	movs	r2, #7
 80070e8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2207      	movs	r2, #7
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fb14 	bl	800871e <USBH_CtlReq>
 80070f6:	4603      	mov	r3, r0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2221      	movs	r2, #33	@ 0x21
 800710e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2207      	movs	r2, #7
 8007126:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2207      	movs	r2, #7
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 faf5 	bl	800871e <USBH_CtlReq>
 8007134:	4603      	mov	r3, r0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3708      	adds	r7, #8
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}

0800713e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800713e:	b580      	push	{r7, lr}
 8007140:	b086      	sub	sp, #24
 8007142:	af02      	add	r7, sp, #8
 8007144:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800714c:	69db      	ldr	r3, [r3, #28]
 800714e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007150:	2300      	movs	r3, #0
 8007152:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800715a:	2b01      	cmp	r3, #1
 800715c:	d002      	beq.n	8007164 <CDC_ProcessTransmission+0x26>
 800715e:	2b02      	cmp	r3, #2
 8007160:	d023      	beq.n	80071aa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007162:	e05e      	b.n	8007222 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	8b12      	ldrh	r2, [r2, #24]
 800716c:	4293      	cmp	r3, r2
 800716e:	d90b      	bls.n	8007188 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	69d9      	ldr	r1, [r3, #28]
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8b1a      	ldrh	r2, [r3, #24]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	7b5b      	ldrb	r3, [r3, #13]
 800717c:	2001      	movs	r0, #1
 800717e:	9000      	str	r0, [sp, #0]
 8007180:	6878      	ldr	r0, [r7, #4]
 8007182:	f001 fcda 	bl	8008b3a <USBH_BulkSendData>
 8007186:	e00b      	b.n	80071a0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007190:	b29a      	uxth	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	7b5b      	ldrb	r3, [r3, #13]
 8007196:	2001      	movs	r0, #1
 8007198:	9000      	str	r0, [sp, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f001 fccd 	bl	8008b3a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80071a8:	e03b      	b.n	8007222 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7b5b      	ldrb	r3, [r3, #13]
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 fff1 	bl	8009198 <USBH_LL_GetURBState>
 80071b6:	4603      	mov	r3, r0
 80071b8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80071ba:	7afb      	ldrb	r3, [r7, #11]
 80071bc:	2b01      	cmp	r3, #1
 80071be:	d128      	bne.n	8007212 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	8b12      	ldrh	r2, [r2, #24]
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d90e      	bls.n	80071ea <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	8b12      	ldrh	r2, [r2, #24]
 80071d4:	1a9a      	subs	r2, r3, r2
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	69db      	ldr	r3, [r3, #28]
 80071de:	68fa      	ldr	r2, [r7, #12]
 80071e0:	8b12      	ldrh	r2, [r2, #24]
 80071e2:	441a      	add	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	61da      	str	r2, [r3, #28]
 80071e8:	e002      	b.n	80071f0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d004      	beq.n	8007202 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007200:	e00e      	b.n	8007220 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2200      	movs	r2, #0
 8007206:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f868 	bl	80072e0 <USBH_CDC_TransmitCallback>
      break;
 8007210:	e006      	b.n	8007220 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007212:	7afb      	ldrb	r3, [r7, #11]
 8007214:	2b02      	cmp	r3, #2
 8007216:	d103      	bne.n	8007220 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007220:	bf00      	nop
  }
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b086      	sub	sp, #24
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007238:	69db      	ldr	r3, [r3, #28]
 800723a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800723c:	2300      	movs	r3, #0
 800723e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007246:	2b03      	cmp	r3, #3
 8007248:	d002      	beq.n	8007250 <CDC_ProcessReception+0x26>
 800724a:	2b04      	cmp	r3, #4
 800724c:	d00e      	beq.n	800726c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800724e:	e043      	b.n	80072d8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	6a19      	ldr	r1, [r3, #32]
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	8b5a      	ldrh	r2, [r3, #26]
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	7b1b      	ldrb	r3, [r3, #12]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f001 fc91 	bl	8008b84 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	2204      	movs	r2, #4
 8007266:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800726a:	e035      	b.n	80072d8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	7b1b      	ldrb	r3, [r3, #12]
 8007270:	4619      	mov	r1, r3
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f001 ff90 	bl	8009198 <USBH_LL_GetURBState>
 8007278:	4603      	mov	r3, r0
 800727a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800727c:	7cfb      	ldrb	r3, [r7, #19]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d129      	bne.n	80072d6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007282:	697b      	ldr	r3, [r7, #20]
 8007284:	7b1b      	ldrb	r3, [r3, #12]
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f001 fef3 	bl	8009074 <USBH_LL_GetLastXferSize>
 800728e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007294:	68fa      	ldr	r2, [r7, #12]
 8007296:	429a      	cmp	r2, r3
 8007298:	d016      	beq.n	80072c8 <CDC_ProcessReception+0x9e>
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	8b5b      	ldrh	r3, [r3, #26]
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d110      	bne.n	80072c8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	1ad2      	subs	r2, r2, r3
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	6a1a      	ldr	r2, [r3, #32]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	441a      	add	r2, r3
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2203      	movs	r2, #3
 80072c2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80072c6:	e006      	b.n	80072d6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f000 f80f 	bl	80072f4 <USBH_CDC_ReceiveCallback>
      break;
 80072d6:	bf00      	nop
  }
}
 80072d8:	bf00      	nop
 80072da:	3718      	adds	r7, #24
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b083      	sub	sp, #12
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80072fc:	bf00      	nop
 80072fe:	370c      	adds	r7, #12
 8007300:	46bd      	mov	sp, r7
 8007302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007306:	4770      	bx	lr

08007308 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007310:	bf00      	nop
 8007312:	370c      	adds	r7, #12
 8007314:	46bd      	mov	sp, r7
 8007316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731a:	4770      	bx	lr

0800731c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	4613      	mov	r3, r2
 8007328:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d101      	bne.n	8007334 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007330:	2302      	movs	r3, #2
 8007332:	e029      	b.n	8007388 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	79fa      	ldrb	r2, [r7, #7]
 8007338:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	2200      	movs	r2, #0
 8007340:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2200      	movs	r2, #0
 8007348:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f81f 	bl	8007390 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f001 fdc3 	bl	8008f0c <USBH_LL_Init>

  return USBH_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b084      	sub	sp, #16
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007398:	2300      	movs	r3, #0
 800739a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800739c:	2300      	movs	r3, #0
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	e009      	b.n	80073b6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073a2:	687a      	ldr	r2, [r7, #4]
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	33e0      	adds	r3, #224	@ 0xe0
 80073a8:	009b      	lsls	r3, r3, #2
 80073aa:	4413      	add	r3, r2
 80073ac:	2200      	movs	r2, #0
 80073ae:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	3301      	adds	r3, #1
 80073b4:	60fb      	str	r3, [r7, #12]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2b0f      	cmp	r3, #15
 80073ba:	d9f2      	bls.n	80073a2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	e009      	b.n	80073d6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80073c2:	687a      	ldr	r2, [r7, #4]
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80073cc:	2200      	movs	r2, #0
 80073ce:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073dc:	d3f1      	bcc.n	80073c2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2201      	movs	r2, #1
 80073ee:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2240      	movs	r2, #64	@ 0x40
 8007402:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2200      	movs	r2, #0
 8007408:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2201      	movs	r2, #1
 8007416:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2200      	movs	r2, #0
 8007426:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	331c      	adds	r3, #28
 800742e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007432:	2100      	movs	r1, #0
 8007434:	4618      	mov	r0, r3
 8007436:	f002 f81d 	bl	8009474 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007440:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007444:	2100      	movs	r1, #0
 8007446:	4618      	mov	r0, r3
 8007448:	f002 f814 	bl	8009474 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007452:	2212      	movs	r2, #18
 8007454:	2100      	movs	r1, #0
 8007456:	4618      	mov	r0, r3
 8007458:	f002 f80c 	bl	8009474 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007462:	223e      	movs	r2, #62	@ 0x3e
 8007464:	2100      	movs	r1, #0
 8007466:	4618      	mov	r0, r3
 8007468:	f002 f804 	bl	8009474 <memset>

  return USBH_OK;
 800746c:	2300      	movs	r3, #0
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007476:	b480      	push	{r7}
 8007478:	b085      	sub	sp, #20
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d016      	beq.n	80074b8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10e      	bne.n	80074b2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800749a:	1c59      	adds	r1, r3, #1
 800749c:	687a      	ldr	r2, [r7, #4]
 800749e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	33de      	adds	r3, #222	@ 0xde
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074ac:	2300      	movs	r3, #0
 80074ae:	73fb      	strb	r3, [r7, #15]
 80074b0:	e004      	b.n	80074bc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074b2:	2302      	movs	r3, #2
 80074b4:	73fb      	strb	r3, [r7, #15]
 80074b6:	e001      	b.n	80074bc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074b8:	2302      	movs	r3, #2
 80074ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr

080074ca <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074ca:	b480      	push	{r7}
 80074cc:	b085      	sub	sp, #20
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074d6:	2300      	movs	r3, #0
 80074d8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80074e0:	78fa      	ldrb	r2, [r7, #3]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d204      	bcs.n	80074f0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80074ee:	e001      	b.n	80074f4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80074f0:	2302      	movs	r3, #2
 80074f2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3714      	adds	r7, #20
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr

08007502 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007502:	b480      	push	{r7}
 8007504:	b087      	sub	sp, #28
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	4608      	mov	r0, r1
 800750c:	4611      	mov	r1, r2
 800750e:	461a      	mov	r2, r3
 8007510:	4603      	mov	r3, r0
 8007512:	70fb      	strb	r3, [r7, #3]
 8007514:	460b      	mov	r3, r1
 8007516:	70bb      	strb	r3, [r7, #2]
 8007518:	4613      	mov	r3, r2
 800751a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800752a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800752c:	e025      	b.n	800757a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	221a      	movs	r2, #26
 8007532:	fb02 f303 	mul.w	r3, r2, r3
 8007536:	3308      	adds	r3, #8
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	3302      	adds	r3, #2
 800753e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	795b      	ldrb	r3, [r3, #5]
 8007544:	78fa      	ldrb	r2, [r7, #3]
 8007546:	429a      	cmp	r2, r3
 8007548:	d002      	beq.n	8007550 <USBH_FindInterface+0x4e>
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2bff      	cmp	r3, #255	@ 0xff
 800754e:	d111      	bne.n	8007574 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007554:	78ba      	ldrb	r2, [r7, #2]
 8007556:	429a      	cmp	r2, r3
 8007558:	d002      	beq.n	8007560 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800755a:	78bb      	ldrb	r3, [r7, #2]
 800755c:	2bff      	cmp	r3, #255	@ 0xff
 800755e:	d109      	bne.n	8007574 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007564:	787a      	ldrb	r2, [r7, #1]
 8007566:	429a      	cmp	r2, r3
 8007568:	d002      	beq.n	8007570 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800756a:	787b      	ldrb	r3, [r7, #1]
 800756c:	2bff      	cmp	r3, #255	@ 0xff
 800756e:	d101      	bne.n	8007574 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	e006      	b.n	8007582 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007574:	7dfb      	ldrb	r3, [r7, #23]
 8007576:	3301      	adds	r3, #1
 8007578:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d9d6      	bls.n	800752e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007580:	23ff      	movs	r3, #255	@ 0xff
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr

0800758e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f001 fcf4 	bl	8008f84 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800759c:	2101      	movs	r1, #1
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f001 fe0d 	bl	80091be <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3708      	adds	r7, #8
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af04      	add	r7, sp, #16
 80075b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075b8:	2302      	movs	r3, #2
 80075ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d102      	bne.n	80075d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2203      	movs	r2, #3
 80075d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b0b      	cmp	r3, #11
 80075da:	f200 81bb 	bhi.w	8007954 <USBH_Process+0x3a4>
 80075de:	a201      	add	r2, pc, #4	@ (adr r2, 80075e4 <USBH_Process+0x34>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007615 	.word	0x08007615
 80075e8:	08007647 	.word	0x08007647
 80075ec:	080076af 	.word	0x080076af
 80075f0:	080078ef 	.word	0x080078ef
 80075f4:	08007955 	.word	0x08007955
 80075f8:	0800774f 	.word	0x0800774f
 80075fc:	08007895 	.word	0x08007895
 8007600:	08007785 	.word	0x08007785
 8007604:	080077a5 	.word	0x080077a5
 8007608:	080077c3 	.word	0x080077c3
 800760c:	08007807 	.word	0x08007807
 8007610:	080078d7 	.word	0x080078d7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 819b 	beq.w	8007958 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2201      	movs	r2, #1
 8007626:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007628:	20c8      	movs	r0, #200	@ 0xc8
 800762a:	f001 fe12 	bl	8009252 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fd05 	bl	800903e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007644:	e188      	b.n	8007958 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800764c:	2b01      	cmp	r3, #1
 800764e:	d107      	bne.n	8007660 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2202      	movs	r2, #2
 800765c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800765e:	e18a      	b.n	8007976 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007666:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800766a:	d914      	bls.n	8007696 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007672:	3301      	adds	r3, #1
 8007674:	b2da      	uxtb	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007682:	2b03      	cmp	r3, #3
 8007684:	d903      	bls.n	800768e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	220d      	movs	r2, #13
 800768a:	701a      	strb	r2, [r3, #0]
      break;
 800768c:	e173      	b.n	8007976 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	701a      	strb	r2, [r3, #0]
      break;
 8007694:	e16f      	b.n	8007976 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800769c:	f103 020a 	add.w	r2, r3, #10
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80076a6:	200a      	movs	r0, #10
 80076a8:	f001 fdd3 	bl	8009252 <USBH_Delay>
      break;
 80076ac:	e163      	b.n	8007976 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d005      	beq.n	80076c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80076be:	2104      	movs	r1, #4
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076c4:	2064      	movs	r0, #100	@ 0x64
 80076c6:	f001 fdc4 	bl	8009252 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f001 fc90 	bl	8008ff0 <USBH_LL_GetSpeed>
 80076d0:	4603      	mov	r3, r0
 80076d2:	461a      	mov	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2205      	movs	r2, #5
 80076de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076e0:	2100      	movs	r1, #0
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f001 fa9b 	bl	8008c1e <USBH_AllocPipe>
 80076e8:	4603      	mov	r3, r0
 80076ea:	461a      	mov	r2, r3
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 80076f0:	2180      	movs	r1, #128	@ 0x80
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fa93 	bl	8008c1e <USBH_AllocPipe>
 80076f8:	4603      	mov	r3, r0
 80076fa:	461a      	mov	r2, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	7919      	ldrb	r1, [r3, #4]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007714:	9202      	str	r2, [sp, #8]
 8007716:	2200      	movs	r2, #0
 8007718:	9201      	str	r2, [sp, #4]
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4603      	mov	r3, r0
 800771e:	2280      	movs	r2, #128	@ 0x80
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f001 fa4d 	bl	8008bc0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7959      	ldrb	r1, [r3, #5]
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800773a:	9202      	str	r2, [sp, #8]
 800773c:	2200      	movs	r2, #0
 800773e:	9201      	str	r2, [sp, #4]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	4603      	mov	r3, r0
 8007744:	2200      	movs	r2, #0
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f001 fa3a 	bl	8008bc0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800774c:	e113      	b.n	8007976 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800774e:	6878      	ldr	r0, [r7, #4]
 8007750:	f000 f916 	bl	8007980 <USBH_HandleEnum>
 8007754:	4603      	mov	r3, r0
 8007756:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007758:	7bbb      	ldrb	r3, [r7, #14]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 80fd 	bne.w	800795c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007770:	2b01      	cmp	r3, #1
 8007772:	d103      	bne.n	800777c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2208      	movs	r2, #8
 8007778:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800777a:	e0ef      	b.n	800795c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2207      	movs	r2, #7
 8007780:	701a      	strb	r2, [r3, #0]
      break;
 8007782:	e0eb      	b.n	800795c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800778a:	2b00      	cmp	r3, #0
 800778c:	f000 80e8 	beq.w	8007960 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007796:	2101      	movs	r1, #1
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2208      	movs	r2, #8
 80077a0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80077a2:	e0dd      	b.n	8007960 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fc3a 	bl	8008026 <USBH_SetCfg>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 80d5 	bne.w	8007964 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2209      	movs	r2, #9
 80077be:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077c0:	e0d0      	b.n	8007964 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d016      	beq.n	80077fe <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80077d0:	2101      	movs	r1, #1
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc4a 	bl	800806c <USBH_SetFeature>
 80077d8:	4603      	mov	r3, r0
 80077da:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d103      	bne.n	80077ec <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	220a      	movs	r2, #10
 80077e8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077ea:	e0bd      	b.n	8007968 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 80077ec:	7bbb      	ldrb	r3, [r7, #14]
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	2b03      	cmp	r3, #3
 80077f2:	f040 80b9 	bne.w	8007968 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	220a      	movs	r2, #10
 80077fa:	701a      	strb	r2, [r3, #0]
      break;
 80077fc:	e0b4      	b.n	8007968 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	220a      	movs	r2, #10
 8007802:	701a      	strb	r2, [r3, #0]
      break;
 8007804:	e0b0      	b.n	8007968 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 80ad 	beq.w	800796c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2200      	movs	r2, #0
 8007816:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800781a:	2300      	movs	r3, #0
 800781c:	73fb      	strb	r3, [r7, #15]
 800781e:	e016      	b.n	800784e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007820:	7bfa      	ldrb	r2, [r7, #15]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	32de      	adds	r2, #222	@ 0xde
 8007826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800782a:	791a      	ldrb	r2, [r3, #4]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007832:	429a      	cmp	r2, r3
 8007834:	d108      	bne.n	8007848 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	32de      	adds	r2, #222	@ 0xde
 800783c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007846:	e005      	b.n	8007854 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007848:	7bfb      	ldrb	r3, [r7, #15]
 800784a:	3301      	adds	r3, #1
 800784c:	73fb      	strb	r3, [r7, #15]
 800784e:	7bfb      	ldrb	r3, [r7, #15]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d0e5      	beq.n	8007820 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800785a:	2b00      	cmp	r3, #0
 800785c:	d016      	beq.n	800788c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	4798      	blx	r3
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d109      	bne.n	8007884 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2206      	movs	r2, #6
 8007874:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800787c:	2103      	movs	r1, #3
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007882:	e073      	b.n	800796c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	220d      	movs	r2, #13
 8007888:	701a      	strb	r2, [r3, #0]
      break;
 800788a:	e06f      	b.n	800796c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	220d      	movs	r2, #13
 8007890:	701a      	strb	r2, [r3, #0]
      break;
 8007892:	e06b      	b.n	800796c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d017      	beq.n	80078ce <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	4798      	blx	r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d103      	bne.n	80078be <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	220b      	movs	r2, #11
 80078ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80078bc:	e058      	b.n	8007970 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80078be:	7bbb      	ldrb	r3, [r7, #14]
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	d154      	bne.n	8007970 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	220d      	movs	r2, #13
 80078ca:	701a      	strb	r2, [r3, #0]
      break;
 80078cc:	e050      	b.n	8007970 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	220d      	movs	r2, #13
 80078d2:	701a      	strb	r2, [r3, #0]
      break;
 80078d4:	e04c      	b.n	8007970 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d049      	beq.n	8007974 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078e6:	695b      	ldr	r3, [r3, #20]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	4798      	blx	r3
      }
      break;
 80078ec:	e042      	b.n	8007974 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f7ff fd4a 	bl	8007390 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007902:	2b00      	cmp	r3, #0
 8007904:	d009      	beq.n	800791a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800792a:	2105      	movs	r1, #5
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b01      	cmp	r3, #1
 800793a:	d107      	bne.n	800794c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff fe22 	bl	800758e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800794a:	e014      	b.n	8007976 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800794c:	6878      	ldr	r0, [r7, #4]
 800794e:	f001 fb19 	bl	8008f84 <USBH_LL_Start>
      break;
 8007952:	e010      	b.n	8007976 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007954:	bf00      	nop
 8007956:	e00e      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 8007958:	bf00      	nop
 800795a:	e00c      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 800795c:	bf00      	nop
 800795e:	e00a      	b.n	8007976 <USBH_Process+0x3c6>
    break;
 8007960:	bf00      	nop
 8007962:	e008      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 8007964:	bf00      	nop
 8007966:	e006      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 8007968:	bf00      	nop
 800796a:	e004      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 800796c:	bf00      	nop
 800796e:	e002      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 8007970:	bf00      	nop
 8007972:	e000      	b.n	8007976 <USBH_Process+0x3c6>
      break;
 8007974:	bf00      	nop
  }
  return USBH_OK;
 8007976:	2300      	movs	r3, #0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af04      	add	r7, sp, #16
 8007986:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007988:	2301      	movs	r3, #1
 800798a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800798c:	2301      	movs	r3, #1
 800798e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	785b      	ldrb	r3, [r3, #1]
 8007994:	2b07      	cmp	r3, #7
 8007996:	f200 81bd 	bhi.w	8007d14 <USBH_HandleEnum+0x394>
 800799a:	a201      	add	r2, pc, #4	@ (adr r2, 80079a0 <USBH_HandleEnum+0x20>)
 800799c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079a0:	080079c1 	.word	0x080079c1
 80079a4:	08007a7b 	.word	0x08007a7b
 80079a8:	08007ae5 	.word	0x08007ae5
 80079ac:	08007b6f 	.word	0x08007b6f
 80079b0:	08007bd9 	.word	0x08007bd9
 80079b4:	08007c49 	.word	0x08007c49
 80079b8:	08007c8f 	.word	0x08007c8f
 80079bc:	08007cd5 	.word	0x08007cd5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079c0:	2108      	movs	r1, #8
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fa4c 	bl	8007e60 <USBH_Get_DevDesc>
 80079c8:	4603      	mov	r3, r0
 80079ca:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079cc:	7bbb      	ldrb	r3, [r7, #14]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d12e      	bne.n	8007a30 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7919      	ldrb	r1, [r3, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80079f2:	687a      	ldr	r2, [r7, #4]
 80079f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079f6:	9202      	str	r2, [sp, #8]
 80079f8:	2200      	movs	r2, #0
 80079fa:	9201      	str	r2, [sp, #4]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	4603      	mov	r3, r0
 8007a00:	2280      	movs	r2, #128	@ 0x80
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f001 f8dc 	bl	8008bc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	7959      	ldrb	r1, [r3, #5]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a18:	687a      	ldr	r2, [r7, #4]
 8007a1a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a1c:	9202      	str	r2, [sp, #8]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	9201      	str	r2, [sp, #4]
 8007a22:	9300      	str	r3, [sp, #0]
 8007a24:	4603      	mov	r3, r0
 8007a26:	2200      	movs	r2, #0
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f001 f8c9 	bl	8008bc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a2e:	e173      	b.n	8007d18 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	2b03      	cmp	r3, #3
 8007a34:	f040 8170 	bne.w	8007d18 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a3e:	3301      	adds	r3, #1
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007a4e:	2b03      	cmp	r3, #3
 8007a50:	d903      	bls.n	8007a5a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	220d      	movs	r2, #13
 8007a56:	701a      	strb	r2, [r3, #0]
      break;
 8007a58:	e15e      	b.n	8007d18 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	795b      	ldrb	r3, [r3, #5]
 8007a5e:	4619      	mov	r1, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f001 f8fd 	bl	8008c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	791b      	ldrb	r3, [r3, #4]
 8007a6a:	4619      	mov	r1, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f001 f8f7 	bl	8008c60 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	701a      	strb	r2, [r3, #0]
      break;
 8007a78:	e14e      	b.n	8007d18 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a7a:	2112      	movs	r1, #18
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9ef 	bl	8007e60 <USBH_Get_DevDesc>
 8007a82:	4603      	mov	r3, r0
 8007a84:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a86:	7bbb      	ldrb	r3, [r7, #14]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d103      	bne.n	8007a94 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007a92:	e143      	b.n	8007d1c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a94:	7bbb      	ldrb	r3, [r7, #14]
 8007a96:	2b03      	cmp	r3, #3
 8007a98:	f040 8140 	bne.w	8007d1c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	b2da      	uxtb	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d903      	bls.n	8007abe <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	220d      	movs	r2, #13
 8007aba:	701a      	strb	r2, [r3, #0]
      break;
 8007abc:	e12e      	b.n	8007d1c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	795b      	ldrb	r3, [r3, #5]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	f001 f8cb 	bl	8008c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	791b      	ldrb	r3, [r3, #4]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f001 f8c5 	bl	8008c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	701a      	strb	r2, [r3, #0]
      break;
 8007ae2:	e11b      	b.n	8007d1c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa79 	bl	8007fde <USBH_SetAddress>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007af0:	7bbb      	ldrb	r3, [r7, #14]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d130      	bne.n	8007b58 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007af6:	2002      	movs	r0, #2
 8007af8:	f001 fbab 	bl	8009252 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2203      	movs	r2, #3
 8007b08:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	7919      	ldrb	r1, [r3, #4]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b1e:	9202      	str	r2, [sp, #8]
 8007b20:	2200      	movs	r2, #0
 8007b22:	9201      	str	r2, [sp, #4]
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4603      	mov	r3, r0
 8007b28:	2280      	movs	r2, #128	@ 0x80
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 f848 	bl	8008bc0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	7959      	ldrb	r1, [r3, #5]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007b40:	687a      	ldr	r2, [r7, #4]
 8007b42:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b44:	9202      	str	r2, [sp, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	9201      	str	r2, [sp, #4]
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2200      	movs	r2, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 f835 	bl	8008bc0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b56:	e0e3      	b.n	8007d20 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	2b03      	cmp	r3, #3
 8007b5c:	f040 80e0 	bne.w	8007d20 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	220d      	movs	r2, #13
 8007b64:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	705a      	strb	r2, [r3, #1]
      break;
 8007b6c:	e0d8      	b.n	8007d20 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b6e:	2109      	movs	r1, #9
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f9a1 	bl	8007eb8 <USBH_Get_CfgDesc>
 8007b76:	4603      	mov	r3, r0
 8007b78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b7a:	7bbb      	ldrb	r3, [r7, #14]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d103      	bne.n	8007b88 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2204      	movs	r2, #4
 8007b84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b86:	e0cd      	b.n	8007d24 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	f040 80ca 	bne.w	8007d24 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b96:	3301      	adds	r3, #1
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ba6:	2b03      	cmp	r3, #3
 8007ba8:	d903      	bls.n	8007bb2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	220d      	movs	r2, #13
 8007bae:	701a      	strb	r2, [r3, #0]
      break;
 8007bb0:	e0b8      	b.n	8007d24 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	795b      	ldrb	r3, [r3, #5]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 f851 	bl	8008c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	4619      	mov	r1, r3
 8007bc4:	6878      	ldr	r0, [r7, #4]
 8007bc6:	f001 f84b 	bl	8008c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	701a      	strb	r2, [r3, #0]
      break;
 8007bd6:	e0a5      	b.n	8007d24 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007bde:	4619      	mov	r1, r3
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f000 f969 	bl	8007eb8 <USBH_Get_CfgDesc>
 8007be6:	4603      	mov	r3, r0
 8007be8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bea:	7bbb      	ldrb	r3, [r7, #14]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d103      	bne.n	8007bf8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2205      	movs	r2, #5
 8007bf4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007bf6:	e097      	b.n	8007d28 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf8:	7bbb      	ldrb	r3, [r7, #14]
 8007bfa:	2b03      	cmp	r3, #3
 8007bfc:	f040 8094 	bne.w	8007d28 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c06:	3301      	adds	r3, #1
 8007c08:	b2da      	uxtb	r2, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c16:	2b03      	cmp	r3, #3
 8007c18:	d903      	bls.n	8007c22 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	220d      	movs	r2, #13
 8007c1e:	701a      	strb	r2, [r3, #0]
      break;
 8007c20:	e082      	b.n	8007d28 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	795b      	ldrb	r3, [r3, #5]
 8007c26:	4619      	mov	r1, r3
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f819 	bl	8008c60 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	791b      	ldrb	r3, [r3, #4]
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f001 f813 	bl	8008c60 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	701a      	strb	r2, [r3, #0]
      break;
 8007c46:	e06f      	b.n	8007d28 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d019      	beq.n	8007c86 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c5e:	23ff      	movs	r3, #255	@ 0xff
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f953 	bl	8007f0c <USBH_Get_StringDesc>
 8007c66:	4603      	mov	r3, r0
 8007c68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c6a:	7bbb      	ldrb	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d103      	bne.n	8007c78 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2206      	movs	r2, #6
 8007c74:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007c76:	e059      	b.n	8007d2c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c78:	7bbb      	ldrb	r3, [r7, #14]
 8007c7a:	2b03      	cmp	r3, #3
 8007c7c:	d156      	bne.n	8007d2c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2206      	movs	r2, #6
 8007c82:	705a      	strb	r2, [r3, #1]
      break;
 8007c84:	e052      	b.n	8007d2c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2206      	movs	r2, #6
 8007c8a:	705a      	strb	r2, [r3, #1]
      break;
 8007c8c:	e04e      	b.n	8007d2c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d019      	beq.n	8007ccc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007ca4:	23ff      	movs	r3, #255	@ 0xff
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f930 	bl	8007f0c <USBH_Get_StringDesc>
 8007cac:	4603      	mov	r3, r0
 8007cae:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d103      	bne.n	8007cbe <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2207      	movs	r2, #7
 8007cba:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007cbc:	e038      	b.n	8007d30 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cbe:	7bbb      	ldrb	r3, [r7, #14]
 8007cc0:	2b03      	cmp	r3, #3
 8007cc2:	d135      	bne.n	8007d30 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2207      	movs	r2, #7
 8007cc8:	705a      	strb	r2, [r3, #1]
      break;
 8007cca:	e031      	b.n	8007d30 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2207      	movs	r2, #7
 8007cd0:	705a      	strb	r2, [r3, #1]
      break;
 8007cd2:	e02d      	b.n	8007d30 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d017      	beq.n	8007d0e <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cea:	23ff      	movs	r3, #255	@ 0xff
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 f90d 	bl	8007f0c <USBH_Get_StringDesc>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cf6:	7bbb      	ldrb	r3, [r7, #14]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d102      	bne.n	8007d02 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d00:	e018      	b.n	8007d34 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b03      	cmp	r3, #3
 8007d06:	d115      	bne.n	8007d34 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
      break;
 8007d0c:	e012      	b.n	8007d34 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007d0e:	2300      	movs	r3, #0
 8007d10:	73fb      	strb	r3, [r7, #15]
      break;
 8007d12:	e00f      	b.n	8007d34 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007d14:	bf00      	nop
 8007d16:	e00e      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d18:	bf00      	nop
 8007d1a:	e00c      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d1c:	bf00      	nop
 8007d1e:	e00a      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d20:	bf00      	nop
 8007d22:	e008      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d24:	bf00      	nop
 8007d26:	e006      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e004      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <USBH_HandleEnum+0x3b6>
      break;
 8007d34:	bf00      	nop
  }
  return Status;
 8007d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d38:	4618      	mov	r0, r3
 8007d3a:	3710      	adds	r7, #16
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d40:	b480      	push	{r7}
 8007d42:	b083      	sub	sp, #12
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
 8007d48:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007d52:	bf00      	nop
 8007d54:	370c      	adds	r7, #12
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007d6c:	1c5a      	adds	r2, r3, #1
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f000 f804 	bl	8007d82 <USBH_HandleSof>
}
 8007d7a:	bf00      	nop
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b082      	sub	sp, #8
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b0b      	cmp	r3, #11
 8007d92:	d10a      	bne.n	8007daa <USBH_HandleSof+0x28>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d005      	beq.n	8007daa <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	4798      	blx	r3
  }
}
 8007daa:	bf00      	nop
 8007dac:	3708      	adds	r7, #8
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007dc2:	bf00      	nop
}
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b083      	sub	sp, #12
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007dde:	bf00      	nop
}
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr

08007dea <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dea:	b480      	push	{r7}
 8007dec:	b083      	sub	sp, #12
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e0a:	2300      	movs	r3, #0
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2200      	movs	r2, #0
 8007e34:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f001 f8be 	bl	8008fba <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	791b      	ldrb	r3, [r3, #4]
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f000 ff0b 	bl	8008c60 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	795b      	ldrb	r3, [r3, #5]
 8007e4e:	4619      	mov	r1, r3
 8007e50:	6878      	ldr	r0, [r7, #4]
 8007e52:	f000 ff05 	bl	8008c60 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3708      	adds	r7, #8
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b086      	sub	sp, #24
 8007e64:	af02      	add	r7, sp, #8
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	460b      	mov	r3, r1
 8007e6a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007e6c:	887b      	ldrh	r3, [r7, #2]
 8007e6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e72:	d901      	bls.n	8007e78 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007e74:	2303      	movs	r3, #3
 8007e76:	e01b      	b.n	8007eb0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007e7e:	887b      	ldrh	r3, [r7, #2]
 8007e80:	9300      	str	r3, [sp, #0]
 8007e82:	4613      	mov	r3, r2
 8007e84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e88:	2100      	movs	r1, #0
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f872 	bl	8007f74 <USBH_GetDescriptor>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d109      	bne.n	8007eae <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ea0:	887a      	ldrh	r2, [r7, #2]
 8007ea2:	4619      	mov	r1, r3
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f929 	bl	80080fc <USBH_ParseDevDesc>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b086      	sub	sp, #24
 8007ebc:	af02      	add	r7, sp, #8
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	331c      	adds	r3, #28
 8007ec8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007eca:	887b      	ldrh	r3, [r7, #2]
 8007ecc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ed0:	d901      	bls.n	8007ed6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	e016      	b.n	8007f04 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ed6:	887b      	ldrh	r3, [r7, #2]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f846 	bl	8007f74 <USBH_GetDescriptor>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007eec:	7bfb      	ldrb	r3, [r7, #15]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007ef2:	887b      	ldrh	r3, [r7, #2]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	68b9      	ldr	r1, [r7, #8]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 f9af 	bl	800825c <USBH_ParseCfgDesc>
 8007efe:	4603      	mov	r3, r0
 8007f00:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	72fb      	strb	r3, [r7, #11]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007f20:	893b      	ldrh	r3, [r7, #8]
 8007f22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f26:	d802      	bhi.n	8007f2e <USBH_Get_StringDesc+0x22>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d101      	bne.n	8007f32 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f2e:	2303      	movs	r3, #3
 8007f30:	e01c      	b.n	8007f6c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007f32:	7afb      	ldrb	r3, [r7, #11]
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007f3a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f42:	893b      	ldrh	r3, [r7, #8]
 8007f44:	9300      	str	r3, [sp, #0]
 8007f46:	460b      	mov	r3, r1
 8007f48:	2100      	movs	r1, #0
 8007f4a:	68f8      	ldr	r0, [r7, #12]
 8007f4c:	f000 f812 	bl	8007f74 <USBH_GetDescriptor>
 8007f50:	4603      	mov	r3, r0
 8007f52:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f60:	893a      	ldrh	r2, [r7, #8]
 8007f62:	6879      	ldr	r1, [r7, #4]
 8007f64:	4618      	mov	r0, r3
 8007f66:	f000 fb8d 	bl	8008684 <USBH_ParseStringDesc>
  }

  return status;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3718      	adds	r7, #24
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	607b      	str	r3, [r7, #4]
 8007f7e:	460b      	mov	r3, r1
 8007f80:	72fb      	strb	r3, [r7, #11]
 8007f82:	4613      	mov	r3, r2
 8007f84:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	789b      	ldrb	r3, [r3, #2]
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d11c      	bne.n	8007fc8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2206      	movs	r2, #6
 8007f9e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	893a      	ldrh	r2, [r7, #8]
 8007fa4:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007fa6:	893b      	ldrh	r3, [r7, #8]
 8007fa8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007fac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007fb0:	d104      	bne.n	8007fbc <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f240 4209 	movw	r2, #1033	@ 0x409
 8007fb8:	829a      	strh	r2, [r3, #20]
 8007fba:	e002      	b.n	8007fc2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	8b3a      	ldrh	r2, [r7, #24]
 8007fc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fc8:	8b3b      	ldrh	r3, [r7, #24]
 8007fca:	461a      	mov	r2, r3
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	68f8      	ldr	r0, [r7, #12]
 8007fd0:	f000 fba5 	bl	800871e <USBH_CtlReq>
 8007fd4:	4603      	mov	r3, r0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3710      	adds	r7, #16
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}

08007fde <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
 8007fe6:	460b      	mov	r3, r1
 8007fe8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	789b      	ldrb	r3, [r3, #2]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d10f      	bne.n	8008012 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2205      	movs	r2, #5
 8007ffc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007ffe:	78fb      	ldrb	r3, [r7, #3]
 8008000:	b29a      	uxth	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2200      	movs	r2, #0
 8008010:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008012:	2200      	movs	r2, #0
 8008014:	2100      	movs	r1, #0
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 fb81 	bl	800871e <USBH_CtlReq>
 800801c:	4603      	mov	r3, r0
}
 800801e:	4618      	mov	r0, r3
 8008020:	3708      	adds	r7, #8
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}

08008026 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008026:	b580      	push	{r7, lr}
 8008028:	b082      	sub	sp, #8
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	460b      	mov	r3, r1
 8008030:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	789b      	ldrb	r3, [r3, #2]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d10e      	bne.n	8008058 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2209      	movs	r2, #9
 8008044:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	887a      	ldrh	r2, [r7, #2]
 800804a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008058:	2200      	movs	r2, #0
 800805a:	2100      	movs	r1, #0
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fb5e 	bl	800871e <USBH_CtlReq>
 8008062:	4603      	mov	r3, r0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3708      	adds	r7, #8
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d10f      	bne.n	80080a0 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2203      	movs	r2, #3
 800808a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	b29a      	uxth	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2200      	movs	r2, #0
 800809e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2100      	movs	r1, #0
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 fb3a 	bl	800871e <USBH_CtlReq>
 80080aa:	4603      	mov	r3, r0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	789b      	ldrb	r3, [r3, #2]
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d10f      	bne.n	80080e8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2202      	movs	r2, #2
 80080cc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080da:	78fb      	ldrb	r3, [r7, #3]
 80080dc:	b29a      	uxth	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080e8:	2200      	movs	r2, #0
 80080ea:	2100      	movs	r1, #0
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f000 fb16 	bl	800871e <USBH_CtlReq>
 80080f2:	4603      	mov	r3, r0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3708      	adds	r7, #8
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	4613      	mov	r3, r2
 8008108:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008110:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008112:	2300      	movs	r3, #0
 8008114:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d101      	bne.n	8008120 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800811c:	2302      	movs	r3, #2
 800811e:	e094      	b.n	800824a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	781a      	ldrb	r2, [r3, #0]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	785a      	ldrb	r2, [r3, #1]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	3302      	adds	r3, #2
 8008134:	781b      	ldrb	r3, [r3, #0]
 8008136:	461a      	mov	r2, r3
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	3303      	adds	r3, #3
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	021b      	lsls	r3, r3, #8
 8008140:	b29b      	uxth	r3, r3
 8008142:	4313      	orrs	r3, r2
 8008144:	b29a      	uxth	r2, r3
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	791a      	ldrb	r2, [r3, #4]
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	795a      	ldrb	r2, [r3, #5]
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	799a      	ldrb	r2, [r3, #6]
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008162:	68bb      	ldr	r3, [r7, #8]
 8008164:	79da      	ldrb	r2, [r3, #7]
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008170:	2b00      	cmp	r3, #0
 8008172:	d004      	beq.n	800817e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800817a:	2b01      	cmp	r3, #1
 800817c:	d11b      	bne.n	80081b6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800817e:	693b      	ldr	r3, [r7, #16]
 8008180:	79db      	ldrb	r3, [r3, #7]
 8008182:	2b20      	cmp	r3, #32
 8008184:	dc0f      	bgt.n	80081a6 <USBH_ParseDevDesc+0xaa>
 8008186:	2b08      	cmp	r3, #8
 8008188:	db0f      	blt.n	80081aa <USBH_ParseDevDesc+0xae>
 800818a:	3b08      	subs	r3, #8
 800818c:	4a32      	ldr	r2, [pc, #200]	@ (8008258 <USBH_ParseDevDesc+0x15c>)
 800818e:	fa22 f303 	lsr.w	r3, r2, r3
 8008192:	f003 0301 	and.w	r3, r3, #1
 8008196:	2b00      	cmp	r3, #0
 8008198:	bf14      	ite	ne
 800819a:	2301      	movne	r3, #1
 800819c:	2300      	moveq	r3, #0
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d106      	bne.n	80081b2 <USBH_ParseDevDesc+0xb6>
 80081a4:	e001      	b.n	80081aa <USBH_ParseDevDesc+0xae>
 80081a6:	2b40      	cmp	r3, #64	@ 0x40
 80081a8:	d003      	beq.n	80081b2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	2208      	movs	r2, #8
 80081ae:	71da      	strb	r2, [r3, #7]
        break;
 80081b0:	e000      	b.n	80081b4 <USBH_ParseDevDesc+0xb8>
        break;
 80081b2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80081b4:	e00e      	b.n	80081d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d107      	bne.n	80081d0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	79db      	ldrb	r3, [r3, #7]
 80081c4:	2b08      	cmp	r3, #8
 80081c6:	d005      	beq.n	80081d4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	2208      	movs	r2, #8
 80081cc:	71da      	strb	r2, [r3, #7]
 80081ce:	e001      	b.n	80081d4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80081d0:	2303      	movs	r3, #3
 80081d2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80081d4:	88fb      	ldrh	r3, [r7, #6]
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	d936      	bls.n	8008248 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3308      	adds	r3, #8
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	3309      	adds	r3, #9
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	021b      	lsls	r3, r3, #8
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	4313      	orrs	r3, r2
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	330a      	adds	r3, #10
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	330b      	adds	r3, #11
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	021b      	lsls	r3, r3, #8
 8008204:	b29b      	uxth	r3, r3
 8008206:	4313      	orrs	r3, r2
 8008208:	b29a      	uxth	r2, r3
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	330c      	adds	r3, #12
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	461a      	mov	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	330d      	adds	r3, #13
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	b29b      	uxth	r3, r3
 8008220:	4313      	orrs	r3, r2
 8008222:	b29a      	uxth	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	7b9a      	ldrb	r2, [r3, #14]
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	7bda      	ldrb	r2, [r3, #15]
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7c1a      	ldrb	r2, [r3, #16]
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	7c5a      	ldrb	r2, [r3, #17]
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008248:	7dfb      	ldrb	r3, [r7, #23]
}
 800824a:	4618      	mov	r0, r3
 800824c:	371c      	adds	r7, #28
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	01000101 	.word	0x01000101

0800825c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08c      	sub	sp, #48	@ 0x30
 8008260:	af00      	add	r7, sp, #0
 8008262:	60f8      	str	r0, [r7, #12]
 8008264:	60b9      	str	r1, [r7, #8]
 8008266:	4613      	mov	r3, r2
 8008268:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008270:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008278:	2300      	movs	r3, #0
 800827a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800828a:	2302      	movs	r3, #2
 800828c:	e0da      	b.n	8008444 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008294:	781b      	ldrb	r3, [r3, #0]
 8008296:	2b09      	cmp	r3, #9
 8008298:	d002      	beq.n	80082a0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800829a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829c:	2209      	movs	r2, #9
 800829e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	781a      	ldrb	r2, [r3, #0]
 80082a4:	6a3b      	ldr	r3, [r7, #32]
 80082a6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	785a      	ldrb	r2, [r3, #1]
 80082ac:	6a3b      	ldr	r3, [r7, #32]
 80082ae:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	3302      	adds	r3, #2
 80082b4:	781b      	ldrb	r3, [r3, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	3303      	adds	r3, #3
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	021b      	lsls	r3, r3, #8
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	4313      	orrs	r3, r2
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082ca:	bf28      	it	cs
 80082cc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80082d0:	b29a      	uxth	r2, r3
 80082d2:	6a3b      	ldr	r3, [r7, #32]
 80082d4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	791a      	ldrb	r2, [r3, #4]
 80082da:	6a3b      	ldr	r3, [r7, #32]
 80082dc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	795a      	ldrb	r2, [r3, #5]
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	799a      	ldrb	r2, [r3, #6]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	79da      	ldrb	r2, [r3, #7]
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	7a1a      	ldrb	r2, [r3, #8]
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80082fe:	88fb      	ldrh	r3, [r7, #6]
 8008300:	2b09      	cmp	r3, #9
 8008302:	f240 809d 	bls.w	8008440 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008306:	2309      	movs	r3, #9
 8008308:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800830a:	2300      	movs	r3, #0
 800830c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800830e:	e081      	b.n	8008414 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008310:	f107 0316 	add.w	r3, r7, #22
 8008314:	4619      	mov	r1, r3
 8008316:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008318:	f000 f9e7 	bl	80086ea <USBH_GetNextDesc>
 800831c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800831e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008320:	785b      	ldrb	r3, [r3, #1]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d176      	bne.n	8008414 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	2b09      	cmp	r3, #9
 800832c:	d002      	beq.n	8008334 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800832e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008330:	2209      	movs	r2, #9
 8008332:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008334:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008338:	221a      	movs	r2, #26
 800833a:	fb02 f303 	mul.w	r3, r2, r3
 800833e:	3308      	adds	r3, #8
 8008340:	6a3a      	ldr	r2, [r7, #32]
 8008342:	4413      	add	r3, r2
 8008344:	3302      	adds	r3, #2
 8008346:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008348:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800834a:	69f8      	ldr	r0, [r7, #28]
 800834c:	f000 f87e 	bl	800844c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008350:	2300      	movs	r3, #0
 8008352:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800835a:	e043      	b.n	80083e4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800835c:	f107 0316 	add.w	r3, r7, #22
 8008360:	4619      	mov	r1, r3
 8008362:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008364:	f000 f9c1 	bl	80086ea <USBH_GetNextDesc>
 8008368:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800836a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836c:	785b      	ldrb	r3, [r3, #1]
 800836e:	2b05      	cmp	r3, #5
 8008370:	d138      	bne.n	80083e4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008372:	69fb      	ldr	r3, [r7, #28]
 8008374:	795b      	ldrb	r3, [r3, #5]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d113      	bne.n	80083a2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800837a:	69fb      	ldr	r3, [r7, #28]
 800837c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800837e:	2b02      	cmp	r3, #2
 8008380:	d003      	beq.n	800838a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	799b      	ldrb	r3, [r3, #6]
 8008386:	2b03      	cmp	r3, #3
 8008388:	d10b      	bne.n	80083a2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800838a:	69fb      	ldr	r3, [r7, #28]
 800838c:	79db      	ldrb	r3, [r3, #7]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d10b      	bne.n	80083aa <USBH_ParseCfgDesc+0x14e>
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b09      	cmp	r3, #9
 8008398:	d007      	beq.n	80083aa <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800839a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800839c:	2209      	movs	r2, #9
 800839e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083a0:	e003      	b.n	80083aa <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80083a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083a4:	2207      	movs	r2, #7
 80083a6:	701a      	strb	r2, [r3, #0]
 80083a8:	e000      	b.n	80083ac <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80083aa:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80083ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083b4:	3201      	adds	r2, #1
 80083b6:	00d2      	lsls	r2, r2, #3
 80083b8:	211a      	movs	r1, #26
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	4413      	add	r3, r2
 80083c0:	3308      	adds	r3, #8
 80083c2:	6a3a      	ldr	r2, [r7, #32]
 80083c4:	4413      	add	r3, r2
 80083c6:	3304      	adds	r3, #4
 80083c8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80083ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80083cc:	69b9      	ldr	r1, [r7, #24]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f870 	bl	80084b4 <USBH_ParseEPDesc>
 80083d4:	4603      	mov	r3, r0
 80083d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80083da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80083de:	3301      	adds	r3, #1
 80083e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083e4:	69fb      	ldr	r3, [r7, #28]
 80083e6:	791b      	ldrb	r3, [r3, #4]
 80083e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d204      	bcs.n	80083fa <USBH_ParseCfgDesc+0x19e>
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	885a      	ldrh	r2, [r3, #2]
 80083f4:	8afb      	ldrh	r3, [r7, #22]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d8b0      	bhi.n	800835c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80083fa:	69fb      	ldr	r3, [r7, #28]
 80083fc:	791b      	ldrb	r3, [r3, #4]
 80083fe:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008402:	429a      	cmp	r2, r3
 8008404:	d201      	bcs.n	800840a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008406:	2303      	movs	r3, #3
 8008408:	e01c      	b.n	8008444 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800840a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800840e:	3301      	adds	r3, #1
 8008410:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008418:	2b01      	cmp	r3, #1
 800841a:	d805      	bhi.n	8008428 <USBH_ParseCfgDesc+0x1cc>
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	885a      	ldrh	r2, [r3, #2]
 8008420:	8afb      	ldrh	r3, [r7, #22]
 8008422:	429a      	cmp	r2, r3
 8008424:	f63f af74 	bhi.w	8008310 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	791b      	ldrb	r3, [r3, #4]
 800842c:	2b02      	cmp	r3, #2
 800842e:	bf28      	it	cs
 8008430:	2302      	movcs	r3, #2
 8008432:	b2db      	uxtb	r3, r3
 8008434:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008438:	429a      	cmp	r2, r3
 800843a:	d201      	bcs.n	8008440 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800843c:	2303      	movs	r3, #3
 800843e:	e001      	b.n	8008444 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008440:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008444:	4618      	mov	r0, r3
 8008446:	3730      	adds	r7, #48	@ 0x30
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800844c:	b480      	push	{r7}
 800844e:	b083      	sub	sp, #12
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	781a      	ldrb	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	785a      	ldrb	r2, [r3, #1]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	789a      	ldrb	r2, [r3, #2]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	78da      	ldrb	r2, [r3, #3]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	3304      	adds	r3, #4
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b02      	cmp	r3, #2
 800847e:	bf28      	it	cs
 8008480:	2302      	movcs	r3, #2
 8008482:	b2da      	uxtb	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	795a      	ldrb	r2, [r3, #5]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	799a      	ldrb	r2, [r3, #6]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	79da      	ldrb	r2, [r3, #7]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	7a1a      	ldrb	r2, [r3, #8]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	721a      	strb	r2, [r3, #8]
}
 80084a8:	bf00      	nop
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr

080084b4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b087      	sub	sp, #28
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	60f8      	str	r0, [r7, #12]
 80084bc:	60b9      	str	r1, [r7, #8]
 80084be:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80084c0:	2300      	movs	r3, #0
 80084c2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	785a      	ldrb	r2, [r3, #1]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	789a      	ldrb	r2, [r3, #2]
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	78da      	ldrb	r2, [r3, #3]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	3304      	adds	r3, #4
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	461a      	mov	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3305      	adds	r3, #5
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	021b      	lsls	r3, r3, #8
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	4313      	orrs	r3, r2
 80084f8:	b29a      	uxth	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	799a      	ldrb	r2, [r3, #6]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	889b      	ldrh	r3, [r3, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d009      	beq.n	8008522 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008516:	d804      	bhi.n	8008522 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800851c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008520:	d901      	bls.n	8008526 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008522:	2303      	movs	r3, #3
 8008524:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800852c:	2b00      	cmp	r3, #0
 800852e:	d136      	bne.n	800859e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	78db      	ldrb	r3, [r3, #3]
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	2b02      	cmp	r3, #2
 800853a:	d108      	bne.n	800854e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	889b      	ldrh	r3, [r3, #4]
 8008540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008544:	f240 8097 	bls.w	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008548:	2303      	movs	r3, #3
 800854a:	75fb      	strb	r3, [r7, #23]
 800854c:	e093      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	78db      	ldrb	r3, [r3, #3]
 8008552:	f003 0303 	and.w	r3, r3, #3
 8008556:	2b00      	cmp	r3, #0
 8008558:	d107      	bne.n	800856a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	889b      	ldrh	r3, [r3, #4]
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	f240 8089 	bls.w	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008564:	2303      	movs	r3, #3
 8008566:	75fb      	strb	r3, [r7, #23]
 8008568:	e085      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	78db      	ldrb	r3, [r3, #3]
 800856e:	f003 0303 	and.w	r3, r3, #3
 8008572:	2b01      	cmp	r3, #1
 8008574:	d005      	beq.n	8008582 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	78db      	ldrb	r3, [r3, #3]
 800857a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800857e:	2b03      	cmp	r3, #3
 8008580:	d10a      	bne.n	8008598 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	799b      	ldrb	r3, [r3, #6]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d003      	beq.n	8008592 <USBH_ParseEPDesc+0xde>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	799b      	ldrb	r3, [r3, #6]
 800858e:	2b10      	cmp	r3, #16
 8008590:	d970      	bls.n	8008674 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008592:	2303      	movs	r3, #3
 8008594:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008596:	e06d      	b.n	8008674 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008598:	2303      	movs	r3, #3
 800859a:	75fb      	strb	r3, [r7, #23]
 800859c:	e06b      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d13c      	bne.n	8008622 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	78db      	ldrb	r3, [r3, #3]
 80085ac:	f003 0303 	and.w	r3, r3, #3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d005      	beq.n	80085c0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	78db      	ldrb	r3, [r3, #3]
 80085b8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d106      	bne.n	80085ce <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	889b      	ldrh	r3, [r3, #4]
 80085c4:	2b40      	cmp	r3, #64	@ 0x40
 80085c6:	d956      	bls.n	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085c8:	2303      	movs	r3, #3
 80085ca:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085cc:	e053      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	78db      	ldrb	r3, [r3, #3]
 80085d2:	f003 0303 	and.w	r3, r3, #3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d10e      	bne.n	80085f8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	799b      	ldrb	r3, [r3, #6]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 80085e6:	2b10      	cmp	r3, #16
 80085e8:	d803      	bhi.n	80085f2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 80085ee:	2b40      	cmp	r3, #64	@ 0x40
 80085f0:	d941      	bls.n	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085f2:	2303      	movs	r3, #3
 80085f4:	75fb      	strb	r3, [r7, #23]
 80085f6:	e03e      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	78db      	ldrb	r3, [r3, #3]
 80085fc:	f003 0303 	and.w	r3, r3, #3
 8008600:	2b03      	cmp	r3, #3
 8008602:	d10b      	bne.n	800861c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	799b      	ldrb	r3, [r3, #6]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d004      	beq.n	8008616 <USBH_ParseEPDesc+0x162>
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	889b      	ldrh	r3, [r3, #4]
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008614:	d32f      	bcc.n	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008616:	2303      	movs	r3, #3
 8008618:	75fb      	strb	r3, [r7, #23]
 800861a:	e02c      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800861c:	2303      	movs	r3, #3
 800861e:	75fb      	strb	r3, [r7, #23]
 8008620:	e029      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008628:	2b02      	cmp	r3, #2
 800862a:	d120      	bne.n	800866e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	78db      	ldrb	r3, [r3, #3]
 8008630:	f003 0303 	and.w	r3, r3, #3
 8008634:	2b00      	cmp	r3, #0
 8008636:	d106      	bne.n	8008646 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	889b      	ldrh	r3, [r3, #4]
 800863c:	2b08      	cmp	r3, #8
 800863e:	d01a      	beq.n	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008640:	2303      	movs	r3, #3
 8008642:	75fb      	strb	r3, [r7, #23]
 8008644:	e017      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	78db      	ldrb	r3, [r3, #3]
 800864a:	f003 0303 	and.w	r3, r3, #3
 800864e:	2b03      	cmp	r3, #3
 8008650:	d10a      	bne.n	8008668 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	799b      	ldrb	r3, [r3, #6]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <USBH_ParseEPDesc+0x1ae>
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	889b      	ldrh	r3, [r3, #4]
 800865e:	2b08      	cmp	r3, #8
 8008660:	d909      	bls.n	8008676 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008662:	2303      	movs	r3, #3
 8008664:	75fb      	strb	r3, [r7, #23]
 8008666:	e006      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008668:	2303      	movs	r3, #3
 800866a:	75fb      	strb	r3, [r7, #23]
 800866c:	e003      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800866e:	2303      	movs	r3, #3
 8008670:	75fb      	strb	r3, [r7, #23]
 8008672:	e000      	b.n	8008676 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008674:	bf00      	nop
  }

  return status;
 8008676:	7dfb      	ldrb	r3, [r7, #23]
}
 8008678:	4618      	mov	r0, r3
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	4613      	mov	r3, r2
 8008690:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	2b03      	cmp	r3, #3
 800869a:	d120      	bne.n	80086de <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	1e9a      	subs	r2, r3, #2
 80086a2:	88fb      	ldrh	r3, [r7, #6]
 80086a4:	4293      	cmp	r3, r2
 80086a6:	bf28      	it	cs
 80086a8:	4613      	movcs	r3, r2
 80086aa:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	3302      	adds	r3, #2
 80086b0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80086b2:	2300      	movs	r3, #0
 80086b4:	82fb      	strh	r3, [r7, #22]
 80086b6:	e00b      	b.n	80086d0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80086b8:	8afb      	ldrh	r3, [r7, #22]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	4413      	add	r3, r2
 80086be:	781a      	ldrb	r2, [r3, #0]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	3301      	adds	r3, #1
 80086c8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80086ca:	8afb      	ldrh	r3, [r7, #22]
 80086cc:	3302      	adds	r3, #2
 80086ce:	82fb      	strh	r3, [r7, #22]
 80086d0:	8afa      	ldrh	r2, [r7, #22]
 80086d2:	8abb      	ldrh	r3, [r7, #20]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d3ef      	bcc.n	80086b8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	701a      	strb	r2, [r3, #0]
  }
}
 80086de:	bf00      	nop
 80086e0:	371c      	adds	r7, #28
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr

080086ea <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b085      	sub	sp, #20
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	881b      	ldrh	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7812      	ldrb	r2, [r2, #0]
 80086fc:	4413      	add	r3, r2
 80086fe:	b29a      	uxth	r2, r3
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	781b      	ldrb	r3, [r3, #0]
 8008708:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4413      	add	r3, r2
 800870e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008710:	68fb      	ldr	r3, [r7, #12]
}
 8008712:	4618      	mov	r0, r3
 8008714:	3714      	adds	r7, #20
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800871e:	b580      	push	{r7, lr}
 8008720:	b086      	sub	sp, #24
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	4613      	mov	r3, r2
 800872a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800872c:	2301      	movs	r3, #1
 800872e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	789b      	ldrb	r3, [r3, #2]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d002      	beq.n	800873e <USBH_CtlReq+0x20>
 8008738:	2b02      	cmp	r3, #2
 800873a:	d00f      	beq.n	800875c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800873c:	e027      	b.n	800878e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	68ba      	ldr	r2, [r7, #8]
 8008742:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	88fa      	ldrh	r2, [r7, #6]
 8008748:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2202      	movs	r2, #2
 8008754:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008756:	2301      	movs	r3, #1
 8008758:	75fb      	strb	r3, [r7, #23]
      break;
 800875a:	e018      	b.n	800878e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800875c:	68f8      	ldr	r0, [r7, #12]
 800875e:	f000 f81b 	bl	8008798 <USBH_HandleControl>
 8008762:	4603      	mov	r3, r0
 8008764:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008766:	7dfb      	ldrb	r3, [r7, #23]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d002      	beq.n	8008772 <USBH_CtlReq+0x54>
 800876c:	7dfb      	ldrb	r3, [r7, #23]
 800876e:	2b03      	cmp	r3, #3
 8008770:	d106      	bne.n	8008780 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	2200      	movs	r2, #0
 800877c:	761a      	strb	r2, [r3, #24]
      break;
 800877e:	e005      	b.n	800878c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b02      	cmp	r3, #2
 8008784:	d102      	bne.n	800878c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2201      	movs	r2, #1
 800878a:	709a      	strb	r2, [r3, #2]
      break;
 800878c:	bf00      	nop
  }
  return status;
 800878e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3718      	adds	r7, #24
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b086      	sub	sp, #24
 800879c:	af02      	add	r7, sp, #8
 800879e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80087a0:	2301      	movs	r3, #1
 80087a2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80087a4:	2300      	movs	r3, #0
 80087a6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	7e1b      	ldrb	r3, [r3, #24]
 80087ac:	3b01      	subs	r3, #1
 80087ae:	2b0a      	cmp	r3, #10
 80087b0:	f200 8156 	bhi.w	8008a60 <USBH_HandleControl+0x2c8>
 80087b4:	a201      	add	r2, pc, #4	@ (adr r2, 80087bc <USBH_HandleControl+0x24>)
 80087b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ba:	bf00      	nop
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	08008803 	.word	0x08008803
 80087c4:	0800886d 	.word	0x0800886d
 80087c8:	08008893 	.word	0x08008893
 80087cc:	080088cb 	.word	0x080088cb
 80087d0:	080088f5 	.word	0x080088f5
 80087d4:	08008947 	.word	0x08008947
 80087d8:	08008969 	.word	0x08008969
 80087dc:	080089a5 	.word	0x080089a5
 80087e0:	080089cb 	.word	0x080089cb
 80087e4:	08008a09 	.word	0x08008a09
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f103 0110 	add.w	r1, r3, #16
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	795b      	ldrb	r3, [r3, #5]
 80087f2:	461a      	mov	r2, r3
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f943 	bl	8008a80 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2202      	movs	r2, #2
 80087fe:	761a      	strb	r2, [r3, #24]
      break;
 8008800:	e139      	b.n	8008a76 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	795b      	ldrb	r3, [r3, #5]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fcc5 	bl	8009198 <USBH_LL_GetURBState>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d11e      	bne.n	8008856 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	7c1b      	ldrb	r3, [r3, #16]
 800881c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008820:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	8adb      	ldrh	r3, [r3, #22]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d00a      	beq.n	8008840 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800882a:	7b7b      	ldrb	r3, [r7, #13]
 800882c:	2b80      	cmp	r3, #128	@ 0x80
 800882e:	d103      	bne.n	8008838 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2203      	movs	r2, #3
 8008834:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008836:	e115      	b.n	8008a64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2205      	movs	r2, #5
 800883c:	761a      	strb	r2, [r3, #24]
      break;
 800883e:	e111      	b.n	8008a64 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008840:	7b7b      	ldrb	r3, [r7, #13]
 8008842:	2b80      	cmp	r3, #128	@ 0x80
 8008844:	d103      	bne.n	800884e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	2209      	movs	r2, #9
 800884a:	761a      	strb	r2, [r3, #24]
      break;
 800884c:	e10a      	b.n	8008a64 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2207      	movs	r2, #7
 8008852:	761a      	strb	r2, [r3, #24]
      break;
 8008854:	e106      	b.n	8008a64 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008856:	7bbb      	ldrb	r3, [r7, #14]
 8008858:	2b04      	cmp	r3, #4
 800885a:	d003      	beq.n	8008864 <USBH_HandleControl+0xcc>
 800885c:	7bbb      	ldrb	r3, [r7, #14]
 800885e:	2b02      	cmp	r3, #2
 8008860:	f040 8100 	bne.w	8008a64 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	220b      	movs	r2, #11
 8008868:	761a      	strb	r2, [r3, #24]
      break;
 800886a:	e0fb      	b.n	8008a64 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008872:	b29a      	uxth	r2, r3
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6899      	ldr	r1, [r3, #8]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	899a      	ldrh	r2, [r3, #12]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	791b      	ldrb	r3, [r3, #4]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f93a 	bl	8008afe <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2204      	movs	r2, #4
 800888e:	761a      	strb	r2, [r3, #24]
      break;
 8008890:	e0f1      	b.n	8008a76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	791b      	ldrb	r3, [r3, #4]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc7d 	bl	8009198 <USBH_LL_GetURBState>
 800889e:	4603      	mov	r3, r0
 80088a0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d102      	bne.n	80088ae <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2209      	movs	r2, #9
 80088ac:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80088ae:	7bbb      	ldrb	r3, [r7, #14]
 80088b0:	2b05      	cmp	r3, #5
 80088b2:	d102      	bne.n	80088ba <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80088b4:	2303      	movs	r3, #3
 80088b6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088b8:	e0d6      	b.n	8008a68 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80088ba:	7bbb      	ldrb	r3, [r7, #14]
 80088bc:	2b04      	cmp	r3, #4
 80088be:	f040 80d3 	bne.w	8008a68 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220b      	movs	r2, #11
 80088c6:	761a      	strb	r2, [r3, #24]
      break;
 80088c8:	e0ce      	b.n	8008a68 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6899      	ldr	r1, [r3, #8]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	899a      	ldrh	r2, [r3, #12]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	795b      	ldrb	r3, [r3, #5]
 80088d6:	2001      	movs	r0, #1
 80088d8:	9000      	str	r0, [sp, #0]
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f8ea 	bl	8008ab4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80088e6:	b29a      	uxth	r2, r3
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2206      	movs	r2, #6
 80088f0:	761a      	strb	r2, [r3, #24]
      break;
 80088f2:	e0c0      	b.n	8008a76 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	795b      	ldrb	r3, [r3, #5]
 80088f8:	4619      	mov	r1, r3
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 fc4c 	bl	8009198 <USBH_LL_GetURBState>
 8008900:	4603      	mov	r3, r0
 8008902:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008904:	7bbb      	ldrb	r3, [r7, #14]
 8008906:	2b01      	cmp	r3, #1
 8008908:	d103      	bne.n	8008912 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2207      	movs	r2, #7
 800890e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008910:	e0ac      	b.n	8008a6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008912:	7bbb      	ldrb	r3, [r7, #14]
 8008914:	2b05      	cmp	r3, #5
 8008916:	d105      	bne.n	8008924 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	220c      	movs	r2, #12
 800891c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800891e:	2303      	movs	r3, #3
 8008920:	73fb      	strb	r3, [r7, #15]
      break;
 8008922:	e0a3      	b.n	8008a6c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008924:	7bbb      	ldrb	r3, [r7, #14]
 8008926:	2b02      	cmp	r3, #2
 8008928:	d103      	bne.n	8008932 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2205      	movs	r2, #5
 800892e:	761a      	strb	r2, [r3, #24]
      break;
 8008930:	e09c      	b.n	8008a6c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008932:	7bbb      	ldrb	r3, [r7, #14]
 8008934:	2b04      	cmp	r3, #4
 8008936:	f040 8099 	bne.w	8008a6c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	220b      	movs	r2, #11
 800893e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008940:	2302      	movs	r3, #2
 8008942:	73fb      	strb	r3, [r7, #15]
      break;
 8008944:	e092      	b.n	8008a6c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	791b      	ldrb	r3, [r3, #4]
 800894a:	2200      	movs	r2, #0
 800894c:	2100      	movs	r1, #0
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f8d5 	bl	8008afe <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800895a:	b29a      	uxth	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2208      	movs	r2, #8
 8008964:	761a      	strb	r2, [r3, #24]

      break;
 8008966:	e086      	b.n	8008a76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	791b      	ldrb	r3, [r3, #4]
 800896c:	4619      	mov	r1, r3
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fc12 	bl	8009198 <USBH_LL_GetURBState>
 8008974:	4603      	mov	r3, r0
 8008976:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008978:	7bbb      	ldrb	r3, [r7, #14]
 800897a:	2b01      	cmp	r3, #1
 800897c:	d105      	bne.n	800898a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	220d      	movs	r2, #13
 8008982:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008988:	e072      	b.n	8008a70 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800898a:	7bbb      	ldrb	r3, [r7, #14]
 800898c:	2b04      	cmp	r3, #4
 800898e:	d103      	bne.n	8008998 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	220b      	movs	r2, #11
 8008994:	761a      	strb	r2, [r3, #24]
      break;
 8008996:	e06b      	b.n	8008a70 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008998:	7bbb      	ldrb	r3, [r7, #14]
 800899a:	2b05      	cmp	r3, #5
 800899c:	d168      	bne.n	8008a70 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800899e:	2303      	movs	r3, #3
 80089a0:	73fb      	strb	r3, [r7, #15]
      break;
 80089a2:	e065      	b.n	8008a70 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	795b      	ldrb	r3, [r3, #5]
 80089a8:	2201      	movs	r2, #1
 80089aa:	9200      	str	r2, [sp, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	2100      	movs	r1, #0
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 f87f 	bl	8008ab4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089bc:	b29a      	uxth	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	220a      	movs	r2, #10
 80089c6:	761a      	strb	r2, [r3, #24]
      break;
 80089c8:	e055      	b.n	8008a76 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	795b      	ldrb	r3, [r3, #5]
 80089ce:	4619      	mov	r1, r3
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fbe1 	bl	8009198 <USBH_LL_GetURBState>
 80089d6:	4603      	mov	r3, r0
 80089d8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80089da:	7bbb      	ldrb	r3, [r7, #14]
 80089dc:	2b01      	cmp	r3, #1
 80089de:	d105      	bne.n	80089ec <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	220d      	movs	r2, #13
 80089e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089ea:	e043      	b.n	8008a74 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d103      	bne.n	80089fa <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2209      	movs	r2, #9
 80089f6:	761a      	strb	r2, [r3, #24]
      break;
 80089f8:	e03c      	b.n	8008a74 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80089fa:	7bbb      	ldrb	r3, [r7, #14]
 80089fc:	2b04      	cmp	r3, #4
 80089fe:	d139      	bne.n	8008a74 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	220b      	movs	r2, #11
 8008a04:	761a      	strb	r2, [r3, #24]
      break;
 8008a06:	e035      	b.n	8008a74 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	7e5b      	ldrb	r3, [r3, #25]
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	765a      	strb	r2, [r3, #25]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	7e5b      	ldrb	r3, [r3, #25]
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d806      	bhi.n	8008a2a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008a28:	e025      	b.n	8008a76 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a30:	2106      	movs	r1, #6
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	795b      	ldrb	r3, [r3, #5]
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 f90c 	bl	8008c60 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	791b      	ldrb	r3, [r3, #4]
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	f000 f906 	bl	8008c60 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008a5a:	2302      	movs	r3, #2
 8008a5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008a5e:	e00a      	b.n	8008a76 <USBH_HandleControl+0x2de>

    default:
      break;
 8008a60:	bf00      	nop
 8008a62:	e008      	b.n	8008a76 <USBH_HandleControl+0x2de>
      break;
 8008a64:	bf00      	nop
 8008a66:	e006      	b.n	8008a76 <USBH_HandleControl+0x2de>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e004      	b.n	8008a76 <USBH_HandleControl+0x2de>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e002      	b.n	8008a76 <USBH_HandleControl+0x2de>
      break;
 8008a70:	bf00      	nop
 8008a72:	e000      	b.n	8008a76 <USBH_HandleControl+0x2de>
      break;
 8008a74:	bf00      	nop
  }

  return status;
 8008a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af04      	add	r7, sp, #16
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008a8e:	79f9      	ldrb	r1, [r7, #7]
 8008a90:	2300      	movs	r3, #0
 8008a92:	9303      	str	r3, [sp, #12]
 8008a94:	2308      	movs	r3, #8
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	9301      	str	r3, [sp, #4]
 8008a9c:	2300      	movs	r3, #0
 8008a9e:	9300      	str	r3, [sp, #0]
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	68f8      	ldr	r0, [r7, #12]
 8008aa6:	f000 fb46 	bl	8009136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008aaa:	2300      	movs	r3, #0
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b088      	sub	sp, #32
 8008ab8:	af04      	add	r7, sp, #16
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	4611      	mov	r1, r2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	80fb      	strh	r3, [r7, #6]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008ad8:	7979      	ldrb	r1, [r7, #5]
 8008ada:	7e3b      	ldrb	r3, [r7, #24]
 8008adc:	9303      	str	r3, [sp, #12]
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	9302      	str	r3, [sp, #8]
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	9300      	str	r3, [sp, #0]
 8008aea:	2300      	movs	r3, #0
 8008aec:	2200      	movs	r2, #0
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fb21 	bl	8009136 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b088      	sub	sp, #32
 8008b02:	af04      	add	r7, sp, #16
 8008b04:	60f8      	str	r0, [r7, #12]
 8008b06:	60b9      	str	r1, [r7, #8]
 8008b08:	4611      	mov	r1, r2
 8008b0a:	461a      	mov	r2, r3
 8008b0c:	460b      	mov	r3, r1
 8008b0e:	80fb      	strh	r3, [r7, #6]
 8008b10:	4613      	mov	r3, r2
 8008b12:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b14:	7979      	ldrb	r1, [r7, #5]
 8008b16:	2300      	movs	r3, #0
 8008b18:	9303      	str	r3, [sp, #12]
 8008b1a:	88fb      	ldrh	r3, [r7, #6]
 8008b1c:	9302      	str	r3, [sp, #8]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	9301      	str	r3, [sp, #4]
 8008b22:	2301      	movs	r3, #1
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	2300      	movs	r3, #0
 8008b28:	2201      	movs	r2, #1
 8008b2a:	68f8      	ldr	r0, [r7, #12]
 8008b2c:	f000 fb03 	bl	8009136 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008b30:	2300      	movs	r3, #0

}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}

08008b3a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008b3a:	b580      	push	{r7, lr}
 8008b3c:	b088      	sub	sp, #32
 8008b3e:	af04      	add	r7, sp, #16
 8008b40:	60f8      	str	r0, [r7, #12]
 8008b42:	60b9      	str	r1, [r7, #8]
 8008b44:	4611      	mov	r1, r2
 8008b46:	461a      	mov	r2, r3
 8008b48:	460b      	mov	r3, r1
 8008b4a:	80fb      	strh	r3, [r7, #6]
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d001      	beq.n	8008b5e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b5e:	7979      	ldrb	r1, [r7, #5]
 8008b60:	7e3b      	ldrb	r3, [r7, #24]
 8008b62:	9303      	str	r3, [sp, #12]
 8008b64:	88fb      	ldrh	r3, [r7, #6]
 8008b66:	9302      	str	r3, [sp, #8]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	9301      	str	r3, [sp, #4]
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	2302      	movs	r3, #2
 8008b72:	2200      	movs	r2, #0
 8008b74:	68f8      	ldr	r0, [r7, #12]
 8008b76:	f000 fade 	bl	8009136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3710      	adds	r7, #16
 8008b80:	46bd      	mov	sp, r7
 8008b82:	bd80      	pop	{r7, pc}

08008b84 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b088      	sub	sp, #32
 8008b88:	af04      	add	r7, sp, #16
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	4611      	mov	r1, r2
 8008b90:	461a      	mov	r2, r3
 8008b92:	460b      	mov	r3, r1
 8008b94:	80fb      	strh	r3, [r7, #6]
 8008b96:	4613      	mov	r3, r2
 8008b98:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b9a:	7979      	ldrb	r1, [r7, #5]
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	88fb      	ldrh	r3, [r7, #6]
 8008ba2:	9302      	str	r3, [sp, #8]
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	9301      	str	r3, [sp, #4]
 8008ba8:	2301      	movs	r3, #1
 8008baa:	9300      	str	r3, [sp, #0]
 8008bac:	2302      	movs	r3, #2
 8008bae:	2201      	movs	r2, #1
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 fac0 	bl	8009136 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af04      	add	r7, sp, #16
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	4608      	mov	r0, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	461a      	mov	r2, r3
 8008bce:	4603      	mov	r3, r0
 8008bd0:	70fb      	strb	r3, [r7, #3]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70bb      	strb	r3, [r7, #2]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008bda:	7878      	ldrb	r0, [r7, #1]
 8008bdc:	78ba      	ldrb	r2, [r7, #2]
 8008bde:	78f9      	ldrb	r1, [r7, #3]
 8008be0:	8b3b      	ldrh	r3, [r7, #24]
 8008be2:	9302      	str	r3, [sp, #8]
 8008be4:	7d3b      	ldrb	r3, [r7, #20]
 8008be6:	9301      	str	r3, [sp, #4]
 8008be8:	7c3b      	ldrb	r3, [r7, #16]
 8008bea:	9300      	str	r3, [sp, #0]
 8008bec:	4603      	mov	r3, r0
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 fa53 	bl	800909a <USBH_LL_OpenPipe>

  return USBH_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b082      	sub	sp, #8
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008c0a:	78fb      	ldrb	r3, [r7, #3]
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa72 	bl	80090f8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}

08008c1e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008c1e:	b580      	push	{r7, lr}
 8008c20:	b084      	sub	sp, #16
 8008c22:	af00      	add	r7, sp, #0
 8008c24:	6078      	str	r0, [r7, #4]
 8008c26:	460b      	mov	r3, r1
 8008c28:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f836 	bl	8008c9c <USBH_GetFreePipe>
 8008c30:	4603      	mov	r3, r0
 8008c32:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008c34:	89fb      	ldrh	r3, [r7, #14]
 8008c36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d00a      	beq.n	8008c54 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008c3e:	78fa      	ldrb	r2, [r7, #3]
 8008c40:	89fb      	ldrh	r3, [r7, #14]
 8008c42:	f003 030f 	and.w	r3, r3, #15
 8008c46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008c4a:	6879      	ldr	r1, [r7, #4]
 8008c4c:	33e0      	adds	r3, #224	@ 0xe0
 8008c4e:	009b      	lsls	r3, r3, #2
 8008c50:	440b      	add	r3, r1
 8008c52:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008c54:	89fb      	ldrh	r3, [r7, #14]
 8008c56:	b2db      	uxtb	r3, r3
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3710      	adds	r7, #16
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}

08008c60 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	2b0f      	cmp	r3, #15
 8008c70:	d80d      	bhi.n	8008c8e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008c72:	78fb      	ldrb	r3, [r7, #3]
 8008c74:	687a      	ldr	r2, [r7, #4]
 8008c76:	33e0      	adds	r3, #224	@ 0xe0
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	4413      	add	r3, r2
 8008c7c:	685a      	ldr	r2, [r3, #4]
 8008c7e:	78fb      	ldrb	r3, [r7, #3]
 8008c80:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008c84:	6879      	ldr	r1, [r7, #4]
 8008c86:	33e0      	adds	r3, #224	@ 0xe0
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008c8e:	2300      	movs	r3, #0
}
 8008c90:	4618      	mov	r0, r3
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b085      	sub	sp, #20
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008ca8:	2300      	movs	r3, #0
 8008caa:	73fb      	strb	r3, [r7, #15]
 8008cac:	e00f      	b.n	8008cce <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008cae:	7bfb      	ldrb	r3, [r7, #15]
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	33e0      	adds	r3, #224	@ 0xe0
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4413      	add	r3, r2
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d102      	bne.n	8008cc8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008cc2:	7bfb      	ldrb	r3, [r7, #15]
 8008cc4:	b29b      	uxth	r3, r3
 8008cc6:	e007      	b.n	8008cd8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008cc8:	7bfb      	ldrb	r3, [r7, #15]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	73fb      	strb	r3, [r7, #15]
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	2b0f      	cmp	r3, #15
 8008cd2:	d9ec      	bls.n	8008cae <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008cd4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3714      	adds	r7, #20
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce2:	4770      	bx	lr

08008ce4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008ce8:	2201      	movs	r2, #1
 8008cea:	490e      	ldr	r1, [pc, #56]	@ (8008d24 <MX_USB_HOST_Init+0x40>)
 8008cec:	480e      	ldr	r0, [pc, #56]	@ (8008d28 <MX_USB_HOST_Init+0x44>)
 8008cee:	f7fe fb15 	bl	800731c <USBH_Init>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d001      	beq.n	8008cfc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008cf8:	f7f7 fe5c 	bl	80009b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008cfc:	490b      	ldr	r1, [pc, #44]	@ (8008d2c <MX_USB_HOST_Init+0x48>)
 8008cfe:	480a      	ldr	r0, [pc, #40]	@ (8008d28 <MX_USB_HOST_Init+0x44>)
 8008d00:	f7fe fbb9 	bl	8007476 <USBH_RegisterClass>
 8008d04:	4603      	mov	r3, r0
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d001      	beq.n	8008d0e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008d0a:	f7f7 fe53 	bl	80009b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008d0e:	4806      	ldr	r0, [pc, #24]	@ (8008d28 <MX_USB_HOST_Init+0x44>)
 8008d10:	f7fe fc3d 	bl	800758e <USBH_Start>
 8008d14:	4603      	mov	r3, r0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008d1a:	f7f7 fe4b 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008d1e:	bf00      	nop
 8008d20:	bd80      	pop	{r7, pc}
 8008d22:	bf00      	nop
 8008d24:	08008d45 	.word	0x08008d45
 8008d28:	2000019c 	.word	0x2000019c
 8008d2c:	2000000c 	.word	0x2000000c

08008d30 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008d34:	4802      	ldr	r0, [pc, #8]	@ (8008d40 <MX_USB_HOST_Process+0x10>)
 8008d36:	f7fe fc3b 	bl	80075b0 <USBH_Process>
}
 8008d3a:	bf00      	nop
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000019c 	.word	0x2000019c

08008d44 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	3b01      	subs	r3, #1
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d819      	bhi.n	8008d8c <USBH_UserProcess+0x48>
 8008d58:	a201      	add	r2, pc, #4	@ (adr r2, 8008d60 <USBH_UserProcess+0x1c>)
 8008d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d5e:	bf00      	nop
 8008d60:	08008d8d 	.word	0x08008d8d
 8008d64:	08008d7d 	.word	0x08008d7d
 8008d68:	08008d8d 	.word	0x08008d8d
 8008d6c:	08008d85 	.word	0x08008d85
 8008d70:	08008d75 	.word	0x08008d75
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008d74:	4b09      	ldr	r3, [pc, #36]	@ (8008d9c <USBH_UserProcess+0x58>)
 8008d76:	2203      	movs	r2, #3
 8008d78:	701a      	strb	r2, [r3, #0]
  break;
 8008d7a:	e008      	b.n	8008d8e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008d7c:	4b07      	ldr	r3, [pc, #28]	@ (8008d9c <USBH_UserProcess+0x58>)
 8008d7e:	2202      	movs	r2, #2
 8008d80:	701a      	strb	r2, [r3, #0]
  break;
 8008d82:	e004      	b.n	8008d8e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008d84:	4b05      	ldr	r3, [pc, #20]	@ (8008d9c <USBH_UserProcess+0x58>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	701a      	strb	r2, [r3, #0]
  break;
 8008d8a:	e000      	b.n	8008d8e <USBH_UserProcess+0x4a>

  default:
  break;
 8008d8c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008d8e:	bf00      	nop
 8008d90:	370c      	adds	r7, #12
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000574 	.word	0x20000574

08008da0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b08a      	sub	sp, #40	@ 0x28
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008da8:	f107 0314 	add.w	r3, r7, #20
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
 8008db2:	609a      	str	r2, [r3, #8]
 8008db4:	60da      	str	r2, [r3, #12]
 8008db6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008dc0:	d147      	bne.n	8008e52 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	613b      	str	r3, [r7, #16]
 8008dc6:	4b25      	ldr	r3, [pc, #148]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dca:	4a24      	ldr	r2, [pc, #144]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008dcc:	f043 0301 	orr.w	r3, r3, #1
 8008dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8008dd2:	4b22      	ldr	r3, [pc, #136]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	613b      	str	r3, [r7, #16]
 8008ddc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008dde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008de8:	2300      	movs	r3, #0
 8008dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008dec:	f107 0314 	add.w	r3, r7, #20
 8008df0:	4619      	mov	r1, r3
 8008df2:	481b      	ldr	r0, [pc, #108]	@ (8008e60 <HAL_HCD_MspInit+0xc0>)
 8008df4:	f7f8 fef4 	bl	8001be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008df8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008dfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008dfe:	2302      	movs	r3, #2
 8008e00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e02:	2300      	movs	r3, #0
 8008e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e06:	2300      	movs	r3, #0
 8008e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008e0a:	230a      	movs	r3, #10
 8008e0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e0e:	f107 0314 	add.w	r3, r7, #20
 8008e12:	4619      	mov	r1, r3
 8008e14:	4812      	ldr	r0, [pc, #72]	@ (8008e60 <HAL_HCD_MspInit+0xc0>)
 8008e16:	f7f8 fee3 	bl	8001be0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008e1a:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008e1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e1e:	4a0f      	ldr	r2, [pc, #60]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008e20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008e24:	6353      	str	r3, [r2, #52]	@ 0x34
 8008e26:	2300      	movs	r3, #0
 8008e28:	60fb      	str	r3, [r7, #12]
 8008e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e2e:	4a0b      	ldr	r2, [pc, #44]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008e30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e34:	6453      	str	r3, [r2, #68]	@ 0x44
 8008e36:	4b09      	ldr	r3, [pc, #36]	@ (8008e5c <HAL_HCD_MspInit+0xbc>)
 8008e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008e3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e3e:	60fb      	str	r3, [r7, #12]
 8008e40:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008e42:	2200      	movs	r2, #0
 8008e44:	2100      	movs	r1, #0
 8008e46:	2043      	movs	r0, #67	@ 0x43
 8008e48:	f7f8 fd2d 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008e4c:	2043      	movs	r0, #67	@ 0x43
 8008e4e:	f7f8 fd46 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008e52:	bf00      	nop
 8008e54:	3728      	adds	r7, #40	@ 0x28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	bd80      	pop	{r7, pc}
 8008e5a:	bf00      	nop
 8008e5c:	40023800 	.word	0x40023800
 8008e60:	40020000 	.word	0x40020000

08008e64 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e72:	4618      	mov	r0, r3
 8008e74:	f7fe ff73 	bl	8007d5e <USBH_LL_IncTimer>
}
 8008e78:	bf00      	nop
 8008e7a:	3708      	adds	r7, #8
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b082      	sub	sp, #8
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fe ffab 	bl	8007dea <USBH_LL_Connect>
}
 8008e94:	bf00      	nop
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}

08008e9c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b082      	sub	sp, #8
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe ffb4 	bl	8007e18 <USBH_LL_Disconnect>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008eb8:	b480      	push	{r7}
 8008eba:	b083      	sub	sp, #12
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fe ff65 	bl	8007db2 <USBH_LL_PortEnabled>
}
 8008ee8:	bf00      	nop
 8008eea:	3708      	adds	r7, #8
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fe ff65 	bl	8007dce <USBH_LL_PortDisabled>
}
 8008f04:	bf00      	nop
 8008f06:	3708      	adds	r7, #8
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b082      	sub	sp, #8
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008f1a:	2b01      	cmp	r3, #1
 8008f1c:	d12a      	bne.n	8008f74 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008f1e:	4a18      	ldr	r2, [pc, #96]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a15      	ldr	r2, [pc, #84]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f2a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f2e:	4b14      	ldr	r3, [pc, #80]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f30:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008f34:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008f36:	4b12      	ldr	r3, [pc, #72]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f38:	2208      	movs	r2, #8
 8008f3a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008f3c:	4b10      	ldr	r3, [pc, #64]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f3e:	2201      	movs	r2, #1
 8008f40:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f42:	4b0f      	ldr	r3, [pc, #60]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f44:	2200      	movs	r2, #0
 8008f46:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008f48:	4b0d      	ldr	r3, [pc, #52]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f50:	2200      	movs	r2, #0
 8008f52:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008f54:	480a      	ldr	r0, [pc, #40]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f56:	f7f8 fff8 	bl	8001f4a <HAL_HCD_Init>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d001      	beq.n	8008f64 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008f60:	f7f7 fd28 	bl	80009b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008f64:	4806      	ldr	r0, [pc, #24]	@ (8008f80 <USBH_LL_Init+0x74>)
 8008f66:	f7f9 fc59 	bl	800281c <HAL_HCD_GetCurrentFrame>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe fee6 	bl	8007d40 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	3708      	adds	r7, #8
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	bd80      	pop	{r7, pc}
 8008f7e:	bf00      	nop
 8008f80:	20000578 	.word	0x20000578

08008f84 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b084      	sub	sp, #16
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f7f9 fbc6 	bl	800272c <HAL_HCD_Start>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 f95e 	bl	8009268 <USBH_Get_USB_Status>
 8008fac:	4603      	mov	r3, r0
 8008fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b084      	sub	sp, #16
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008fc6:	2300      	movs	r3, #0
 8008fc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f7f9 fbce 	bl	8002772 <HAL_HCD_Stop>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008fda:	7bfb      	ldrb	r3, [r7, #15]
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f000 f943 	bl	8009268 <USBH_Get_USB_Status>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	3710      	adds	r7, #16
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}

08008ff0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009002:	4618      	mov	r0, r3
 8009004:	f7f9 fc18 	bl	8002838 <HAL_HCD_GetCurrentSpeed>
 8009008:	4603      	mov	r3, r0
 800900a:	2b02      	cmp	r3, #2
 800900c:	d00c      	beq.n	8009028 <USBH_LL_GetSpeed+0x38>
 800900e:	2b02      	cmp	r3, #2
 8009010:	d80d      	bhi.n	800902e <USBH_LL_GetSpeed+0x3e>
 8009012:	2b00      	cmp	r3, #0
 8009014:	d002      	beq.n	800901c <USBH_LL_GetSpeed+0x2c>
 8009016:	2b01      	cmp	r3, #1
 8009018:	d003      	beq.n	8009022 <USBH_LL_GetSpeed+0x32>
 800901a:	e008      	b.n	800902e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800901c:	2300      	movs	r3, #0
 800901e:	73fb      	strb	r3, [r7, #15]
    break;
 8009020:	e008      	b.n	8009034 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8009022:	2301      	movs	r3, #1
 8009024:	73fb      	strb	r3, [r7, #15]
    break;
 8009026:	e005      	b.n	8009034 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009028:	2302      	movs	r3, #2
 800902a:	73fb      	strb	r3, [r7, #15]
    break;
 800902c:	e002      	b.n	8009034 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800902e:	2301      	movs	r3, #1
 8009030:	73fb      	strb	r3, [r7, #15]
    break;
 8009032:	bf00      	nop
  }
  return  speed;
 8009034:	7bfb      	ldrb	r3, [r7, #15]
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b084      	sub	sp, #16
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009046:	2300      	movs	r3, #0
 8009048:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800904a:	2300      	movs	r3, #0
 800904c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009054:	4618      	mov	r0, r3
 8009056:	f7f9 fba9 	bl	80027ac <HAL_HCD_ResetPort>
 800905a:	4603      	mov	r3, r0
 800905c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800905e:	7bfb      	ldrb	r3, [r7, #15]
 8009060:	4618      	mov	r0, r3
 8009062:	f000 f901 	bl	8009268 <USBH_Get_USB_Status>
 8009066:	4603      	mov	r3, r0
 8009068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800906a:	7bbb      	ldrb	r3, [r7, #14]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b082      	sub	sp, #8
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	460b      	mov	r3, r1
 800907e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7f9 fbb1 	bl	80027f2 <HAL_HCD_HC_GetXferCount>
 8009090:	4603      	mov	r3, r0
}
 8009092:	4618      	mov	r0, r3
 8009094:	3708      	adds	r7, #8
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800909a:	b590      	push	{r4, r7, lr}
 800909c:	b089      	sub	sp, #36	@ 0x24
 800909e:	af04      	add	r7, sp, #16
 80090a0:	6078      	str	r0, [r7, #4]
 80090a2:	4608      	mov	r0, r1
 80090a4:	4611      	mov	r1, r2
 80090a6:	461a      	mov	r2, r3
 80090a8:	4603      	mov	r3, r0
 80090aa:	70fb      	strb	r3, [r7, #3]
 80090ac:	460b      	mov	r3, r1
 80090ae:	70bb      	strb	r3, [r7, #2]
 80090b0:	4613      	mov	r3, r2
 80090b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090b8:	2300      	movs	r3, #0
 80090ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80090c2:	787c      	ldrb	r4, [r7, #1]
 80090c4:	78ba      	ldrb	r2, [r7, #2]
 80090c6:	78f9      	ldrb	r1, [r7, #3]
 80090c8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80090ca:	9302      	str	r3, [sp, #8]
 80090cc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80090d0:	9301      	str	r3, [sp, #4]
 80090d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80090d6:	9300      	str	r3, [sp, #0]
 80090d8:	4623      	mov	r3, r4
 80090da:	f7f8 ff9d 	bl	8002018 <HAL_HCD_HC_Init>
 80090de:	4603      	mov	r3, r0
 80090e0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 f8bf 	bl	8009268 <USBH_Get_USB_Status>
 80090ea:	4603      	mov	r3, r0
 80090ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	3714      	adds	r7, #20
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd90      	pop	{r4, r7, pc}

080090f8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	460b      	mov	r3, r1
 8009102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009112:	78fa      	ldrb	r2, [r7, #3]
 8009114:	4611      	mov	r1, r2
 8009116:	4618      	mov	r0, r3
 8009118:	f7f9 f836 	bl	8002188 <HAL_HCD_HC_Halt>
 800911c:	4603      	mov	r3, r0
 800911e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009120:	7bfb      	ldrb	r3, [r7, #15]
 8009122:	4618      	mov	r0, r3
 8009124:	f000 f8a0 	bl	8009268 <USBH_Get_USB_Status>
 8009128:	4603      	mov	r3, r0
 800912a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800912c:	7bbb      	ldrb	r3, [r7, #14]
}
 800912e:	4618      	mov	r0, r3
 8009130:	3710      	adds	r7, #16
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009136:	b590      	push	{r4, r7, lr}
 8009138:	b089      	sub	sp, #36	@ 0x24
 800913a:	af04      	add	r7, sp, #16
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	4608      	mov	r0, r1
 8009140:	4611      	mov	r1, r2
 8009142:	461a      	mov	r2, r3
 8009144:	4603      	mov	r3, r0
 8009146:	70fb      	strb	r3, [r7, #3]
 8009148:	460b      	mov	r3, r1
 800914a:	70bb      	strb	r3, [r7, #2]
 800914c:	4613      	mov	r3, r2
 800914e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800915e:	787c      	ldrb	r4, [r7, #1]
 8009160:	78ba      	ldrb	r2, [r7, #2]
 8009162:	78f9      	ldrb	r1, [r7, #3]
 8009164:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009168:	9303      	str	r3, [sp, #12]
 800916a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800916c:	9302      	str	r3, [sp, #8]
 800916e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009170:	9301      	str	r3, [sp, #4]
 8009172:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009176:	9300      	str	r3, [sp, #0]
 8009178:	4623      	mov	r3, r4
 800917a:	f7f9 f829 	bl	80021d0 <HAL_HCD_HC_SubmitRequest>
 800917e:	4603      	mov	r3, r0
 8009180:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009182:	7bfb      	ldrb	r3, [r7, #15]
 8009184:	4618      	mov	r0, r3
 8009186:	f000 f86f 	bl	8009268 <USBH_Get_USB_Status>
 800918a:	4603      	mov	r3, r0
 800918c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800918e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009190:	4618      	mov	r0, r3
 8009192:	3714      	adds	r7, #20
 8009194:	46bd      	mov	sp, r7
 8009196:	bd90      	pop	{r4, r7, pc}

08009198 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b082      	sub	sp, #8
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	460b      	mov	r3, r1
 80091a2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f9 fb0a 	bl	80027c8 <HAL_HCD_HC_GetURBState>
 80091b4:	4603      	mov	r3, r0
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3708      	adds	r7, #8
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b082      	sub	sp, #8
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
 80091c6:	460b      	mov	r3, r1
 80091c8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d103      	bne.n	80091dc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80091d4:	78fb      	ldrb	r3, [r7, #3]
 80091d6:	4618      	mov	r0, r3
 80091d8:	f000 f872 	bl	80092c0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80091dc:	20c8      	movs	r0, #200	@ 0xc8
 80091de:	f7f7 fe97 	bl	8000f10 <HAL_Delay>
  return USBH_OK;
 80091e2:	2300      	movs	r3, #0
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3708      	adds	r7, #8
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	460b      	mov	r3, r1
 80091f6:	70fb      	strb	r3, [r7, #3]
 80091f8:	4613      	mov	r3, r2
 80091fa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009202:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	68f9      	ldr	r1, [r7, #12]
 8009208:	4613      	mov	r3, r2
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	3317      	adds	r3, #23
 8009214:	781b      	ldrb	r3, [r3, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00a      	beq.n	8009230 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800921a:	78fa      	ldrb	r2, [r7, #3]
 800921c:	68f9      	ldr	r1, [r7, #12]
 800921e:	4613      	mov	r3, r2
 8009220:	011b      	lsls	r3, r3, #4
 8009222:	1a9b      	subs	r3, r3, r2
 8009224:	009b      	lsls	r3, r3, #2
 8009226:	440b      	add	r3, r1
 8009228:	333c      	adds	r3, #60	@ 0x3c
 800922a:	78ba      	ldrb	r2, [r7, #2]
 800922c:	701a      	strb	r2, [r3, #0]
 800922e:	e009      	b.n	8009244 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	68f9      	ldr	r1, [r7, #12]
 8009234:	4613      	mov	r3, r2
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	333d      	adds	r3, #61	@ 0x3d
 8009240:	78ba      	ldrb	r2, [r7, #2]
 8009242:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009244:	2300      	movs	r3, #0
}
 8009246:	4618      	mov	r0, r3
 8009248:	3714      	adds	r7, #20
 800924a:	46bd      	mov	sp, r7
 800924c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009250:	4770      	bx	lr

08009252 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009252:	b580      	push	{r7, lr}
 8009254:	b082      	sub	sp, #8
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f7f7 fe58 	bl	8000f10 <HAL_Delay>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009268:	b480      	push	{r7}
 800926a:	b085      	sub	sp, #20
 800926c:	af00      	add	r7, sp, #0
 800926e:	4603      	mov	r3, r0
 8009270:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009272:	2300      	movs	r3, #0
 8009274:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	2b03      	cmp	r3, #3
 800927a:	d817      	bhi.n	80092ac <USBH_Get_USB_Status+0x44>
 800927c:	a201      	add	r2, pc, #4	@ (adr r2, 8009284 <USBH_Get_USB_Status+0x1c>)
 800927e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009282:	bf00      	nop
 8009284:	08009295 	.word	0x08009295
 8009288:	0800929b 	.word	0x0800929b
 800928c:	080092a1 	.word	0x080092a1
 8009290:	080092a7 	.word	0x080092a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009294:	2300      	movs	r3, #0
 8009296:	73fb      	strb	r3, [r7, #15]
    break;
 8009298:	e00b      	b.n	80092b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800929a:	2302      	movs	r3, #2
 800929c:	73fb      	strb	r3, [r7, #15]
    break;
 800929e:	e008      	b.n	80092b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80092a0:	2301      	movs	r3, #1
 80092a2:	73fb      	strb	r3, [r7, #15]
    break;
 80092a4:	e005      	b.n	80092b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80092a6:	2302      	movs	r3, #2
 80092a8:	73fb      	strb	r3, [r7, #15]
    break;
 80092aa:	e002      	b.n	80092b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80092ac:	2302      	movs	r3, #2
 80092ae:	73fb      	strb	r3, [r7, #15]
    break;
 80092b0:	bf00      	nop
  }
  return usb_status;
 80092b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b4:	4618      	mov	r0, r3
 80092b6:	3714      	adds	r7, #20
 80092b8:	46bd      	mov	sp, r7
 80092ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092be:	4770      	bx	lr

080092c0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b084      	sub	sp, #16
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	4603      	mov	r3, r0
 80092c8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80092ce:	79fb      	ldrb	r3, [r7, #7]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d102      	bne.n	80092da <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80092d4:	2300      	movs	r3, #0
 80092d6:	73fb      	strb	r3, [r7, #15]
 80092d8:	e001      	b.n	80092de <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80092da:	2301      	movs	r3, #1
 80092dc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	461a      	mov	r2, r3
 80092e2:	2101      	movs	r1, #1
 80092e4:	4803      	ldr	r0, [pc, #12]	@ (80092f4 <MX_DriverVbusFS+0x34>)
 80092e6:	f7f8 fe17 	bl	8001f18 <HAL_GPIO_WritePin>
}
 80092ea:	bf00      	nop
 80092ec:	3710      	adds	r7, #16
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	40020800 	.word	0x40020800

080092f8 <malloc>:
 80092f8:	4b02      	ldr	r3, [pc, #8]	@ (8009304 <malloc+0xc>)
 80092fa:	4601      	mov	r1, r0
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	f000 b82d 	b.w	800935c <_malloc_r>
 8009302:	bf00      	nop
 8009304:	2000002c 	.word	0x2000002c

08009308 <free>:
 8009308:	4b02      	ldr	r3, [pc, #8]	@ (8009314 <free+0xc>)
 800930a:	4601      	mov	r1, r0
 800930c:	6818      	ldr	r0, [r3, #0]
 800930e:	f000 b8f5 	b.w	80094fc <_free_r>
 8009312:	bf00      	nop
 8009314:	2000002c 	.word	0x2000002c

08009318 <sbrk_aligned>:
 8009318:	b570      	push	{r4, r5, r6, lr}
 800931a:	4e0f      	ldr	r6, [pc, #60]	@ (8009358 <sbrk_aligned+0x40>)
 800931c:	460c      	mov	r4, r1
 800931e:	6831      	ldr	r1, [r6, #0]
 8009320:	4605      	mov	r5, r0
 8009322:	b911      	cbnz	r1, 800932a <sbrk_aligned+0x12>
 8009324:	f000 f8ae 	bl	8009484 <_sbrk_r>
 8009328:	6030      	str	r0, [r6, #0]
 800932a:	4621      	mov	r1, r4
 800932c:	4628      	mov	r0, r5
 800932e:	f000 f8a9 	bl	8009484 <_sbrk_r>
 8009332:	1c43      	adds	r3, r0, #1
 8009334:	d103      	bne.n	800933e <sbrk_aligned+0x26>
 8009336:	f04f 34ff 	mov.w	r4, #4294967295
 800933a:	4620      	mov	r0, r4
 800933c:	bd70      	pop	{r4, r5, r6, pc}
 800933e:	1cc4      	adds	r4, r0, #3
 8009340:	f024 0403 	bic.w	r4, r4, #3
 8009344:	42a0      	cmp	r0, r4
 8009346:	d0f8      	beq.n	800933a <sbrk_aligned+0x22>
 8009348:	1a21      	subs	r1, r4, r0
 800934a:	4628      	mov	r0, r5
 800934c:	f000 f89a 	bl	8009484 <_sbrk_r>
 8009350:	3001      	adds	r0, #1
 8009352:	d1f2      	bne.n	800933a <sbrk_aligned+0x22>
 8009354:	e7ef      	b.n	8009336 <sbrk_aligned+0x1e>
 8009356:	bf00      	nop
 8009358:	20000958 	.word	0x20000958

0800935c <_malloc_r>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	1ccd      	adds	r5, r1, #3
 8009362:	f025 0503 	bic.w	r5, r5, #3
 8009366:	3508      	adds	r5, #8
 8009368:	2d0c      	cmp	r5, #12
 800936a:	bf38      	it	cc
 800936c:	250c      	movcc	r5, #12
 800936e:	2d00      	cmp	r5, #0
 8009370:	4606      	mov	r6, r0
 8009372:	db01      	blt.n	8009378 <_malloc_r+0x1c>
 8009374:	42a9      	cmp	r1, r5
 8009376:	d904      	bls.n	8009382 <_malloc_r+0x26>
 8009378:	230c      	movs	r3, #12
 800937a:	6033      	str	r3, [r6, #0]
 800937c:	2000      	movs	r0, #0
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009458 <_malloc_r+0xfc>
 8009386:	f000 f869 	bl	800945c <__malloc_lock>
 800938a:	f8d8 3000 	ldr.w	r3, [r8]
 800938e:	461c      	mov	r4, r3
 8009390:	bb44      	cbnz	r4, 80093e4 <_malloc_r+0x88>
 8009392:	4629      	mov	r1, r5
 8009394:	4630      	mov	r0, r6
 8009396:	f7ff ffbf 	bl	8009318 <sbrk_aligned>
 800939a:	1c43      	adds	r3, r0, #1
 800939c:	4604      	mov	r4, r0
 800939e:	d158      	bne.n	8009452 <_malloc_r+0xf6>
 80093a0:	f8d8 4000 	ldr.w	r4, [r8]
 80093a4:	4627      	mov	r7, r4
 80093a6:	2f00      	cmp	r7, #0
 80093a8:	d143      	bne.n	8009432 <_malloc_r+0xd6>
 80093aa:	2c00      	cmp	r4, #0
 80093ac:	d04b      	beq.n	8009446 <_malloc_r+0xea>
 80093ae:	6823      	ldr	r3, [r4, #0]
 80093b0:	4639      	mov	r1, r7
 80093b2:	4630      	mov	r0, r6
 80093b4:	eb04 0903 	add.w	r9, r4, r3
 80093b8:	f000 f864 	bl	8009484 <_sbrk_r>
 80093bc:	4581      	cmp	r9, r0
 80093be:	d142      	bne.n	8009446 <_malloc_r+0xea>
 80093c0:	6821      	ldr	r1, [r4, #0]
 80093c2:	1a6d      	subs	r5, r5, r1
 80093c4:	4629      	mov	r1, r5
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7ff ffa6 	bl	8009318 <sbrk_aligned>
 80093cc:	3001      	adds	r0, #1
 80093ce:	d03a      	beq.n	8009446 <_malloc_r+0xea>
 80093d0:	6823      	ldr	r3, [r4, #0]
 80093d2:	442b      	add	r3, r5
 80093d4:	6023      	str	r3, [r4, #0]
 80093d6:	f8d8 3000 	ldr.w	r3, [r8]
 80093da:	685a      	ldr	r2, [r3, #4]
 80093dc:	bb62      	cbnz	r2, 8009438 <_malloc_r+0xdc>
 80093de:	f8c8 7000 	str.w	r7, [r8]
 80093e2:	e00f      	b.n	8009404 <_malloc_r+0xa8>
 80093e4:	6822      	ldr	r2, [r4, #0]
 80093e6:	1b52      	subs	r2, r2, r5
 80093e8:	d420      	bmi.n	800942c <_malloc_r+0xd0>
 80093ea:	2a0b      	cmp	r2, #11
 80093ec:	d917      	bls.n	800941e <_malloc_r+0xc2>
 80093ee:	1961      	adds	r1, r4, r5
 80093f0:	42a3      	cmp	r3, r4
 80093f2:	6025      	str	r5, [r4, #0]
 80093f4:	bf18      	it	ne
 80093f6:	6059      	strne	r1, [r3, #4]
 80093f8:	6863      	ldr	r3, [r4, #4]
 80093fa:	bf08      	it	eq
 80093fc:	f8c8 1000 	streq.w	r1, [r8]
 8009400:	5162      	str	r2, [r4, r5]
 8009402:	604b      	str	r3, [r1, #4]
 8009404:	4630      	mov	r0, r6
 8009406:	f000 f82f 	bl	8009468 <__malloc_unlock>
 800940a:	f104 000b 	add.w	r0, r4, #11
 800940e:	1d23      	adds	r3, r4, #4
 8009410:	f020 0007 	bic.w	r0, r0, #7
 8009414:	1ac2      	subs	r2, r0, r3
 8009416:	bf1c      	itt	ne
 8009418:	1a1b      	subne	r3, r3, r0
 800941a:	50a3      	strne	r3, [r4, r2]
 800941c:	e7af      	b.n	800937e <_malloc_r+0x22>
 800941e:	6862      	ldr	r2, [r4, #4]
 8009420:	42a3      	cmp	r3, r4
 8009422:	bf0c      	ite	eq
 8009424:	f8c8 2000 	streq.w	r2, [r8]
 8009428:	605a      	strne	r2, [r3, #4]
 800942a:	e7eb      	b.n	8009404 <_malloc_r+0xa8>
 800942c:	4623      	mov	r3, r4
 800942e:	6864      	ldr	r4, [r4, #4]
 8009430:	e7ae      	b.n	8009390 <_malloc_r+0x34>
 8009432:	463c      	mov	r4, r7
 8009434:	687f      	ldr	r7, [r7, #4]
 8009436:	e7b6      	b.n	80093a6 <_malloc_r+0x4a>
 8009438:	461a      	mov	r2, r3
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	42a3      	cmp	r3, r4
 800943e:	d1fb      	bne.n	8009438 <_malloc_r+0xdc>
 8009440:	2300      	movs	r3, #0
 8009442:	6053      	str	r3, [r2, #4]
 8009444:	e7de      	b.n	8009404 <_malloc_r+0xa8>
 8009446:	230c      	movs	r3, #12
 8009448:	6033      	str	r3, [r6, #0]
 800944a:	4630      	mov	r0, r6
 800944c:	f000 f80c 	bl	8009468 <__malloc_unlock>
 8009450:	e794      	b.n	800937c <_malloc_r+0x20>
 8009452:	6005      	str	r5, [r0, #0]
 8009454:	e7d6      	b.n	8009404 <_malloc_r+0xa8>
 8009456:	bf00      	nop
 8009458:	2000095c 	.word	0x2000095c

0800945c <__malloc_lock>:
 800945c:	4801      	ldr	r0, [pc, #4]	@ (8009464 <__malloc_lock+0x8>)
 800945e:	f000 b84b 	b.w	80094f8 <__retarget_lock_acquire_recursive>
 8009462:	bf00      	nop
 8009464:	20000a9c 	.word	0x20000a9c

08009468 <__malloc_unlock>:
 8009468:	4801      	ldr	r0, [pc, #4]	@ (8009470 <__malloc_unlock+0x8>)
 800946a:	f000 b846 	b.w	80094fa <__retarget_lock_release_recursive>
 800946e:	bf00      	nop
 8009470:	20000a9c 	.word	0x20000a9c

08009474 <memset>:
 8009474:	4402      	add	r2, r0
 8009476:	4603      	mov	r3, r0
 8009478:	4293      	cmp	r3, r2
 800947a:	d100      	bne.n	800947e <memset+0xa>
 800947c:	4770      	bx	lr
 800947e:	f803 1b01 	strb.w	r1, [r3], #1
 8009482:	e7f9      	b.n	8009478 <memset+0x4>

08009484 <_sbrk_r>:
 8009484:	b538      	push	{r3, r4, r5, lr}
 8009486:	4d06      	ldr	r5, [pc, #24]	@ (80094a0 <_sbrk_r+0x1c>)
 8009488:	2300      	movs	r3, #0
 800948a:	4604      	mov	r4, r0
 800948c:	4608      	mov	r0, r1
 800948e:	602b      	str	r3, [r5, #0]
 8009490:	f7f7 fc5a 	bl	8000d48 <_sbrk>
 8009494:	1c43      	adds	r3, r0, #1
 8009496:	d102      	bne.n	800949e <_sbrk_r+0x1a>
 8009498:	682b      	ldr	r3, [r5, #0]
 800949a:	b103      	cbz	r3, 800949e <_sbrk_r+0x1a>
 800949c:	6023      	str	r3, [r4, #0]
 800949e:	bd38      	pop	{r3, r4, r5, pc}
 80094a0:	20000a98 	.word	0x20000a98

080094a4 <__errno>:
 80094a4:	4b01      	ldr	r3, [pc, #4]	@ (80094ac <__errno+0x8>)
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000002c 	.word	0x2000002c

080094b0 <__libc_init_array>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4d0d      	ldr	r5, [pc, #52]	@ (80094e8 <__libc_init_array+0x38>)
 80094b4:	4c0d      	ldr	r4, [pc, #52]	@ (80094ec <__libc_init_array+0x3c>)
 80094b6:	1b64      	subs	r4, r4, r5
 80094b8:	10a4      	asrs	r4, r4, #2
 80094ba:	2600      	movs	r6, #0
 80094bc:	42a6      	cmp	r6, r4
 80094be:	d109      	bne.n	80094d4 <__libc_init_array+0x24>
 80094c0:	4d0b      	ldr	r5, [pc, #44]	@ (80094f0 <__libc_init_array+0x40>)
 80094c2:	4c0c      	ldr	r4, [pc, #48]	@ (80094f4 <__libc_init_array+0x44>)
 80094c4:	f000 f864 	bl	8009590 <_init>
 80094c8:	1b64      	subs	r4, r4, r5
 80094ca:	10a4      	asrs	r4, r4, #2
 80094cc:	2600      	movs	r6, #0
 80094ce:	42a6      	cmp	r6, r4
 80094d0:	d105      	bne.n	80094de <__libc_init_array+0x2e>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d8:	4798      	blx	r3
 80094da:	3601      	adds	r6, #1
 80094dc:	e7ee      	b.n	80094bc <__libc_init_array+0xc>
 80094de:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e2:	4798      	blx	r3
 80094e4:	3601      	adds	r6, #1
 80094e6:	e7f2      	b.n	80094ce <__libc_init_array+0x1e>
 80094e8:	080095cc 	.word	0x080095cc
 80094ec:	080095cc 	.word	0x080095cc
 80094f0:	080095cc 	.word	0x080095cc
 80094f4:	080095d0 	.word	0x080095d0

080094f8 <__retarget_lock_acquire_recursive>:
 80094f8:	4770      	bx	lr

080094fa <__retarget_lock_release_recursive>:
 80094fa:	4770      	bx	lr

080094fc <_free_r>:
 80094fc:	b538      	push	{r3, r4, r5, lr}
 80094fe:	4605      	mov	r5, r0
 8009500:	2900      	cmp	r1, #0
 8009502:	d041      	beq.n	8009588 <_free_r+0x8c>
 8009504:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009508:	1f0c      	subs	r4, r1, #4
 800950a:	2b00      	cmp	r3, #0
 800950c:	bfb8      	it	lt
 800950e:	18e4      	addlt	r4, r4, r3
 8009510:	f7ff ffa4 	bl	800945c <__malloc_lock>
 8009514:	4a1d      	ldr	r2, [pc, #116]	@ (800958c <_free_r+0x90>)
 8009516:	6813      	ldr	r3, [r2, #0]
 8009518:	b933      	cbnz	r3, 8009528 <_free_r+0x2c>
 800951a:	6063      	str	r3, [r4, #4]
 800951c:	6014      	str	r4, [r2, #0]
 800951e:	4628      	mov	r0, r5
 8009520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009524:	f7ff bfa0 	b.w	8009468 <__malloc_unlock>
 8009528:	42a3      	cmp	r3, r4
 800952a:	d908      	bls.n	800953e <_free_r+0x42>
 800952c:	6820      	ldr	r0, [r4, #0]
 800952e:	1821      	adds	r1, r4, r0
 8009530:	428b      	cmp	r3, r1
 8009532:	bf01      	itttt	eq
 8009534:	6819      	ldreq	r1, [r3, #0]
 8009536:	685b      	ldreq	r3, [r3, #4]
 8009538:	1809      	addeq	r1, r1, r0
 800953a:	6021      	streq	r1, [r4, #0]
 800953c:	e7ed      	b.n	800951a <_free_r+0x1e>
 800953e:	461a      	mov	r2, r3
 8009540:	685b      	ldr	r3, [r3, #4]
 8009542:	b10b      	cbz	r3, 8009548 <_free_r+0x4c>
 8009544:	42a3      	cmp	r3, r4
 8009546:	d9fa      	bls.n	800953e <_free_r+0x42>
 8009548:	6811      	ldr	r1, [r2, #0]
 800954a:	1850      	adds	r0, r2, r1
 800954c:	42a0      	cmp	r0, r4
 800954e:	d10b      	bne.n	8009568 <_free_r+0x6c>
 8009550:	6820      	ldr	r0, [r4, #0]
 8009552:	4401      	add	r1, r0
 8009554:	1850      	adds	r0, r2, r1
 8009556:	4283      	cmp	r3, r0
 8009558:	6011      	str	r1, [r2, #0]
 800955a:	d1e0      	bne.n	800951e <_free_r+0x22>
 800955c:	6818      	ldr	r0, [r3, #0]
 800955e:	685b      	ldr	r3, [r3, #4]
 8009560:	6053      	str	r3, [r2, #4]
 8009562:	4408      	add	r0, r1
 8009564:	6010      	str	r0, [r2, #0]
 8009566:	e7da      	b.n	800951e <_free_r+0x22>
 8009568:	d902      	bls.n	8009570 <_free_r+0x74>
 800956a:	230c      	movs	r3, #12
 800956c:	602b      	str	r3, [r5, #0]
 800956e:	e7d6      	b.n	800951e <_free_r+0x22>
 8009570:	6820      	ldr	r0, [r4, #0]
 8009572:	1821      	adds	r1, r4, r0
 8009574:	428b      	cmp	r3, r1
 8009576:	bf04      	itt	eq
 8009578:	6819      	ldreq	r1, [r3, #0]
 800957a:	685b      	ldreq	r3, [r3, #4]
 800957c:	6063      	str	r3, [r4, #4]
 800957e:	bf04      	itt	eq
 8009580:	1809      	addeq	r1, r1, r0
 8009582:	6021      	streq	r1, [r4, #0]
 8009584:	6054      	str	r4, [r2, #4]
 8009586:	e7ca      	b.n	800951e <_free_r+0x22>
 8009588:	bd38      	pop	{r3, r4, r5, pc}
 800958a:	bf00      	nop
 800958c:	2000095c 	.word	0x2000095c

08009590 <_init>:
 8009590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009592:	bf00      	nop
 8009594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009596:	bc08      	pop	{r3}
 8009598:	469e      	mov	lr, r3
 800959a:	4770      	bx	lr

0800959c <_fini>:
 800959c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800959e:	bf00      	nop
 80095a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095a2:	bc08      	pop	{r3}
 80095a4:	469e      	mov	lr, r3
 80095a6:	4770      	bx	lr
