
led_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08008b80  08008b80  00009b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b9c  08008b9c  0000a07c  2**0
                  CONTENTS
  4 .ARM          00000008  08008b9c  08008b9c  00009b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ba4  08008ba4  0000a07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ba4  08008ba4  00009ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ba8  08008ba8  00009ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08008bac  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a07c  2**0
                  CONTENTS
 10 .bss          00000a1c  2000007c  2000007c  0000a07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000a98  20000a98  0000a07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014c24  00000000  00000000  0000a0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038ae  00000000  00000000  0001ecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00022580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d2b  00000000  00000000  000236d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002340c  00000000  00000000  000243fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018528  00000000  00000000  00047807  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8a6  00000000  00000000  0005fd2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b5d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b04  00000000  00000000  0012b618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0013011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008b68 	.word	0x08008b68

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08008b68 	.word	0x08008b68

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fc1a 	bl	8000cf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f80e 	bl	80004e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f90a 	bl	80006dc <MX_GPIO_Init>
  MX_I2C1_Init();
 80004c8:	f000 f874 	bl	80005b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004cc:	f000 f8a0 	bl	8000610 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8ce 	bl	8000670 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f007 fef2 	bl	80082bc <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004d8:	f007 ff16 	bl	8008308 <MX_USB_HOST_Process>
 80004dc:	e7fc      	b.n	80004d8 <main+0x20>
	...

080004e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b094      	sub	sp, #80	@ 0x50
 80004e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004e6:	f107 0320 	add.w	r3, r7, #32
 80004ea:	2230      	movs	r2, #48	@ 0x30
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f008 faac 	bl	8008a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004f4:	f107 030c 	add.w	r3, r7, #12
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000504:	2300      	movs	r3, #0
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	4b28      	ldr	r3, [pc, #160]	@ (80005ac <SystemClock_Config+0xcc>)
 800050a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800050c:	4a27      	ldr	r2, [pc, #156]	@ (80005ac <SystemClock_Config+0xcc>)
 800050e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000512:	6413      	str	r3, [r2, #64]	@ 0x40
 8000514:	4b25      	ldr	r3, [pc, #148]	@ (80005ac <SystemClock_Config+0xcc>)
 8000516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000518:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000520:	2300      	movs	r3, #0
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	4b22      	ldr	r3, [pc, #136]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a21      	ldr	r2, [pc, #132]	@ (80005b0 <SystemClock_Config+0xd0>)
 800052a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800052e:	6013      	str	r3, [r2, #0]
 8000530:	4b1f      	ldr	r3, [pc, #124]	@ (80005b0 <SystemClock_Config+0xd0>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000538:	607b      	str	r3, [r7, #4]
 800053a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800053c:	2301      	movs	r3, #1
 800053e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000540:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000544:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000546:	2302      	movs	r3, #2
 8000548:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800054a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800054e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000550:	2308      	movs	r3, #8
 8000552:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000554:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000558:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800055a:	2302      	movs	r3, #2
 800055c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800055e:	2307      	movs	r3, #7
 8000560:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fe6c 	bl	8004244 <HAL_RCC_OscConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000572:	f000 f9cf 	bl	8000914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000576:	230f      	movs	r3, #15
 8000578:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800057a:	2302      	movs	r3, #2
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800057e:	2300      	movs	r3, #0
 8000580:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000582:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000588:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2105      	movs	r1, #5
 8000594:	4618      	mov	r0, r3
 8000596:	f004 f8cd 	bl	8004734 <HAL_RCC_ClockConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005a0:	f000 f9b8 	bl	8000914 <Error_Handler>
  }
}
 80005a4:	bf00      	nop
 80005a6:	3750      	adds	r7, #80	@ 0x50
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40007000 	.word	0x40007000

080005b4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ba:	4a13      	ldr	r2, [pc, #76]	@ (8000608 <MX_I2C1_Init+0x54>)
 80005bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005be:	4b11      	ldr	r3, [pc, #68]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c0:	4a12      	ldr	r2, [pc, #72]	@ (800060c <MX_I2C1_Init+0x58>)
 80005c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80005ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005da:	2200      	movs	r2, #0
 80005dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005de:	4b09      	ldr	r3, [pc, #36]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005e4:	4b07      	ldr	r3, [pc, #28]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ea:	4b06      	ldr	r3, [pc, #24]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005f0:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_I2C1_Init+0x50>)
 80005f2:	f003 f843 	bl	800367c <HAL_I2C_Init>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005fc:	f000 f98a 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	20000098 	.word	0x20000098
 8000608:	40005400 	.word	0x40005400
 800060c:	000186a0 	.word	0x000186a0

08000610 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000614:	4b13      	ldr	r3, [pc, #76]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000616:	4a14      	ldr	r2, [pc, #80]	@ (8000668 <MX_I2S3_Init+0x58>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800061a:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_I2S3_Init+0x54>)
 800061c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000620:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000622:	4b10      	ldr	r3, [pc, #64]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_I2S3_Init+0x54>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800062e:	4b0d      	ldr	r3, [pc, #52]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000630:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000634:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000638:	4a0c      	ldr	r2, [pc, #48]	@ (800066c <MX_I2S3_Init+0x5c>)
 800063a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800063c:	4b09      	ldr	r3, [pc, #36]	@ (8000664 <MX_I2S3_Init+0x54>)
 800063e:	2200      	movs	r2, #0
 8000640:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000642:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000644:	2200      	movs	r2, #0
 8000646:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000648:	4b06      	ldr	r3, [pc, #24]	@ (8000664 <MX_I2S3_Init+0x54>)
 800064a:	2200      	movs	r2, #0
 800064c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800064e:	4805      	ldr	r0, [pc, #20]	@ (8000664 <MX_I2S3_Init+0x54>)
 8000650:	f003 f958 	bl	8003904 <HAL_I2S_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800065a:	f000 f95b 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200000ec 	.word	0x200000ec
 8000668:	40003c00 	.word	0x40003c00
 800066c:	00017700 	.word	0x00017700

08000670 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000674:	4b17      	ldr	r3, [pc, #92]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000676:	4a18      	ldr	r2, [pc, #96]	@ (80006d8 <MX_SPI1_Init+0x68>)
 8000678:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800067a:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800067c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000680:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000682:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000684:	2200      	movs	r2, #0
 8000686:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000690:	2200      	movs	r2, #0
 8000692:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_SPI1_Init+0x64>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_SPI1_Init+0x64>)
 800069c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006a2:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006bc:	220a      	movs	r2, #10
 80006be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_SPI1_Init+0x64>)
 80006c2:	f004 fb85 	bl	8004dd0 <HAL_SPI_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80006cc:	f000 f922 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000134 	.word	0x20000134
 80006d8:	40013000 	.word	0x40013000

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08c      	sub	sp, #48	@ 0x30
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 031c 	add.w	r3, r7, #28
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	4b76      	ldr	r3, [pc, #472]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a75      	ldr	r2, [pc, #468]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 80006fc:	f043 0310 	orr.w	r3, r3, #16
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b73      	ldr	r3, [pc, #460]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0310 	and.w	r3, r3, #16
 800070a:	61bb      	str	r3, [r7, #24]
 800070c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
 8000712:	4b6f      	ldr	r3, [pc, #444]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a6e      	ldr	r2, [pc, #440]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000718:	f043 0304 	orr.w	r3, r3, #4
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b6c      	ldr	r3, [pc, #432]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0304 	and.w	r3, r3, #4
 8000726:	617b      	str	r3, [r7, #20]
 8000728:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
 800072e:	4b68      	ldr	r3, [pc, #416]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a67      	ldr	r2, [pc, #412]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000734:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b65      	ldr	r3, [pc, #404]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000742:	613b      	str	r3, [r7, #16]
 8000744:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	60fb      	str	r3, [r7, #12]
 800074a:	4b61      	ldr	r3, [pc, #388]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a60      	ldr	r2, [pc, #384]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b5e      	ldr	r3, [pc, #376]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f003 0301 	and.w	r3, r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
 8000766:	4b5a      	ldr	r3, [pc, #360]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a59      	ldr	r2, [pc, #356]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 800076c:	f043 0302 	orr.w	r3, r3, #2
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b57      	ldr	r3, [pc, #348]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b53      	ldr	r3, [pc, #332]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a52      	ldr	r2, [pc, #328]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000788:	f043 0308 	orr.w	r3, r3, #8
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b50      	ldr	r3, [pc, #320]	@ (80008d0 <MX_GPIO_Init+0x1f4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f003 0308 	and.w	r3, r3, #8
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	484d      	ldr	r0, [pc, #308]	@ (80008d4 <MX_GPIO_Init+0x1f8>)
 80007a0:	f000 fdec 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2101      	movs	r1, #1
 80007a8:	484b      	ldr	r0, [pc, #300]	@ (80008d8 <MX_GPIO_Init+0x1fc>)
 80007aa:	f000 fde7 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007ae:	2200      	movs	r2, #0
 80007b0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007b4:	4849      	ldr	r0, [pc, #292]	@ (80008dc <MX_GPIO_Init+0x200>)
 80007b6:	f000 fde1 	bl	800137c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ba:	2308      	movs	r3, #8
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 031c 	add.w	r3, r7, #28
 80007ce:	4619      	mov	r1, r3
 80007d0:	4840      	ldr	r0, [pc, #256]	@ (80008d4 <MX_GPIO_Init+0x1f8>)
 80007d2:	f000 fc37 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80007d6:	2301      	movs	r3, #1
 80007d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007da:	2301      	movs	r3, #1
 80007dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007de:	2300      	movs	r3, #0
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 031c 	add.w	r3, r7, #28
 80007ea:	4619      	mov	r1, r3
 80007ec:	483a      	ldr	r0, [pc, #232]	@ (80008d8 <MX_GPIO_Init+0x1fc>)
 80007ee:	f000 fc29 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80007f2:	2308      	movs	r3, #8
 80007f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f6:	2302      	movs	r3, #2
 80007f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fa:	2300      	movs	r3, #0
 80007fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fe:	2300      	movs	r3, #0
 8000800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000802:	2305      	movs	r3, #5
 8000804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	4619      	mov	r1, r3
 800080c:	4832      	ldr	r0, [pc, #200]	@ (80008d8 <MX_GPIO_Init+0x1fc>)
 800080e:	f000 fc19 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000812:	2301      	movs	r3, #1
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000816:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	482e      	ldr	r0, [pc, #184]	@ (80008e0 <MX_GPIO_Init+0x204>)
 8000828:	f000 fc0c 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800082c:	2304      	movs	r3, #4
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000830:	2300      	movs	r3, #0
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	4829      	ldr	r0, [pc, #164]	@ (80008e4 <MX_GPIO_Init+0x208>)
 8000840:	f000 fc00 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000844:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000856:	2305      	movs	r3, #5
 8000858:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4820      	ldr	r0, [pc, #128]	@ (80008e4 <MX_GPIO_Init+0x208>)
 8000862:	f000 fbef 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000866:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800086a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000878:	f107 031c 	add.w	r3, r7, #28
 800087c:	4619      	mov	r1, r3
 800087e:	4817      	ldr	r0, [pc, #92]	@ (80008dc <MX_GPIO_Init+0x200>)
 8000880:	f000 fbe0 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000884:	2320      	movs	r3, #32
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	@ (80008dc <MX_GPIO_Init+0x200>)
 8000898:	f000 fbd4 	bl	8001044 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800089c:	2302      	movs	r3, #2
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008a0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <MX_GPIO_Init+0x1f8>)
 80008b2:	f000 fbc7 	bl	8001044 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 fb8b 	bl	8000fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008c0:	2006      	movs	r0, #6
 80008c2:	f000 fba4 	bl	800100e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	@ 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40020800 	.word	0x40020800
 80008dc:	40020c00 	.word	0x40020c00
 80008e0:	40020000 	.word	0x40020000
 80008e4:	40020400 	.word	0x40020400

080008e8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin == GPIO_PIN_0) {
 80008f2:	88fb      	ldrh	r3, [r7, #6]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d105      	bne.n	8000904 <HAL_GPIO_EXTI_Callback+0x1c>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80008f8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008fc:	4804      	ldr	r0, [pc, #16]	@ (8000910 <HAL_GPIO_EXTI_Callback+0x28>)
 80008fe:	f000 fd56 	bl	80013ae <HAL_GPIO_TogglePin>
    }
	else {

		__NOP();
	}
}
 8000902:	e000      	b.n	8000906 <HAL_GPIO_EXTI_Callback+0x1e>
		__NOP();
 8000904:	bf00      	nop
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40020c00 	.word	0x40020c00

08000914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000918:	b672      	cpsid	i
}
 800091a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <Error_Handler+0x8>

08000920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	4a0f      	ldr	r2, [pc, #60]	@ (800096c <HAL_MspInit+0x4c>)
 8000930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000934:	6453      	str	r3, [r2, #68]	@ 0x44
 8000936:	4b0d      	ldr	r3, [pc, #52]	@ (800096c <HAL_MspInit+0x4c>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800093e:	607b      	str	r3, [r7, #4]
 8000940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	603b      	str	r3, [r7, #0]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	4a08      	ldr	r2, [pc, #32]	@ (800096c <HAL_MspInit+0x4c>)
 800094c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000950:	6413      	str	r3, [r2, #64]	@ 0x40
 8000952:	4b06      	ldr	r3, [pc, #24]	@ (800096c <HAL_MspInit+0x4c>)
 8000954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	603b      	str	r3, [r7, #0]
 800095c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800095e:	2007      	movs	r0, #7
 8000960:	f000 fb2e 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800

08000970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b08a      	sub	sp, #40	@ 0x28
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a19      	ldr	r2, [pc, #100]	@ (80009f4 <HAL_I2C_MspInit+0x84>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d12c      	bne.n	80009ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	4a17      	ldr	r2, [pc, #92]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009a2:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009ae:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009b4:	2312      	movs	r3, #18
 80009b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009c0:	2304      	movs	r3, #4
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c4:	f107 0314 	add.w	r3, r7, #20
 80009c8:	4619      	mov	r1, r3
 80009ca:	480c      	ldr	r0, [pc, #48]	@ (80009fc <HAL_I2C_MspInit+0x8c>)
 80009cc:	f000 fb3a 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009d0:	2300      	movs	r3, #0
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	4b08      	ldr	r3, [pc, #32]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 80009da:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <HAL_I2C_MspInit+0x88>)
 80009e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80009ec:	bf00      	nop
 80009ee:	3728      	adds	r7, #40	@ 0x28
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40005400 	.word	0x40005400
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40020400 	.word	0x40020400

08000a00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a31      	ldr	r2, [pc, #196]	@ (8000af0 <HAL_I2S_MspInit+0xf0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d15a      	bne.n	8000ae6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a34:	23c0      	movs	r3, #192	@ 0xc0
 8000a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 f883 	bl	8004b4c <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a4c:	f7ff ff62 	bl	8000914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a26      	ldr	r2, [pc, #152]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <HAL_I2S_MspInit+0xf8>)
 8000ac0:	f000 fac0 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ac4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <HAL_I2S_MspInit+0xfc>)
 8000ae2:	f000 faaf 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40003c00 	.word	0x40003c00
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_SPI_MspInit+0x8c>)
 8000b76:	f000 fa65 	bl	8001044 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <NMI_Handler+0x4>

08000b98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <BusFault_Handler+0x4>

08000bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <UsageFault_Handler+0x4>

08000bb8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be6:	f000 f8d7 	bl	8000d98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}

08000bee <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fbf6 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <OTG_FS_IRQHandler+0x10>)
 8000c02:	f000 fee7 	bl	80019d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000570 	.word	0x20000570

08000c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c18:	4a14      	ldr	r2, [pc, #80]	@ (8000c6c <_sbrk+0x5c>)
 8000c1a:	4b15      	ldr	r3, [pc, #84]	@ (8000c70 <_sbrk+0x60>)
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c24:	4b13      	ldr	r3, [pc, #76]	@ (8000c74 <_sbrk+0x64>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d102      	bne.n	8000c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <_sbrk+0x64>)
 8000c2e:	4a12      	ldr	r2, [pc, #72]	@ (8000c78 <_sbrk+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c32:	4b10      	ldr	r3, [pc, #64]	@ (8000c74 <_sbrk+0x64>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	4413      	add	r3, r2
 8000c3a:	693a      	ldr	r2, [r7, #16]
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d207      	bcs.n	8000c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c40:	f007 ff1c 	bl	8008a7c <__errno>
 8000c44:	4603      	mov	r3, r0
 8000c46:	220c      	movs	r2, #12
 8000c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4e:	e009      	b.n	8000c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c50:	4b08      	ldr	r3, [pc, #32]	@ (8000c74 <_sbrk+0x64>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c56:	4b07      	ldr	r3, [pc, #28]	@ (8000c74 <_sbrk+0x64>)
 8000c58:	681a      	ldr	r2, [r3, #0]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4413      	add	r3, r2
 8000c5e:	4a05      	ldr	r2, [pc, #20]	@ (8000c74 <_sbrk+0x64>)
 8000c60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c62:	68fb      	ldr	r3, [r7, #12]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3718      	adds	r7, #24
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	20020000 	.word	0x20020000
 8000c70:	00000400 	.word	0x00000400
 8000c74:	2000018c 	.word	0x2000018c
 8000c78:	20000a98 	.word	0x20000a98

08000c7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <SystemInit+0x20>)
 8000c82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c86:	4a05      	ldr	r2, [pc, #20]	@ (8000c9c <SystemInit+0x20>)
 8000c88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c90:	bf00      	nop
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ca4:	f7ff ffea 	bl	8000c7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	@ (8000cdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	@ (8000ce0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	@ (8000ce4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cec <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f007 fedb 	bl	8008a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd2:	f7ff fbf1 	bl	80004b8 <main>
  bx  lr    
 8000cd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000cd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ce4:	08008bac 	.word	0x08008bac
  ldr r2, =_sbss
 8000ce8:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000cec:	20000a98 	.word	0x20000a98

08000cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC_IRQHandler>
	...

08000cf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf8:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_Init+0x40>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d34 <HAL_Init+0x40>)
 8000cfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0a      	ldr	r2, [pc, #40]	@ (8000d34 <HAL_Init+0x40>)
 8000d0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d10:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a07      	ldr	r2, [pc, #28]	@ (8000d34 <HAL_Init+0x40>)
 8000d16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d1c:	2003      	movs	r0, #3
 8000d1e:	f000 f94f 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d22:	2000      	movs	r0, #0
 8000d24:	f000 f808 	bl	8000d38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d28:	f7ff fdfa 	bl	8000920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40023c00 	.word	0x40023c00

08000d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <HAL_InitTick+0x54>)
 8000d42:	681a      	ldr	r2, [r3, #0]
 8000d44:	4b12      	ldr	r3, [pc, #72]	@ (8000d90 <HAL_InitTick+0x58>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f967 	bl	800102a <HAL_SYSTICK_Config>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e00e      	b.n	8000d84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b0f      	cmp	r3, #15
 8000d6a:	d80a      	bhi.n	8000d82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	f04f 30ff 	mov.w	r0, #4294967295
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4a06      	ldr	r2, [pc, #24]	@ (8000d94 <HAL_InitTick+0x5c>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e000      	b.n	8000d84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000008 	.word	0x20000008
 8000d94:	20000004 	.word	0x20000004

08000d98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <HAL_IncTick+0x20>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	4b06      	ldr	r3, [pc, #24]	@ (8000dbc <HAL_IncTick+0x24>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	4413      	add	r3, r2
 8000da8:	4a04      	ldr	r2, [pc, #16]	@ (8000dbc <HAL_IncTick+0x24>)
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	20000008 	.word	0x20000008
 8000dbc:	20000190 	.word	0x20000190

08000dc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc4:	4b03      	ldr	r3, [pc, #12]	@ (8000dd4 <HAL_GetTick+0x14>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000190 	.word	0x20000190

08000dd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff ffee 	bl	8000dc0 <HAL_GetTick>
 8000de4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df0:	d005      	beq.n	8000dfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df2:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <HAL_Delay+0x44>)
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dfe:	bf00      	nop
 8000e00:	f7ff ffde 	bl	8000dc0 <HAL_GetTick>
 8000e04:	4602      	mov	r2, r0
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	d8f7      	bhi.n	8000e00 <HAL_Delay+0x28>
  {
  }
}
 8000e10:	bf00      	nop
 8000e12:	bf00      	nop
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000008 	.word	0x20000008

08000e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e32:	68db      	ldr	r3, [r3, #12]
 8000e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e36:	68ba      	ldr	r2, [r7, #8]
 8000e38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e52:	4a04      	ldr	r2, [pc, #16]	@ (8000e64 <__NVIC_SetPriorityGrouping+0x44>)
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	60d3      	str	r3, [r2, #12]
}
 8000e58:	bf00      	nop
 8000e5a:	3714      	adds	r7, #20
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e6c:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <__NVIC_GetPriorityGrouping+0x18>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	0a1b      	lsrs	r3, r3, #8
 8000e72:	f003 0307 	and.w	r3, r3, #7
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	e000ed00 	.word	0xe000ed00

08000e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	db0b      	blt.n	8000eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e96:	79fb      	ldrb	r3, [r7, #7]
 8000e98:	f003 021f 	and.w	r2, r3, #31
 8000e9c:	4907      	ldr	r1, [pc, #28]	@ (8000ebc <__NVIC_EnableIRQ+0x38>)
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	095b      	lsrs	r3, r3, #5
 8000ea4:	2001      	movs	r0, #1
 8000ea6:	fa00 f202 	lsl.w	r2, r0, r2
 8000eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000e100 	.word	0xe000e100

08000ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	6039      	str	r1, [r7, #0]
 8000eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db0a      	blt.n	8000eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	490c      	ldr	r1, [pc, #48]	@ (8000f0c <__NVIC_SetPriority+0x4c>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	0112      	lsls	r2, r2, #4
 8000ee0:	b2d2      	uxtb	r2, r2
 8000ee2:	440b      	add	r3, r1
 8000ee4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ee8:	e00a      	b.n	8000f00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	b2da      	uxtb	r2, r3
 8000eee:	4908      	ldr	r1, [pc, #32]	@ (8000f10 <__NVIC_SetPriority+0x50>)
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	f003 030f 	and.w	r3, r3, #15
 8000ef6:	3b04      	subs	r3, #4
 8000ef8:	0112      	lsls	r2, r2, #4
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	440b      	add	r3, r1
 8000efe:	761a      	strb	r2, [r3, #24]
}
 8000f00:	bf00      	nop
 8000f02:	370c      	adds	r7, #12
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000e100 	.word	0xe000e100
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b089      	sub	sp, #36	@ 0x24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	f1c3 0307 	rsb	r3, r3, #7
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	bf28      	it	cs
 8000f32:	2304      	movcs	r3, #4
 8000f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	3304      	adds	r3, #4
 8000f3a:	2b06      	cmp	r3, #6
 8000f3c:	d902      	bls.n	8000f44 <NVIC_EncodePriority+0x30>
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3b03      	subs	r3, #3
 8000f42:	e000      	b.n	8000f46 <NVIC_EncodePriority+0x32>
 8000f44:	2300      	movs	r3, #0
 8000f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f48:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4c:	69bb      	ldr	r3, [r7, #24]
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43da      	mvns	r2, r3
 8000f54:	68bb      	ldr	r3, [r7, #8]
 8000f56:	401a      	ands	r2, r3
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	fa01 f303 	lsl.w	r3, r1, r3
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f6c:	4313      	orrs	r3, r2
         );
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3724      	adds	r7, #36	@ 0x24
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff8e 	bl	8000ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff29 	bl	8000e20 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff3e 	bl	8000e68 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff8e 	bl	8000f14 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5d 	bl	8000ec0 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	4603      	mov	r3, r0
 8001016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff31 	bl	8000e84 <__NVIC_EnableIRQ>
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ffa2 	bl	8000f7c <SysTick_Config>
 8001038:	4603      	mov	r3, r0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	@ 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800104e:	2300      	movs	r3, #0
 8001050:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
 800105e:	e16b      	b.n	8001338 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001060:	2201      	movs	r2, #1
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	f040 815a 	bne.w	8001332 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	2b01      	cmp	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001092:	2b02      	cmp	r3, #2
 8001094:	d130      	bne.n	80010f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	005b      	lsls	r3, r3, #1
 80010a0:	2203      	movs	r2, #3
 80010a2:	fa02 f303 	lsl.w	r3, r2, r3
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	68da      	ldr	r2, [r3, #12]
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	005b      	lsls	r3, r3, #1
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69ba      	ldr	r2, [r7, #24]
 80010c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010cc:	2201      	movs	r2, #1
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	091b      	lsrs	r3, r3, #4
 80010e2:	f003 0201 	and.w	r2, r3, #1
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	69ba      	ldr	r2, [r7, #24]
 80010f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0303 	and.w	r3, r3, #3
 8001100:	2b03      	cmp	r3, #3
 8001102:	d017      	beq.n	8001134 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	2203      	movs	r2, #3
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4013      	ands	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fa02 f303 	lsl.w	r3, r2, r3
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b02      	cmp	r3, #2
 800113e:	d123      	bne.n	8001188 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	08da      	lsrs	r2, r3, #3
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	3208      	adds	r2, #8
 8001148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	220f      	movs	r2, #15
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4013      	ands	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	691a      	ldr	r2, [r3, #16]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4313      	orrs	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	08da      	lsrs	r2, r3, #3
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	3208      	adds	r2, #8
 8001182:	69b9      	ldr	r1, [r7, #24]
 8001184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	4013      	ands	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0203 	and.w	r2, r3, #3
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 80b4 	beq.w	8001332 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60fb      	str	r3, [r7, #12]
 80011ce:	4b60      	ldr	r3, [pc, #384]	@ (8001350 <HAL_GPIO_Init+0x30c>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001350 <HAL_GPIO_Init+0x30c>)
 80011d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <HAL_GPIO_Init+0x30c>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001354 <HAL_GPIO_Init+0x310>)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	089b      	lsrs	r3, r3, #2
 80011ec:	3302      	adds	r3, #2
 80011ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f003 0303 	and.w	r3, r3, #3
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	220f      	movs	r2, #15
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	43db      	mvns	r3, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4013      	ands	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a52      	ldr	r2, [pc, #328]	@ (8001358 <HAL_GPIO_Init+0x314>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a51      	ldr	r2, [pc, #324]	@ (800135c <HAL_GPIO_Init+0x318>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a50      	ldr	r2, [pc, #320]	@ (8001360 <HAL_GPIO_Init+0x31c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4f      	ldr	r2, [pc, #316]	@ (8001364 <HAL_GPIO_Init+0x320>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4e      	ldr	r2, [pc, #312]	@ (8001368 <HAL_GPIO_Init+0x324>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4d      	ldr	r2, [pc, #308]	@ (800136c <HAL_GPIO_Init+0x328>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a4c      	ldr	r2, [pc, #304]	@ (8001370 <HAL_GPIO_Init+0x32c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x20e>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a4b      	ldr	r2, [pc, #300]	@ (8001374 <HAL_GPIO_Init+0x330>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x20a>
 800124a:	2307      	movs	r3, #7
 800124c:	e00e      	b.n	800126c <HAL_GPIO_Init+0x228>
 800124e:	2308      	movs	r3, #8
 8001250:	e00c      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001252:	2306      	movs	r3, #6
 8001254:	e00a      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001256:	2305      	movs	r3, #5
 8001258:	e008      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125a:	2304      	movs	r3, #4
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x228>
 800125e:	2303      	movs	r3, #3
 8001260:	e004      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001262:	2302      	movs	r3, #2
 8001264:	e002      	b.n	800126c <HAL_GPIO_Init+0x228>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <HAL_GPIO_Init+0x228>
 800126a:	2300      	movs	r3, #0
 800126c:	69fa      	ldr	r2, [r7, #28]
 800126e:	f002 0203 	and.w	r2, r2, #3
 8001272:	0092      	lsls	r2, r2, #2
 8001274:	4093      	lsls	r3, r2
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800127c:	4935      	ldr	r1, [pc, #212]	@ (8001354 <HAL_GPIO_Init+0x310>)
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	089b      	lsrs	r3, r3, #2
 8001282:	3302      	adds	r3, #2
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128a:	4b3b      	ldr	r3, [pc, #236]	@ (8001378 <HAL_GPIO_Init+0x334>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	43db      	mvns	r3, r3
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	4013      	ands	r3, r2
 8001298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ae:	4a32      	ldr	r2, [pc, #200]	@ (8001378 <HAL_GPIO_Init+0x334>)
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b4:	4b30      	ldr	r3, [pc, #192]	@ (8001378 <HAL_GPIO_Init+0x334>)
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	43db      	mvns	r3, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4013      	ands	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d003      	beq.n	80012d8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012d8:	4a27      	ldr	r2, [pc, #156]	@ (8001378 <HAL_GPIO_Init+0x334>)
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012de:	4b26      	ldr	r3, [pc, #152]	@ (8001378 <HAL_GPIO_Init+0x334>)
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e4:	693b      	ldr	r3, [r7, #16]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001302:	4a1d      	ldr	r2, [pc, #116]	@ (8001378 <HAL_GPIO_Init+0x334>)
 8001304:	69bb      	ldr	r3, [r7, #24]
 8001306:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001308:	4b1b      	ldr	r3, [pc, #108]	@ (8001378 <HAL_GPIO_Init+0x334>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	43db      	mvns	r3, r3
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	4013      	ands	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001320:	2b00      	cmp	r3, #0
 8001322:	d003      	beq.n	800132c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800132c:	4a12      	ldr	r2, [pc, #72]	@ (8001378 <HAL_GPIO_Init+0x334>)
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	3301      	adds	r3, #1
 8001336:	61fb      	str	r3, [r7, #28]
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	2b0f      	cmp	r3, #15
 800133c:	f67f ae90 	bls.w	8001060 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001340:	bf00      	nop
 8001342:	bf00      	nop
 8001344:	3724      	adds	r7, #36	@ 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800
 8001354:	40013800 	.word	0x40013800
 8001358:	40020000 	.word	0x40020000
 800135c:	40020400 	.word	0x40020400
 8001360:	40020800 	.word	0x40020800
 8001364:	40020c00 	.word	0x40020c00
 8001368:	40021000 	.word	0x40021000
 800136c:	40021400 	.word	0x40021400
 8001370:	40021800 	.word	0x40021800
 8001374:	40021c00 	.word	0x40021c00
 8001378:	40013c00 	.word	0x40013c00

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	619a      	str	r2, [r3, #24]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ac:	4770      	bx	lr

080013ae <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ae:	b480      	push	{r7}
 80013b0:	b085      	sub	sp, #20
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	6078      	str	r0, [r7, #4]
 80013b6:	460b      	mov	r3, r1
 80013b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	695b      	ldr	r3, [r3, #20]
 80013be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c0:	887a      	ldrh	r2, [r7, #2]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4013      	ands	r3, r2
 80013c6:	041a      	lsls	r2, r3, #16
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	43d9      	mvns	r1, r3
 80013cc:	887b      	ldrh	r3, [r7, #2]
 80013ce:	400b      	ands	r3, r1
 80013d0:	431a      	orrs	r2, r3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ee:	4b08      	ldr	r3, [pc, #32]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	@ (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fa70 	bl	80008e8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af02      	add	r7, sp, #8
 800141a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e059      	b.n	80014da <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d106      	bne.n	8001446 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f006 ff99 	bl	8008378 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2203      	movs	r2, #3
 800144a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001454:	d102      	bne.n	800145c <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2200      	movs	r2, #0
 800145a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fdb3 	bl	8004fcc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6818      	ldr	r0, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	7c1a      	ldrb	r2, [r3, #16]
 800146e:	f88d 2000 	strb.w	r2, [sp]
 8001472:	3304      	adds	r3, #4
 8001474:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001476:	f003 fd34 	bl	8004ee2 <USB_CoreInit>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d005      	beq.n	800148c <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2202      	movs	r2, #2
 8001484:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e026      	b.n	80014da <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2101      	movs	r1, #1
 8001492:	4618      	mov	r0, r3
 8001494:	f003 fdab 	bl	8004fee <USB_SetCurrentMode>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2202      	movs	r2, #2
 80014a2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e017      	b.n	80014da <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7c1a      	ldrb	r2, [r3, #16]
 80014b2:	f88d 2000 	strb.w	r2, [sp]
 80014b6:	3304      	adds	r3, #4
 80014b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ba:	f003 ff4d 	bl	8005358 <USB_HostInit>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d005      	beq.n	80014d0 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2202      	movs	r2, #2
 80014c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e004      	b.n	80014da <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2201      	movs	r2, #1
 80014d4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80014e2:	b590      	push	{r4, r7, lr}
 80014e4:	b08b      	sub	sp, #44	@ 0x2c
 80014e6:	af04      	add	r7, sp, #16
 80014e8:	6078      	str	r0, [r7, #4]
 80014ea:	4608      	mov	r0, r1
 80014ec:	4611      	mov	r1, r2
 80014ee:	461a      	mov	r2, r3
 80014f0:	4603      	mov	r3, r0
 80014f2:	70fb      	strb	r3, [r7, #3]
 80014f4:	460b      	mov	r3, r1
 80014f6:	70bb      	strb	r3, [r7, #2]
 80014f8:	4613      	mov	r3, r2
 80014fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80014fc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80014fe:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001506:	2b01      	cmp	r3, #1
 8001508:	d101      	bne.n	800150e <HAL_HCD_HC_Init+0x2c>
 800150a:	2302      	movs	r3, #2
 800150c:	e09d      	b.n	800164a <HAL_HCD_HC_Init+0x168>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2201      	movs	r2, #1
 8001512:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001516:	78fa      	ldrb	r2, [r7, #3]
 8001518:	6879      	ldr	r1, [r7, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	440b      	add	r3, r1
 8001524:	3319      	adds	r3, #25
 8001526:	2200      	movs	r2, #0
 8001528:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800152a:	78fa      	ldrb	r2, [r7, #3]
 800152c:	6879      	ldr	r1, [r7, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	1a9b      	subs	r3, r3, r2
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	440b      	add	r3, r1
 8001538:	3314      	adds	r3, #20
 800153a:	787a      	ldrb	r2, [r7, #1]
 800153c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800153e:	78fa      	ldrb	r2, [r7, #3]
 8001540:	6879      	ldr	r1, [r7, #4]
 8001542:	4613      	mov	r3, r2
 8001544:	011b      	lsls	r3, r3, #4
 8001546:	1a9b      	subs	r3, r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	440b      	add	r3, r1
 800154c:	3315      	adds	r3, #21
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001552:	78fa      	ldrb	r2, [r7, #3]
 8001554:	6879      	ldr	r1, [r7, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1a9b      	subs	r3, r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	440b      	add	r3, r1
 8001560:	3326      	adds	r3, #38	@ 0x26
 8001562:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001566:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	78bb      	ldrb	r3, [r7, #2]
 800156c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001570:	b2d8      	uxtb	r0, r3
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	011b      	lsls	r3, r3, #4
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3316      	adds	r3, #22
 8001580:	4602      	mov	r2, r0
 8001582:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001584:	78fb      	ldrb	r3, [r7, #3]
 8001586:	4619      	mov	r1, r3
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f000 fbc7 	bl	8001d1c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800158e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001592:	2b00      	cmp	r3, #0
 8001594:	da0a      	bge.n	80015ac <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001596:	78fa      	ldrb	r2, [r7, #3]
 8001598:	6879      	ldr	r1, [r7, #4]
 800159a:	4613      	mov	r3, r2
 800159c:	011b      	lsls	r3, r3, #4
 800159e:	1a9b      	subs	r3, r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	3317      	adds	r3, #23
 80015a6:	2201      	movs	r2, #1
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	e009      	b.n	80015c0 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80015ac:	78fa      	ldrb	r2, [r7, #3]
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	011b      	lsls	r3, r3, #4
 80015b4:	1a9b      	subs	r3, r3, r2
 80015b6:	009b      	lsls	r3, r3, #2
 80015b8:	440b      	add	r3, r1
 80015ba:	3317      	adds	r3, #23
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 f82b 	bl	8005620 <USB_GetHostSpeed>
 80015ca:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80015cc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d10b      	bne.n	80015ec <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80015d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d107      	bne.n	80015ec <HAL_HCD_HC_Init+0x10a>
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d104      	bne.n	80015ec <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	2bbc      	cmp	r3, #188	@ 0xbc
 80015e6:	d901      	bls.n	80015ec <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80015e8:	23bc      	movs	r3, #188	@ 0xbc
 80015ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80015ec:	78fa      	ldrb	r2, [r7, #3]
 80015ee:	6879      	ldr	r1, [r7, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	1a9b      	subs	r3, r3, r2
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	440b      	add	r3, r1
 80015fa:	3318      	adds	r3, #24
 80015fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001600:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	b298      	uxth	r0, r3
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	011b      	lsls	r3, r3, #4
 800160e:	1a9b      	subs	r3, r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	3328      	adds	r3, #40	@ 0x28
 8001616:	4602      	mov	r2, r0
 8001618:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	b29b      	uxth	r3, r3
 8001622:	787c      	ldrb	r4, [r7, #1]
 8001624:	78ba      	ldrb	r2, [r7, #2]
 8001626:	78f9      	ldrb	r1, [r7, #3]
 8001628:	9302      	str	r3, [sp, #8]
 800162a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4623      	mov	r3, r4
 8001638:	f004 f81a 	bl	8005670 <USB_HC_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001648:	7bfb      	ldrb	r3, [r7, #15]
}
 800164a:	4618      	mov	r0, r3
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}

08001652 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	6078      	str	r0, [r7, #4]
 800165a:	460b      	mov	r3, r1
 800165c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800165e:	2300      	movs	r3, #0
 8001660:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_HCD_HC_Halt+0x1e>
 800166c:	2302      	movs	r3, #2
 800166e:	e00f      	b.n	8001690 <HAL_HCD_HC_Halt+0x3e>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	78fa      	ldrb	r2, [r7, #3]
 800167e:	4611      	mov	r1, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f004 fbac 	bl	8005dde <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800168e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	70fb      	strb	r3, [r7, #3]
 80016aa:	460b      	mov	r3, r1
 80016ac:	70bb      	strb	r3, [r7, #2]
 80016ae:	4613      	mov	r3, r2
 80016b0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80016b2:	78fa      	ldrb	r2, [r7, #3]
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	4613      	mov	r3, r2
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	1a9b      	subs	r3, r3, r2
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	440b      	add	r3, r1
 80016c0:	3317      	adds	r3, #23
 80016c2:	78ba      	ldrb	r2, [r7, #2]
 80016c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80016c6:	78fa      	ldrb	r2, [r7, #3]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	1a9b      	subs	r3, r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	440b      	add	r3, r1
 80016d4:	3326      	adds	r3, #38	@ 0x26
 80016d6:	787a      	ldrb	r2, [r7, #1]
 80016d8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80016da:	7c3b      	ldrb	r3, [r7, #16]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d114      	bne.n	800170a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80016e0:	78fa      	ldrb	r2, [r7, #3]
 80016e2:	6879      	ldr	r1, [r7, #4]
 80016e4:	4613      	mov	r3, r2
 80016e6:	011b      	lsls	r3, r3, #4
 80016e8:	1a9b      	subs	r3, r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	440b      	add	r3, r1
 80016ee:	332a      	adds	r3, #42	@ 0x2a
 80016f0:	2203      	movs	r2, #3
 80016f2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80016f4:	78fa      	ldrb	r2, [r7, #3]
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	1a9b      	subs	r3, r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3319      	adds	r3, #25
 8001704:	7f3a      	ldrb	r2, [r7, #28]
 8001706:	701a      	strb	r2, [r3, #0]
 8001708:	e009      	b.n	800171e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	1a9b      	subs	r3, r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	332a      	adds	r3, #42	@ 0x2a
 800171a:	2202      	movs	r2, #2
 800171c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800171e:	787b      	ldrb	r3, [r7, #1]
 8001720:	2b03      	cmp	r3, #3
 8001722:	f200 8102 	bhi.w	800192a <HAL_HCD_HC_SubmitRequest+0x292>
 8001726:	a201      	add	r2, pc, #4	@ (adr r2, 800172c <HAL_HCD_HC_SubmitRequest+0x94>)
 8001728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172c:	0800173d 	.word	0x0800173d
 8001730:	08001915 	.word	0x08001915
 8001734:	08001801 	.word	0x08001801
 8001738:	0800188b 	.word	0x0800188b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800173c:	7c3b      	ldrb	r3, [r7, #16]
 800173e:	2b01      	cmp	r3, #1
 8001740:	f040 80f5 	bne.w	800192e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001744:	78bb      	ldrb	r3, [r7, #2]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d12d      	bne.n	80017a6 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800174a:	8b3b      	ldrh	r3, [r7, #24]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d109      	bne.n	8001764 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001750:	78fa      	ldrb	r2, [r7, #3]
 8001752:	6879      	ldr	r1, [r7, #4]
 8001754:	4613      	mov	r3, r2
 8001756:	011b      	lsls	r3, r3, #4
 8001758:	1a9b      	subs	r3, r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	333d      	adds	r3, #61	@ 0x3d
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001764:	78fa      	ldrb	r2, [r7, #3]
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	4613      	mov	r3, r2
 800176a:	011b      	lsls	r3, r3, #4
 800176c:	1a9b      	subs	r3, r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	333d      	adds	r3, #61	@ 0x3d
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d10a      	bne.n	8001790 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800177a:	78fa      	ldrb	r2, [r7, #3]
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4613      	mov	r3, r2
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	1a9b      	subs	r3, r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	332a      	adds	r3, #42	@ 0x2a
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800178e:	e0ce      	b.n	800192e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001790:	78fa      	ldrb	r2, [r7, #3]
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	1a9b      	subs	r3, r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	332a      	adds	r3, #42	@ 0x2a
 80017a0:	2202      	movs	r2, #2
 80017a2:	701a      	strb	r2, [r3, #0]
      break;
 80017a4:	e0c3      	b.n	800192e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80017a6:	78fa      	ldrb	r2, [r7, #3]
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4613      	mov	r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	1a9b      	subs	r3, r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	440b      	add	r3, r1
 80017b4:	331a      	adds	r3, #26
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	f040 80b8 	bne.w	800192e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	333c      	adds	r3, #60	@ 0x3c
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10a      	bne.n	80017ea <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	6879      	ldr	r1, [r7, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	011b      	lsls	r3, r3, #4
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	332a      	adds	r3, #42	@ 0x2a
 80017e4:	2200      	movs	r2, #0
 80017e6:	701a      	strb	r2, [r3, #0]
      break;
 80017e8:	e0a1      	b.n	800192e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80017ea:	78fa      	ldrb	r2, [r7, #3]
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	1a9b      	subs	r3, r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	440b      	add	r3, r1
 80017f8:	332a      	adds	r3, #42	@ 0x2a
 80017fa:	2202      	movs	r2, #2
 80017fc:	701a      	strb	r2, [r3, #0]
      break;
 80017fe:	e096      	b.n	800192e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001800:	78bb      	ldrb	r3, [r7, #2]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d120      	bne.n	8001848 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001806:	78fa      	ldrb	r2, [r7, #3]
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	011b      	lsls	r3, r3, #4
 800180e:	1a9b      	subs	r3, r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	333d      	adds	r3, #61	@ 0x3d
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d10a      	bne.n	8001832 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800181c:	78fa      	ldrb	r2, [r7, #3]
 800181e:	6879      	ldr	r1, [r7, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	011b      	lsls	r3, r3, #4
 8001824:	1a9b      	subs	r3, r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	440b      	add	r3, r1
 800182a:	332a      	adds	r3, #42	@ 0x2a
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001830:	e07e      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001832:	78fa      	ldrb	r2, [r7, #3]
 8001834:	6879      	ldr	r1, [r7, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	011b      	lsls	r3, r3, #4
 800183a:	1a9b      	subs	r3, r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	440b      	add	r3, r1
 8001840:	332a      	adds	r3, #42	@ 0x2a
 8001842:	2202      	movs	r2, #2
 8001844:	701a      	strb	r2, [r3, #0]
      break;
 8001846:	e073      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001848:	78fa      	ldrb	r2, [r7, #3]
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4613      	mov	r3, r2
 800184e:	011b      	lsls	r3, r3, #4
 8001850:	1a9b      	subs	r3, r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	333c      	adds	r3, #60	@ 0x3c
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10a      	bne.n	8001874 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800185e:	78fa      	ldrb	r2, [r7, #3]
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	4613      	mov	r3, r2
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	1a9b      	subs	r3, r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	332a      	adds	r3, #42	@ 0x2a
 800186e:	2200      	movs	r2, #0
 8001870:	701a      	strb	r2, [r3, #0]
      break;
 8001872:	e05d      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001874:	78fa      	ldrb	r2, [r7, #3]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	011b      	lsls	r3, r3, #4
 800187c:	1a9b      	subs	r3, r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	332a      	adds	r3, #42	@ 0x2a
 8001884:	2202      	movs	r2, #2
 8001886:	701a      	strb	r2, [r3, #0]
      break;
 8001888:	e052      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800188a:	78bb      	ldrb	r3, [r7, #2]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d120      	bne.n	80018d2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001890:	78fa      	ldrb	r2, [r7, #3]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	1a9b      	subs	r3, r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	440b      	add	r3, r1
 800189e:	333d      	adds	r3, #61	@ 0x3d
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10a      	bne.n	80018bc <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	6879      	ldr	r1, [r7, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	011b      	lsls	r3, r3, #4
 80018ae:	1a9b      	subs	r3, r3, r2
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	440b      	add	r3, r1
 80018b4:	332a      	adds	r3, #42	@ 0x2a
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ba:	e039      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018bc:	78fa      	ldrb	r2, [r7, #3]
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	4613      	mov	r3, r2
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	1a9b      	subs	r3, r3, r2
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	440b      	add	r3, r1
 80018ca:	332a      	adds	r3, #42	@ 0x2a
 80018cc:	2202      	movs	r2, #2
 80018ce:	701a      	strb	r2, [r3, #0]
      break;
 80018d0:	e02e      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80018d2:	78fa      	ldrb	r2, [r7, #3]
 80018d4:	6879      	ldr	r1, [r7, #4]
 80018d6:	4613      	mov	r3, r2
 80018d8:	011b      	lsls	r3, r3, #4
 80018da:	1a9b      	subs	r3, r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	333c      	adds	r3, #60	@ 0x3c
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d10a      	bne.n	80018fe <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018e8:	78fa      	ldrb	r2, [r7, #3]
 80018ea:	6879      	ldr	r1, [r7, #4]
 80018ec:	4613      	mov	r3, r2
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	1a9b      	subs	r3, r3, r2
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	440b      	add	r3, r1
 80018f6:	332a      	adds	r3, #42	@ 0x2a
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
      break;
 80018fc:	e018      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018fe:	78fa      	ldrb	r2, [r7, #3]
 8001900:	6879      	ldr	r1, [r7, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	011b      	lsls	r3, r3, #4
 8001906:	1a9b      	subs	r3, r3, r2
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	440b      	add	r3, r1
 800190c:	332a      	adds	r3, #42	@ 0x2a
 800190e:	2202      	movs	r2, #2
 8001910:	701a      	strb	r2, [r3, #0]
      break;
 8001912:	e00d      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001914:	78fa      	ldrb	r2, [r7, #3]
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4613      	mov	r3, r2
 800191a:	011b      	lsls	r3, r3, #4
 800191c:	1a9b      	subs	r3, r3, r2
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	440b      	add	r3, r1
 8001922:	332a      	adds	r3, #42	@ 0x2a
 8001924:	2200      	movs	r2, #0
 8001926:	701a      	strb	r2, [r3, #0]
      break;
 8001928:	e002      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800192a:	bf00      	nop
 800192c:	e000      	b.n	8001930 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800192e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	332c      	adds	r3, #44	@ 0x2c
 8001940:	697a      	ldr	r2, [r7, #20]
 8001942:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	8b39      	ldrh	r1, [r7, #24]
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	011b      	lsls	r3, r3, #4
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4403      	add	r3, r0
 8001954:	3334      	adds	r3, #52	@ 0x34
 8001956:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	334c      	adds	r3, #76	@ 0x4c
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3338      	adds	r3, #56	@ 0x38
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	4613      	mov	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	1a9b      	subs	r3, r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	440b      	add	r3, r1
 800198e:	3315      	adds	r3, #21
 8001990:	78fa      	ldrb	r2, [r7, #3]
 8001992:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	1a9b      	subs	r3, r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	334d      	adds	r3, #77	@ 0x4d
 80019a4:	2200      	movs	r2, #0
 80019a6:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6818      	ldr	r0, [r3, #0]
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	4613      	mov	r3, r2
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	1a9b      	subs	r3, r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	3310      	adds	r3, #16
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	4413      	add	r3, r2
 80019bc:	1d19      	adds	r1, r3, #4
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	799b      	ldrb	r3, [r3, #6]
 80019c2:	461a      	mov	r2, r3
 80019c4:	f003 ff80 	bl	80058c8 <USB_HC_StartXfer>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop

080019d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f003 fc75 	bl	80052da <USB_GetMode>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	f040 80fb 	bne.w	8001bee <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f003 fc38 	bl	8005272 <USB_ReadInterrupts>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	f000 80f1 	beq.w	8001bec <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f003 fc2f 	bl	8005272 <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001a1e:	d104      	bne.n	8001a2a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001a28:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f003 fc1f 	bl	8005272 <USB_ReadInterrupts>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001a3e:	d104      	bne.n	8001a4a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001a48:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f003 fc0f 	bl	8005272 <USB_ReadInterrupts>
 8001a54:	4603      	mov	r3, r0
 8001a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001a5e:	d104      	bne.n	8001a6a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f003 fbff 	bl	8005272 <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d103      	bne.n	8001a86 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	2202      	movs	r2, #2
 8001a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f003 fbf1 	bl	8005272 <USB_ReadInterrupts>
 8001a90:	4603      	mov	r3, r0
 8001a92:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001a96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001a9a:	d120      	bne.n	8001ade <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001aa4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d113      	bne.n	8001ade <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	6938      	ldr	r0, [r7, #16]
 8001aba:	f003 fae4 	bl	8005086 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001abe:	6938      	ldr	r0, [r7, #16]
 8001ac0:	f003 fb13 	bl	80050ea <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	7a5b      	ldrb	r3, [r3, #9]
 8001ac8:	2b02      	cmp	r3, #2
 8001aca:	d105      	bne.n	8001ad8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f003 fd04 	bl	80054e0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f006 fccb 	bl	8008474 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fbc5 	bl	8005272 <USB_ReadInterrupts>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001aee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001af2:	d102      	bne.n	8001afa <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f001 fd4d 	bl	8003594 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f003 fbb7 	bl	8005272 <USB_ReadInterrupts>
 8001b04:	4603      	mov	r3, r0
 8001b06:	f003 0308 	and.w	r3, r3, #8
 8001b0a:	2b08      	cmp	r3, #8
 8001b0c:	d106      	bne.n	8001b1c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f006 fc94 	bl	800843c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2208      	movs	r2, #8
 8001b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f003 fba6 	bl	8005272 <USB_ReadInterrupts>
 8001b26:	4603      	mov	r3, r0
 8001b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001b30:	d139      	bne.n	8001ba6 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 f940 	bl	8005dbc <USB_HC_ReadInterrupt>
 8001b3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e025      	b.n	8001b90 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	68ba      	ldr	r2, [r7, #8]
 8001b4c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b50:	f003 0301 	and.w	r3, r3, #1
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d018      	beq.n	8001b8a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	015a      	lsls	r2, r3, #5
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b6e:	d106      	bne.n	8001b7e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	4619      	mov	r1, r3
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f905 	bl	8001d86 <HCD_HC_IN_IRQHandler>
 8001b7c:	e005      	b.n	8001b8a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 ff67 	bl	8002a58 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	795b      	ldrb	r3, [r3, #5]
 8001b94:	461a      	mov	r2, r3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d3d3      	bcc.n	8001b44 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 fb61 	bl	8005272 <USB_ReadInterrupts>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b10      	cmp	r3, #16
 8001bb8:	d101      	bne.n	8001bbe <HAL_HCD_IRQHandler+0x1ea>
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e000      	b.n	8001bc0 <HAL_HCD_IRQHandler+0x1ec>
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d014      	beq.n	8001bee <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699a      	ldr	r2, [r3, #24]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0210 	bic.w	r2, r2, #16
 8001bd2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f001 fbfe 	bl	80033d6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699a      	ldr	r2, [r3, #24]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f042 0210 	orr.w	r2, r2, #16
 8001be8:	619a      	str	r2, [r3, #24]
 8001bea:	e000      	b.n	8001bee <HAL_HCD_IRQHandler+0x21a>
      return;
 8001bec:	bf00      	nop
    }
  }
}
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_HCD_Start+0x16>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e013      	b.n	8001c32 <HAL_HCD_Start+0x3e>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2101      	movs	r1, #1
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f003 fcc8 	bl	80055ae <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f9c1 	bl	8004faa <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_HCD_Stop+0x16>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e00d      	b.n	8001c6c <HAL_HCD_Stop+0x32>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f004 fa1b 	bl	8006098 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f003 fc6a 	bl	800555a <USB_ResetPort>
 8001c86:	4603      	mov	r3, r0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3708      	adds	r7, #8
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001c9c:	78fa      	ldrb	r2, [r7, #3]
 8001c9e:	6879      	ldr	r1, [r7, #4]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	011b      	lsls	r3, r3, #4
 8001ca4:	1a9b      	subs	r3, r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	440b      	add	r3, r1
 8001caa:	334c      	adds	r3, #76	@ 0x4c
 8001cac:	781b      	ldrb	r3, [r3, #0]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001cc6:	78fa      	ldrb	r2, [r7, #3]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	011b      	lsls	r3, r3, #4
 8001cce:	1a9b      	subs	r3, r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	3338      	adds	r3, #56	@ 0x38
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 fcac 	bl	800564e <USB_GetCurrentFrame>
 8001cf6:	4603      	mov	r3, r0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f003 fc87 	bl	8005620 <USB_GetHostSpeed>
 8001d12:	4603      	mov	r3, r0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	460b      	mov	r3, r1
 8001d26:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001d28:	78fa      	ldrb	r2, [r7, #3]
 8001d2a:	6879      	ldr	r1, [r7, #4]
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	011b      	lsls	r3, r3, #4
 8001d30:	1a9b      	subs	r3, r3, r2
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	440b      	add	r3, r1
 8001d36:	331a      	adds	r3, #26
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001d3c:	78fa      	ldrb	r2, [r7, #3]
 8001d3e:	6879      	ldr	r1, [r7, #4]
 8001d40:	4613      	mov	r3, r2
 8001d42:	011b      	lsls	r3, r3, #4
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	440b      	add	r3, r1
 8001d4a:	331b      	adds	r3, #27
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001d50:	78fa      	ldrb	r2, [r7, #3]
 8001d52:	6879      	ldr	r1, [r7, #4]
 8001d54:	4613      	mov	r3, r2
 8001d56:	011b      	lsls	r3, r3, #4
 8001d58:	1a9b      	subs	r3, r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	440b      	add	r3, r1
 8001d5e:	3325      	adds	r3, #37	@ 0x25
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001d64:	78fa      	ldrb	r2, [r7, #3]
 8001d66:	6879      	ldr	r1, [r7, #4]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	011b      	lsls	r3, r3, #4
 8001d6c:	1a9b      	subs	r3, r3, r2
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	440b      	add	r3, r1
 8001d72:	3324      	adds	r3, #36	@ 0x24
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr

08001d86 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	78fa      	ldrb	r2, [r7, #3]
 8001da2:	4611      	mov	r1, r2
 8001da4:	4618      	mov	r0, r3
 8001da6:	f003 fa77 	bl	8005298 <USB_ReadChInterrupts>
 8001daa:	4603      	mov	r3, r0
 8001dac:	f003 0304 	and.w	r3, r3, #4
 8001db0:	2b04      	cmp	r3, #4
 8001db2:	d11a      	bne.n	8001dea <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	015a      	lsls	r2, r3, #5
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	4413      	add	r3, r2
 8001dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001dc6:	78fa      	ldrb	r2, [r7, #3]
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	440b      	add	r3, r1
 8001dd4:	334d      	adds	r3, #77	@ 0x4d
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fffb 	bl	8005dde <USB_HC_Halt>
 8001de8:	e09e      	b.n	8001f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	4611      	mov	r1, r2
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fa50 	bl	8005298 <USB_ReadChInterrupts>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001e02:	d11b      	bne.n	8001e3c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001e18:	78fa      	ldrb	r2, [r7, #3]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	011b      	lsls	r3, r3, #4
 8001e20:	1a9b      	subs	r3, r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	334d      	adds	r3, #77	@ 0x4d
 8001e28:	2208      	movs	r2, #8
 8001e2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	78fa      	ldrb	r2, [r7, #3]
 8001e32:	4611      	mov	r1, r2
 8001e34:	4618      	mov	r0, r3
 8001e36:	f003 ffd2 	bl	8005dde <USB_HC_Halt>
 8001e3a:	e075      	b.n	8001f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	78fa      	ldrb	r2, [r7, #3]
 8001e42:	4611      	mov	r1, r2
 8001e44:	4618      	mov	r0, r3
 8001e46:	f003 fa27 	bl	8005298 <USB_ReadChInterrupts>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d11a      	bne.n	8001e8a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001e54:	78fb      	ldrb	r3, [r7, #3]
 8001e56:	015a      	lsls	r2, r3, #5
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e60:	461a      	mov	r2, r3
 8001e62:	2308      	movs	r3, #8
 8001e64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001e66:	78fa      	ldrb	r2, [r7, #3]
 8001e68:	6879      	ldr	r1, [r7, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	1a9b      	subs	r3, r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	440b      	add	r3, r1
 8001e74:	334d      	adds	r3, #77	@ 0x4d
 8001e76:	2206      	movs	r2, #6
 8001e78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	78fa      	ldrb	r2, [r7, #3]
 8001e80:	4611      	mov	r1, r2
 8001e82:	4618      	mov	r0, r3
 8001e84:	f003 ffab 	bl	8005dde <USB_HC_Halt>
 8001e88:	e04e      	b.n	8001f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	78fa      	ldrb	r2, [r7, #3]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 fa00 	bl	8005298 <USB_ReadChInterrupts>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ea2:	d11b      	bne.n	8001edc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ea4:	78fb      	ldrb	r3, [r7, #3]
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001eb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001eb8:	78fa      	ldrb	r2, [r7, #3]
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	011b      	lsls	r3, r3, #4
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	334d      	adds	r3, #77	@ 0x4d
 8001ec8:	2209      	movs	r2, #9
 8001eca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	78fa      	ldrb	r2, [r7, #3]
 8001ed2:	4611      	mov	r1, r2
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f003 ff82 	bl	8005dde <USB_HC_Halt>
 8001eda:	e025      	b.n	8001f28 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	78fa      	ldrb	r2, [r7, #3]
 8001ee2:	4611      	mov	r1, r2
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f9d7 	bl	8005298 <USB_ReadChInterrupts>
 8001eea:	4603      	mov	r3, r0
 8001eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ef0:	2b80      	cmp	r3, #128	@ 0x80
 8001ef2:	d119      	bne.n	8001f28 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001ef4:	78fb      	ldrb	r3, [r7, #3]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2380      	movs	r3, #128	@ 0x80
 8001f04:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f06:	78fa      	ldrb	r2, [r7, #3]
 8001f08:	6879      	ldr	r1, [r7, #4]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	011b      	lsls	r3, r3, #4
 8001f0e:	1a9b      	subs	r3, r3, r2
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	440b      	add	r3, r1
 8001f14:	334d      	adds	r3, #77	@ 0x4d
 8001f16:	2207      	movs	r2, #7
 8001f18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f003 ff5b 	bl	8005dde <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	78fa      	ldrb	r2, [r7, #3]
 8001f2e:	4611      	mov	r1, r2
 8001f30:	4618      	mov	r0, r3
 8001f32:	f003 f9b1 	bl	8005298 <USB_ReadChInterrupts>
 8001f36:	4603      	mov	r3, r0
 8001f38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f40:	d112      	bne.n	8001f68 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	4611      	mov	r1, r2
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f003 ff47 	bl	8005dde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	015a      	lsls	r2, r3, #5
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4413      	add	r3, r2
 8001f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f62:	6093      	str	r3, [r2, #8]
 8001f64:	f000 bd75 	b.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	78fa      	ldrb	r2, [r7, #3]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f991 	bl	8005298 <USB_ReadChInterrupts>
 8001f76:	4603      	mov	r3, r0
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	f040 8128 	bne.w	80021d2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001f82:	78fb      	ldrb	r3, [r7, #3]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2320      	movs	r3, #32
 8001f92:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001f94:	78fa      	ldrb	r2, [r7, #3]
 8001f96:	6879      	ldr	r1, [r7, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	440b      	add	r3, r1
 8001fa2:	331b      	adds	r3, #27
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d119      	bne.n	8001fde <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	011b      	lsls	r3, r3, #4
 8001fb2:	1a9b      	subs	r3, r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	331b      	adds	r3, #27
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001fbe:	78fb      	ldrb	r3, [r7, #3]
 8001fc0:	015a      	lsls	r2, r3, #5
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	4413      	add	r3, r2
 8001fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	78fa      	ldrb	r2, [r7, #3]
 8001fce:	0151      	lsls	r1, r2, #5
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	440a      	add	r2, r1
 8001fd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001fd8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fdc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	799b      	ldrb	r3, [r3, #6]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d01b      	beq.n	800201e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3330      	adds	r3, #48	@ 0x30
 8001ff6:	6819      	ldr	r1, [r3, #0]
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	015a      	lsls	r2, r3, #5
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4413      	add	r3, r2
 8002000:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	1ac9      	subs	r1, r1, r3
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4403      	add	r3, r0
 800201a:	3338      	adds	r3, #56	@ 0x38
 800201c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	334d      	adds	r3, #77	@ 0x4d
 800202e:	2201      	movs	r2, #1
 8002030:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002032:	78fa      	ldrb	r2, [r7, #3]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	1a9b      	subs	r3, r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3344      	adds	r3, #68	@ 0x44
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	015a      	lsls	r2, r3, #5
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	4413      	add	r3, r2
 800204e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002052:	461a      	mov	r2, r3
 8002054:	2301      	movs	r3, #1
 8002056:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	3326      	adds	r3, #38	@ 0x26
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00a      	beq.n	8002084 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800206e:	78fa      	ldrb	r2, [r7, #3]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	011b      	lsls	r3, r3, #4
 8002076:	1a9b      	subs	r3, r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3326      	adds	r3, #38	@ 0x26
 800207e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002080:	2b02      	cmp	r3, #2
 8002082:	d110      	bne.n	80020a6 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	4611      	mov	r1, r2
 800208c:	4618      	mov	r0, r3
 800208e:	f003 fea6 	bl	8005dde <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	015a      	lsls	r2, r3, #5
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4413      	add	r3, r2
 800209a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800209e:	461a      	mov	r2, r3
 80020a0:	2310      	movs	r3, #16
 80020a2:	6093      	str	r3, [r2, #8]
 80020a4:	e03d      	b.n	8002122 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020a6:	78fa      	ldrb	r2, [r7, #3]
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	4613      	mov	r3, r2
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	1a9b      	subs	r3, r3, r2
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	440b      	add	r3, r1
 80020b4:	3326      	adds	r3, #38	@ 0x26
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b03      	cmp	r3, #3
 80020ba:	d00a      	beq.n	80020d2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80020bc:	78fa      	ldrb	r2, [r7, #3]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	011b      	lsls	r3, r3, #4
 80020c4:	1a9b      	subs	r3, r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	3326      	adds	r3, #38	@ 0x26
 80020cc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d127      	bne.n	8002122 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80020d2:	78fb      	ldrb	r3, [r7, #3]
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	78fa      	ldrb	r2, [r7, #3]
 80020e2:	0151      	lsls	r1, r2, #5
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	440a      	add	r2, r1
 80020e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80020ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80020f0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	334c      	adds	r3, #76	@ 0x4c
 8002102:	2201      	movs	r2, #1
 8002104:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	334c      	adds	r3, #76	@ 0x4c
 8002116:	781a      	ldrb	r2, [r3, #0]
 8002118:	78fb      	ldrb	r3, [r7, #3]
 800211a:	4619      	mov	r1, r3
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f006 f9b7 	bl	8008490 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	799b      	ldrb	r3, [r3, #6]
 8002126:	2b01      	cmp	r3, #1
 8002128:	d13b      	bne.n	80021a2 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800212a:	78fa      	ldrb	r2, [r7, #3]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	1a9b      	subs	r3, r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	3338      	adds	r3, #56	@ 0x38
 800213a:	6819      	ldr	r1, [r3, #0]
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4403      	add	r3, r0
 800214a:	3328      	adds	r3, #40	@ 0x28
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	440b      	add	r3, r1
 8002150:	1e59      	subs	r1, r3, #1
 8002152:	78fa      	ldrb	r2, [r7, #3]
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	1a9b      	subs	r3, r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4403      	add	r3, r0
 8002160:	3328      	adds	r3, #40	@ 0x28
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	fbb1 f3f3 	udiv	r3, r1, r3
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b00      	cmp	r3, #0
 800216e:	f000 8470 	beq.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	333c      	adds	r3, #60	@ 0x3c
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	78fa      	ldrb	r2, [r7, #3]
 8002186:	f083 0301 	eor.w	r3, r3, #1
 800218a:	b2d8      	uxtb	r0, r3
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	333c      	adds	r3, #60	@ 0x3c
 800219a:	4602      	mov	r2, r0
 800219c:	701a      	strb	r2, [r3, #0]
 800219e:	f000 bc58 	b.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80021a2:	78fa      	ldrb	r2, [r7, #3]
 80021a4:	6879      	ldr	r1, [r7, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	1a9b      	subs	r3, r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	440b      	add	r3, r1
 80021b0:	333c      	adds	r3, #60	@ 0x3c
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	f083 0301 	eor.w	r3, r3, #1
 80021ba:	b2d8      	uxtb	r0, r3
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	333c      	adds	r3, #60	@ 0x3c
 80021ca:	4602      	mov	r2, r0
 80021cc:	701a      	strb	r2, [r3, #0]
 80021ce:	f000 bc40 	b.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	4611      	mov	r1, r2
 80021da:	4618      	mov	r0, r3
 80021dc:	f003 f85c 	bl	8005298 <USB_ReadChInterrupts>
 80021e0:	4603      	mov	r3, r0
 80021e2:	f003 0320 	and.w	r3, r3, #32
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d131      	bne.n	800224e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80021ea:	78fb      	ldrb	r3, [r7, #3]
 80021ec:	015a      	lsls	r2, r3, #5
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021f6:	461a      	mov	r2, r3
 80021f8:	2320      	movs	r3, #32
 80021fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	331a      	adds	r3, #26
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	f040 841f 	bne.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002214:	78fa      	ldrb	r2, [r7, #3]
 8002216:	6879      	ldr	r1, [r7, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	011b      	lsls	r3, r3, #4
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	440b      	add	r3, r1
 8002222:	331b      	adds	r3, #27
 8002224:	2201      	movs	r2, #1
 8002226:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	334d      	adds	r3, #77	@ 0x4d
 8002238:	2203      	movs	r2, #3
 800223a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	4611      	mov	r1, r2
 8002244:	4618      	mov	r0, r3
 8002246:	f003 fdca 	bl	8005dde <USB_HC_Halt>
 800224a:	f000 bc02 	b.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	78fa      	ldrb	r2, [r7, #3]
 8002254:	4611      	mov	r1, r2
 8002256:	4618      	mov	r0, r3
 8002258:	f003 f81e 	bl	8005298 <USB_ReadChInterrupts>
 800225c:	4603      	mov	r3, r0
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b02      	cmp	r3, #2
 8002264:	f040 8305 	bne.w	8002872 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002268:	78fb      	ldrb	r3, [r7, #3]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002274:	461a      	mov	r2, r3
 8002276:	2302      	movs	r3, #2
 8002278:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	334d      	adds	r3, #77	@ 0x4d
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d114      	bne.n	80022ba <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	334d      	adds	r3, #77	@ 0x4d
 80022a0:	2202      	movs	r2, #2
 80022a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	334c      	adds	r3, #76	@ 0x4c
 80022b4:	2201      	movs	r2, #1
 80022b6:	701a      	strb	r2, [r3, #0]
 80022b8:	e2cc      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	334d      	adds	r3, #77	@ 0x4d
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b06      	cmp	r3, #6
 80022ce:	d114      	bne.n	80022fa <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334d      	adds	r3, #77	@ 0x4d
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	334c      	adds	r3, #76	@ 0x4c
 80022f4:	2205      	movs	r2, #5
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e2ac      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80022fa:	78fa      	ldrb	r2, [r7, #3]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	011b      	lsls	r3, r3, #4
 8002302:	1a9b      	subs	r3, r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	334d      	adds	r3, #77	@ 0x4d
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	2b07      	cmp	r3, #7
 800230e:	d00b      	beq.n	8002328 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6879      	ldr	r1, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	440b      	add	r3, r1
 800231e:	334d      	adds	r3, #77	@ 0x4d
 8002320:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002322:	2b09      	cmp	r3, #9
 8002324:	f040 80a6 	bne.w	8002474 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	334d      	adds	r3, #77	@ 0x4d
 8002338:	2202      	movs	r2, #2
 800233a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800233c:	78fa      	ldrb	r2, [r7, #3]
 800233e:	6879      	ldr	r1, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	011b      	lsls	r3, r3, #4
 8002344:	1a9b      	subs	r3, r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	3344      	adds	r3, #68	@ 0x44
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	1c59      	adds	r1, r3, #1
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4403      	add	r3, r0
 800235c:	3344      	adds	r3, #68	@ 0x44
 800235e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	3344      	adds	r3, #68	@ 0x44
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d943      	bls.n	80023fe <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3344      	adds	r3, #68	@ 0x44
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	331a      	adds	r3, #26
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d123      	bne.n	80023e8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	6879      	ldr	r1, [r7, #4]
 80023a4:	4613      	mov	r3, r2
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	1a9b      	subs	r3, r3, r2
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	331b      	adds	r3, #27
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	331c      	adds	r3, #28
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023c8:	78fb      	ldrb	r3, [r7, #3]
 80023ca:	015a      	lsls	r2, r3, #5
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4413      	add	r3, r2
 80023d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	78fa      	ldrb	r2, [r7, #3]
 80023d8:	0151      	lsls	r1, r2, #5
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	440a      	add	r2, r1
 80023de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023e6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	334c      	adds	r3, #76	@ 0x4c
 80023f8:	2204      	movs	r2, #4
 80023fa:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80023fc:	e229      	b.n	8002852 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	334c      	adds	r3, #76	@ 0x4c
 800240e:	2202      	movs	r2, #2
 8002410:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	3326      	adds	r3, #38	@ 0x26
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00b      	beq.n	8002440 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002428:	78fa      	ldrb	r2, [r7, #3]
 800242a:	6879      	ldr	r1, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3326      	adds	r3, #38	@ 0x26
 8002438:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800243a:	2b02      	cmp	r3, #2
 800243c:	f040 8209 	bne.w	8002852 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002440:	78fb      	ldrb	r3, [r7, #3]
 8002442:	015a      	lsls	r2, r3, #5
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4413      	add	r3, r2
 8002448:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002456:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800245e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002460:	78fb      	ldrb	r3, [r7, #3]
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4413      	add	r3, r2
 8002468:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800246c:	461a      	mov	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002472:	e1ee      	b.n	8002852 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	334d      	adds	r3, #77	@ 0x4d
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b05      	cmp	r3, #5
 8002488:	f040 80c8 	bne.w	800261c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	334d      	adds	r3, #77	@ 0x4d
 800249c:	2202      	movs	r2, #2
 800249e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80024a0:	78fa      	ldrb	r2, [r7, #3]
 80024a2:	6879      	ldr	r1, [r7, #4]
 80024a4:	4613      	mov	r3, r2
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	1a9b      	subs	r3, r3, r2
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	440b      	add	r3, r1
 80024ae:	331b      	adds	r3, #27
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	f040 81ce 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	3326      	adds	r3, #38	@ 0x26
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b03      	cmp	r3, #3
 80024cc:	d16b      	bne.n	80025a6 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	3348      	adds	r3, #72	@ 0x48
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1c59      	adds	r1, r3, #1
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	4403      	add	r3, r0
 80024ee:	3348      	adds	r3, #72	@ 0x48
 80024f0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80024f2:	78fa      	ldrb	r2, [r7, #3]
 80024f4:	6879      	ldr	r1, [r7, #4]
 80024f6:	4613      	mov	r3, r2
 80024f8:	011b      	lsls	r3, r3, #4
 80024fa:	1a9b      	subs	r3, r3, r2
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	440b      	add	r3, r1
 8002500:	3348      	adds	r3, #72	@ 0x48
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d943      	bls.n	8002590 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	3348      	adds	r3, #72	@ 0x48
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	331b      	adds	r3, #27
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002530:	78fa      	ldrb	r2, [r7, #3]
 8002532:	6879      	ldr	r1, [r7, #4]
 8002534:	4613      	mov	r3, r2
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	440b      	add	r3, r1
 800253e:	3344      	adds	r3, #68	@ 0x44
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2b02      	cmp	r3, #2
 8002544:	d809      	bhi.n	800255a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	331c      	adds	r3, #28
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800255a:	78fb      	ldrb	r3, [r7, #3]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	0151      	lsls	r1, r2, #5
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	440a      	add	r2, r1
 8002570:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002574:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002578:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334c      	adds	r3, #76	@ 0x4c
 800258a:	2204      	movs	r2, #4
 800258c:	701a      	strb	r2, [r3, #0]
 800258e:	e014      	b.n	80025ba <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334c      	adds	r3, #76	@ 0x4c
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e009      	b.n	80025ba <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a6:	78fa      	ldrb	r2, [r7, #3]
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	334c      	adds	r3, #76	@ 0x4c
 80025b6:	2202      	movs	r2, #2
 80025b8:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025ba:	78fa      	ldrb	r2, [r7, #3]
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	4613      	mov	r3, r2
 80025c0:	011b      	lsls	r3, r3, #4
 80025c2:	1a9b      	subs	r3, r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	440b      	add	r3, r1
 80025c8:	3326      	adds	r3, #38	@ 0x26
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00b      	beq.n	80025e8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	6879      	ldr	r1, [r7, #4]
 80025d4:	4613      	mov	r3, r2
 80025d6:	011b      	lsls	r3, r3, #4
 80025d8:	1a9b      	subs	r3, r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	3326      	adds	r3, #38	@ 0x26
 80025e0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	f040 8136 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025fe:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	015a      	lsls	r2, r3, #5
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	4413      	add	r3, r2
 8002610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002614:	461a      	mov	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	e11b      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800261c:	78fa      	ldrb	r2, [r7, #3]
 800261e:	6879      	ldr	r1, [r7, #4]
 8002620:	4613      	mov	r3, r2
 8002622:	011b      	lsls	r3, r3, #4
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	334d      	adds	r3, #77	@ 0x4d
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b03      	cmp	r3, #3
 8002630:	f040 8081 	bne.w	8002736 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	1a9b      	subs	r3, r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	334d      	adds	r3, #77	@ 0x4d
 8002644:	2202      	movs	r2, #2
 8002646:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	331b      	adds	r3, #27
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	f040 80fa 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334c      	adds	r3, #76	@ 0x4c
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002674:	78fb      	ldrb	r3, [r7, #3]
 8002676:	015a      	lsls	r2, r3, #5
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	4413      	add	r3, r2
 800267c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	78fa      	ldrb	r2, [r7, #3]
 8002684:	0151      	lsls	r1, r2, #5
 8002686:	693a      	ldr	r2, [r7, #16]
 8002688:	440a      	add	r2, r1
 800268a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800268e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002692:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002694:	78fb      	ldrb	r3, [r7, #3]
 8002696:	015a      	lsls	r2, r3, #5
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	4413      	add	r3, r2
 800269c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	0151      	lsls	r1, r2, #5
 80026a6:	693a      	ldr	r2, [r7, #16]
 80026a8:	440a      	add	r2, r1
 80026aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80026b2:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80026b4:	78fb      	ldrb	r3, [r7, #3]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80026ce:	f023 0320 	bic.w	r3, r3, #32
 80026d2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026d4:	78fa      	ldrb	r2, [r7, #3]
 80026d6:	6879      	ldr	r1, [r7, #4]
 80026d8:	4613      	mov	r3, r2
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	1a9b      	subs	r3, r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3326      	adds	r3, #38	@ 0x26
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80026ea:	78fa      	ldrb	r2, [r7, #3]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	4613      	mov	r3, r2
 80026f0:	011b      	lsls	r3, r3, #4
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	009b      	lsls	r3, r3, #2
 80026f6:	440b      	add	r3, r1
 80026f8:	3326      	adds	r3, #38	@ 0x26
 80026fa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	f040 80a9 	bne.w	8002854 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002702:	78fb      	ldrb	r3, [r7, #3]
 8002704:	015a      	lsls	r2, r3, #5
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4413      	add	r3, r2
 800270a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002718:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002720:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	015a      	lsls	r2, r3, #5
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	4413      	add	r3, r2
 800272a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800272e:	461a      	mov	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6013      	str	r3, [r2, #0]
 8002734:	e08e      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	6879      	ldr	r1, [r7, #4]
 800273a:	4613      	mov	r3, r2
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	1a9b      	subs	r3, r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	334d      	adds	r3, #77	@ 0x4d
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b04      	cmp	r3, #4
 800274a:	d143      	bne.n	80027d4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334d      	adds	r3, #77	@ 0x4d
 800275c:	2202      	movs	r2, #2
 800275e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	334c      	adds	r3, #76	@ 0x4c
 8002770:	2202      	movs	r2, #2
 8002772:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002774:	78fa      	ldrb	r2, [r7, #3]
 8002776:	6879      	ldr	r1, [r7, #4]
 8002778:	4613      	mov	r3, r2
 800277a:	011b      	lsls	r3, r3, #4
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	440b      	add	r3, r1
 8002782:	3326      	adds	r3, #38	@ 0x26
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00a      	beq.n	80027a0 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	6879      	ldr	r1, [r7, #4]
 800278e:	4613      	mov	r3, r2
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	1a9b      	subs	r3, r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3326      	adds	r3, #38	@ 0x26
 800279a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800279c:	2b02      	cmp	r3, #2
 800279e:	d159      	bne.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027b6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027be:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80027c0:	78fb      	ldrb	r3, [r7, #3]
 80027c2:	015a      	lsls	r2, r3, #5
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	4413      	add	r3, r2
 80027c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027cc:	461a      	mov	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	e03f      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	334d      	adds	r3, #77	@ 0x4d
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d126      	bne.n	8002838 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	334d      	adds	r3, #77	@ 0x4d
 80027fa:	2202      	movs	r2, #2
 80027fc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80027fe:	78fa      	ldrb	r2, [r7, #3]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	011b      	lsls	r3, r3, #4
 8002806:	1a9b      	subs	r3, r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	3344      	adds	r3, #68	@ 0x44
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	1c59      	adds	r1, r3, #1
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4403      	add	r3, r0
 800281e:	3344      	adds	r3, #68	@ 0x44
 8002820:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334c      	adds	r3, #76	@ 0x4c
 8002832:	2204      	movs	r2, #4
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e00d      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	6879      	ldr	r1, [r7, #4]
 800283c:	4613      	mov	r3, r2
 800283e:	011b      	lsls	r3, r3, #4
 8002840:	1a9b      	subs	r3, r3, r2
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	440b      	add	r3, r1
 8002846:	334d      	adds	r3, #77	@ 0x4d
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	2b02      	cmp	r3, #2
 800284c:	f000 8100 	beq.w	8002a50 <HCD_HC_IN_IRQHandler+0xcca>
 8002850:	e000      	b.n	8002854 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002852:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002854:	78fa      	ldrb	r2, [r7, #3]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	4613      	mov	r3, r2
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	1a9b      	subs	r3, r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	440b      	add	r3, r1
 8002862:	334c      	adds	r3, #76	@ 0x4c
 8002864:	781a      	ldrb	r2, [r3, #0]
 8002866:	78fb      	ldrb	r3, [r7, #3]
 8002868:	4619      	mov	r1, r3
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f005 fe10 	bl	8008490 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002870:	e0ef      	b.n	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	4611      	mov	r1, r2
 800287a:	4618      	mov	r0, r3
 800287c:	f002 fd0c 	bl	8005298 <USB_ReadChInterrupts>
 8002880:	4603      	mov	r3, r0
 8002882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002886:	2b40      	cmp	r3, #64	@ 0x40
 8002888:	d12f      	bne.n	80028ea <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800288a:	78fb      	ldrb	r3, [r7, #3]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4413      	add	r3, r2
 8002892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002896:	461a      	mov	r2, r3
 8002898:	2340      	movs	r3, #64	@ 0x40
 800289a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	334d      	adds	r3, #77	@ 0x4d
 80028ac:	2205      	movs	r2, #5
 80028ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	331a      	adds	r3, #26
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d109      	bne.n	80028da <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	011b      	lsls	r3, r3, #4
 80028ce:	1a9b      	subs	r3, r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3344      	adds	r3, #68	@ 0x44
 80028d6:	2200      	movs	r2, #0
 80028d8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	4611      	mov	r1, r2
 80028e2:	4618      	mov	r0, r3
 80028e4:	f003 fa7b 	bl	8005dde <USB_HC_Halt>
 80028e8:	e0b3      	b.n	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	4611      	mov	r1, r2
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 fcd0 	bl	8005298 <USB_ReadChInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b10      	cmp	r3, #16
 8002900:	f040 80a7 	bne.w	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	3326      	adds	r3, #38	@ 0x26
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d11b      	bne.n	8002952 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800291a:	78fa      	ldrb	r2, [r7, #3]
 800291c:	6879      	ldr	r1, [r7, #4]
 800291e:	4613      	mov	r3, r2
 8002920:	011b      	lsls	r3, r3, #4
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3344      	adds	r3, #68	@ 0x44
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	334d      	adds	r3, #77	@ 0x4d
 800293e:	2204      	movs	r2, #4
 8002940:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	4611      	mov	r1, r2
 800294a:	4618      	mov	r0, r3
 800294c:	f003 fa47 	bl	8005dde <USB_HC_Halt>
 8002950:	e03f      	b.n	80029d2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002952:	78fa      	ldrb	r2, [r7, #3]
 8002954:	6879      	ldr	r1, [r7, #4]
 8002956:	4613      	mov	r3, r2
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	1a9b      	subs	r3, r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	3326      	adds	r3, #38	@ 0x26
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00a      	beq.n	800297e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002968:	78fa      	ldrb	r2, [r7, #3]
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	1a9b      	subs	r3, r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	440b      	add	r3, r1
 8002976:	3326      	adds	r3, #38	@ 0x26
 8002978:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800297a:	2b02      	cmp	r3, #2
 800297c:	d129      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800297e:	78fa      	ldrb	r2, [r7, #3]
 8002980:	6879      	ldr	r1, [r7, #4]
 8002982:	4613      	mov	r3, r2
 8002984:	011b      	lsls	r3, r3, #4
 8002986:	1a9b      	subs	r3, r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	440b      	add	r3, r1
 800298c:	3344      	adds	r3, #68	@ 0x44
 800298e:	2200      	movs	r2, #0
 8002990:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	799b      	ldrb	r3, [r3, #6]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HCD_HC_IN_IRQHandler+0xc2a>
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	4613      	mov	r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	1a9b      	subs	r3, r3, r2
 80029a4:	009b      	lsls	r3, r3, #2
 80029a6:	440b      	add	r3, r1
 80029a8:	331b      	adds	r3, #27
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d110      	bne.n	80029d2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80029b0:	78fa      	ldrb	r2, [r7, #3]
 80029b2:	6879      	ldr	r1, [r7, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	1a9b      	subs	r3, r3, r2
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	334d      	adds	r3, #77	@ 0x4d
 80029c0:	2204      	movs	r2, #4
 80029c2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fa06 	bl	8005dde <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	331b      	adds	r3, #27
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d129      	bne.n	8002a3c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	331b      	adds	r3, #27
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029fc:	78fb      	ldrb	r3, [r7, #3]
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	0151      	lsls	r1, r2, #5
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	440a      	add	r2, r1
 8002a12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a1a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	78fa      	ldrb	r2, [r7, #3]
 8002a2c:	0151      	lsls	r1, r2, #5
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	440a      	add	r2, r1
 8002a32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a36:	f043 0320 	orr.w	r3, r3, #32
 8002a3a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	e000      	b.n	8002a52 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002a50:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b086      	sub	sp, #24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	460b      	mov	r3, r1
 8002a62:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	78fa      	ldrb	r2, [r7, #3]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f002 fc0e 	bl	8005298 <USB_ReadChInterrupts>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d11b      	bne.n	8002abe <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	015a      	lsls	r2, r3, #5
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a92:	461a      	mov	r2, r3
 8002a94:	2304      	movs	r3, #4
 8002a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	011b      	lsls	r3, r3, #4
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	334d      	adds	r3, #77	@ 0x4d
 8002aa8:	2207      	movs	r2, #7
 8002aaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	4611      	mov	r1, r2
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f003 f992 	bl	8005dde <USB_HC_Halt>
 8002aba:	f000 bc89 	b.w	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fbe6 	bl	8005298 <USB_ReadChInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 0320 	and.w	r3, r3, #32
 8002ad2:	2b20      	cmp	r3, #32
 8002ad4:	f040 8082 	bne.w	8002bdc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ad8:	78fb      	ldrb	r3, [r7, #3]
 8002ada:	015a      	lsls	r2, r3, #5
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	2320      	movs	r3, #32
 8002ae8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	4613      	mov	r3, r2
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	1a9b      	subs	r3, r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	3319      	adds	r3, #25
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d124      	bne.n	8002b4a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	3319      	adds	r3, #25
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	334c      	adds	r3, #76	@ 0x4c
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	334d      	adds	r3, #77	@ 0x4d
 8002b38:	2203      	movs	r2, #3
 8002b3a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	78fa      	ldrb	r2, [r7, #3]
 8002b42:	4611      	mov	r1, r2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f003 f94a 	bl	8005dde <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002b4a:	78fa      	ldrb	r2, [r7, #3]
 8002b4c:	6879      	ldr	r1, [r7, #4]
 8002b4e:	4613      	mov	r3, r2
 8002b50:	011b      	lsls	r3, r3, #4
 8002b52:	1a9b      	subs	r3, r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	331a      	adds	r3, #26
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	f040 8437 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	331b      	adds	r3, #27
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f040 842b 	bne.w	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	3326      	adds	r3, #38	@ 0x26
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d009      	beq.n	8002ba4 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	331b      	adds	r3, #27
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f003 f90c 	bl	8005dde <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	6879      	ldr	r1, [r7, #4]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	011b      	lsls	r3, r3, #4
 8002bce:	1a9b      	subs	r3, r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	3344      	adds	r3, #68	@ 0x44
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e3f9      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	4611      	mov	r1, r2
 8002be4:	4618      	mov	r0, r3
 8002be6:	f002 fb57 	bl	8005298 <USB_ReadChInterrupts>
 8002bea:	4603      	mov	r3, r0
 8002bec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bf0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bf4:	d111      	bne.n	8002c1a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002bf6:	78fb      	ldrb	r3, [r7, #3]
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c02:	461a      	mov	r2, r3
 8002c04:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f003 f8e3 	bl	8005dde <USB_HC_Halt>
 8002c18:	e3da      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f002 fb38 	bl	8005298 <USB_ReadChInterrupts>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d168      	bne.n	8002d04 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	3344      	adds	r3, #68	@ 0x44
 8002c42:	2200      	movs	r2, #0
 8002c44:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	78fa      	ldrb	r2, [r7, #3]
 8002c4c:	4611      	mov	r1, r2
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f002 fb22 	bl	8005298 <USB_ReadChInterrupts>
 8002c54:	4603      	mov	r3, r0
 8002c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c5a:	2b40      	cmp	r3, #64	@ 0x40
 8002c5c:	d112      	bne.n	8002c84 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002c5e:	78fa      	ldrb	r2, [r7, #3]
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	4613      	mov	r3, r2
 8002c64:	011b      	lsls	r3, r3, #4
 8002c66:	1a9b      	subs	r3, r3, r2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	440b      	add	r3, r1
 8002c6c:	3319      	adds	r3, #25
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	015a      	lsls	r2, r3, #5
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	4413      	add	r3, r2
 8002c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7e:	461a      	mov	r2, r3
 8002c80:	2340      	movs	r3, #64	@ 0x40
 8002c82:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	331b      	adds	r3, #27
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d019      	beq.n	8002cce <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c9a:	78fa      	ldrb	r2, [r7, #3]
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	440b      	add	r3, r1
 8002ca8:	331b      	adds	r3, #27
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	78fa      	ldrb	r2, [r7, #3]
 8002cbe:	0151      	lsls	r1, r2, #5
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	440a      	add	r2, r1
 8002cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002cce:	78fb      	ldrb	r3, [r7, #3]
 8002cd0:	015a      	lsls	r2, r3, #5
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cda:	461a      	mov	r2, r3
 8002cdc:	2301      	movs	r3, #1
 8002cde:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002ce0:	78fa      	ldrb	r2, [r7, #3]
 8002ce2:	6879      	ldr	r1, [r7, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	1a9b      	subs	r3, r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	334d      	adds	r3, #77	@ 0x4d
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	78fa      	ldrb	r2, [r7, #3]
 8002cfa:	4611      	mov	r1, r2
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 f86e 	bl	8005dde <USB_HC_Halt>
 8002d02:	e365      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	4611      	mov	r1, r2
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f002 fac3 	bl	8005298 <USB_ReadChInterrupts>
 8002d12:	4603      	mov	r3, r0
 8002d14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d18:	2b40      	cmp	r3, #64	@ 0x40
 8002d1a:	d139      	bne.n	8002d90 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002d1c:	78fa      	ldrb	r2, [r7, #3]
 8002d1e:	6879      	ldr	r1, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	440b      	add	r3, r1
 8002d2a:	334d      	adds	r3, #77	@ 0x4d
 8002d2c:	2205      	movs	r2, #5
 8002d2e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	331a      	adds	r3, #26
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d109      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3319      	adds	r3, #25
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002d5a:	78fa      	ldrb	r2, [r7, #3]
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	4613      	mov	r3, r2
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	1a9b      	subs	r3, r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	3344      	adds	r3, #68	@ 0x44
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	78fa      	ldrb	r2, [r7, #3]
 8002d74:	4611      	mov	r1, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f003 f831 	bl	8005dde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	015a      	lsls	r2, r3, #5
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	4413      	add	r3, r2
 8002d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d88:	461a      	mov	r2, r3
 8002d8a:	2340      	movs	r3, #64	@ 0x40
 8002d8c:	6093      	str	r3, [r2, #8]
 8002d8e:	e31f      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	78fa      	ldrb	r2, [r7, #3]
 8002d96:	4611      	mov	r1, r2
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f002 fa7d 	bl	8005298 <USB_ReadChInterrupts>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	d11a      	bne.n	8002dde <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002da8:	78fb      	ldrb	r3, [r7, #3]
 8002daa:	015a      	lsls	r2, r3, #5
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	4413      	add	r3, r2
 8002db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002db4:	461a      	mov	r2, r3
 8002db6:	2308      	movs	r3, #8
 8002db8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002dba:	78fa      	ldrb	r2, [r7, #3]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	011b      	lsls	r3, r3, #4
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	334d      	adds	r3, #77	@ 0x4d
 8002dca:	2206      	movs	r2, #6
 8002dcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f003 f801 	bl	8005dde <USB_HC_Halt>
 8002ddc:	e2f8      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f002 fa56 	bl	8005298 <USB_ReadChInterrupts>
 8002dec:	4603      	mov	r3, r0
 8002dee:	f003 0310 	and.w	r3, r3, #16
 8002df2:	2b10      	cmp	r3, #16
 8002df4:	d144      	bne.n	8002e80 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	3344      	adds	r3, #68	@ 0x44
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	334d      	adds	r3, #77	@ 0x4d
 8002e1a:	2204      	movs	r2, #4
 8002e1c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3319      	adds	r3, #25
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d114      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002e34:	78fa      	ldrb	r2, [r7, #3]
 8002e36:	6879      	ldr	r1, [r7, #4]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	1a9b      	subs	r3, r3, r2
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	440b      	add	r3, r1
 8002e42:	3318      	adds	r3, #24
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d109      	bne.n	8002e5e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	3319      	adds	r3, #25
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	4611      	mov	r1, r2
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 ffb9 	bl	8005dde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	6093      	str	r3, [r2, #8]
 8002e7e:	e2a7      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f002 fa05 	bl	8005298 <USB_ReadChInterrupts>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e94:	2b80      	cmp	r3, #128	@ 0x80
 8002e96:	f040 8083 	bne.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	799b      	ldrb	r3, [r3, #6]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d111      	bne.n	8002ec6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334d      	adds	r3, #77	@ 0x4d
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f002 ff8d 	bl	8005dde <USB_HC_Halt>
 8002ec4:	e062      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	3344      	adds	r3, #68	@ 0x44
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	1c59      	adds	r1, r3, #1
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	4403      	add	r3, r0
 8002ee6:	3344      	adds	r3, #68	@ 0x44
 8002ee8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3344      	adds	r3, #68	@ 0x44
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d922      	bls.n	8002f46 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	3344      	adds	r3, #68	@ 0x44
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	334c      	adds	r3, #76	@ 0x4c
 8002f24:	2204      	movs	r2, #4
 8002f26:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	334c      	adds	r3, #76	@ 0x4c
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	78fb      	ldrb	r3, [r7, #3]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f005 faa6 	bl	8008490 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002f44:	e022      	b.n	8002f8c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	334c      	adds	r3, #76	@ 0x4c
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	015a      	lsls	r2, r3, #5
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4413      	add	r3, r2
 8002f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f70:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f78:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f86:	461a      	mov	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002f8c:	78fb      	ldrb	r3, [r7, #3]
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2380      	movs	r3, #128	@ 0x80
 8002f9c:	6093      	str	r3, [r2, #8]
 8002f9e:	e217      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	78fa      	ldrb	r2, [r7, #3]
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f002 f975 	bl	8005298 <USB_ReadChInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fb8:	d11b      	bne.n	8002ff2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334d      	adds	r3, #77	@ 0x4d
 8002fca:	2209      	movs	r2, #9
 8002fcc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f002 ff01 	bl	8005dde <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002fdc:	78fb      	ldrb	r3, [r7, #3]
 8002fde:	015a      	lsls	r2, r3, #5
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002fee:	6093      	str	r3, [r2, #8]
 8002ff0:	e1ee      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	4611      	mov	r1, r2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f002 f94c 	bl	8005298 <USB_ReadChInterrupts>
 8003000:	4603      	mov	r3, r0
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b02      	cmp	r3, #2
 8003008:	f040 81df 	bne.w	80033ca <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	015a      	lsls	r2, r3, #5
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003018:	461a      	mov	r2, r3
 800301a:	2302      	movs	r3, #2
 800301c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	@ 0x4d
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 8093 	bne.w	800315c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	334d      	adds	r3, #77	@ 0x4d
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334c      	adds	r3, #76	@ 0x4c
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	3326      	adds	r3, #38	@ 0x26
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	2b02      	cmp	r3, #2
 8003072:	d00b      	beq.n	800308c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	3326      	adds	r3, #38	@ 0x26
 8003084:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003086:	2b03      	cmp	r3, #3
 8003088:	f040 8190 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	799b      	ldrb	r3, [r3, #6]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d115      	bne.n	80030c0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	333d      	adds	r3, #61	@ 0x3d
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	f083 0301 	eor.w	r3, r3, #1
 80030ac:	b2d8      	uxtb	r0, r3
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	440b      	add	r3, r1
 80030ba:	333d      	adds	r3, #61	@ 0x3d
 80030bc:	4602      	mov	r2, r0
 80030be:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	799b      	ldrb	r3, [r3, #6]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	f040 8171 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	4613      	mov	r3, r2
 80030d0:	011b      	lsls	r3, r3, #4
 80030d2:	1a9b      	subs	r3, r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	440b      	add	r3, r1
 80030d8:	3334      	adds	r3, #52	@ 0x34
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8165 	beq.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	1a9b      	subs	r3, r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	440b      	add	r3, r1
 80030f0:	3334      	adds	r3, #52	@ 0x34
 80030f2:	6819      	ldr	r1, [r3, #0]
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4403      	add	r3, r0
 8003102:	3328      	adds	r3, #40	@ 0x28
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	440b      	add	r3, r1
 8003108:	1e59      	subs	r1, r3, #1
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4403      	add	r3, r0
 8003118:	3328      	adds	r3, #40	@ 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003120:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 813f 	beq.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	333d      	adds	r3, #61	@ 0x3d
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	f083 0301 	eor.w	r3, r3, #1
 8003146:	b2d8      	uxtb	r0, r3
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	333d      	adds	r3, #61	@ 0x3d
 8003156:	4602      	mov	r2, r0
 8003158:	701a      	strb	r2, [r3, #0]
 800315a:	e127      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800315c:	78fa      	ldrb	r2, [r7, #3]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	1a9b      	subs	r3, r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	334d      	adds	r3, #77	@ 0x4d
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b03      	cmp	r3, #3
 8003170:	d120      	bne.n	80031b4 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003172:	78fa      	ldrb	r2, [r7, #3]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	011b      	lsls	r3, r3, #4
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	334d      	adds	r3, #77	@ 0x4d
 8003182:	2202      	movs	r2, #2
 8003184:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	331b      	adds	r3, #27
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 8107 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800319e:	78fa      	ldrb	r2, [r7, #3]
 80031a0:	6879      	ldr	r1, [r7, #4]
 80031a2:	4613      	mov	r3, r2
 80031a4:	011b      	lsls	r3, r3, #4
 80031a6:	1a9b      	subs	r3, r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	440b      	add	r3, r1
 80031ac:	334c      	adds	r3, #76	@ 0x4c
 80031ae:	2202      	movs	r2, #2
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e0fb      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80031b4:	78fa      	ldrb	r2, [r7, #3]
 80031b6:	6879      	ldr	r1, [r7, #4]
 80031b8:	4613      	mov	r3, r2
 80031ba:	011b      	lsls	r3, r3, #4
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	334d      	adds	r3, #77	@ 0x4d
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d13a      	bne.n	8003240 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	334d      	adds	r3, #77	@ 0x4d
 80031da:	2202      	movs	r2, #2
 80031dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031de:	78fa      	ldrb	r2, [r7, #3]
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	011b      	lsls	r3, r3, #4
 80031e6:	1a9b      	subs	r3, r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	440b      	add	r3, r1
 80031ec:	334c      	adds	r3, #76	@ 0x4c
 80031ee:	2202      	movs	r2, #2
 80031f0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	331b      	adds	r3, #27
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 80d1 	bne.w	80033ac <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	331b      	adds	r3, #27
 800321a:	2200      	movs	r2, #0
 800321c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	015a      	lsls	r2, r3, #5
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4413      	add	r3, r2
 8003226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	0151      	lsls	r1, r2, #5
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	440a      	add	r2, r1
 8003234:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800323c:	6053      	str	r3, [r2, #4]
 800323e:	e0b5      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b05      	cmp	r3, #5
 8003254:	d114      	bne.n	8003280 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003256:	78fa      	ldrb	r2, [r7, #3]
 8003258:	6879      	ldr	r1, [r7, #4]
 800325a:	4613      	mov	r3, r2
 800325c:	011b      	lsls	r3, r3, #4
 800325e:	1a9b      	subs	r3, r3, r2
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	440b      	add	r3, r1
 8003264:	334d      	adds	r3, #77	@ 0x4d
 8003266:	2202      	movs	r2, #2
 8003268:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800326a:	78fa      	ldrb	r2, [r7, #3]
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	440b      	add	r3, r1
 8003278:	334c      	adds	r3, #76	@ 0x4c
 800327a:	2202      	movs	r2, #2
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	e095      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003280:	78fa      	ldrb	r2, [r7, #3]
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	334d      	adds	r3, #77	@ 0x4d
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b06      	cmp	r3, #6
 8003294:	d114      	bne.n	80032c0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334d      	adds	r3, #77	@ 0x4d
 80032a6:	2202      	movs	r2, #2
 80032a8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	334c      	adds	r3, #76	@ 0x4c
 80032ba:	2205      	movs	r2, #5
 80032bc:	701a      	strb	r2, [r3, #0]
 80032be:	e075      	b.n	80033ac <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334d      	adds	r3, #77	@ 0x4d
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b07      	cmp	r3, #7
 80032d4:	d00a      	beq.n	80032ec <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	6879      	ldr	r1, [r7, #4]
 80032da:	4613      	mov	r3, r2
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	1a9b      	subs	r3, r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	440b      	add	r3, r1
 80032e4:	334d      	adds	r3, #77	@ 0x4d
 80032e6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80032e8:	2b09      	cmp	r3, #9
 80032ea:	d170      	bne.n	80033ce <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ec:	78fa      	ldrb	r2, [r7, #3]
 80032ee:	6879      	ldr	r1, [r7, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	1a9b      	subs	r3, r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	440b      	add	r3, r1
 80032fa:	334d      	adds	r3, #77	@ 0x4d
 80032fc:	2202      	movs	r2, #2
 80032fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	3344      	adds	r3, #68	@ 0x44
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	1c59      	adds	r1, r3, #1
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4403      	add	r3, r0
 8003320:	3344      	adds	r3, #68	@ 0x44
 8003322:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	011b      	lsls	r3, r3, #4
 800332c:	1a9b      	subs	r3, r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	3344      	adds	r3, #68	@ 0x44
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d914      	bls.n	8003364 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	6879      	ldr	r1, [r7, #4]
 800333e:	4613      	mov	r3, r2
 8003340:	011b      	lsls	r3, r3, #4
 8003342:	1a9b      	subs	r3, r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	440b      	add	r3, r1
 8003348:	3344      	adds	r3, #68	@ 0x44
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	6879      	ldr	r1, [r7, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	440b      	add	r3, r1
 800335c:	334c      	adds	r3, #76	@ 0x4c
 800335e:	2204      	movs	r2, #4
 8003360:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003362:	e022      	b.n	80033aa <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	4613      	mov	r3, r2
 800336a:	011b      	lsls	r3, r3, #4
 800336c:	1a9b      	subs	r3, r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	334c      	adds	r3, #76	@ 0x4c
 8003374:	2202      	movs	r2, #2
 8003376:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800338e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003396:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033aa:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334c      	adds	r3, #76	@ 0x4c
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	78fb      	ldrb	r3, [r7, #3]
 80033c0:	4619      	mov	r1, r3
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f005 f864 	bl	8008490 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033c8:	e002      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80033ce:	bf00      	nop
  }
}
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b08a      	sub	sp, #40	@ 0x28
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	f003 030f 	and.w	r3, r3, #15
 80033f6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	0c5b      	lsrs	r3, r3, #17
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800340a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d004      	beq.n	800341c <HCD_RXQLVL_IRQHandler+0x46>
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b05      	cmp	r3, #5
 8003416:	f000 80b6 	beq.w	8003586 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800341a:	e0b7      	b.n	800358c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	2b00      	cmp	r3, #0
 8003420:	f000 80b3 	beq.w	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4613      	mov	r3, r2
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	332c      	adds	r3, #44	@ 0x2c
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 80a7 	beq.w	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3338      	adds	r3, #56	@ 0x38
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	18d1      	adds	r1, r2, r3
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	4403      	add	r3, r0
 8003460:	3334      	adds	r3, #52	@ 0x34
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4299      	cmp	r1, r3
 8003466:	f200 8083 	bhi.w	8003570 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	6879      	ldr	r1, [r7, #4]
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	332c      	adds	r3, #44	@ 0x2c
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	b292      	uxth	r2, r2
 8003484:	4619      	mov	r1, r3
 8003486:	f001 fe9c 	bl	80051c2 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4613      	mov	r3, r2
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	1a9b      	subs	r3, r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	332c      	adds	r3, #44	@ 0x2c
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	18d1      	adds	r1, r2, r3
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4403      	add	r3, r0
 80034ae:	332c      	adds	r3, #44	@ 0x2c
 80034b0:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3338      	adds	r3, #56	@ 0x38
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	18d1      	adds	r1, r2, r3
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	4403      	add	r3, r0
 80034d6:	3338      	adds	r3, #56	@ 0x38
 80034d8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e6:	691b      	ldr	r3, [r3, #16]
 80034e8:	0cdb      	lsrs	r3, r3, #19
 80034ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034ee:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	69ba      	ldr	r2, [r7, #24]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	3328      	adds	r3, #40	@ 0x28
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	461a      	mov	r2, r3
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4293      	cmp	r3, r2
 8003508:	d13f      	bne.n	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d03c      	beq.n	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	4413      	add	r3, r2
 8003518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003526:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800352e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	015a      	lsls	r2, r3, #5
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	4413      	add	r3, r2
 8003538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800353c:	461a      	mov	r2, r3
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003542:	6879      	ldr	r1, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	333c      	adds	r3, #60	@ 0x3c
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	f083 0301 	eor.w	r3, r3, #1
 8003558:	b2d8      	uxtb	r0, r3
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	333c      	adds	r3, #60	@ 0x3c
 800356a:	4602      	mov	r2, r0
 800356c:	701a      	strb	r2, [r3, #0]
      break;
 800356e:	e00c      	b.n	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003570:	6879      	ldr	r1, [r7, #4]
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	@ 0x4c
 8003580:	2204      	movs	r2, #4
 8003582:	701a      	strb	r2, [r3, #0]
      break;
 8003584:	e001      	b.n	800358a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003586:	bf00      	nop
 8003588:	e000      	b.n	800358c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800358a:	bf00      	nop
  }
}
 800358c:	bf00      	nop
 800358e:	3728      	adds	r7, #40	@ 0x28
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80035c0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d10b      	bne.n	80035e4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d102      	bne.n	80035dc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f004 ff3e 	bl	8008458 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	f043 0302 	orr.w	r3, r3, #2
 80035e2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d132      	bne.n	8003654 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	f043 0308 	orr.w	r3, r3, #8
 80035f4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f003 0304 	and.w	r3, r3, #4
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d126      	bne.n	800364e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	7a5b      	ldrb	r3, [r3, #9]
 8003604:	2b02      	cmp	r3, #2
 8003606:	d113      	bne.n	8003630 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800360e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003612:	d106      	bne.n	8003622 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2102      	movs	r1, #2
 800361a:	4618      	mov	r0, r3
 800361c:	f001 ff60 	bl	80054e0 <USB_InitFSLSPClkSel>
 8003620:	e011      	b.n	8003646 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2101      	movs	r1, #1
 8003628:	4618      	mov	r0, r3
 800362a:	f001 ff59 	bl	80054e0 <USB_InitFSLSPClkSel>
 800362e:	e00a      	b.n	8003646 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	79db      	ldrb	r3, [r3, #7]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d106      	bne.n	8003646 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800363e:	461a      	mov	r2, r3
 8003640:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003644:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f004 ff30 	bl	80084ac <HAL_HCD_PortEnabled_Callback>
 800364c:	e002      	b.n	8003654 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f004 ff3a 	bl	80084c8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 0320 	and.w	r3, r3, #32
 800365a:	2b20      	cmp	r3, #32
 800365c:	d103      	bne.n	8003666 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f043 0320 	orr.w	r3, r3, #32
 8003664:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800366c:	461a      	mov	r2, r3
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	6013      	str	r3, [r2, #0]
}
 8003672:	bf00      	nop
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e12b      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fd f964 	bl	8000970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	@ 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e0:	f001 fa20 	bl	8004b24 <HAL_RCC_GetPCLK1Freq>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a81      	ldr	r2, [pc, #516]	@ (80038f0 <HAL_I2C_Init+0x274>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d807      	bhi.n	8003700 <HAL_I2C_Init+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a80      	ldr	r2, [pc, #512]	@ (80038f4 <HAL_I2C_Init+0x278>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e006      	b.n	800370e <HAL_I2C_Init+0x92>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a7d      	ldr	r2, [pc, #500]	@ (80038f8 <HAL_I2C_Init+0x27c>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0e7      	b.n	80038e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a78      	ldr	r2, [pc, #480]	@ (80038fc <HAL_I2C_Init+0x280>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a6a      	ldr	r2, [pc, #424]	@ (80038f0 <HAL_I2C_Init+0x274>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <HAL_I2C_Init+0xd4>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	e009      	b.n	8003764 <HAL_I2C_Init+0xe8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	4a69      	ldr	r2, [pc, #420]	@ (8003900 <HAL_I2C_Init+0x284>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	3301      	adds	r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003776:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	495c      	ldr	r1, [pc, #368]	@ (80038f0 <HAL_I2C_Init+0x274>)
 8003780:	428b      	cmp	r3, r1
 8003782:	d819      	bhi.n	80037b8 <HAL_I2C_Init+0x13c>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e59      	subs	r1, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003792:	1c59      	adds	r1, r3, #1
 8003794:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003798:	400b      	ands	r3, r1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00a      	beq.n	80037b4 <HAL_I2C_Init+0x138>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e59      	subs	r1, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b2:	e051      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b4:	2304      	movs	r3, #4
 80037b6:	e04f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d111      	bne.n	80037e4 <HAL_I2C_Init+0x168>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	1e58      	subs	r0, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6859      	ldr	r1, [r3, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	005b      	lsls	r3, r3, #1
 80037cc:	440b      	add	r3, r1
 80037ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d2:	3301      	adds	r3, #1
 80037d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037d8:	2b00      	cmp	r3, #0
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e012      	b.n	800380a <HAL_I2C_Init+0x18e>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	1e58      	subs	r0, r3, #1
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6859      	ldr	r1, [r3, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	0099      	lsls	r1, r3, #2
 80037f4:	440b      	add	r3, r1
 80037f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Init+0x196>
 800380e:	2301      	movs	r3, #1
 8003810:	e022      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10e      	bne.n	8003838 <HAL_I2C_Init+0x1bc>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	1e58      	subs	r0, r3, #1
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6859      	ldr	r1, [r3, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	440b      	add	r3, r1
 8003828:	fbb0 f3f3 	udiv	r3, r0, r3
 800382c:	3301      	adds	r3, #1
 800382e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003832:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003836:	e00f      	b.n	8003858 <HAL_I2C_Init+0x1dc>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	1e58      	subs	r0, r3, #1
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6859      	ldr	r1, [r3, #4]
 8003840:	460b      	mov	r3, r1
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	440b      	add	r3, r1
 8003846:	0099      	lsls	r1, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	fbb0 f3f3 	udiv	r3, r0, r3
 800384e:	3301      	adds	r3, #1
 8003850:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003854:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	6809      	ldr	r1, [r1, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	69da      	ldr	r2, [r3, #28]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003886:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6911      	ldr	r1, [r2, #16]
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	68d2      	ldr	r2, [r2, #12]
 8003892:	4311      	orrs	r1, r2
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	6812      	ldr	r2, [r2, #0]
 8003898:	430b      	orrs	r3, r1
 800389a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68db      	ldr	r3, [r3, #12]
 80038a2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	695a      	ldr	r2, [r3, #20]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	000186a0 	.word	0x000186a0
 80038f4:	001e847f 	.word	0x001e847f
 80038f8:	003d08ff 	.word	0x003d08ff
 80038fc:	431bde83 	.word	0x431bde83
 8003900:	10624dd3 	.word	0x10624dd3

08003904 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b088      	sub	sp, #32
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d101      	bne.n	8003916 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e128      	b.n	8003b68 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a90      	ldr	r2, [pc, #576]	@ (8003b70 <HAL_I2S_Init+0x26c>)
 800392e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f865 	bl	8000a00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2202      	movs	r2, #2
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	69db      	ldr	r3, [r3, #28]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6812      	ldr	r2, [r2, #0]
 8003948:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800394c:	f023 030f 	bic.w	r3, r3, #15
 8003950:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2202      	movs	r2, #2
 8003958:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	695b      	ldr	r3, [r3, #20]
 800395e:	2b02      	cmp	r3, #2
 8003960:	d060      	beq.n	8003a24 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d102      	bne.n	8003970 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800396a:	2310      	movs	r3, #16
 800396c:	617b      	str	r3, [r7, #20]
 800396e:	e001      	b.n	8003974 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003970:	2320      	movs	r3, #32
 8003972:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b20      	cmp	r3, #32
 800397a:	d802      	bhi.n	8003982 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003982:	2001      	movs	r0, #1
 8003984:	f001 f9c4 	bl	8004d10 <HAL_RCCEx_GetPeriphCLKFreq>
 8003988:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003992:	d125      	bne.n	80039e0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80039a6:	4613      	mov	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	005b      	lsls	r3, r3, #1
 80039ae:	461a      	mov	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b8:	3305      	adds	r3, #5
 80039ba:	613b      	str	r3, [r7, #16]
 80039bc:	e01f      	b.n	80039fe <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	00db      	lsls	r3, r3, #3
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	005b      	lsls	r3, r3, #1
 80039d0:	461a      	mov	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	695b      	ldr	r3, [r3, #20]
 80039d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039da:	3305      	adds	r3, #5
 80039dc:	613b      	str	r3, [r7, #16]
 80039de:	e00e      	b.n	80039fe <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80039e8:	4613      	mov	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	005b      	lsls	r3, r3, #1
 80039f0:	461a      	mov	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fa:	3305      	adds	r3, #5
 80039fc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	4a5c      	ldr	r2, [pc, #368]	@ (8003b74 <HAL_I2S_Init+0x270>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	08db      	lsrs	r3, r3, #3
 8003a08:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	085b      	lsrs	r3, r3, #1
 8003a1a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	021b      	lsls	r3, r3, #8
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	e003      	b.n	8003a2c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003a24:	2302      	movs	r3, #2
 8003a26:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d902      	bls.n	8003a38 <HAL_I2S_Init+0x134>
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	2bff      	cmp	r3, #255	@ 0xff
 8003a36:	d907      	bls.n	8003a48 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e08f      	b.n	8003b68 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	ea42 0103 	orr.w	r1, r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	430a      	orrs	r2, r1
 8003a5a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003a66:	f023 030f 	bic.w	r3, r3, #15
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6851      	ldr	r1, [r2, #4]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	6892      	ldr	r2, [r2, #8]
 8003a72:	4311      	orrs	r1, r2
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	68d2      	ldr	r2, [r2, #12]
 8003a78:	4311      	orrs	r1, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6992      	ldr	r2, [r2, #24]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a8a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d161      	bne.n	8003b58 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a38      	ldr	r2, [pc, #224]	@ (8003b78 <HAL_I2S_Init+0x274>)
 8003a98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a37      	ldr	r2, [pc, #220]	@ (8003b7c <HAL_I2S_Init+0x278>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <HAL_I2S_Init+0x1a4>
 8003aa4:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <HAL_I2S_Init+0x27c>)
 8003aa6:	e001      	b.n	8003aac <HAL_I2S_Init+0x1a8>
 8003aa8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	6812      	ldr	r2, [r2, #0]
 8003ab2:	4932      	ldr	r1, [pc, #200]	@ (8003b7c <HAL_I2S_Init+0x278>)
 8003ab4:	428a      	cmp	r2, r1
 8003ab6:	d101      	bne.n	8003abc <HAL_I2S_Init+0x1b8>
 8003ab8:	4a31      	ldr	r2, [pc, #196]	@ (8003b80 <HAL_I2S_Init+0x27c>)
 8003aba:	e001      	b.n	8003ac0 <HAL_I2S_Init+0x1bc>
 8003abc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003ac0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003ac4:	f023 030f 	bic.w	r3, r3, #15
 8003ac8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a2b      	ldr	r2, [pc, #172]	@ (8003b7c <HAL_I2S_Init+0x278>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d101      	bne.n	8003ad8 <HAL_I2S_Init+0x1d4>
 8003ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b80 <HAL_I2S_Init+0x27c>)
 8003ad6:	e001      	b.n	8003adc <HAL_I2S_Init+0x1d8>
 8003ad8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003adc:	2202      	movs	r2, #2
 8003ade:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a25      	ldr	r2, [pc, #148]	@ (8003b7c <HAL_I2S_Init+0x278>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d101      	bne.n	8003aee <HAL_I2S_Init+0x1ea>
 8003aea:	4b25      	ldr	r3, [pc, #148]	@ (8003b80 <HAL_I2S_Init+0x27c>)
 8003aec:	e001      	b.n	8003af2 <HAL_I2S_Init+0x1ee>
 8003aee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003afe:	d003      	beq.n	8003b08 <HAL_I2S_Init+0x204>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d103      	bne.n	8003b10 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003b08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b0c:	613b      	str	r3, [r7, #16]
 8003b0e:	e001      	b.n	8003b14 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003b32:	4313      	orrs	r3, r2
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	897b      	ldrh	r3, [r7, #10]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b40:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a0d      	ldr	r2, [pc, #52]	@ (8003b7c <HAL_I2S_Init+0x278>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d101      	bne.n	8003b50 <HAL_I2S_Init+0x24c>
 8003b4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b80 <HAL_I2S_Init+0x27c>)
 8003b4e:	e001      	b.n	8003b54 <HAL_I2S_Init+0x250>
 8003b50:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b54:	897a      	ldrh	r2, [r7, #10]
 8003b56:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003b66:	2300      	movs	r3, #0
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3720      	adds	r7, #32
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	08003c7b 	.word	0x08003c7b
 8003b74:	cccccccd 	.word	0xcccccccd
 8003b78:	08003d91 	.word	0x08003d91
 8003b7c:	40003800 	.word	0x40003800
 8003b80:	40003400 	.word	0x40003400

08003b84 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bcc:	881a      	ldrh	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd8:	1c9a      	adds	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	3b01      	subs	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf0:	b29b      	uxth	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10e      	bne.n	8003c14 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c04:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f7ff ffb8 	bl	8003b84 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c14:	bf00      	nop
 8003c16:	3708      	adds	r7, #8
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}

08003c1c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	68da      	ldr	r2, [r3, #12]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2e:	b292      	uxth	r2, r2
 8003c30:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c36:	1c9a      	adds	r2, r3, #2
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10e      	bne.n	8003c72 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003c62:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff ff93 	bl	8003b98 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b086      	sub	sp, #24
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d13a      	bne.n	8003d0c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d109      	bne.n	8003cb4 <I2S_IRQHandler+0x3a>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003caa:	2b40      	cmp	r3, #64	@ 0x40
 8003cac:	d102      	bne.n	8003cb4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ffb4 	bl	8003c1c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cba:	2b40      	cmp	r3, #64	@ 0x40
 8003cbc:	d126      	bne.n	8003d0c <I2S_IRQHandler+0x92>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	f003 0320 	and.w	r3, r3, #32
 8003cc8:	2b20      	cmp	r3, #32
 8003cca:	d11f      	bne.n	8003d0c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003cda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003cdc:	2300      	movs	r3, #0
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	68db      	ldr	r3, [r3, #12]
 8003ce6:	613b      	str	r3, [r7, #16]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cfe:	f043 0202 	orr.w	r2, r3, #2
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff ff50 	bl	8003bac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b03      	cmp	r3, #3
 8003d16:	d136      	bne.n	8003d86 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	f003 0302 	and.w	r3, r3, #2
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d109      	bne.n	8003d36 <I2S_IRQHandler+0xbc>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d2c:	2b80      	cmp	r3, #128	@ 0x80
 8003d2e:	d102      	bne.n	8003d36 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff ff45 	bl	8003bc0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	f003 0308 	and.w	r3, r3, #8
 8003d3c:	2b08      	cmp	r3, #8
 8003d3e:	d122      	bne.n	8003d86 <I2S_IRQHandler+0x10c>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f003 0320 	and.w	r3, r3, #32
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d11b      	bne.n	8003d86 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	685a      	ldr	r2, [r3, #4]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003d5c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	60fb      	str	r3, [r7, #12]
 8003d6a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d78:	f043 0204 	orr.w	r2, r3, #4
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ff13 	bl	8003bac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a92      	ldr	r2, [pc, #584]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d101      	bne.n	8003dae <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003daa:	4b92      	ldr	r3, [pc, #584]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dac:	e001      	b.n	8003db2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003dae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a8b      	ldr	r2, [pc, #556]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d101      	bne.n	8003dcc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003dc8:	4b8a      	ldr	r3, [pc, #552]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003dca:	e001      	b.n	8003dd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003dcc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ddc:	d004      	beq.n	8003de8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f040 8099 	bne.w	8003f1a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d107      	bne.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d002      	beq.n	8003e02 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 f925 	bl	800404c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d107      	bne.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d002      	beq.n	8003e1c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f9c8 	bl	80041ac <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e22:	2b40      	cmp	r3, #64	@ 0x40
 8003e24:	d13a      	bne.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f003 0320 	and.w	r3, r3, #32
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d035      	beq.n	8003e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a6e      	ldr	r2, [pc, #440]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d101      	bne.n	8003e3e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003e3a:	4b6e      	ldr	r3, [pc, #440]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e3c:	e001      	b.n	8003e42 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003e3e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e42:	685a      	ldr	r2, [r3, #4]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4969      	ldr	r1, [pc, #420]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4a:	428b      	cmp	r3, r1
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003e4e:	4b69      	ldr	r3, [pc, #420]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e50:	e001      	b.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003e52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003e56:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e5a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	60fb      	str	r3, [r7, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	60fb      	str	r3, [r7, #12]
 8003e80:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e8e:	f043 0202 	orr.w	r2, r3, #2
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f7ff fe88 	bl	8003bac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 0308 	and.w	r3, r3, #8
 8003ea2:	2b08      	cmp	r3, #8
 8003ea4:	f040 80c3 	bne.w	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f003 0320 	and.w	r3, r3, #32
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 80bd 	beq.w	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685a      	ldr	r2, [r3, #4]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ec2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a49      	ldr	r2, [pc, #292]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d101      	bne.n	8003ed2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003ece:	4b49      	ldr	r3, [pc, #292]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ed0:	e001      	b.n	8003ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003ed2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4944      	ldr	r1, [pc, #272]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	428b      	cmp	r3, r1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003ee2:	4b44      	ldr	r3, [pc, #272]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003eea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eee:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	60bb      	str	r3, [r7, #8]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]
 8003efc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f043 0204 	orr.w	r2, r3, #4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7ff fe4a 	bl	8003bac <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f18:	e089      	b.n	800402e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	f003 0302 	and.w	r3, r3, #2
 8003f20:	2b02      	cmp	r3, #2
 8003f22:	d107      	bne.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8be 	bl	80040b0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d107      	bne.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f8fd 	bl	8004148 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	d12f      	bne.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0320 	and.w	r3, r3, #32
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d02a      	beq.n	8003fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	685a      	ldr	r2, [r3, #4]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003f70:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a1e      	ldr	r2, [pc, #120]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d101      	bne.n	8003f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f7e:	e001      	b.n	8003f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f84:	685a      	ldr	r2, [r3, #4]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4919      	ldr	r1, [pc, #100]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8c:	428b      	cmp	r3, r1
 8003f8e:	d101      	bne.n	8003f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f90:	4b18      	ldr	r3, [pc, #96]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f92:	e001      	b.n	8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f9c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff fdfa 	bl	8003bac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d136      	bne.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d031      	beq.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a07      	ldr	r2, [pc, #28]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d101      	bne.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003fd6:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd8:	e001      	b.n	8003fde <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003fda:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4902      	ldr	r1, [pc, #8]	@ (8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fe6:	428b      	cmp	r3, r1
 8003fe8:	d106      	bne.n	8003ff8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003fea:	4b02      	ldr	r3, [pc, #8]	@ (8003ff4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fec:	e006      	b.n	8003ffc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003fee:	bf00      	nop
 8003ff0:	40003800 	.word	0x40003800
 8003ff4:	40003400 	.word	0x40003400
 8003ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ffc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004000:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	685a      	ldr	r2, [r3, #4]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004010:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f7ff fdc0 	bl	8003bac <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800402c:	e000      	b.n	8004030 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800402e:	bf00      	nop
}
 8004030:	bf00      	nop
 8004032:	3720      	adds	r7, #32
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}

08004038 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004058:	1c99      	adds	r1, r3, #2
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6251      	str	r1, [r2, #36]	@ 0x24
 800405e:	881a      	ldrh	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d113      	bne.n	80040a6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	685a      	ldr	r2, [r3, #4]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800408c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2201      	movs	r2, #1
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ffc9 	bl	8004038 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040a6:	bf00      	nop
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}
	...

080040b0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	1c99      	adds	r1, r3, #2
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6251      	str	r1, [r2, #36]	@ 0x24
 80040c2:	8819      	ldrh	r1, [r3, #0]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004140 <I2SEx_TxISR_I2SExt+0x90>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <I2SEx_TxISR_I2SExt+0x22>
 80040ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004144 <I2SEx_TxISR_I2SExt+0x94>)
 80040d0:	e001      	b.n	80040d6 <I2SEx_TxISR_I2SExt+0x26>
 80040d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040d6:	460a      	mov	r2, r1
 80040d8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	3b01      	subs	r3, #1
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d121      	bne.n	8004136 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a12      	ldr	r2, [pc, #72]	@ (8004140 <I2SEx_TxISR_I2SExt+0x90>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d101      	bne.n	8004100 <I2SEx_TxISR_I2SExt+0x50>
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <I2SEx_TxISR_I2SExt+0x94>)
 80040fe:	e001      	b.n	8004104 <I2SEx_TxISR_I2SExt+0x54>
 8004100:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004104:	685a      	ldr	r2, [r3, #4]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	490d      	ldr	r1, [pc, #52]	@ (8004140 <I2SEx_TxISR_I2SExt+0x90>)
 800410c:	428b      	cmp	r3, r1
 800410e:	d101      	bne.n	8004114 <I2SEx_TxISR_I2SExt+0x64>
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <I2SEx_TxISR_I2SExt+0x94>)
 8004112:	e001      	b.n	8004118 <I2SEx_TxISR_I2SExt+0x68>
 8004114:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004118:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800411c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d106      	bne.n	8004136 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff81 	bl	8004038 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004136:	bf00      	nop
 8004138:	3708      	adds	r7, #8
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40003800 	.word	0x40003800
 8004144:	40003400 	.word	0x40003400

08004148 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68d8      	ldr	r0, [r3, #12]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	1c99      	adds	r1, r3, #2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004160:	b282      	uxth	r2, r0
 8004162:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004176:	b29b      	uxth	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d113      	bne.n	80041a4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685a      	ldr	r2, [r3, #4]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800418a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d106      	bne.n	80041a4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f7ff ff4a 	bl	8004038 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041a4:	bf00      	nop
 80041a6:	3708      	adds	r7, #8
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a20      	ldr	r2, [pc, #128]	@ (800423c <I2SEx_RxISR_I2SExt+0x90>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d101      	bne.n	80041c2 <I2SEx_RxISR_I2SExt+0x16>
 80041be:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <I2SEx_RxISR_I2SExt+0x94>)
 80041c0:	e001      	b.n	80041c6 <I2SEx_RxISR_I2SExt+0x1a>
 80041c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041c6:	68d8      	ldr	r0, [r3, #12]
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	1c99      	adds	r1, r3, #2
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80041d2:	b282      	uxth	r2, r0
 80041d4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d121      	bne.n	8004232 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a12      	ldr	r2, [pc, #72]	@ (800423c <I2SEx_RxISR_I2SExt+0x90>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d101      	bne.n	80041fc <I2SEx_RxISR_I2SExt+0x50>
 80041f8:	4b11      	ldr	r3, [pc, #68]	@ (8004240 <I2SEx_RxISR_I2SExt+0x94>)
 80041fa:	e001      	b.n	8004200 <I2SEx_RxISR_I2SExt+0x54>
 80041fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	490d      	ldr	r1, [pc, #52]	@ (800423c <I2SEx_RxISR_I2SExt+0x90>)
 8004208:	428b      	cmp	r3, r1
 800420a:	d101      	bne.n	8004210 <I2SEx_RxISR_I2SExt+0x64>
 800420c:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <I2SEx_RxISR_I2SExt+0x94>)
 800420e:	e001      	b.n	8004214 <I2SEx_RxISR_I2SExt+0x68>
 8004210:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004214:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004218:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800421e:	b29b      	uxth	r3, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	d106      	bne.n	8004232 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff ff03 	bl	8004038 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40003800 	.word	0x40003800
 8004240:	40003400 	.word	0x40003400

08004244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004252:	2301      	movs	r3, #1
 8004254:	e267      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d075      	beq.n	800434e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004262:	4b88      	ldr	r3, [pc, #544]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	f003 030c 	and.w	r3, r3, #12
 800426a:	2b04      	cmp	r3, #4
 800426c:	d00c      	beq.n	8004288 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800426e:	4b85      	ldr	r3, [pc, #532]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004276:	2b08      	cmp	r3, #8
 8004278:	d112      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427a:	4b82      	ldr	r3, [pc, #520]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004282:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004286:	d10b      	bne.n	80042a0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	4b7e      	ldr	r3, [pc, #504]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d05b      	beq.n	800434c <HAL_RCC_OscConfig+0x108>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d157      	bne.n	800434c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e242      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042a8:	d106      	bne.n	80042b8 <HAL_RCC_OscConfig+0x74>
 80042aa:	4b76      	ldr	r3, [pc, #472]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a75      	ldr	r2, [pc, #468]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	e01d      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x98>
 80042c2:	4b70      	ldr	r3, [pc, #448]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a6f      	ldr	r2, [pc, #444]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	4b6d      	ldr	r3, [pc, #436]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0xb0>
 80042dc:	4b69      	ldr	r3, [pc, #420]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a68      	ldr	r2, [pc, #416]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b66      	ldr	r3, [pc, #408]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a65      	ldr	r2, [pc, #404]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80042ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d013      	beq.n	8004324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fc:	f7fc fd60 	bl	8000dc0 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004304:	f7fc fd5c 	bl	8000dc0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b64      	cmp	r3, #100	@ 0x64
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e207      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004316:	4b5b      	ldr	r3, [pc, #364]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431e:	2b00      	cmp	r3, #0
 8004320:	d0f0      	beq.n	8004304 <HAL_RCC_OscConfig+0xc0>
 8004322:	e014      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004324:	f7fc fd4c 	bl	8000dc0 <HAL_GetTick>
 8004328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	e008      	b.n	800433e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800432c:	f7fc fd48 	bl	8000dc0 <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	2b64      	cmp	r3, #100	@ 0x64
 8004338:	d901      	bls.n	800433e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800433a:	2303      	movs	r3, #3
 800433c:	e1f3      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800433e:	4b51      	ldr	r3, [pc, #324]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004346:	2b00      	cmp	r3, #0
 8004348:	d1f0      	bne.n	800432c <HAL_RCC_OscConfig+0xe8>
 800434a:	e000      	b.n	800434e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800434c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d063      	beq.n	8004422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800435a:	4b4a      	ldr	r3, [pc, #296]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	f003 030c 	and.w	r3, r3, #12
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00b      	beq.n	800437e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004366:	4b47      	ldr	r3, [pc, #284]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800436e:	2b08      	cmp	r3, #8
 8004370:	d11c      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004372:	4b44      	ldr	r3, [pc, #272]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d116      	bne.n	80043ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800437e:	4b41      	ldr	r3, [pc, #260]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d005      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d001      	beq.n	8004396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e1c7      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004396:	4b3b      	ldr	r3, [pc, #236]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	4937      	ldr	r1, [pc, #220]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	e03a      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d020      	beq.n	80043f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043b4:	4b34      	ldr	r3, [pc, #208]	@ (8004488 <HAL_RCC_OscConfig+0x244>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fc fd01 	bl	8000dc0 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	e008      	b.n	80043d4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043c2:	f7fc fcfd 	bl	8000dc0 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d901      	bls.n	80043d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e1a8      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043d4:	4b2b      	ldr	r3, [pc, #172]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d0f0      	beq.n	80043c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043e0:	4b28      	ldr	r3, [pc, #160]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4925      	ldr	r1, [pc, #148]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	e015      	b.n	8004422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043f6:	4b24      	ldr	r3, [pc, #144]	@ (8004488 <HAL_RCC_OscConfig+0x244>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fc:	f7fc fce0 	bl	8000dc0 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	e008      	b.n	8004416 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004404:	f7fc fcdc 	bl	8000dc0 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	2b02      	cmp	r3, #2
 8004410:	d901      	bls.n	8004416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e187      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4b1b      	ldr	r3, [pc, #108]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0302 	and.w	r3, r3, #2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1f0      	bne.n	8004404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b00      	cmp	r3, #0
 800442c:	d036      	beq.n	800449c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d016      	beq.n	8004464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004436:	4b15      	ldr	r3, [pc, #84]	@ (800448c <HAL_RCC_OscConfig+0x248>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fc fcc0 	bl	8000dc0 <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004444:	f7fc fcbc 	bl	8000dc0 <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e167      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004456:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <HAL_RCC_OscConfig+0x240>)
 8004458:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x200>
 8004462:	e01b      	b.n	800449c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004464:	4b09      	ldr	r3, [pc, #36]	@ (800448c <HAL_RCC_OscConfig+0x248>)
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800446a:	f7fc fca9 	bl	8000dc0 <HAL_GetTick>
 800446e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	e00e      	b.n	8004490 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004472:	f7fc fca5 	bl	8000dc0 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	2b02      	cmp	r3, #2
 800447e:	d907      	bls.n	8004490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e150      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	42470000 	.word	0x42470000
 800448c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004490:	4b88      	ldr	r3, [pc, #544]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004492:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1ea      	bne.n	8004472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0304 	and.w	r3, r3, #4
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	f000 8097 	beq.w	80045d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ae:	4b81      	ldr	r3, [pc, #516]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10f      	bne.n	80044da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ba:	2300      	movs	r3, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	4b7d      	ldr	r3, [pc, #500]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	4a7c      	ldr	r2, [pc, #496]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80044ca:	4b7a      	ldr	r3, [pc, #488]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	60bb      	str	r3, [r7, #8]
 80044d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044d6:	2301      	movs	r3, #1
 80044d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044da:	4b77      	ldr	r3, [pc, #476]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d118      	bne.n	8004518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044e6:	4b74      	ldr	r3, [pc, #464]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4a73      	ldr	r2, [pc, #460]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 80044ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044f2:	f7fc fc65 	bl	8000dc0 <HAL_GetTick>
 80044f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044f8:	e008      	b.n	800450c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044fa:	f7fc fc61 	bl	8000dc0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	2b02      	cmp	r3, #2
 8004506:	d901      	bls.n	800450c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e10c      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450c:	4b6a      	ldr	r3, [pc, #424]	@ (80046b8 <HAL_RCC_OscConfig+0x474>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004514:	2b00      	cmp	r3, #0
 8004516:	d0f0      	beq.n	80044fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d106      	bne.n	800452e <HAL_RCC_OscConfig+0x2ea>
 8004520:	4b64      	ldr	r3, [pc, #400]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004524:	4a63      	ldr	r2, [pc, #396]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004526:	f043 0301 	orr.w	r3, r3, #1
 800452a:	6713      	str	r3, [r2, #112]	@ 0x70
 800452c:	e01c      	b.n	8004568 <HAL_RCC_OscConfig+0x324>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	2b05      	cmp	r3, #5
 8004534:	d10c      	bne.n	8004550 <HAL_RCC_OscConfig+0x30c>
 8004536:	4b5f      	ldr	r3, [pc, #380]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800453a:	4a5e      	ldr	r2, [pc, #376]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800453c:	f043 0304 	orr.w	r3, r3, #4
 8004540:	6713      	str	r3, [r2, #112]	@ 0x70
 8004542:	4b5c      	ldr	r3, [pc, #368]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004546:	4a5b      	ldr	r2, [pc, #364]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004548:	f043 0301 	orr.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	@ 0x70
 800454e:	e00b      	b.n	8004568 <HAL_RCC_OscConfig+0x324>
 8004550:	4b58      	ldr	r3, [pc, #352]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004554:	4a57      	ldr	r2, [pc, #348]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004556:	f023 0301 	bic.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	@ 0x70
 800455c:	4b55      	ldr	r3, [pc, #340]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004560:	4a54      	ldr	r2, [pc, #336]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004570:	f7fc fc26 	bl	8000dc0 <HAL_GetTick>
 8004574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004576:	e00a      	b.n	800458e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004578:	f7fc fc22 	bl	8000dc0 <HAL_GetTick>
 800457c:	4602      	mov	r2, r0
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	1ad3      	subs	r3, r2, r3
 8004582:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004586:	4293      	cmp	r3, r2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e0cb      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800458e:	4b49      	ldr	r3, [pc, #292]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d0ee      	beq.n	8004578 <HAL_RCC_OscConfig+0x334>
 800459a:	e014      	b.n	80045c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800459c:	f7fc fc10 	bl	8000dc0 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045a2:	e00a      	b.n	80045ba <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045a4:	f7fc fc0c 	bl	8000dc0 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0b5      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ba:	4b3e      	ldr	r3, [pc, #248]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1ee      	bne.n	80045a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d105      	bne.n	80045d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045cc:	4b39      	ldr	r3, [pc, #228]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	4a38      	ldr	r2, [pc, #224]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80045d6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	f000 80a1 	beq.w	8004724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045e2:	4b34      	ldr	r3, [pc, #208]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 030c 	and.w	r3, r3, #12
 80045ea:	2b08      	cmp	r3, #8
 80045ec:	d05c      	beq.n	80046a8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	2b02      	cmp	r3, #2
 80045f4:	d141      	bne.n	800467a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045f6:	4b31      	ldr	r3, [pc, #196]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fc fbe0 	bl	8000dc0 <HAL_GetTick>
 8004600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004602:	e008      	b.n	8004616 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004604:	f7fc fbdc 	bl	8000dc0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	2b02      	cmp	r3, #2
 8004610:	d901      	bls.n	8004616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004612:	2303      	movs	r3, #3
 8004614:	e087      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004616:	4b27      	ldr	r3, [pc, #156]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d1f0      	bne.n	8004604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004630:	019b      	lsls	r3, r3, #6
 8004632:	431a      	orrs	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004638:	085b      	lsrs	r3, r3, #1
 800463a:	3b01      	subs	r3, #1
 800463c:	041b      	lsls	r3, r3, #16
 800463e:	431a      	orrs	r2, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004644:	061b      	lsls	r3, r3, #24
 8004646:	491b      	ldr	r1, [pc, #108]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 8004648:	4313      	orrs	r3, r2
 800464a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800464c:	4b1b      	ldr	r3, [pc, #108]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 800464e:	2201      	movs	r2, #1
 8004650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004652:	f7fc fbb5 	bl	8000dc0 <HAL_GetTick>
 8004656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004658:	e008      	b.n	800466c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800465a:	f7fc fbb1 	bl	8000dc0 <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	2b02      	cmp	r3, #2
 8004666:	d901      	bls.n	800466c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004668:	2303      	movs	r3, #3
 800466a:	e05c      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d0f0      	beq.n	800465a <HAL_RCC_OscConfig+0x416>
 8004678:	e054      	b.n	8004724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800467a:	4b10      	ldr	r3, [pc, #64]	@ (80046bc <HAL_RCC_OscConfig+0x478>)
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004680:	f7fc fb9e 	bl	8000dc0 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fc fb9a 	bl	8000dc0 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e045      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800469a:	4b06      	ldr	r3, [pc, #24]	@ (80046b4 <HAL_RCC_OscConfig+0x470>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x444>
 80046a6:	e03d      	b.n	8004724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	e038      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
 80046b4:	40023800 	.word	0x40023800
 80046b8:	40007000 	.word	0x40007000
 80046bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x4ec>)
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d028      	beq.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046d8:	429a      	cmp	r2, r3
 80046da:	d121      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d11a      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80046f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d111      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	3b01      	subs	r3, #1
 800470a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d107      	bne.n	8004720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d001      	beq.n	8004724 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e000      	b.n	8004726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004724:	2300      	movs	r3, #0
}
 8004726:	4618      	mov	r0, r3
 8004728:	3718      	adds	r7, #24
 800472a:	46bd      	mov	sp, r7
 800472c:	bd80      	pop	{r7, pc}
 800472e:	bf00      	nop
 8004730:	40023800 	.word	0x40023800

08004734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b084      	sub	sp, #16
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d101      	bne.n	8004748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e0cc      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004748:	4b68      	ldr	r3, [pc, #416]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0307 	and.w	r3, r3, #7
 8004750:	683a      	ldr	r2, [r7, #0]
 8004752:	429a      	cmp	r2, r3
 8004754:	d90c      	bls.n	8004770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004756:	4b65      	ldr	r3, [pc, #404]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800475e:	4b63      	ldr	r3, [pc, #396]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0307 	and.w	r3, r3, #7
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d001      	beq.n	8004770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e0b8      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0302 	and.w	r3, r3, #2
 8004778:	2b00      	cmp	r3, #0
 800477a:	d020      	beq.n	80047be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0304 	and.w	r3, r3, #4
 8004784:	2b00      	cmp	r3, #0
 8004786:	d005      	beq.n	8004794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004788:	4b59      	ldr	r3, [pc, #356]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	4a58      	ldr	r2, [pc, #352]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0308 	and.w	r3, r3, #8
 800479c:	2b00      	cmp	r3, #0
 800479e:	d005      	beq.n	80047ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047a0:	4b53      	ldr	r3, [pc, #332]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	4a52      	ldr	r2, [pc, #328]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80047aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047ac:	4b50      	ldr	r3, [pc, #320]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	494d      	ldr	r1, [pc, #308]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 0301 	and.w	r3, r3, #1
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d044      	beq.n	8004854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d107      	bne.n	80047e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047d2:	4b47      	ldr	r3, [pc, #284]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d119      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e07f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d003      	beq.n	80047f2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ee:	2b03      	cmp	r3, #3
 80047f0:	d107      	bne.n	8004802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047f2:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e06f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004802:	4b3b      	ldr	r3, [pc, #236]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d101      	bne.n	8004812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	e067      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004812:	4b37      	ldr	r3, [pc, #220]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f023 0203 	bic.w	r2, r3, #3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	4934      	ldr	r1, [pc, #208]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004820:	4313      	orrs	r3, r2
 8004822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004824:	f7fc facc 	bl	8000dc0 <HAL_GetTick>
 8004828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482a:	e00a      	b.n	8004842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800482c:	f7fc fac8 	bl	8000dc0 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	@ 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d901      	bls.n	8004842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e04f      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004842:	4b2b      	ldr	r3, [pc, #172]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f003 020c 	and.w	r2, r3, #12
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	429a      	cmp	r2, r3
 8004852:	d1eb      	bne.n	800482c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004854:	4b25      	ldr	r3, [pc, #148]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	683a      	ldr	r2, [r7, #0]
 800485e:	429a      	cmp	r2, r3
 8004860:	d20c      	bcs.n	800487c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004862:	4b22      	ldr	r3, [pc, #136]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800486a:	4b20      	ldr	r3, [pc, #128]	@ (80048ec <HAL_RCC_ClockConfig+0x1b8>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0307 	and.w	r3, r3, #7
 8004872:	683a      	ldr	r2, [r7, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d001      	beq.n	800487c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e032      	b.n	80048e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f003 0304 	and.w	r3, r3, #4
 8004884:	2b00      	cmp	r3, #0
 8004886:	d008      	beq.n	800489a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004888:	4b19      	ldr	r3, [pc, #100]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	4916      	ldr	r1, [pc, #88]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 8004896:	4313      	orrs	r3, r2
 8004898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	490e      	ldr	r1, [pc, #56]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048ba:	f000 f821 	bl	8004900 <HAL_RCC_GetSysClockFreq>
 80048be:	4602      	mov	r2, r0
 80048c0:	4b0b      	ldr	r3, [pc, #44]	@ (80048f0 <HAL_RCC_ClockConfig+0x1bc>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 030f 	and.w	r3, r3, #15
 80048ca:	490a      	ldr	r1, [pc, #40]	@ (80048f4 <HAL_RCC_ClockConfig+0x1c0>)
 80048cc:	5ccb      	ldrb	r3, [r1, r3]
 80048ce:	fa22 f303 	lsr.w	r3, r2, r3
 80048d2:	4a09      	ldr	r2, [pc, #36]	@ (80048f8 <HAL_RCC_ClockConfig+0x1c4>)
 80048d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80048d6:	4b09      	ldr	r3, [pc, #36]	@ (80048fc <HAL_RCC_ClockConfig+0x1c8>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fc fa2c 	bl	8000d38 <HAL_InitTick>

  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3710      	adds	r7, #16
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	40023c00 	.word	0x40023c00
 80048f0:	40023800 	.word	0x40023800
 80048f4:	08008b84 	.word	0x08008b84
 80048f8:	20000000 	.word	0x20000000
 80048fc:	20000004 	.word	0x20000004

08004900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b094      	sub	sp, #80	@ 0x50
 8004906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004908:	2300      	movs	r3, #0
 800490a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800490c:	2300      	movs	r3, #0
 800490e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004910:	2300      	movs	r3, #0
 8004912:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004918:	4b79      	ldr	r3, [pc, #484]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 030c 	and.w	r3, r3, #12
 8004920:	2b08      	cmp	r3, #8
 8004922:	d00d      	beq.n	8004940 <HAL_RCC_GetSysClockFreq+0x40>
 8004924:	2b08      	cmp	r3, #8
 8004926:	f200 80e1 	bhi.w	8004aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <HAL_RCC_GetSysClockFreq+0x34>
 800492e:	2b04      	cmp	r3, #4
 8004930:	d003      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x3a>
 8004932:	e0db      	b.n	8004aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004934:	4b73      	ldr	r3, [pc, #460]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004936:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004938:	e0db      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800493a:	4b73      	ldr	r3, [pc, #460]	@ (8004b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800493c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800493e:	e0d8      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004940:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004948:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800494a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d063      	beq.n	8004a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004956:	4b6a      	ldr	r3, [pc, #424]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	2200      	movs	r2, #0
 800495e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004960:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004968:	633b      	str	r3, [r7, #48]	@ 0x30
 800496a:	2300      	movs	r3, #0
 800496c:	637b      	str	r3, [r7, #52]	@ 0x34
 800496e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004972:	4622      	mov	r2, r4
 8004974:	462b      	mov	r3, r5
 8004976:	f04f 0000 	mov.w	r0, #0
 800497a:	f04f 0100 	mov.w	r1, #0
 800497e:	0159      	lsls	r1, r3, #5
 8004980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004984:	0150      	lsls	r0, r2, #5
 8004986:	4602      	mov	r2, r0
 8004988:	460b      	mov	r3, r1
 800498a:	4621      	mov	r1, r4
 800498c:	1a51      	subs	r1, r2, r1
 800498e:	6139      	str	r1, [r7, #16]
 8004990:	4629      	mov	r1, r5
 8004992:	eb63 0301 	sbc.w	r3, r3, r1
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049a4:	4659      	mov	r1, fp
 80049a6:	018b      	lsls	r3, r1, #6
 80049a8:	4651      	mov	r1, sl
 80049aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049ae:	4651      	mov	r1, sl
 80049b0:	018a      	lsls	r2, r1, #6
 80049b2:	4651      	mov	r1, sl
 80049b4:	ebb2 0801 	subs.w	r8, r2, r1
 80049b8:	4659      	mov	r1, fp
 80049ba:	eb63 0901 	sbc.w	r9, r3, r1
 80049be:	f04f 0200 	mov.w	r2, #0
 80049c2:	f04f 0300 	mov.w	r3, #0
 80049c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80049d2:	4690      	mov	r8, r2
 80049d4:	4699      	mov	r9, r3
 80049d6:	4623      	mov	r3, r4
 80049d8:	eb18 0303 	adds.w	r3, r8, r3
 80049dc:	60bb      	str	r3, [r7, #8]
 80049de:	462b      	mov	r3, r5
 80049e0:	eb49 0303 	adc.w	r3, r9, r3
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	f04f 0200 	mov.w	r2, #0
 80049ea:	f04f 0300 	mov.w	r3, #0
 80049ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80049f2:	4629      	mov	r1, r5
 80049f4:	024b      	lsls	r3, r1, #9
 80049f6:	4621      	mov	r1, r4
 80049f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049fc:	4621      	mov	r1, r4
 80049fe:	024a      	lsls	r2, r1, #9
 8004a00:	4610      	mov	r0, r2
 8004a02:	4619      	mov	r1, r3
 8004a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a06:	2200      	movs	r2, #0
 8004a08:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a10:	f7fb fbda 	bl	80001c8 <__aeabi_uldivmod>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4613      	mov	r3, r2
 8004a1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a1c:	e058      	b.n	8004ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a1e:	4b38      	ldr	r3, [pc, #224]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	099b      	lsrs	r3, r3, #6
 8004a24:	2200      	movs	r2, #0
 8004a26:	4618      	mov	r0, r3
 8004a28:	4611      	mov	r1, r2
 8004a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a2e:	623b      	str	r3, [r7, #32]
 8004a30:	2300      	movs	r3, #0
 8004a32:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004a38:	4642      	mov	r2, r8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	f04f 0000 	mov.w	r0, #0
 8004a40:	f04f 0100 	mov.w	r1, #0
 8004a44:	0159      	lsls	r1, r3, #5
 8004a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a4a:	0150      	lsls	r0, r2, #5
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	460b      	mov	r3, r1
 8004a50:	4641      	mov	r1, r8
 8004a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8004a56:	4649      	mov	r1, r9
 8004a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	f04f 0300 	mov.w	r3, #0
 8004a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a70:	ebb2 040a 	subs.w	r4, r2, sl
 8004a74:	eb63 050b 	sbc.w	r5, r3, fp
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	00eb      	lsls	r3, r5, #3
 8004a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a86:	00e2      	lsls	r2, r4, #3
 8004a88:	4614      	mov	r4, r2
 8004a8a:	461d      	mov	r5, r3
 8004a8c:	4643      	mov	r3, r8
 8004a8e:	18e3      	adds	r3, r4, r3
 8004a90:	603b      	str	r3, [r7, #0]
 8004a92:	464b      	mov	r3, r9
 8004a94:	eb45 0303 	adc.w	r3, r5, r3
 8004a98:	607b      	str	r3, [r7, #4]
 8004a9a:	f04f 0200 	mov.w	r2, #0
 8004a9e:	f04f 0300 	mov.w	r3, #0
 8004aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004aa6:	4629      	mov	r1, r5
 8004aa8:	028b      	lsls	r3, r1, #10
 8004aaa:	4621      	mov	r1, r4
 8004aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ab0:	4621      	mov	r1, r4
 8004ab2:	028a      	lsls	r2, r1, #10
 8004ab4:	4610      	mov	r0, r2
 8004ab6:	4619      	mov	r1, r3
 8004ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aba:	2200      	movs	r2, #0
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	61fa      	str	r2, [r7, #28]
 8004ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ac4:	f7fb fb80 	bl	80001c8 <__aeabi_uldivmod>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4613      	mov	r3, r2
 8004ace:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	0c1b      	lsrs	r3, r3, #16
 8004ad6:	f003 0303 	and.w	r3, r3, #3
 8004ada:	3301      	adds	r3, #1
 8004adc:	005b      	lsls	r3, r3, #1
 8004ade:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004ae0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004aec:	4b05      	ldr	r3, [pc, #20]	@ (8004b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8004aee:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004af2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3750      	adds	r7, #80	@ 0x50
 8004af8:	46bd      	mov	sp, r7
 8004afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004afe:	bf00      	nop
 8004b00:	40023800 	.word	0x40023800
 8004b04:	00f42400 	.word	0x00f42400
 8004b08:	007a1200 	.word	0x007a1200

08004b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b10:	4b03      	ldr	r3, [pc, #12]	@ (8004b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	20000000 	.word	0x20000000

08004b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b28:	f7ff fff0 	bl	8004b0c <HAL_RCC_GetHCLKFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	0a9b      	lsrs	r3, r3, #10
 8004b34:	f003 0307 	and.w	r3, r3, #7
 8004b38:	4903      	ldr	r1, [pc, #12]	@ (8004b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b3a:	5ccb      	ldrb	r3, [r1, r3]
 8004b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40023800 	.word	0x40023800
 8004b48:	08008b94 	.word	0x08008b94

08004b4c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0301 	and.w	r3, r3, #1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d105      	bne.n	8004b74 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d035      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b74:	4b62      	ldr	r3, [pc, #392]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b7a:	f7fc f921 	bl	8000dc0 <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b80:	e008      	b.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004b82:	f7fc f91d 	bl	8000dc0 <HAL_GetTick>
 8004b86:	4602      	mov	r2, r0
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	1ad3      	subs	r3, r2, r3
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d901      	bls.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b90:	2303      	movs	r3, #3
 8004b92:	e0b0      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b94:	4b5b      	ldr	r3, [pc, #364]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1f0      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	019a      	lsls	r2, r3, #6
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	071b      	lsls	r3, r3, #28
 8004bac:	4955      	ldr	r1, [pc, #340]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bb4:	4b52      	ldr	r3, [pc, #328]	@ (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bba:	f7fc f901 	bl	8000dc0 <HAL_GetTick>
 8004bbe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bc2:	f7fc f8fd 	bl	8000dc0 <HAL_GetTick>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e090      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bd4:	4b4b      	ldr	r3, [pc, #300]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d0f0      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	f000 8083 	beq.w	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004bee:	2300      	movs	r3, #0
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	4b44      	ldr	r3, [pc, #272]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	4a43      	ldr	r2, [pc, #268]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004bf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004bfe:	4b41      	ldr	r3, [pc, #260]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c06:	60fb      	str	r3, [r7, #12]
 8004c08:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c0a:	4b3f      	ldr	r3, [pc, #252]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c16:	f7fc f8d3 	bl	8000dc0 <HAL_GetTick>
 8004c1a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c1c:	e008      	b.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c1e:	f7fc f8cf 	bl	8000dc0 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e062      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004c30:	4b35      	ldr	r3, [pc, #212]	@ (8004d08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c3c:	4b31      	ldr	r3, [pc, #196]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c44:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02f      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68db      	ldr	r3, [r3, #12]
 8004c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d028      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c62:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c64:	4b29      	ldr	r3, [pc, #164]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c66:	2201      	movs	r2, #1
 8004c68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c6a:	4b28      	ldr	r3, [pc, #160]	@ (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c70:	4a24      	ldr	r2, [pc, #144]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c76:	4b23      	ldr	r3, [pc, #140]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c7a:	f003 0301 	and.w	r3, r3, #1
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d114      	bne.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c82:	f7fc f89d 	bl	8000dc0 <HAL_GetTick>
 8004c86:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fc f899 	bl	8000dc0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e02a      	b.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004cb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004cb8:	d10d      	bne.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004cba:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004cca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cce:	490d      	ldr	r1, [pc, #52]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	608b      	str	r3, [r1, #8]
 8004cd4:	e005      	b.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	4a0a      	ldr	r2, [pc, #40]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cdc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004ce0:	6093      	str	r3, [r2, #8]
 8004ce2:	4b08      	ldr	r3, [pc, #32]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ce4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cee:	4905      	ldr	r1, [pc, #20]	@ (8004d04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3718      	adds	r7, #24
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	42470068 	.word	0x42470068
 8004d04:	40023800 	.word	0x40023800
 8004d08:	40007000 	.word	0x40007000
 8004d0c:	42470e40 	.word	0x42470e40

08004d10 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d13f      	bne.n	8004dae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d006      	beq.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004d44:	d12f      	bne.n	8004da6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004d46:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d48:	617b      	str	r3, [r7, #20]
          break;
 8004d4a:	e02f      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d54:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d58:	d108      	bne.n	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d5a:	4b19      	ldr	r3, [pc, #100]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d62:	4a19      	ldr	r2, [pc, #100]	@ (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e007      	b.n	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d6c:	4b14      	ldr	r3, [pc, #80]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d74:	4a15      	ldr	r2, [pc, #84]	@ (8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d7c:	4b10      	ldr	r3, [pc, #64]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d90:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004d92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004d96:	0f1b      	lsrs	r3, r3, #28
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da2:	617b      	str	r3, [r7, #20]
          break;
 8004da4:	e002      	b.n	8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
          break;
 8004daa:	bf00      	nop
        }
      }
      break;
 8004dac:	e000      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004dae:	bf00      	nop
    }
  }
  return frequency;
 8004db0:	697b      	ldr	r3, [r7, #20]
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	371c      	adds	r7, #28
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr
 8004dbe:	bf00      	nop
 8004dc0:	40023800 	.word	0x40023800
 8004dc4:	00bb8000 	.word	0x00bb8000
 8004dc8:	007a1200 	.word	0x007a1200
 8004dcc:	00f42400 	.word	0x00f42400

08004dd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e07b      	b.n	8004eda <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d108      	bne.n	8004dfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004df2:	d009      	beq.n	8004e08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	61da      	str	r2, [r3, #28]
 8004dfa:	e005      	b.n	8004e08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fb fe6c 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e3e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e50:	431a      	orrs	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	431a      	orrs	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e8c:	ea42 0103 	orr.w	r1, r2, r3
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	0c1b      	lsrs	r3, r3, #16
 8004ea6:	f003 0104 	and.w	r1, r3, #4
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eae:	f003 0210 	and.w	r2, r3, #16
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	430a      	orrs	r2, r1
 8004eb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	69da      	ldr	r2, [r3, #28]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ec8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}

08004ee2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	f107 001c 	add.w	r0, r7, #28
 8004ef0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ef4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d123      	bne.n	8004f44 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f00:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f24:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d105      	bne.n	8004f38 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f000 f9dc 	bl	80052f6 <USB_CoreReset>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	73fb      	strb	r3, [r7, #15]
 8004f42:	e01b      	b.n	8004f7c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f9d0 	bl	80052f6 <USB_CoreReset>
 8004f56:	4603      	mov	r3, r0
 8004f58:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f5a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d106      	bne.n	8004f70 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f6e:	e005      	b.n	8004f7c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f74:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f7c:	7fbb      	ldrb	r3, [r7, #30]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d10b      	bne.n	8004f9a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	f043 0206 	orr.w	r2, r3, #6
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f043 0220 	orr.w	r2, r3, #32
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3710      	adds	r7, #16
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004fa6:	b004      	add	sp, #16
 8004fa8:	4770      	bx	lr

08004faa <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004faa:	b480      	push	{r7}
 8004fac:	b083      	sub	sp, #12
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f023 0201 	bic.w	r2, r3, #1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800500a:	78fb      	ldrb	r3, [r7, #3]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d115      	bne.n	800503c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800501c:	200a      	movs	r0, #10
 800501e:	f7fb fedb 	bl	8000dd8 <HAL_Delay>
      ms += 10U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	330a      	adds	r3, #10
 8005026:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f956 	bl	80052da <USB_GetMode>
 800502e:	4603      	mov	r3, r0
 8005030:	2b01      	cmp	r3, #1
 8005032:	d01e      	beq.n	8005072 <USB_SetCurrentMode+0x84>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2bc7      	cmp	r3, #199	@ 0xc7
 8005038:	d9f0      	bls.n	800501c <USB_SetCurrentMode+0x2e>
 800503a:	e01a      	b.n	8005072 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d115      	bne.n	800506e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800504e:	200a      	movs	r0, #10
 8005050:	f7fb fec2 	bl	8000dd8 <HAL_Delay>
      ms += 10U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	330a      	adds	r3, #10
 8005058:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 f93d 	bl	80052da <USB_GetMode>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d005      	beq.n	8005072 <USB_SetCurrentMode+0x84>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2bc7      	cmp	r3, #199	@ 0xc7
 800506a:	d9f0      	bls.n	800504e <USB_SetCurrentMode+0x60>
 800506c:	e001      	b.n	8005072 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800506e:	2301      	movs	r3, #1
 8005070:	e005      	b.n	800507e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2bc8      	cmp	r3, #200	@ 0xc8
 8005076:	d101      	bne.n	800507c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e000      	b.n	800507e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005086:	b480      	push	{r7}
 8005088:	b085      	sub	sp, #20
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
 800508e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005090:	2300      	movs	r3, #0
 8005092:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050a0:	d901      	bls.n	80050a6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e01b      	b.n	80050de <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	daf2      	bge.n	8005094 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	019b      	lsls	r3, r3, #6
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3301      	adds	r3, #1
 80050c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050ca:	d901      	bls.n	80050d0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050cc:	2303      	movs	r3, #3
 80050ce:	e006      	b.n	80050de <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	2b20      	cmp	r3, #32
 80050da:	d0f0      	beq.n	80050be <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr

080050ea <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050ea:	b480      	push	{r7}
 80050ec:	b085      	sub	sp, #20
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3301      	adds	r3, #1
 80050fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005102:	d901      	bls.n	8005108 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e018      	b.n	800513a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	daf2      	bge.n	80050f6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2210      	movs	r2, #16
 8005118:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3301      	adds	r3, #1
 800511e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005126:	d901      	bls.n	800512c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e006      	b.n	800513a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b10      	cmp	r3, #16
 8005136:	d0f0      	beq.n	800511a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005146:	b480      	push	{r7}
 8005148:	b089      	sub	sp, #36	@ 0x24
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	4611      	mov	r1, r2
 8005152:	461a      	mov	r2, r3
 8005154:	460b      	mov	r3, r1
 8005156:	71fb      	strb	r3, [r7, #7]
 8005158:	4613      	mov	r3, r2
 800515a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005164:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005168:	2b00      	cmp	r3, #0
 800516a:	d123      	bne.n	80051b4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800516c:	88bb      	ldrh	r3, [r7, #4]
 800516e:	3303      	adds	r3, #3
 8005170:	089b      	lsrs	r3, r3, #2
 8005172:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
 8005178:	e018      	b.n	80051ac <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800517a:	79fb      	ldrb	r3, [r7, #7]
 800517c:	031a      	lsls	r2, r3, #12
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	4413      	add	r3, r2
 8005182:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005186:	461a      	mov	r2, r3
 8005188:	69fb      	ldr	r3, [r7, #28]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	3301      	adds	r3, #1
 8005192:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	3301      	adds	r3, #1
 8005198:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800519a:	69fb      	ldr	r3, [r7, #28]
 800519c:	3301      	adds	r3, #1
 800519e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	3301      	adds	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80051a6:	69bb      	ldr	r3, [r7, #24]
 80051a8:	3301      	adds	r3, #1
 80051aa:	61bb      	str	r3, [r7, #24]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d3e2      	bcc.n	800517a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3724      	adds	r7, #36	@ 0x24
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b08b      	sub	sp, #44	@ 0x2c
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051d8:	88fb      	ldrh	r3, [r7, #6]
 80051da:	089b      	lsrs	r3, r3, #2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051e0:	88fb      	ldrh	r3, [r7, #6]
 80051e2:	f003 0303 	and.w	r3, r3, #3
 80051e6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051e8:	2300      	movs	r3, #0
 80051ea:	623b      	str	r3, [r7, #32]
 80051ec:	e014      	b.n	8005218 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f8:	601a      	str	r2, [r3, #0]
    pDest++;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	3301      	adds	r3, #1
 80051fe:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005202:	3301      	adds	r3, #1
 8005204:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005208:	3301      	adds	r3, #1
 800520a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800520c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520e:	3301      	adds	r3, #1
 8005210:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	3301      	adds	r3, #1
 8005216:	623b      	str	r3, [r7, #32]
 8005218:	6a3a      	ldr	r2, [r7, #32]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	d3e6      	bcc.n	80051ee <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005220:	8bfb      	ldrh	r3, [r7, #30]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d01e      	beq.n	8005264 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005226:	2300      	movs	r3, #0
 8005228:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005230:	461a      	mov	r2, r3
 8005232:	f107 0310 	add.w	r3, r7, #16
 8005236:	6812      	ldr	r2, [r2, #0]
 8005238:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	6a3b      	ldr	r3, [r7, #32]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	00db      	lsls	r3, r3, #3
 8005242:	fa22 f303 	lsr.w	r3, r2, r3
 8005246:	b2da      	uxtb	r2, r3
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	701a      	strb	r2, [r3, #0]
      i++;
 800524c:	6a3b      	ldr	r3, [r7, #32]
 800524e:	3301      	adds	r3, #1
 8005250:	623b      	str	r3, [r7, #32]
      pDest++;
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	3301      	adds	r3, #1
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005258:	8bfb      	ldrh	r3, [r7, #30]
 800525a:	3b01      	subs	r3, #1
 800525c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800525e:	8bfb      	ldrh	r3, [r7, #30]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1ea      	bne.n	800523a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005266:	4618      	mov	r0, r3
 8005268:	372c      	adds	r7, #44	@ 0x2c
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005272:	b480      	push	{r7}
 8005274:	b085      	sub	sp, #20
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	695b      	ldr	r3, [r3, #20]
 800527e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	699b      	ldr	r3, [r3, #24]
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	4013      	ands	r3, r2
 8005288:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800528a:	68fb      	ldr	r3, [r7, #12]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80052b8:	78fb      	ldrb	r3, [r7, #3]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	4013      	ands	r3, r2
 80052ca:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052cc:	68bb      	ldr	r3, [r7, #8]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052da:	b480      	push	{r7}
 80052dc:	b083      	sub	sp, #12
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	695b      	ldr	r3, [r3, #20]
 80052e6:	f003 0301 	and.w	r3, r3, #1
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr

080052f6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052f6:	b480      	push	{r7}
 80052f8:	b085      	sub	sp, #20
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800530e:	d901      	bls.n	8005314 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e01b      	b.n	800534c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	2b00      	cmp	r3, #0
 800531a:	daf2      	bge.n	8005302 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f043 0201 	orr.w	r2, r3, #1
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3301      	adds	r3, #1
 8005330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005338:	d901      	bls.n	800533e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800533a:	2303      	movs	r3, #3
 800533c:	e006      	b.n	800534c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	691b      	ldr	r3, [r3, #16]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b01      	cmp	r3, #1
 8005348:	d0f0      	beq.n	800532c <USB_CoreReset+0x36>

  return HAL_OK;
 800534a:	2300      	movs	r3, #0
}
 800534c:	4618      	mov	r0, r3
 800534e:	3714      	adds	r7, #20
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005358:	b084      	sub	sp, #16
 800535a:	b580      	push	{r7, lr}
 800535c:	b086      	sub	sp, #24
 800535e:	af00      	add	r7, sp, #0
 8005360:	6078      	str	r0, [r7, #4]
 8005362:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005366:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005378:	461a      	mov	r2, r3
 800537a:	2300      	movs	r3, #0
 800537c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800539a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d119      	bne.n	80053e2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80053ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d10a      	bne.n	80053cc <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053c4:	f043 0304 	orr.w	r3, r3, #4
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e014      	b.n	80053f6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053da:	f023 0304 	bic.w	r3, r3, #4
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	e009      	b.n	80053f6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053f0:	f023 0304 	bic.w	r3, r3, #4
 80053f4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053f6:	2110      	movs	r1, #16
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7ff fe44 	bl	8005086 <USB_FlushTxFifo>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	d001      	beq.n	8005408 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fe6e 	bl	80050ea <USB_FlushRxFifo>
 800540e:	4603      	mov	r3, r0
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005418:	2300      	movs	r3, #0
 800541a:	613b      	str	r3, [r7, #16]
 800541c:	e015      	b.n	800544a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	015a      	lsls	r2, r3, #5
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4413      	add	r3, r2
 8005426:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800542a:	461a      	mov	r2, r3
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4413      	add	r3, r2
 800543a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800543e:	461a      	mov	r2, r3
 8005440:	2300      	movs	r3, #0
 8005442:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	3301      	adds	r3, #1
 8005448:	613b      	str	r3, [r7, #16]
 800544a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800544e:	461a      	mov	r2, r3
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	4293      	cmp	r3, r2
 8005454:	d3e3      	bcc.n	800541e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2200      	movs	r2, #0
 800545a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f04f 32ff 	mov.w	r2, #4294967295
 8005462:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a18      	ldr	r2, [pc, #96]	@ (80054c8 <USB_HostInit+0x170>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d10b      	bne.n	8005484 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005472:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <USB_HostInit+0x174>)
 8005478:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a14      	ldr	r2, [pc, #80]	@ (80054d0 <USB_HostInit+0x178>)
 800547e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005482:	e009      	b.n	8005498 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2280      	movs	r2, #128	@ 0x80
 8005488:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a11      	ldr	r2, [pc, #68]	@ (80054d4 <USB_HostInit+0x17c>)
 800548e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a11      	ldr	r2, [pc, #68]	@ (80054d8 <USB_HostInit+0x180>)
 8005494:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005498:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800549c:	2b00      	cmp	r3, #0
 800549e:	d105      	bne.n	80054ac <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f043 0210 	orr.w	r2, r3, #16
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	699a      	ldr	r2, [r3, #24]
 80054b0:	4b0a      	ldr	r3, [pc, #40]	@ (80054dc <USB_HostInit+0x184>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80054b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3718      	adds	r7, #24
 80054be:	46bd      	mov	sp, r7
 80054c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054c4:	b004      	add	sp, #16
 80054c6:	4770      	bx	lr
 80054c8:	40040000 	.word	0x40040000
 80054cc:	01000200 	.word	0x01000200
 80054d0:	00e00300 	.word	0x00e00300
 80054d4:	00600080 	.word	0x00600080
 80054d8:	004000e0 	.word	0x004000e0
 80054dc:	a3200008 	.word	0xa3200008

080054e0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	460b      	mov	r3, r1
 80054ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	78fb      	ldrb	r3, [r7, #3]
 800550e:	f003 0303 	and.w	r3, r3, #3
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005518:	4313      	orrs	r3, r2
 800551a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800551c:	78fb      	ldrb	r3, [r7, #3]
 800551e:	2b01      	cmp	r3, #1
 8005520:	d107      	bne.n	8005532 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005528:	461a      	mov	r2, r3
 800552a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800552e:	6053      	str	r3, [r2, #4]
 8005530:	e00c      	b.n	800554c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005532:	78fb      	ldrb	r3, [r7, #3]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d107      	bne.n	8005548 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800553e:	461a      	mov	r2, r3
 8005540:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005544:	6053      	str	r3, [r2, #4]
 8005546:	e001      	b.n	800554c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e000      	b.n	800554e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b084      	sub	sp, #16
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005566:	2300      	movs	r3, #0
 8005568:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800557a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005588:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800558a:	2064      	movs	r0, #100	@ 0x64
 800558c:	f7fb fc24 	bl	8000dd8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800559c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800559e:	200a      	movs	r0, #10
 80055a0:	f7fb fc1a 	bl	8000dd8 <HAL_Delay>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b085      	sub	sp, #20
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
 80055b6:	460b      	mov	r3, r1
 80055b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055d2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d109      	bne.n	80055f2 <USB_DriveVbus+0x44>
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d106      	bne.n	80055f2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055f0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055fc:	d109      	bne.n	8005612 <USB_DriveVbus+0x64>
 80055fe:	78fb      	ldrb	r3, [r7, #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d106      	bne.n	8005612 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800560c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005610:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005612:	2300      	movs	r3, #0
}
 8005614:	4618      	mov	r0, r3
 8005616:	3714      	adds	r7, #20
 8005618:	46bd      	mov	sp, r7
 800561a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561e:	4770      	bx	lr

08005620 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	0c5b      	lsrs	r3, r3, #17
 800563e:	f003 0303 	and.w	r3, r3, #3
}
 8005642:	4618      	mov	r0, r3
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800564e:	b480      	push	{r7}
 8005650:	b085      	sub	sp, #20
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	b29b      	uxth	r3, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b088      	sub	sp, #32
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	4608      	mov	r0, r1
 800567a:	4611      	mov	r1, r2
 800567c:	461a      	mov	r2, r3
 800567e:	4603      	mov	r3, r0
 8005680:	70fb      	strb	r3, [r7, #3]
 8005682:	460b      	mov	r3, r1
 8005684:	70bb      	strb	r3, [r7, #2]
 8005686:	4613      	mov	r3, r2
 8005688:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005692:	78fb      	ldrb	r3, [r7, #3]
 8005694:	015a      	lsls	r2, r3, #5
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	4413      	add	r3, r2
 800569a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800569e:	461a      	mov	r2, r3
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295
 80056a4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80056a6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d87c      	bhi.n	80057a8 <USB_HC_Init+0x138>
 80056ae:	a201      	add	r2, pc, #4	@ (adr r2, 80056b4 <USB_HC_Init+0x44>)
 80056b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b4:	080056c5 	.word	0x080056c5
 80056b8:	0800576b 	.word	0x0800576b
 80056bc:	080056c5 	.word	0x080056c5
 80056c0:	0800572d 	.word	0x0800572d
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056c4:	78fb      	ldrb	r3, [r7, #3]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	693b      	ldr	r3, [r7, #16]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d0:	461a      	mov	r2, r3
 80056d2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80056d6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80056d8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056dc:	2b00      	cmp	r3, #0
 80056de:	da10      	bge.n	8005702 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	693a      	ldr	r2, [r7, #16]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056fe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005700:	e055      	b.n	80057ae <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a6f      	ldr	r2, [pc, #444]	@ (80058c4 <USB_HC_Init+0x254>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d151      	bne.n	80057ae <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	015a      	lsls	r2, r3, #5
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	4413      	add	r3, r2
 8005712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	0151      	lsls	r1, r2, #5
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	440a      	add	r2, r1
 8005720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005724:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005728:	60d3      	str	r3, [r2, #12]
      break;
 800572a:	e040      	b.n	80057ae <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800572c:	78fb      	ldrb	r3, [r7, #3]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005738:	461a      	mov	r2, r3
 800573a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800573e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005740:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005744:	2b00      	cmp	r3, #0
 8005746:	da34      	bge.n	80057b2 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005748:	78fb      	ldrb	r3, [r7, #3]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	4413      	add	r3, r2
 8005750:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	78fa      	ldrb	r2, [r7, #3]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	440a      	add	r2, r1
 800575e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005766:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005768:	e023      	b.n	80057b2 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800576a:	78fb      	ldrb	r3, [r7, #3]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005776:	461a      	mov	r2, r3
 8005778:	f240 2325 	movw	r3, #549	@ 0x225
 800577c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800577e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005782:	2b00      	cmp	r3, #0
 8005784:	da17      	bge.n	80057b6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005786:	78fb      	ldrb	r3, [r7, #3]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	0151      	lsls	r1, r2, #5
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	440a      	add	r2, r1
 800579c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057a0:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80057a4:	60d3      	str	r3, [r2, #12]
      }
      break;
 80057a6:	e006      	b.n	80057b6 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	77fb      	strb	r3, [r7, #31]
      break;
 80057ac:	e004      	b.n	80057b8 <USB_HC_Init+0x148>
      break;
 80057ae:	bf00      	nop
 80057b0:	e002      	b.n	80057b8 <USB_HC_Init+0x148>
      break;
 80057b2:	bf00      	nop
 80057b4:	e000      	b.n	80057b8 <USB_HC_Init+0x148>
      break;
 80057b6:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80057b8:	78fb      	ldrb	r3, [r7, #3]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057c4:	461a      	mov	r2, r3
 80057c6:	2300      	movs	r3, #0
 80057c8:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80057ca:	78fb      	ldrb	r3, [r7, #3]
 80057cc:	015a      	lsls	r2, r3, #5
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	4413      	add	r3, r2
 80057d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	0151      	lsls	r1, r2, #5
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	440a      	add	r2, r1
 80057e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057e4:	f043 0302 	orr.w	r3, r3, #2
 80057e8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057f0:	699a      	ldr	r2, [r3, #24]
 80057f2:	78fb      	ldrb	r3, [r7, #3]
 80057f4:	f003 030f 	and.w	r3, r3, #15
 80057f8:	2101      	movs	r1, #1
 80057fa:	fa01 f303 	lsl.w	r3, r1, r3
 80057fe:	6939      	ldr	r1, [r7, #16]
 8005800:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005804:	4313      	orrs	r3, r2
 8005806:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005814:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005818:	2b00      	cmp	r3, #0
 800581a:	da03      	bge.n	8005824 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800581c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005820:	61bb      	str	r3, [r7, #24]
 8005822:	e001      	b.n	8005828 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005828:	6878      	ldr	r0, [r7, #4]
 800582a:	f7ff fef9 	bl	8005620 <USB_GetHostSpeed>
 800582e:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005830:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005834:	2b02      	cmp	r3, #2
 8005836:	d106      	bne.n	8005846 <USB_HC_Init+0x1d6>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2b02      	cmp	r3, #2
 800583c:	d003      	beq.n	8005846 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800583e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	e001      	b.n	800584a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800584a:	787b      	ldrb	r3, [r7, #1]
 800584c:	059b      	lsls	r3, r3, #22
 800584e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005852:	78bb      	ldrb	r3, [r7, #2]
 8005854:	02db      	lsls	r3, r3, #11
 8005856:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800585a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800585c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005860:	049b      	lsls	r3, r3, #18
 8005862:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005866:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005868:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800586a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800586e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	431a      	orrs	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005878:	78fa      	ldrb	r2, [r7, #3]
 800587a:	0151      	lsls	r1, r2, #5
 800587c:	693a      	ldr	r2, [r7, #16]
 800587e:	440a      	add	r2, r1
 8005880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005884:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005888:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800588a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800588e:	2b03      	cmp	r3, #3
 8005890:	d003      	beq.n	800589a <USB_HC_Init+0x22a>
 8005892:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005896:	2b01      	cmp	r3, #1
 8005898:	d10f      	bne.n	80058ba <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800589a:	78fb      	ldrb	r3, [r7, #3]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	78fa      	ldrb	r2, [r7, #3]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3720      	adds	r7, #32
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	40040000 	.word	0x40040000

080058c8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b08c      	sub	sp, #48	@ 0x30
 80058cc:	af02      	add	r7, sp, #8
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	4613      	mov	r3, r2
 80058d4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	785b      	ldrb	r3, [r3, #1]
 80058de:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80058e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058e4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005a60 <USB_HC_StartXfer+0x198>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d12f      	bne.n	800594e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d11c      	bne.n	800592e <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	7c9b      	ldrb	r3, [r3, #18]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d003      	beq.n	8005904 <USB_HC_StartXfer+0x3c>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	7c9b      	ldrb	r3, [r3, #18]
 8005900:	2b02      	cmp	r3, #2
 8005902:	d124      	bne.n	800594e <USB_HC_StartXfer+0x86>
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	799b      	ldrb	r3, [r3, #6]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d120      	bne.n	800594e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	015a      	lsls	r2, r3, #5
 8005910:	6a3b      	ldr	r3, [r7, #32]
 8005912:	4413      	add	r3, r2
 8005914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	69fa      	ldr	r2, [r7, #28]
 800591c:	0151      	lsls	r1, r2, #5
 800591e:	6a3a      	ldr	r2, [r7, #32]
 8005920:	440a      	add	r2, r1
 8005922:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800592a:	60d3      	str	r3, [r2, #12]
 800592c:	e00f      	b.n	800594e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	791b      	ldrb	r3, [r3, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d10b      	bne.n	800594e <USB_HC_StartXfer+0x86>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	795b      	ldrb	r3, [r3, #5]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d107      	bne.n	800594e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	785b      	ldrb	r3, [r3, #1]
 8005942:	4619      	mov	r1, r3
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 fb6b 	bl	8006020 <USB_DoPing>
        return HAL_OK;
 800594a:	2300      	movs	r3, #0
 800594c:	e232      	b.n	8005db4 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	799b      	ldrb	r3, [r3, #6]
 8005952:	2b01      	cmp	r3, #1
 8005954:	d158      	bne.n	8005a08 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005956:	2301      	movs	r3, #1
 8005958:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	78db      	ldrb	r3, [r3, #3]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d007      	beq.n	8005972 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005962:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	8a92      	ldrh	r2, [r2, #20]
 8005968:	fb03 f202 	mul.w	r2, r3, r2
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e07c      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	7c9b      	ldrb	r3, [r3, #18]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d130      	bne.n	80059dc <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	2bbc      	cmp	r3, #188	@ 0xbc
 8005980:	d918      	bls.n	80059b4 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	8a9b      	ldrh	r3, [r3, #20]
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	69da      	ldr	r2, [r3, #28]
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	68db      	ldr	r3, [r3, #12]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d003      	beq.n	80059a4 <USB_HC_StartXfer+0xdc>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d103      	bne.n	80059ac <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	2202      	movs	r2, #2
 80059a8:	60da      	str	r2, [r3, #12]
 80059aa:	e05f      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2201      	movs	r2, #1
 80059b0:	60da      	str	r2, [r3, #12]
 80059b2:	e05b      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	6a1a      	ldr	r2, [r3, #32]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	68db      	ldr	r3, [r3, #12]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d007      	beq.n	80059d4 <USB_HC_StartXfer+0x10c>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d003      	beq.n	80059d4 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	2204      	movs	r2, #4
 80059d0:	60da      	str	r2, [r3, #12]
 80059d2:	e04b      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	2203      	movs	r2, #3
 80059d8:	60da      	str	r2, [r3, #12]
 80059da:	e047      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d10d      	bne.n	80059fe <USB_HC_StartXfer+0x136>
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	6a1b      	ldr	r3, [r3, #32]
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	8a92      	ldrh	r2, [r2, #20]
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d907      	bls.n	80059fe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	8a92      	ldrh	r2, [r2, #20]
 80059f4:	fb03 f202 	mul.w	r2, r3, r2
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	61da      	str	r2, [r3, #28]
 80059fc:	e036      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6a1a      	ldr	r2, [r3, #32]
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	61da      	str	r2, [r3, #28]
 8005a06:	e031      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d018      	beq.n	8005a42 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	6a1b      	ldr	r3, [r3, #32]
 8005a14:	68ba      	ldr	r2, [r7, #8]
 8005a16:	8a92      	ldrh	r2, [r2, #20]
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b01      	subs	r3, #1
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	8a92      	ldrh	r2, [r2, #20]
 8005a20:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a24:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a26:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a28:	8b7b      	ldrh	r3, [r7, #26]
 8005a2a:	429a      	cmp	r2, r3
 8005a2c:	d90b      	bls.n	8005a46 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005a2e:	8b7b      	ldrh	r3, [r7, #26]
 8005a30:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a32:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	8a92      	ldrh	r2, [r2, #20]
 8005a38:	fb03 f202 	mul.w	r2, r3, r2
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	61da      	str	r2, [r3, #28]
 8005a40:	e001      	b.n	8005a46 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005a42:	2301      	movs	r3, #1
 8005a44:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	78db      	ldrb	r3, [r3, #3]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a4e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	8a92      	ldrh	r2, [r2, #20]
 8005a54:	fb03 f202 	mul.w	r2, r3, r2
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	61da      	str	r2, [r3, #28]
 8005a5c:	e006      	b.n	8005a6c <USB_HC_StartXfer+0x1a4>
 8005a5e:	bf00      	nop
 8005a60:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	6a1a      	ldr	r2, [r3, #32]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	69db      	ldr	r3, [r3, #28]
 8005a70:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a74:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a76:	04d9      	lsls	r1, r3, #19
 8005a78:	4ba3      	ldr	r3, [pc, #652]	@ (8005d08 <USB_HC_StartXfer+0x440>)
 8005a7a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a7c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	7d9b      	ldrb	r3, [r3, #22]
 8005a82:	075b      	lsls	r3, r3, #29
 8005a84:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a88:	69f9      	ldr	r1, [r7, #28]
 8005a8a:	0148      	lsls	r0, r1, #5
 8005a8c:	6a39      	ldr	r1, [r7, #32]
 8005a8e:	4401      	add	r1, r0
 8005a90:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a94:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a96:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d009      	beq.n	8005ab2 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	6999      	ldr	r1, [r3, #24]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aae:	460a      	mov	r2, r1
 8005ab0:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	bf0c      	ite	eq
 8005ac2:	2301      	moveq	r3, #1
 8005ac4:	2300      	movne	r3, #0
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	015a      	lsls	r2, r3, #5
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	4413      	add	r3, r2
 8005ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	0151      	lsls	r1, r2, #5
 8005adc:	6a3a      	ldr	r2, [r7, #32]
 8005ade:	440a      	add	r2, r1
 8005ae0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ae4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005ae8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	7e7b      	ldrb	r3, [r7, #25]
 8005afa:	075b      	lsls	r3, r3, #29
 8005afc:	69f9      	ldr	r1, [r7, #28]
 8005afe:	0148      	lsls	r0, r1, #5
 8005b00:	6a39      	ldr	r1, [r7, #32]
 8005b02:	4401      	add	r1, r0
 8005b04:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	799b      	ldrb	r3, [r3, #6]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f040 80c3 	bne.w	8005c9c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	7c5b      	ldrb	r3, [r3, #17]
 8005b1a:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b20:	4313      	orrs	r3, r2
 8005b22:	69fa      	ldr	r2, [r7, #28]
 8005b24:	0151      	lsls	r1, r2, #5
 8005b26:	6a3a      	ldr	r2, [r7, #32]
 8005b28:	440a      	add	r2, r1
 8005b2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b32:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	6a3b      	ldr	r3, [r7, #32]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	6a3a      	ldr	r2, [r7, #32]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b4e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b52:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	79db      	ldrb	r3, [r3, #7]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d123      	bne.n	8005ba4 <USB_HC_StartXfer+0x2dc>
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	78db      	ldrb	r3, [r3, #3]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11f      	bne.n	8005ba4 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b64:	69fb      	ldr	r3, [r7, #28]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	69fa      	ldr	r2, [r7, #28]
 8005b74:	0151      	lsls	r1, r2, #5
 8005b76:	6a3a      	ldr	r2, [r7, #32]
 8005b78:	440a      	add	r2, r1
 8005b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b82:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	6a3b      	ldr	r3, [r7, #32]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	0151      	lsls	r1, r2, #5
 8005b96:	6a3a      	ldr	r2, [r7, #32]
 8005b98:	440a      	add	r2, r1
 8005b9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ba2:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	7c9b      	ldrb	r3, [r3, #18]
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <USB_HC_StartXfer+0x2ec>
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	7c9b      	ldrb	r3, [r3, #18]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d117      	bne.n	8005be4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d113      	bne.n	8005be4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	78db      	ldrb	r3, [r3, #3]
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d10f      	bne.n	8005be4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	015a      	lsls	r2, r3, #5
 8005bc8:	6a3b      	ldr	r3, [r7, #32]
 8005bca:	4413      	add	r3, r2
 8005bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	69fa      	ldr	r2, [r7, #28]
 8005bd4:	0151      	lsls	r1, r2, #5
 8005bd6:	6a3a      	ldr	r2, [r7, #32]
 8005bd8:	440a      	add	r2, r1
 8005bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bde:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	7c9b      	ldrb	r3, [r3, #18]
 8005be8:	2b01      	cmp	r3, #1
 8005bea:	d162      	bne.n	8005cb2 <USB_HC_StartXfer+0x3ea>
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	78db      	ldrb	r3, [r3, #3]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d15e      	bne.n	8005cb2 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	2b03      	cmp	r3, #3
 8005bfc:	d858      	bhi.n	8005cb0 <USB_HC_StartXfer+0x3e8>
 8005bfe:	a201      	add	r2, pc, #4	@ (adr r2, 8005c04 <USB_HC_StartXfer+0x33c>)
 8005c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c04:	08005c15 	.word	0x08005c15
 8005c08:	08005c37 	.word	0x08005c37
 8005c0c:	08005c59 	.word	0x08005c59
 8005c10:	08005c7b 	.word	0x08005c7b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	015a      	lsls	r2, r3, #5
 8005c18:	6a3b      	ldr	r3, [r7, #32]
 8005c1a:	4413      	add	r3, r2
 8005c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	69fa      	ldr	r2, [r7, #28]
 8005c24:	0151      	lsls	r1, r2, #5
 8005c26:	6a3a      	ldr	r2, [r7, #32]
 8005c28:	440a      	add	r2, r1
 8005c2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c32:	6053      	str	r3, [r2, #4]
          break;
 8005c34:	e03d      	b.n	8005cb2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	6a3b      	ldr	r3, [r7, #32]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	0151      	lsls	r1, r2, #5
 8005c48:	6a3a      	ldr	r2, [r7, #32]
 8005c4a:	440a      	add	r2, r1
 8005c4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c50:	f043 030e 	orr.w	r3, r3, #14
 8005c54:	6053      	str	r3, [r2, #4]
          break;
 8005c56:	e02c      	b.n	8005cb2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	015a      	lsls	r2, r3, #5
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	4413      	add	r3, r2
 8005c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	69fa      	ldr	r2, [r7, #28]
 8005c68:	0151      	lsls	r1, r2, #5
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	440a      	add	r2, r1
 8005c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c72:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c76:	6053      	str	r3, [r2, #4]
          break;
 8005c78:	e01b      	b.n	8005cb2 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	6a3b      	ldr	r3, [r7, #32]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c86:	685b      	ldr	r3, [r3, #4]
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	0151      	lsls	r1, r2, #5
 8005c8c:	6a3a      	ldr	r2, [r7, #32]
 8005c8e:	440a      	add	r2, r1
 8005c90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c94:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c98:	6053      	str	r3, [r2, #4]
          break;
 8005c9a:	e00a      	b.n	8005cb2 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2300      	movs	r3, #0
 8005cac:	6053      	str	r3, [r2, #4]
 8005cae:	e000      	b.n	8005cb2 <USB_HC_StartXfer+0x3ea>
          break;
 8005cb0:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cc8:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	78db      	ldrb	r3, [r3, #3]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d004      	beq.n	8005cdc <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	e003      	b.n	8005ce4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005ce2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cea:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	015a      	lsls	r2, r3, #5
 8005cf0:	6a3b      	ldr	r3, [r7, #32]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005cfe:	79fb      	ldrb	r3, [r7, #7]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d003      	beq.n	8005d0c <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005d04:	2300      	movs	r3, #0
 8005d06:	e055      	b.n	8005db4 <USB_HC_StartXfer+0x4ec>
 8005d08:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	78db      	ldrb	r3, [r3, #3]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d14e      	bne.n	8005db2 <USB_HC_StartXfer+0x4ea>
 8005d14:	68bb      	ldr	r3, [r7, #8]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d04a      	beq.n	8005db2 <USB_HC_StartXfer+0x4ea>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	79db      	ldrb	r3, [r3, #7]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d146      	bne.n	8005db2 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	7c9b      	ldrb	r3, [r3, #18]
 8005d28:	2b03      	cmp	r3, #3
 8005d2a:	d831      	bhi.n	8005d90 <USB_HC_StartXfer+0x4c8>
 8005d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d34 <USB_HC_StartXfer+0x46c>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d45 	.word	0x08005d45
 8005d38:	08005d69 	.word	0x08005d69
 8005d3c:	08005d45 	.word	0x08005d45
 8005d40:	08005d69 	.word	0x08005d69
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	3303      	adds	r3, #3
 8005d4a:	089b      	lsrs	r3, r3, #2
 8005d4c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d4e:	8afa      	ldrh	r2, [r7, #22]
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d91c      	bls.n	8005d94 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	f043 0220 	orr.w	r2, r3, #32
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d66:	e015      	b.n	8005d94 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	3303      	adds	r3, #3
 8005d6e:	089b      	lsrs	r3, r3, #2
 8005d70:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d72:	8afa      	ldrh	r2, [r7, #22]
 8005d74:	6a3b      	ldr	r3, [r7, #32]
 8005d76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d7a:	691b      	ldr	r3, [r3, #16]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d90a      	bls.n	8005d98 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d8e:	e003      	b.n	8005d98 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d90:	bf00      	nop
 8005d92:	e002      	b.n	8005d9a <USB_HC_StartXfer+0x4d2>
        break;
 8005d94:	bf00      	nop
 8005d96:	e000      	b.n	8005d9a <USB_HC_StartXfer+0x4d2>
        break;
 8005d98:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	6999      	ldr	r1, [r3, #24]
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	785a      	ldrb	r2, [r3, #1]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2000      	movs	r0, #0
 8005daa:	9000      	str	r0, [sp, #0]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f7ff f9ca 	bl	8005146 <USB_WritePacket>
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3728      	adds	r7, #40	@ 0x28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dce:	695b      	ldr	r3, [r3, #20]
 8005dd0:	b29b      	uxth	r3, r3
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005dde:	b480      	push	{r7}
 8005de0:	b089      	sub	sp, #36	@ 0x24
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005dee:	78fb      	ldrb	r3, [r7, #3]
 8005df0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	0c9b      	lsrs	r3, r3, #18
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	0fdb      	lsrs	r3, r3, #31
 8005e1c:	f003 0301 	and.w	r3, r3, #1
 8005e20:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	0fdb      	lsrs	r3, r3, #31
 8005e32:	f003 0301 	and.w	r3, r3, #1
 8005e36:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	f003 0320 	and.w	r3, r3, #32
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d10d      	bne.n	8005e60 <USB_HC_Halt+0x82>
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d10a      	bne.n	8005e60 <USB_HC_Halt+0x82>
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d005      	beq.n	8005e5c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	2b01      	cmp	r3, #1
 8005e54:	d002      	beq.n	8005e5c <USB_HC_Halt+0x7e>
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	2b03      	cmp	r3, #3
 8005e5a:	d101      	bne.n	8005e60 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	e0d8      	b.n	8006012 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <USB_HC_Halt+0x8e>
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d173      	bne.n	8005f54 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	0151      	lsls	r1, r2, #5
 8005e7e:	69fa      	ldr	r2, [r7, #28]
 8005e80:	440a      	add	r2, r1
 8005e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e86:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e8a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 0320 	and.w	r3, r3, #32
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d14a      	bne.n	8005f2e <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d133      	bne.n	8005f0c <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005ea4:	69bb      	ldr	r3, [r7, #24]
 8005ea6:	015a      	lsls	r2, r3, #5
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	4413      	add	r3, r2
 8005eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	69ba      	ldr	r2, [r7, #24]
 8005eb4:	0151      	lsls	r1, r2, #5
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	440a      	add	r2, r1
 8005eba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ebe:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005ec2:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	69fa      	ldr	r2, [r7, #28]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ede:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ee2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ef0:	d82e      	bhi.n	8005f50 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f04:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f08:	d0ec      	beq.n	8005ee4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f0a:	e081      	b.n	8006010 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	015a      	lsls	r2, r3, #5
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	4413      	add	r3, r2
 8005f14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	69ba      	ldr	r2, [r7, #24]
 8005f1c:	0151      	lsls	r1, r2, #5
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	440a      	add	r2, r1
 8005f22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f26:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f2a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f2c:	e070      	b.n	8006010 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	015a      	lsls	r2, r3, #5
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	0151      	lsls	r1, r2, #5
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	440a      	add	r2, r1
 8005f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f4c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f4e:	e05f      	b.n	8006010 <USB_HC_Halt+0x232>
            break;
 8005f50:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f52:	e05d      	b.n	8006010 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	69ba      	ldr	r2, [r7, #24]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	69fa      	ldr	r2, [r7, #28]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f72:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d133      	bne.n	8005fec <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f84:	69bb      	ldr	r3, [r7, #24]
 8005f86:	015a      	lsls	r2, r3, #5
 8005f88:	69fb      	ldr	r3, [r7, #28]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69ba      	ldr	r2, [r7, #24]
 8005f94:	0151      	lsls	r1, r2, #5
 8005f96:	69fa      	ldr	r2, [r7, #28]
 8005f98:	440a      	add	r2, r1
 8005f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f9e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fa2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fa4:	69bb      	ldr	r3, [r7, #24]
 8005fa6:	015a      	lsls	r2, r3, #5
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	4413      	add	r3, r2
 8005fac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69ba      	ldr	r2, [r7, #24]
 8005fb4:	0151      	lsls	r1, r2, #5
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	440a      	add	r2, r1
 8005fba:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fbe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fc2:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fd0:	d81d      	bhi.n	800600e <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	015a      	lsls	r2, r3, #5
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fe4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fe8:	d0ec      	beq.n	8005fc4 <USB_HC_Halt+0x1e6>
 8005fea:	e011      	b.n	8006010 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	015a      	lsls	r2, r3, #5
 8005ff0:	69fb      	ldr	r3, [r7, #28]
 8005ff2:	4413      	add	r3, r2
 8005ff4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	0151      	lsls	r1, r2, #5
 8005ffe:	69fa      	ldr	r2, [r7, #28]
 8006000:	440a      	add	r2, r1
 8006002:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006006:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	e000      	b.n	8006010 <USB_HC_Halt+0x232>
          break;
 800600e:	bf00      	nop
    }
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3724      	adds	r7, #36	@ 0x24
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
	...

08006020 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	460b      	mov	r3, r1
 800602a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006030:	78fb      	ldrb	r3, [r7, #3]
 8006032:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006034:	2301      	movs	r3, #1
 8006036:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	04da      	lsls	r2, r3, #19
 800603c:	4b15      	ldr	r3, [pc, #84]	@ (8006094 <USB_DoPing+0x74>)
 800603e:	4013      	ands	r3, r2
 8006040:	693a      	ldr	r2, [r7, #16]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	697a      	ldr	r2, [r7, #20]
 8006046:	440a      	add	r2, r1
 8006048:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800604c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006050:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006068:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006070:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	4413      	add	r3, r2
 800607a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800607e:	461a      	mov	r2, r3
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	1ff80000 	.word	0x1ff80000

08006098 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b088      	sub	sp, #32
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80060a0:	2300      	movs	r3, #0
 80060a2:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7fe ff8d 	bl	8004fcc <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060b2:	2110      	movs	r1, #16
 80060b4:	6878      	ldr	r0, [r7, #4]
 80060b6:	f7fe ffe6 	bl	8005086 <USB_FlushTxFifo>
 80060ba:	4603      	mov	r3, r0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d001      	beq.n	80060c4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f7ff f810 	bl	80050ea <USB_FlushRxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	61bb      	str	r3, [r7, #24]
 80060d8:	e01f      	b.n	800611a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	015a      	lsls	r2, r3, #5
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	4413      	add	r3, r2
 80060e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060f0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060f8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006100:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610e:	461a      	mov	r2, r3
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	3301      	adds	r3, #1
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	2b0f      	cmp	r3, #15
 800611e:	d9dc      	bls.n	80060da <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006120:	2300      	movs	r3, #0
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e034      	b.n	8006190 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	4413      	add	r3, r2
 800612e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800613c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006144:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800614c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615a:	461a      	mov	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800616c:	d80c      	bhi.n	8006188 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	4413      	add	r3, r2
 8006176:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006180:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006184:	d0ec      	beq.n	8006160 <USB_StopHost+0xc8>
 8006186:	e000      	b.n	800618a <USB_StopHost+0xf2>
        break;
 8006188:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	3301      	adds	r3, #1
 800618e:	61bb      	str	r3, [r7, #24]
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d9c7      	bls.n	8006126 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800619c:	461a      	mov	r2, r3
 800619e:	f04f 33ff 	mov.w	r3, #4294967295
 80061a2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f04f 32ff 	mov.w	r2, #4294967295
 80061aa:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7fe fefc 	bl	8004faa <USB_EnableGlobalInt>

  return ret;
 80061b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	3720      	adds	r7, #32
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80061bc:	b590      	push	{r4, r7, lr}
 80061be:	b089      	sub	sp, #36	@ 0x24
 80061c0:	af04      	add	r7, sp, #16
 80061c2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80061c4:	2301      	movs	r3, #1
 80061c6:	2202      	movs	r2, #2
 80061c8:	2102      	movs	r1, #2
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 fc85 	bl	8006ada <USBH_FindInterface>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
 80061d6:	2bff      	cmp	r3, #255	@ 0xff
 80061d8:	d002      	beq.n	80061e0 <USBH_CDC_InterfaceInit+0x24>
 80061da:	7bfb      	ldrb	r3, [r7, #15]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d901      	bls.n	80061e4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80061e0:	2302      	movs	r3, #2
 80061e2:	e13d      	b.n	8006460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80061e4:	7bfb      	ldrb	r3, [r7, #15]
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f000 fc5a 	bl	8006aa2 <USBH_SelectInterface>
 80061ee:	4603      	mov	r3, r0
 80061f0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80061f2:	7bbb      	ldrb	r3, [r7, #14]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80061f8:	2302      	movs	r3, #2
 80061fa:	e131      	b.n	8006460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006202:	2050      	movs	r0, #80	@ 0x50
 8006204:	f002 fb64 	bl	80088d0 <malloc>
 8006208:	4603      	mov	r3, r0
 800620a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800621c:	2302      	movs	r3, #2
 800621e:	e11f      	b.n	8006460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006220:	2250      	movs	r2, #80	@ 0x50
 8006222:	2100      	movs	r1, #0
 8006224:	68b8      	ldr	r0, [r7, #8]
 8006226:	f002 fc11 	bl	8008a4c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	211a      	movs	r1, #26
 8006230:	fb01 f303 	mul.w	r3, r1, r3
 8006234:	4413      	add	r3, r2
 8006236:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	b25b      	sxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	da15      	bge.n	800626e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006242:	7bfb      	ldrb	r3, [r7, #15]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	211a      	movs	r1, #26
 8006248:	fb01 f303 	mul.w	r3, r1, r3
 800624c:	4413      	add	r3, r2
 800624e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006252:	781a      	ldrb	r2, [r3, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006258:	7bfb      	ldrb	r3, [r7, #15]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	211a      	movs	r1, #26
 800625e:	fb01 f303 	mul.w	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006268:	881a      	ldrh	r2, [r3, #0]
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	785b      	ldrb	r3, [r3, #1]
 8006272:	4619      	mov	r1, r3
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f001 ffbe 	bl	80081f6 <USBH_AllocPipe>
 800627a:	4603      	mov	r3, r0
 800627c:	461a      	mov	r2, r3
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	7819      	ldrb	r1, [r3, #0]
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	7858      	ldrb	r0, [r3, #1]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	8952      	ldrh	r2, [r2, #10]
 800629a:	9202      	str	r2, [sp, #8]
 800629c:	2203      	movs	r2, #3
 800629e:	9201      	str	r2, [sp, #4]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	4623      	mov	r3, r4
 80062a4:	4602      	mov	r2, r0
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f001 ff76 	bl	8008198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2200      	movs	r2, #0
 80062b2:	4619      	mov	r1, r3
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f002 fa85 	bl	80087c4 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80062ba:	2300      	movs	r3, #0
 80062bc:	2200      	movs	r2, #0
 80062be:	210a      	movs	r1, #10
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 fc0a 	bl	8006ada <USBH_FindInterface>
 80062c6:	4603      	mov	r3, r0
 80062c8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80062ca:	7bfb      	ldrb	r3, [r7, #15]
 80062cc:	2bff      	cmp	r3, #255	@ 0xff
 80062ce:	d002      	beq.n	80062d6 <USBH_CDC_InterfaceInit+0x11a>
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d901      	bls.n	80062da <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0c2      	b.n	8006460 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80062da:	7bfb      	ldrb	r3, [r7, #15]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	211a      	movs	r1, #26
 80062e0:	fb01 f303 	mul.w	r3, r1, r3
 80062e4:	4413      	add	r3, r2
 80062e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b25b      	sxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	da16      	bge.n	8006320 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	211a      	movs	r1, #26
 80062f8:	fb01 f303 	mul.w	r3, r1, r3
 80062fc:	4413      	add	r3, r2
 80062fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006302:	781a      	ldrb	r2, [r3, #0]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
 800630a:	687a      	ldr	r2, [r7, #4]
 800630c:	211a      	movs	r1, #26
 800630e:	fb01 f303 	mul.w	r3, r1, r3
 8006312:	4413      	add	r3, r2
 8006314:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006318:	881a      	ldrh	r2, [r3, #0]
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	835a      	strh	r2, [r3, #26]
 800631e:	e015      	b.n	800634c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006320:	7bfb      	ldrb	r3, [r7, #15]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	211a      	movs	r1, #26
 8006326:	fb01 f303 	mul.w	r3, r1, r3
 800632a:	4413      	add	r3, r2
 800632c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006330:	781a      	ldrb	r2, [r3, #0]
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	211a      	movs	r1, #26
 800633c:	fb01 f303 	mul.w	r3, r1, r3
 8006340:	4413      	add	r3, r2
 8006342:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006346:	881a      	ldrh	r2, [r3, #0]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800634c:	7bfb      	ldrb	r3, [r7, #15]
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	211a      	movs	r1, #26
 8006352:	fb01 f303 	mul.w	r3, r1, r3
 8006356:	4413      	add	r3, r2
 8006358:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	b25b      	sxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	da16      	bge.n	8006392 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	211a      	movs	r1, #26
 800636a:	fb01 f303 	mul.w	r3, r1, r3
 800636e:	4413      	add	r3, r2
 8006370:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006374:	781a      	ldrb	r2, [r3, #0]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800637a:	7bfb      	ldrb	r3, [r7, #15]
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	211a      	movs	r1, #26
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	4413      	add	r3, r2
 8006386:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	835a      	strh	r2, [r3, #26]
 8006390:	e015      	b.n	80063be <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	211a      	movs	r1, #26
 8006398:	fb01 f303 	mul.w	r3, r1, r3
 800639c:	4413      	add	r3, r2
 800639e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80063a2:	781a      	ldrb	r2, [r3, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	211a      	movs	r1, #26
 80063ae:	fb01 f303 	mul.w	r3, r1, r3
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80063b8:	881a      	ldrh	r2, [r3, #0]
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	7b9b      	ldrb	r3, [r3, #14]
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f001 ff16 	bl	80081f6 <USBH_AllocPipe>
 80063ca:	4603      	mov	r3, r0
 80063cc:	461a      	mov	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	7bdb      	ldrb	r3, [r3, #15]
 80063d6:	4619      	mov	r1, r3
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f001 ff0c 	bl	80081f6 <USBH_AllocPipe>
 80063de:	4603      	mov	r3, r0
 80063e0:	461a      	mov	r2, r3
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	7b59      	ldrb	r1, [r3, #13]
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	7b98      	ldrb	r0, [r3, #14]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	8b12      	ldrh	r2, [r2, #24]
 80063fe:	9202      	str	r2, [sp, #8]
 8006400:	2202      	movs	r2, #2
 8006402:	9201      	str	r2, [sp, #4]
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	4623      	mov	r3, r4
 8006408:	4602      	mov	r2, r0
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fec4 	bl	8008198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	7b19      	ldrb	r1, [r3, #12]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	7bd8      	ldrb	r0, [r3, #15]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	8b52      	ldrh	r2, [r2, #26]
 8006428:	9202      	str	r2, [sp, #8]
 800642a:	2202      	movs	r2, #2
 800642c:	9201      	str	r2, [sp, #4]
 800642e:	9300      	str	r3, [sp, #0]
 8006430:	4623      	mov	r3, r4
 8006432:	4602      	mov	r2, r0
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f001 feaf 	bl	8008198 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	2200      	movs	r2, #0
 800643e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	7b5b      	ldrb	r3, [r3, #13]
 8006446:	2200      	movs	r2, #0
 8006448:	4619      	mov	r1, r3
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f002 f9ba 	bl	80087c4 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	7b1b      	ldrb	r3, [r3, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f002 f9b3 	bl	80087c4 <USBH_LL_SetToggle>

  return USBH_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	bd90      	pop	{r4, r7, pc}

08006468 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b084      	sub	sp, #16
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006476:	69db      	ldr	r3, [r3, #28]
 8006478:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00e      	beq.n	80064a0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	781b      	ldrb	r3, [r3, #0]
 8006486:	4619      	mov	r1, r3
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	f001 fea4 	bl	80081d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f001 fecf 	bl	8008238 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	7b1b      	ldrb	r3, [r3, #12]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00e      	beq.n	80064c6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	7b1b      	ldrb	r3, [r3, #12]
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f001 fe91 	bl	80081d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	7b1b      	ldrb	r3, [r3, #12]
 80064b8:	4619      	mov	r1, r3
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f001 febc 	bl	8008238 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	7b5b      	ldrb	r3, [r3, #13]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00e      	beq.n	80064ec <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	7b5b      	ldrb	r3, [r3, #13]
 80064d2:	4619      	mov	r1, r3
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fe7e 	bl	80081d6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	7b5b      	ldrb	r3, [r3, #13]
 80064de:	4619      	mov	r1, r3
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fea9 	bl	8008238 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	2200      	movs	r2, #0
 80064ea:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064f2:	69db      	ldr	r3, [r3, #28]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00b      	beq.n	8006510 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	4618      	mov	r0, r3
 8006502:	f002 f9ed 	bl	80088e0 <free>
    phost->pActiveClass->pData = 0U;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800650c:	2200      	movs	r2, #0
 800650e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800651a:	b580      	push	{r7, lr}
 800651c:	b084      	sub	sp, #16
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006528:	69db      	ldr	r3, [r3, #28]
 800652a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	3340      	adds	r3, #64	@ 0x40
 8006530:	4619      	mov	r1, r3
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f8b1 	bl	800669a <GetLineCoding>
 8006538:	4603      	mov	r3, r0
 800653a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800653c:	7afb      	ldrb	r3, [r7, #11]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d105      	bne.n	800654e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006548:	2102      	movs	r1, #2
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800654e:	7afb      	ldrb	r3, [r7, #11]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006560:	2301      	movs	r3, #1
 8006562:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800656e:	69db      	ldr	r3, [r3, #28]
 8006570:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006578:	2b04      	cmp	r3, #4
 800657a:	d877      	bhi.n	800666c <USBH_CDC_Process+0x114>
 800657c:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <USBH_CDC_Process+0x2c>)
 800657e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006582:	bf00      	nop
 8006584:	08006599 	.word	0x08006599
 8006588:	0800659f 	.word	0x0800659f
 800658c:	080065cf 	.word	0x080065cf
 8006590:	08006643 	.word	0x08006643
 8006594:	08006651 	.word	0x08006651
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006598:	2300      	movs	r3, #0
 800659a:	73fb      	strb	r3, [r7, #15]
      break;
 800659c:	e06d      	b.n	800667a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f897 	bl	80066d8 <SetLineCoding>
 80065aa:	4603      	mov	r3, r0
 80065ac:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065ae:	7bbb      	ldrb	r3, [r7, #14]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d104      	bne.n	80065be <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2202      	movs	r2, #2
 80065b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80065bc:	e058      	b.n	8006670 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d055      	beq.n	8006670 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	2204      	movs	r2, #4
 80065c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80065cc:	e050      	b.n	8006670 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	3340      	adds	r3, #64	@ 0x40
 80065d2:	4619      	mov	r1, r3
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 f860 	bl	800669a <GetLineCoding>
 80065da:	4603      	mov	r3, r0
 80065dc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80065de:	7bbb      	ldrb	r3, [r7, #14]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d126      	bne.n	8006632 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065f6:	791b      	ldrb	r3, [r3, #4]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d13b      	bne.n	8006674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006606:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006608:	429a      	cmp	r2, r3
 800660a:	d133      	bne.n	8006674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006616:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006618:	429a      	cmp	r2, r3
 800661a:	d12b      	bne.n	8006674 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006624:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006626:	429a      	cmp	r2, r3
 8006628:	d124      	bne.n	8006674 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f958 	bl	80068e0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006630:	e020      	b.n	8006674 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006632:	7bbb      	ldrb	r3, [r7, #14]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d01d      	beq.n	8006674 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	2204      	movs	r2, #4
 800663c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8006640:	e018      	b.n	8006674 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f867 	bl	8006716 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8da 	bl	8006802 <CDC_ProcessReception>
      break;
 800664e:	e014      	b.n	800667a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006650:	2100      	movs	r1, #0
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f81a 	bl	800768c <USBH_ClrFeature>
 8006658:	4603      	mov	r3, r0
 800665a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800665c:	7bbb      	ldrb	r3, [r7, #14]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10a      	bne.n	8006678 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800666a:	e005      	b.n	8006678 <USBH_CDC_Process+0x120>

    default:
      break;
 800666c:	bf00      	nop
 800666e:	e004      	b.n	800667a <USBH_CDC_Process+0x122>
      break;
 8006670:	bf00      	nop
 8006672:	e002      	b.n	800667a <USBH_CDC_Process+0x122>
      break;
 8006674:	bf00      	nop
 8006676:	e000      	b.n	800667a <USBH_CDC_Process+0x122>
      break;
 8006678:	bf00      	nop

  }

  return status;
 800667a:	7bfb      	ldrb	r3, [r7, #15]
}
 800667c:	4618      	mov	r0, r3
 800667e:	3710      	adds	r7, #16
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b082      	sub	sp, #8
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	22a1      	movs	r2, #161	@ 0xa1
 80066a8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2221      	movs	r2, #33	@ 0x21
 80066ae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2207      	movs	r2, #7
 80066c0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	2207      	movs	r2, #7
 80066c6:	4619      	mov	r1, r3
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 fb14 	bl	8007cf6 <USBH_CtlReq>
 80066ce:	4603      	mov	r3, r0
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3708      	adds	r7, #8
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2221      	movs	r2, #33	@ 0x21
 80066e6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2220      	movs	r2, #32
 80066ec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2207      	movs	r2, #7
 80066fe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2207      	movs	r2, #7
 8006704:	4619      	mov	r1, r3
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f001 faf5 	bl	8007cf6 <USBH_CtlReq>
 800670c:	4603      	mov	r3, r0
}
 800670e:	4618      	mov	r0, r3
 8006710:	3708      	adds	r7, #8
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b086      	sub	sp, #24
 800671a:	af02      	add	r7, sp, #8
 800671c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006728:	2300      	movs	r3, #0
 800672a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006732:	2b01      	cmp	r3, #1
 8006734:	d002      	beq.n	800673c <CDC_ProcessTransmission+0x26>
 8006736:	2b02      	cmp	r3, #2
 8006738:	d023      	beq.n	8006782 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800673a:	e05e      	b.n	80067fa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	8b12      	ldrh	r2, [r2, #24]
 8006744:	4293      	cmp	r3, r2
 8006746:	d90b      	bls.n	8006760 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	69d9      	ldr	r1, [r3, #28]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	8b1a      	ldrh	r2, [r3, #24]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	7b5b      	ldrb	r3, [r3, #13]
 8006754:	2001      	movs	r0, #1
 8006756:	9000      	str	r0, [sp, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f001 fcda 	bl	8008112 <USBH_BulkSendData>
 800675e:	e00b      	b.n	8006778 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	7b5b      	ldrb	r3, [r3, #13]
 800676e:	2001      	movs	r0, #1
 8006770:	9000      	str	r0, [sp, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f001 fccd 	bl	8008112 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2202      	movs	r2, #2
 800677c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8006780:	e03b      	b.n	80067fa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	7b5b      	ldrb	r3, [r3, #13]
 8006786:	4619      	mov	r1, r3
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fff1 	bl	8008770 <USBH_LL_GetURBState>
 800678e:	4603      	mov	r3, r0
 8006790:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d128      	bne.n	80067ea <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	8b12      	ldrh	r2, [r2, #24]
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d90e      	bls.n	80067c2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	8b12      	ldrh	r2, [r2, #24]
 80067ac:	1a9a      	subs	r2, r3, r2
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	69db      	ldr	r3, [r3, #28]
 80067b6:	68fa      	ldr	r2, [r7, #12]
 80067b8:	8b12      	ldrh	r2, [r2, #24]
 80067ba:	441a      	add	r2, r3
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	61da      	str	r2, [r3, #28]
 80067c0:	e002      	b.n	80067c8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d004      	beq.n	80067da <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067d8:	e00e      	b.n	80067f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2200      	movs	r2, #0
 80067de:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f868 	bl	80068b8 <USBH_CDC_TransmitCallback>
      break;
 80067e8:	e006      	b.n	80067f8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80067ea:	7afb      	ldrb	r3, [r7, #11]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d103      	bne.n	80067f8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80067f8:	bf00      	nop
  }
}
 80067fa:	bf00      	nop
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b086      	sub	sp, #24
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006810:	69db      	ldr	r3, [r3, #28]
 8006812:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006814:	2300      	movs	r3, #0
 8006816:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800681e:	2b03      	cmp	r3, #3
 8006820:	d002      	beq.n	8006828 <CDC_ProcessReception+0x26>
 8006822:	2b04      	cmp	r3, #4
 8006824:	d00e      	beq.n	8006844 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8006826:	e043      	b.n	80068b0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	6a19      	ldr	r1, [r3, #32]
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	8b5a      	ldrh	r2, [r3, #26]
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	7b1b      	ldrb	r3, [r3, #12]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fc91 	bl	800815c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	2204      	movs	r2, #4
 800683e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8006842:	e035      	b.n	80068b0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	7b1b      	ldrb	r3, [r3, #12]
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f001 ff90 	bl	8008770 <USBH_LL_GetURBState>
 8006850:	4603      	mov	r3, r0
 8006852:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006854:	7cfb      	ldrb	r3, [r7, #19]
 8006856:	2b01      	cmp	r3, #1
 8006858:	d129      	bne.n	80068ae <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	7b1b      	ldrb	r3, [r3, #12]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 fef3 	bl	800864c <USBH_LL_GetLastXferSize>
 8006866:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	429a      	cmp	r2, r3
 8006870:	d016      	beq.n	80068a0 <CDC_ProcessReception+0x9e>
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	8b5b      	ldrh	r3, [r3, #26]
 8006876:	461a      	mov	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	4293      	cmp	r3, r2
 800687c:	d110      	bne.n	80068a0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1ad2      	subs	r2, r2, r3
 8006886:	697b      	ldr	r3, [r7, #20]
 8006888:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	6a1a      	ldr	r2, [r3, #32]
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	441a      	add	r2, r3
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2203      	movs	r2, #3
 800689a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800689e:	e006      	b.n	80068ae <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2200      	movs	r2, #0
 80068a4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 f80f 	bl	80068cc <USBH_CDC_ReceiveCallback>
      break;
 80068ae:	bf00      	nop
  }
}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068d4:	bf00      	nop
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80068e8:	bf00      	nop
 80068ea:	370c      	adds	r7, #12
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d101      	bne.n	800690c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8006908:	2302      	movs	r3, #2
 800690a:	e029      	b.n	8006960 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	79fa      	ldrb	r2, [r7, #7]
 8006910:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f000 f81f 	bl	8006968 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2200      	movs	r2, #0
 8006946:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d003      	beq.n	8006958 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f001 fdc3 	bl	80084e4 <USBH_LL_Init>

  return USBH_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006974:	2300      	movs	r3, #0
 8006976:	60fb      	str	r3, [r7, #12]
 8006978:	e009      	b.n	800698e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	33e0      	adds	r3, #224	@ 0xe0
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	2200      	movs	r2, #0
 8006986:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3301      	adds	r3, #1
 800698c:	60fb      	str	r3, [r7, #12]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2b0f      	cmp	r3, #15
 8006992:	d9f2      	bls.n	800697a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006994:	2300      	movs	r3, #0
 8006996:	60fb      	str	r3, [r7, #12]
 8006998:	e009      	b.n	80069ae <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80069a4:	2200      	movs	r2, #0
 80069a6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	3301      	adds	r3, #1
 80069ac:	60fb      	str	r3, [r7, #12]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069b4:	d3f1      	bcc.n	800699a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2200      	movs	r2, #0
 80069c0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2240      	movs	r2, #64	@ 0x40
 80069da:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2200      	movs	r2, #0
 80069e6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	331c      	adds	r3, #28
 8006a06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f002 f81d 	bl	8008a4c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8006a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a1c:	2100      	movs	r1, #0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f002 f814 	bl	8008a4c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8006a2a:	2212      	movs	r2, #18
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 f80c 	bl	8008a4c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006a3a:	223e      	movs	r2, #62	@ 0x3e
 8006a3c:	2100      	movs	r1, #0
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f002 f804 	bl	8008a4c <memset>

  return USBH_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}

08006a4e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006a4e:	b480      	push	{r7}
 8006a50:	b085      	sub	sp, #20
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d016      	beq.n	8006a90 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10e      	bne.n	8006a8a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	33de      	adds	r3, #222	@ 0xde
 8006a7e:	6839      	ldr	r1, [r7, #0]
 8006a80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8006a84:	2300      	movs	r3, #0
 8006a86:	73fb      	strb	r3, [r7, #15]
 8006a88:	e004      	b.n	8006a94 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006a8a:	2302      	movs	r3, #2
 8006a8c:	73fb      	strb	r3, [r7, #15]
 8006a8e:	e001      	b.n	8006a94 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006a90:	2302      	movs	r3, #2
 8006a92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	460b      	mov	r3, r1
 8006aac:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8006ab8:	78fa      	ldrb	r2, [r7, #3]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d204      	bcs.n	8006ac8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	78fa      	ldrb	r2, [r7, #3]
 8006ac2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8006ac6:	e001      	b.n	8006acc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8006ac8:	2302      	movs	r3, #2
 8006aca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006ada:	b480      	push	{r7}
 8006adc:	b087      	sub	sp, #28
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	4608      	mov	r0, r1
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	4603      	mov	r3, r0
 8006aea:	70fb      	strb	r3, [r7, #3]
 8006aec:	460b      	mov	r3, r1
 8006aee:	70bb      	strb	r3, [r7, #2]
 8006af0:	4613      	mov	r3, r2
 8006af2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8006af8:	2300      	movs	r3, #0
 8006afa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8006b02:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b04:	e025      	b.n	8006b52 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006b06:	7dfb      	ldrb	r3, [r7, #23]
 8006b08:	221a      	movs	r2, #26
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
 8006b0e:	3308      	adds	r3, #8
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	3302      	adds	r3, #2
 8006b16:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	795b      	ldrb	r3, [r3, #5]
 8006b1c:	78fa      	ldrb	r2, [r7, #3]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d002      	beq.n	8006b28 <USBH_FindInterface+0x4e>
 8006b22:	78fb      	ldrb	r3, [r7, #3]
 8006b24:	2bff      	cmp	r3, #255	@ 0xff
 8006b26:	d111      	bne.n	8006b4c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006b2c:	78ba      	ldrb	r2, [r7, #2]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d002      	beq.n	8006b38 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b32:	78bb      	ldrb	r3, [r7, #2]
 8006b34:	2bff      	cmp	r3, #255	@ 0xff
 8006b36:	d109      	bne.n	8006b4c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006b3c:	787a      	ldrb	r2, [r7, #1]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d002      	beq.n	8006b48 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006b42:	787b      	ldrb	r3, [r7, #1]
 8006b44:	2bff      	cmp	r3, #255	@ 0xff
 8006b46:	d101      	bne.n	8006b4c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8006b48:	7dfb      	ldrb	r3, [r7, #23]
 8006b4a:	e006      	b.n	8006b5a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006b52:	7dfb      	ldrb	r3, [r7, #23]
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d9d6      	bls.n	8006b06 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8006b58:	23ff      	movs	r3, #255	@ 0xff
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	371c      	adds	r7, #28
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b082      	sub	sp, #8
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f001 fcf4 	bl	800855c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8006b74:	2101      	movs	r1, #1
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f001 fe0d 	bl	8008796 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
	...

08006b88 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b088      	sub	sp, #32
 8006b8c:	af04      	add	r7, sp, #16
 8006b8e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006b90:	2302      	movs	r3, #2
 8006b92:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006b94:	2300      	movs	r3, #0
 8006b96:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8006b9e:	b2db      	uxtb	r3, r3
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d102      	bne.n	8006baa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2203      	movs	r2, #3
 8006ba8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	b2db      	uxtb	r3, r3
 8006bb0:	2b0b      	cmp	r3, #11
 8006bb2:	f200 81bb 	bhi.w	8006f2c <USBH_Process+0x3a4>
 8006bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8006bbc <USBH_Process+0x34>)
 8006bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbc:	08006bed 	.word	0x08006bed
 8006bc0:	08006c1f 	.word	0x08006c1f
 8006bc4:	08006c87 	.word	0x08006c87
 8006bc8:	08006ec7 	.word	0x08006ec7
 8006bcc:	08006f2d 	.word	0x08006f2d
 8006bd0:	08006d27 	.word	0x08006d27
 8006bd4:	08006e6d 	.word	0x08006e6d
 8006bd8:	08006d5d 	.word	0x08006d5d
 8006bdc:	08006d7d 	.word	0x08006d7d
 8006be0:	08006d9b 	.word	0x08006d9b
 8006be4:	08006ddf 	.word	0x08006ddf
 8006be8:	08006eaf 	.word	0x08006eaf
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	f000 819b 	beq.w	8006f30 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2201      	movs	r2, #1
 8006bfe:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006c00:	20c8      	movs	r0, #200	@ 0xc8
 8006c02:	f001 fe12 	bl	800882a <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f001 fd05 	bl	8008616 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006c1c:	e188      	b.n	8006f30 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8006c24:	2b01      	cmp	r3, #1
 8006c26:	d107      	bne.n	8006c38 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c36:	e18a      	b.n	8006f4e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c3e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c42:	d914      	bls.n	8006c6e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c4a:	3301      	adds	r3, #1
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8006c5a:	2b03      	cmp	r3, #3
 8006c5c:	d903      	bls.n	8006c66 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	220d      	movs	r2, #13
 8006c62:	701a      	strb	r2, [r3, #0]
      break;
 8006c64:	e173      	b.n	8006f4e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	701a      	strb	r2, [r3, #0]
      break;
 8006c6c:	e16f      	b.n	8006f4e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8006c74:	f103 020a 	add.w	r2, r3, #10
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8006c7e:	200a      	movs	r0, #10
 8006c80:	f001 fdd3 	bl	800882a <USBH_Delay>
      break;
 8006c84:	e163      	b.n	8006f4e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d005      	beq.n	8006c9c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006c96:	2104      	movs	r1, #4
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006c9c:	2064      	movs	r0, #100	@ 0x64
 8006c9e:	f001 fdc4 	bl	800882a <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f001 fc90 	bl	80085c8 <USBH_LL_GetSpeed>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	461a      	mov	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2205      	movs	r2, #5
 8006cb6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006cb8:	2100      	movs	r1, #0
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f001 fa9b 	bl	80081f6 <USBH_AllocPipe>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006cc8:	2180      	movs	r1, #128	@ 0x80
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f001 fa93 	bl	80081f6 <USBH_AllocPipe>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	7919      	ldrb	r1, [r3, #4]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006cec:	9202      	str	r2, [sp, #8]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	9201      	str	r2, [sp, #4]
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2280      	movs	r2, #128	@ 0x80
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fa4d 	bl	8008198 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	7959      	ldrb	r1, [r3, #5]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006d12:	9202      	str	r2, [sp, #8]
 8006d14:	2200      	movs	r2, #0
 8006d16:	9201      	str	r2, [sp, #4]
 8006d18:	9300      	str	r3, [sp, #0]
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f001 fa3a 	bl	8008198 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d24:	e113      	b.n	8006f4e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 f916 	bl	8006f58 <USBH_HandleEnum>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	f040 80fd 	bne.w	8006f34 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d103      	bne.n	8006d54 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2208      	movs	r2, #8
 8006d50:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006d52:	e0ef      	b.n	8006f34 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2207      	movs	r2, #7
 8006d58:	701a      	strb	r2, [r3, #0]
      break;
 8006d5a:	e0eb      	b.n	8006f34 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	f000 80e8 	beq.w	8006f38 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006d6e:	2101      	movs	r1, #1
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2208      	movs	r2, #8
 8006d78:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006d7a:	e0dd      	b.n	8006f38 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8006d82:	4619      	mov	r1, r3
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc3a 	bl	80075fe <USBH_SetCfg>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f040 80d5 	bne.w	8006f3c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2209      	movs	r2, #9
 8006d96:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d98:	e0d0      	b.n	8006f3c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8006da0:	f003 0320 	and.w	r3, r3, #32
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d016      	beq.n	8006dd6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fc4a 	bl	8007644 <USBH_SetFeature>
 8006db0:	4603      	mov	r3, r0
 8006db2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006db4:	7bbb      	ldrb	r3, [r7, #14]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d103      	bne.n	8006dc4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	220a      	movs	r2, #10
 8006dc0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006dc2:	e0bd      	b.n	8006f40 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8006dc4:	7bbb      	ldrb	r3, [r7, #14]
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	f040 80b9 	bne.w	8006f40 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	220a      	movs	r2, #10
 8006dd2:	701a      	strb	r2, [r3, #0]
      break;
 8006dd4:	e0b4      	b.n	8006f40 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	220a      	movs	r2, #10
 8006dda:	701a      	strb	r2, [r3, #0]
      break;
 8006ddc:	e0b0      	b.n	8006f40 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80ad 	beq.w	8006f44 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006df2:	2300      	movs	r3, #0
 8006df4:	73fb      	strb	r3, [r7, #15]
 8006df6:	e016      	b.n	8006e26 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006df8:	7bfa      	ldrb	r2, [r7, #15]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	32de      	adds	r2, #222	@ 0xde
 8006dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e02:	791a      	ldrb	r2, [r3, #4]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d108      	bne.n	8006e20 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006e0e:	7bfa      	ldrb	r2, [r7, #15]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	32de      	adds	r2, #222	@ 0xde
 8006e14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8006e1e:	e005      	b.n	8006e2c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	3301      	adds	r3, #1
 8006e24:	73fb      	strb	r3, [r7, #15]
 8006e26:	7bfb      	ldrb	r3, [r7, #15]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d0e5      	beq.n	8006df8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d016      	beq.n	8006e64 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	6878      	ldr	r0, [r7, #4]
 8006e40:	4798      	blx	r3
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d109      	bne.n	8006e5c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2206      	movs	r2, #6
 8006e4c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006e54:	2103      	movs	r1, #3
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e5a:	e073      	b.n	8006f44 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	220d      	movs	r2, #13
 8006e60:	701a      	strb	r2, [r3, #0]
      break;
 8006e62:	e06f      	b.n	8006f44 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	220d      	movs	r2, #13
 8006e68:	701a      	strb	r2, [r3, #0]
      break;
 8006e6a:	e06b      	b.n	8006f44 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d017      	beq.n	8006ea6 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	4798      	blx	r3
 8006e82:	4603      	mov	r3, r0
 8006e84:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006e86:	7bbb      	ldrb	r3, [r7, #14]
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d103      	bne.n	8006e96 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	220b      	movs	r2, #11
 8006e92:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006e94:	e058      	b.n	8006f48 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8006e96:	7bbb      	ldrb	r3, [r7, #14]
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d154      	bne.n	8006f48 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	220d      	movs	r2, #13
 8006ea2:	701a      	strb	r2, [r3, #0]
      break;
 8006ea4:	e050      	b.n	8006f48 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	220d      	movs	r2, #13
 8006eaa:	701a      	strb	r2, [r3, #0]
      break;
 8006eac:	e04c      	b.n	8006f48 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d049      	beq.n	8006f4c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ebe:	695b      	ldr	r3, [r3, #20]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	4798      	blx	r3
      }
      break;
 8006ec4:	e042      	b.n	8006f4c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7ff fd4a 	bl	8006968 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d009      	beq.n	8006ef2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d005      	beq.n	8006f08 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006f02:	2105      	movs	r1, #5
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	d107      	bne.n	8006f24 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff fe22 	bl	8006b66 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006f22:	e014      	b.n	8006f4e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fb19 	bl	800855c <USBH_LL_Start>
      break;
 8006f2a:	e010      	b.n	8006f4e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8006f2c:	bf00      	nop
 8006f2e:	e00e      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f30:	bf00      	nop
 8006f32:	e00c      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f34:	bf00      	nop
 8006f36:	e00a      	b.n	8006f4e <USBH_Process+0x3c6>
    break;
 8006f38:	bf00      	nop
 8006f3a:	e008      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f3c:	bf00      	nop
 8006f3e:	e006      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f40:	bf00      	nop
 8006f42:	e004      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f44:	bf00      	nop
 8006f46:	e002      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f48:	bf00      	nop
 8006f4a:	e000      	b.n	8006f4e <USBH_Process+0x3c6>
      break;
 8006f4c:	bf00      	nop
  }
  return USBH_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3710      	adds	r7, #16
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b088      	sub	sp, #32
 8006f5c:	af04      	add	r7, sp, #16
 8006f5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006f60:	2301      	movs	r3, #1
 8006f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006f64:	2301      	movs	r3, #1
 8006f66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	785b      	ldrb	r3, [r3, #1]
 8006f6c:	2b07      	cmp	r3, #7
 8006f6e:	f200 81bd 	bhi.w	80072ec <USBH_HandleEnum+0x394>
 8006f72:	a201      	add	r2, pc, #4	@ (adr r2, 8006f78 <USBH_HandleEnum+0x20>)
 8006f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f78:	08006f99 	.word	0x08006f99
 8006f7c:	08007053 	.word	0x08007053
 8006f80:	080070bd 	.word	0x080070bd
 8006f84:	08007147 	.word	0x08007147
 8006f88:	080071b1 	.word	0x080071b1
 8006f8c:	08007221 	.word	0x08007221
 8006f90:	08007267 	.word	0x08007267
 8006f94:	080072ad 	.word	0x080072ad
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006f98:	2108      	movs	r1, #8
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f000 fa4c 	bl	8007438 <USBH_Get_DevDesc>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d12e      	bne.n	8007008 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	7919      	ldrb	r1, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006fce:	9202      	str	r2, [sp, #8]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	9201      	str	r2, [sp, #4]
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2280      	movs	r2, #128	@ 0x80
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f001 f8dc 	bl	8008198 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	7959      	ldrb	r1, [r3, #5]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006ff0:	687a      	ldr	r2, [r7, #4]
 8006ff2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006ff4:	9202      	str	r2, [sp, #8]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	9201      	str	r2, [sp, #4]
 8006ffa:	9300      	str	r3, [sp, #0]
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2200      	movs	r2, #0
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f001 f8c9 	bl	8008198 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007006:	e173      	b.n	80072f0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007008:	7bbb      	ldrb	r3, [r7, #14]
 800700a:	2b03      	cmp	r3, #3
 800700c:	f040 8170 	bne.w	80072f0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007016:	3301      	adds	r3, #1
 8007018:	b2da      	uxtb	r2, r3
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007026:	2b03      	cmp	r3, #3
 8007028:	d903      	bls.n	8007032 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	220d      	movs	r2, #13
 800702e:	701a      	strb	r2, [r3, #0]
      break;
 8007030:	e15e      	b.n	80072f0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	795b      	ldrb	r3, [r3, #5]
 8007036:	4619      	mov	r1, r3
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f001 f8fd 	bl	8008238 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	791b      	ldrb	r3, [r3, #4]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 f8f7 	bl	8008238 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
      break;
 8007050:	e14e      	b.n	80072f0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007052:	2112      	movs	r1, #18
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f000 f9ef 	bl	8007438 <USBH_Get_DevDesc>
 800705a:	4603      	mov	r3, r0
 800705c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800705e:	7bbb      	ldrb	r3, [r7, #14]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d103      	bne.n	800706c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2202      	movs	r2, #2
 8007068:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800706a:	e143      	b.n	80072f4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800706c:	7bbb      	ldrb	r3, [r7, #14]
 800706e:	2b03      	cmp	r3, #3
 8007070:	f040 8140 	bne.w	80072f4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800708a:	2b03      	cmp	r3, #3
 800708c:	d903      	bls.n	8007096 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	220d      	movs	r2, #13
 8007092:	701a      	strb	r2, [r3, #0]
      break;
 8007094:	e12e      	b.n	80072f4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	795b      	ldrb	r3, [r3, #5]
 800709a:	4619      	mov	r1, r3
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f001 f8cb 	bl	8008238 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	791b      	ldrb	r3, [r3, #4]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f001 f8c5 	bl	8008238 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2200      	movs	r2, #0
 80070b2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2200      	movs	r2, #0
 80070b8:	701a      	strb	r2, [r3, #0]
      break;
 80070ba:	e11b      	b.n	80072f4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80070bc:	2101      	movs	r1, #1
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fa79 	bl	80075b6 <USBH_SetAddress>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80070c8:	7bbb      	ldrb	r3, [r7, #14]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d130      	bne.n	8007130 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80070ce:	2002      	movs	r0, #2
 80070d0:	f001 fbab 	bl	800882a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2203      	movs	r2, #3
 80070e0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	7919      	ldrb	r1, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80070f6:	9202      	str	r2, [sp, #8]
 80070f8:	2200      	movs	r2, #0
 80070fa:	9201      	str	r2, [sp, #4]
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	4603      	mov	r3, r0
 8007100:	2280      	movs	r2, #128	@ 0x80
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 f848 	bl	8008198 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	7959      	ldrb	r1, [r3, #5]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800711c:	9202      	str	r2, [sp, #8]
 800711e:	2200      	movs	r2, #0
 8007120:	9201      	str	r2, [sp, #4]
 8007122:	9300      	str	r3, [sp, #0]
 8007124:	4603      	mov	r3, r0
 8007126:	2200      	movs	r2, #0
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f001 f835 	bl	8008198 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800712e:	e0e3      	b.n	80072f8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007130:	7bbb      	ldrb	r3, [r7, #14]
 8007132:	2b03      	cmp	r3, #3
 8007134:	f040 80e0 	bne.w	80072f8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	220d      	movs	r2, #13
 800713c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	705a      	strb	r2, [r3, #1]
      break;
 8007144:	e0d8      	b.n	80072f8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007146:	2109      	movs	r1, #9
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 f9a1 	bl	8007490 <USBH_Get_CfgDesc>
 800714e:	4603      	mov	r3, r0
 8007150:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007152:	7bbb      	ldrb	r3, [r7, #14]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2204      	movs	r2, #4
 800715c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800715e:	e0cd      	b.n	80072fc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b03      	cmp	r3, #3
 8007164:	f040 80ca 	bne.w	80072fc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800716e:	3301      	adds	r3, #1
 8007170:	b2da      	uxtb	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800717e:	2b03      	cmp	r3, #3
 8007180:	d903      	bls.n	800718a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	220d      	movs	r2, #13
 8007186:	701a      	strb	r2, [r3, #0]
      break;
 8007188:	e0b8      	b.n	80072fc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	795b      	ldrb	r3, [r3, #5]
 800718e:	4619      	mov	r1, r3
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f001 f851 	bl	8008238 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	791b      	ldrb	r3, [r3, #4]
 800719a:	4619      	mov	r1, r3
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f001 f84b 	bl	8008238 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2200      	movs	r2, #0
 80071ac:	701a      	strb	r2, [r3, #0]
      break;
 80071ae:	e0a5      	b.n	80072fc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 f969 	bl	8007490 <USBH_Get_CfgDesc>
 80071be:	4603      	mov	r3, r0
 80071c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80071c2:	7bbb      	ldrb	r3, [r7, #14]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d103      	bne.n	80071d0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2205      	movs	r2, #5
 80071cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80071ce:	e097      	b.n	8007300 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80071d0:	7bbb      	ldrb	r3, [r7, #14]
 80071d2:	2b03      	cmp	r3, #3
 80071d4:	f040 8094 	bne.w	8007300 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071de:	3301      	adds	r3, #1
 80071e0:	b2da      	uxtb	r2, r3
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80071ee:	2b03      	cmp	r3, #3
 80071f0:	d903      	bls.n	80071fa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	220d      	movs	r2, #13
 80071f6:	701a      	strb	r2, [r3, #0]
      break;
 80071f8:	e082      	b.n	8007300 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	795b      	ldrb	r3, [r3, #5]
 80071fe:	4619      	mov	r1, r3
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f001 f819 	bl	8008238 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	791b      	ldrb	r3, [r3, #4]
 800720a:	4619      	mov	r1, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f001 f813 	bl	8008238 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2200      	movs	r2, #0
 8007216:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	701a      	strb	r2, [r3, #0]
      break;
 800721e:	e06f      	b.n	8007300 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007226:	2b00      	cmp	r3, #0
 8007228:	d019      	beq.n	800725e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007236:	23ff      	movs	r3, #255	@ 0xff
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f953 	bl	80074e4 <USBH_Get_StringDesc>
 800723e:	4603      	mov	r3, r0
 8007240:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007242:	7bbb      	ldrb	r3, [r7, #14]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d103      	bne.n	8007250 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2206      	movs	r2, #6
 800724c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800724e:	e059      	b.n	8007304 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	2b03      	cmp	r3, #3
 8007254:	d156      	bne.n	8007304 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2206      	movs	r2, #6
 800725a:	705a      	strb	r2, [r3, #1]
      break;
 800725c:	e052      	b.n	8007304 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2206      	movs	r2, #6
 8007262:	705a      	strb	r2, [r3, #1]
      break;
 8007264:	e04e      	b.n	8007304 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800726c:	2b00      	cmp	r3, #0
 800726e:	d019      	beq.n	80072a4 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800727c:	23ff      	movs	r3, #255	@ 0xff
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f930 	bl	80074e4 <USBH_Get_StringDesc>
 8007284:	4603      	mov	r3, r0
 8007286:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d103      	bne.n	8007296 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2207      	movs	r2, #7
 8007292:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007294:	e038      	b.n	8007308 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007296:	7bbb      	ldrb	r3, [r7, #14]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d135      	bne.n	8007308 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2207      	movs	r2, #7
 80072a0:	705a      	strb	r2, [r3, #1]
      break;
 80072a2:	e031      	b.n	8007308 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2207      	movs	r2, #7
 80072a8:	705a      	strb	r2, [r3, #1]
      break;
 80072aa:	e02d      	b.n	8007308 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d017      	beq.n	80072e6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80072c2:	23ff      	movs	r3, #255	@ 0xff
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f90d 	bl	80074e4 <USBH_Get_StringDesc>
 80072ca:	4603      	mov	r3, r0
 80072cc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80072ce:	7bbb      	ldrb	r3, [r7, #14]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d102      	bne.n	80072da <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80072d8:	e018      	b.n	800730c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80072da:	7bbb      	ldrb	r3, [r7, #14]
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d115      	bne.n	800730c <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80072e0:	2300      	movs	r3, #0
 80072e2:	73fb      	strb	r3, [r7, #15]
      break;
 80072e4:	e012      	b.n	800730c <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	73fb      	strb	r3, [r7, #15]
      break;
 80072ea:	e00f      	b.n	800730c <USBH_HandleEnum+0x3b4>

    default:
      break;
 80072ec:	bf00      	nop
 80072ee:	e00e      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 80072f0:	bf00      	nop
 80072f2:	e00c      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 80072f4:	bf00      	nop
 80072f6:	e00a      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 80072f8:	bf00      	nop
 80072fa:	e008      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 80072fc:	bf00      	nop
 80072fe:	e006      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 8007300:	bf00      	nop
 8007302:	e004      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 8007304:	bf00      	nop
 8007306:	e002      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 8007308:	bf00      	nop
 800730a:	e000      	b.n	800730e <USBH_HandleEnum+0x3b6>
      break;
 800730c:	bf00      	nop
  }
  return Status;
 800730e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007310:	4618      	mov	r0, r3
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007318:	b480      	push	{r7}
 800731a:	b083      	sub	sp, #12
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	683a      	ldr	r2, [r7, #0]
 8007326:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800732a:	bf00      	nop
 800732c:	370c      	adds	r7, #12
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr

08007336 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007336:	b580      	push	{r7, lr}
 8007338:	b082      	sub	sp, #8
 800733a:	af00      	add	r7, sp, #0
 800733c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007344:	1c5a      	adds	r2, r3, #1
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f804 	bl	800735a <USBH_HandleSof>
}
 8007352:	bf00      	nop
 8007354:	3708      	adds	r7, #8
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}

0800735a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b082      	sub	sp, #8
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	b2db      	uxtb	r3, r3
 8007368:	2b0b      	cmp	r3, #11
 800736a:	d10a      	bne.n	8007382 <USBH_HandleSof+0x28>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007372:	2b00      	cmp	r3, #0
 8007374:	d005      	beq.n	8007382 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	4798      	blx	r3
  }
}
 8007382:	bf00      	nop
 8007384:	3708      	adds	r7, #8
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800738a:	b480      	push	{r7}
 800738c:	b083      	sub	sp, #12
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800739a:	bf00      	nop
}
 800739c:	370c      	adds	r7, #12
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b083      	sub	sp, #12
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80073b6:	bf00      	nop
}
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b083      	sub	sp, #12
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f001 f8be 	bl	8008592 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	791b      	ldrb	r3, [r3, #4]
 800741a:	4619      	mov	r1, r3
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 ff0b 	bl	8008238 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	795b      	ldrb	r3, [r3, #5]
 8007426:	4619      	mov	r1, r3
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 ff05 	bl	8008238 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}

08007438 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af02      	add	r7, sp, #8
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	460b      	mov	r3, r1
 8007442:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007444:	887b      	ldrh	r3, [r7, #2]
 8007446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800744a:	d901      	bls.n	8007450 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800744c:	2303      	movs	r3, #3
 800744e:	e01b      	b.n	8007488 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007456:	887b      	ldrh	r3, [r7, #2]
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	4613      	mov	r3, r2
 800745c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007460:	2100      	movs	r1, #0
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	f000 f872 	bl	800754c <USBH_GetDescriptor>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d109      	bne.n	8007486 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007478:	887a      	ldrh	r2, [r7, #2]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f929 	bl	80076d4 <USBH_ParseDevDesc>
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
}
 8007488:	4618      	mov	r0, r3
 800748a:	3710      	adds	r7, #16
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}

08007490 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af02      	add	r7, sp, #8
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	460b      	mov	r3, r1
 800749a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	331c      	adds	r3, #28
 80074a0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80074a2:	887b      	ldrh	r3, [r7, #2]
 80074a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80074a8:	d901      	bls.n	80074ae <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80074aa:	2303      	movs	r3, #3
 80074ac:	e016      	b.n	80074dc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80074ae:	887b      	ldrh	r3, [r7, #2]
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074b8:	2100      	movs	r1, #0
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f846 	bl	800754c <USBH_GetDescriptor>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d107      	bne.n	80074da <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80074ca:	887b      	ldrh	r3, [r7, #2]
 80074cc:	461a      	mov	r2, r3
 80074ce:	68b9      	ldr	r1, [r7, #8]
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f9af 	bl	8007834 <USBH_ParseCfgDesc>
 80074d6:	4603      	mov	r3, r0
 80074d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af02      	add	r7, sp, #8
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	607a      	str	r2, [r7, #4]
 80074ee:	461a      	mov	r2, r3
 80074f0:	460b      	mov	r3, r1
 80074f2:	72fb      	strb	r3, [r7, #11]
 80074f4:	4613      	mov	r3, r2
 80074f6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80074f8:	893b      	ldrh	r3, [r7, #8]
 80074fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80074fe:	d802      	bhi.n	8007506 <USBH_Get_StringDesc+0x22>
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d101      	bne.n	800750a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007506:	2303      	movs	r3, #3
 8007508:	e01c      	b.n	8007544 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800750a:	7afb      	ldrb	r3, [r7, #11]
 800750c:	b29b      	uxth	r3, r3
 800750e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007512:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800751a:	893b      	ldrh	r3, [r7, #8]
 800751c:	9300      	str	r3, [sp, #0]
 800751e:	460b      	mov	r3, r1
 8007520:	2100      	movs	r1, #0
 8007522:	68f8      	ldr	r0, [r7, #12]
 8007524:	f000 f812 	bl	800754c <USBH_GetDescriptor>
 8007528:	4603      	mov	r3, r0
 800752a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800752c:	7dfb      	ldrb	r3, [r7, #23]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d107      	bne.n	8007542 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007538:	893a      	ldrh	r2, [r7, #8]
 800753a:	6879      	ldr	r1, [r7, #4]
 800753c:	4618      	mov	r0, r3
 800753e:	f000 fb8d 	bl	8007c5c <USBH_ParseStringDesc>
  }

  return status;
 8007542:	7dfb      	ldrb	r3, [r7, #23]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3718      	adds	r7, #24
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	607b      	str	r3, [r7, #4]
 8007556:	460b      	mov	r3, r1
 8007558:	72fb      	strb	r3, [r7, #11]
 800755a:	4613      	mov	r3, r2
 800755c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	789b      	ldrb	r3, [r3, #2]
 8007562:	2b01      	cmp	r3, #1
 8007564:	d11c      	bne.n	80075a0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800756c:	b2da      	uxtb	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2206      	movs	r2, #6
 8007576:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	893a      	ldrh	r2, [r7, #8]
 800757c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800757e:	893b      	ldrh	r3, [r7, #8]
 8007580:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007584:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007588:	d104      	bne.n	8007594 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f240 4209 	movw	r2, #1033	@ 0x409
 8007590:	829a      	strh	r2, [r3, #20]
 8007592:	e002      	b.n	800759a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	8b3a      	ldrh	r2, [r7, #24]
 800759e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80075a0:	8b3b      	ldrh	r3, [r7, #24]
 80075a2:	461a      	mov	r2, r3
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fba5 	bl	8007cf6 <USBH_CtlReq>
 80075ac:	4603      	mov	r3, r0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	460b      	mov	r3, r1
 80075c0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	789b      	ldrb	r3, [r3, #2]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d10f      	bne.n	80075ea <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2205      	movs	r2, #5
 80075d4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80075d6:	78fb      	ldrb	r3, [r7, #3]
 80075d8:	b29a      	uxth	r2, r3
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2200      	movs	r2, #0
 80075e8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80075ea:	2200      	movs	r2, #0
 80075ec:	2100      	movs	r1, #0
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fb81 	bl	8007cf6 <USBH_CtlReq>
 80075f4:	4603      	mov	r3, r0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b082      	sub	sp, #8
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	460b      	mov	r3, r1
 8007608:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	789b      	ldrb	r3, [r3, #2]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d10e      	bne.n	8007630 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2200      	movs	r2, #0
 8007616:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2209      	movs	r2, #9
 800761c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	887a      	ldrh	r2, [r7, #2]
 8007622:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007630:	2200      	movs	r2, #0
 8007632:	2100      	movs	r1, #0
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fb5e 	bl	8007cf6 <USBH_CtlReq>
 800763a:	4603      	mov	r3, r0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3708      	adds	r7, #8
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b082      	sub	sp, #8
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
 800764c:	460b      	mov	r3, r1
 800764e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10f      	bne.n	8007678 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2203      	movs	r2, #3
 8007662:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007664:	78fb      	ldrb	r3, [r7, #3]
 8007666:	b29a      	uxth	r2, r3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007678:	2200      	movs	r2, #0
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 fb3a 	bl	8007cf6 <USBH_CtlReq>
 8007682:	4603      	mov	r3, r0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	460b      	mov	r3, r1
 8007696:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	789b      	ldrb	r3, [r3, #2]
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10f      	bne.n	80076c0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2202      	movs	r2, #2
 80076a4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80076c0:	2200      	movs	r2, #0
 80076c2:	2100      	movs	r1, #0
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb16 	bl	8007cf6 <USBH_CtlReq>
 80076ca:	4603      	mov	r3, r0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3708      	adds	r7, #8
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80076e8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80076ee:	68bb      	ldr	r3, [r7, #8]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80076f4:	2302      	movs	r3, #2
 80076f6:	e094      	b.n	8007822 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	781a      	ldrb	r2, [r3, #0]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	785a      	ldrb	r2, [r3, #1]
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	3302      	adds	r3, #2
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	3303      	adds	r3, #3
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	021b      	lsls	r3, r3, #8
 8007718:	b29b      	uxth	r3, r3
 800771a:	4313      	orrs	r3, r2
 800771c:	b29a      	uxth	r2, r3
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	791a      	ldrb	r2, [r3, #4]
 8007726:	693b      	ldr	r3, [r7, #16]
 8007728:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	795a      	ldrb	r2, [r3, #5]
 800772e:	693b      	ldr	r3, [r7, #16]
 8007730:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	799a      	ldrb	r2, [r3, #6]
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	79da      	ldrb	r2, [r3, #7]
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007748:	2b00      	cmp	r3, #0
 800774a:	d004      	beq.n	8007756 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8007752:	2b01      	cmp	r3, #1
 8007754:	d11b      	bne.n	800778e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	79db      	ldrb	r3, [r3, #7]
 800775a:	2b20      	cmp	r3, #32
 800775c:	dc0f      	bgt.n	800777e <USBH_ParseDevDesc+0xaa>
 800775e:	2b08      	cmp	r3, #8
 8007760:	db0f      	blt.n	8007782 <USBH_ParseDevDesc+0xae>
 8007762:	3b08      	subs	r3, #8
 8007764:	4a32      	ldr	r2, [pc, #200]	@ (8007830 <USBH_ParseDevDesc+0x15c>)
 8007766:	fa22 f303 	lsr.w	r3, r2, r3
 800776a:	f003 0301 	and.w	r3, r3, #1
 800776e:	2b00      	cmp	r3, #0
 8007770:	bf14      	ite	ne
 8007772:	2301      	movne	r3, #1
 8007774:	2300      	moveq	r3, #0
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	d106      	bne.n	800778a <USBH_ParseDevDesc+0xb6>
 800777c:	e001      	b.n	8007782 <USBH_ParseDevDesc+0xae>
 800777e:	2b40      	cmp	r3, #64	@ 0x40
 8007780:	d003      	beq.n	800778a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	2208      	movs	r2, #8
 8007786:	71da      	strb	r2, [r3, #7]
        break;
 8007788:	e000      	b.n	800778c <USBH_ParseDevDesc+0xb8>
        break;
 800778a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800778c:	e00e      	b.n	80077ac <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007794:	2b02      	cmp	r3, #2
 8007796:	d107      	bne.n	80077a8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	79db      	ldrb	r3, [r3, #7]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d005      	beq.n	80077ac <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	2208      	movs	r2, #8
 80077a4:	71da      	strb	r2, [r3, #7]
 80077a6:	e001      	b.n	80077ac <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80077a8:	2303      	movs	r3, #3
 80077aa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80077ac:	88fb      	ldrh	r3, [r7, #6]
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d936      	bls.n	8007820 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	3308      	adds	r3, #8
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	461a      	mov	r2, r3
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	3309      	adds	r3, #9
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	330a      	adds	r3, #10
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	330b      	adds	r3, #11
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	021b      	lsls	r3, r3, #8
 80077dc:	b29b      	uxth	r3, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	b29a      	uxth	r2, r3
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	330c      	adds	r3, #12
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	461a      	mov	r2, r3
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	330d      	adds	r3, #13
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	021b      	lsls	r3, r3, #8
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4313      	orrs	r3, r2
 80077fa:	b29a      	uxth	r2, r3
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b9a      	ldrb	r2, [r3, #14]
 8007804:	693b      	ldr	r3, [r7, #16]
 8007806:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7bda      	ldrb	r2, [r3, #15]
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c1a      	ldrb	r2, [r3, #16]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	7c5a      	ldrb	r2, [r3, #17]
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8007820:	7dfb      	ldrb	r3, [r7, #23]
}
 8007822:	4618      	mov	r0, r3
 8007824:	371c      	adds	r7, #28
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr
 800782e:	bf00      	nop
 8007830:	01000101 	.word	0x01000101

08007834 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b08c      	sub	sp, #48	@ 0x30
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	4613      	mov	r3, r2
 8007840:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007848:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800784a:	2300      	movs	r3, #0
 800784c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8007856:	2300      	movs	r3, #0
 8007858:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8007862:	2302      	movs	r3, #2
 8007864:	e0da      	b.n	8007a1c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800786a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	2b09      	cmp	r3, #9
 8007870:	d002      	beq.n	8007878 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	2209      	movs	r2, #9
 8007876:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	781a      	ldrb	r2, [r3, #0]
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	785a      	ldrb	r2, [r3, #1]
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007888:	68bb      	ldr	r3, [r7, #8]
 800788a:	3302      	adds	r3, #2
 800788c:	781b      	ldrb	r3, [r3, #0]
 800788e:	461a      	mov	r2, r3
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	3303      	adds	r3, #3
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	021b      	lsls	r3, r3, #8
 8007898:	b29b      	uxth	r3, r3
 800789a:	4313      	orrs	r3, r2
 800789c:	b29b      	uxth	r3, r3
 800789e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078a2:	bf28      	it	cs
 80078a4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	6a3b      	ldr	r3, [r7, #32]
 80078ac:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	791a      	ldrb	r2, [r3, #4]
 80078b2:	6a3b      	ldr	r3, [r7, #32]
 80078b4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	795a      	ldrb	r2, [r3, #5]
 80078ba:	6a3b      	ldr	r3, [r7, #32]
 80078bc:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	799a      	ldrb	r2, [r3, #6]
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	79da      	ldrb	r2, [r3, #7]
 80078ca:	6a3b      	ldr	r3, [r7, #32]
 80078cc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	7a1a      	ldrb	r2, [r3, #8]
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80078d6:	88fb      	ldrh	r3, [r7, #6]
 80078d8:	2b09      	cmp	r3, #9
 80078da:	f240 809d 	bls.w	8007a18 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80078de:	2309      	movs	r3, #9
 80078e0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80078e2:	2300      	movs	r3, #0
 80078e4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80078e6:	e081      	b.n	80079ec <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80078e8:	f107 0316 	add.w	r3, r7, #22
 80078ec:	4619      	mov	r1, r3
 80078ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f0:	f000 f9e7 	bl	8007cc2 <USBH_GetNextDesc>
 80078f4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	785b      	ldrb	r3, [r3, #1]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d176      	bne.n	80079ec <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80078fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	2b09      	cmp	r3, #9
 8007904:	d002      	beq.n	800790c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	2209      	movs	r2, #9
 800790a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800790c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007910:	221a      	movs	r2, #26
 8007912:	fb02 f303 	mul.w	r3, r2, r3
 8007916:	3308      	adds	r3, #8
 8007918:	6a3a      	ldr	r2, [r7, #32]
 800791a:	4413      	add	r3, r2
 800791c:	3302      	adds	r3, #2
 800791e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007920:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007922:	69f8      	ldr	r0, [r7, #28]
 8007924:	f000 f87e 	bl	8007a24 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007928:	2300      	movs	r3, #0
 800792a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007932:	e043      	b.n	80079bc <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007934:	f107 0316 	add.w	r3, r7, #22
 8007938:	4619      	mov	r1, r3
 800793a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800793c:	f000 f9c1 	bl	8007cc2 <USBH_GetNextDesc>
 8007940:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	2b05      	cmp	r3, #5
 8007948:	d138      	bne.n	80079bc <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	795b      	ldrb	r3, [r3, #5]
 800794e:	2b01      	cmp	r3, #1
 8007950:	d113      	bne.n	800797a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8007956:	2b02      	cmp	r3, #2
 8007958:	d003      	beq.n	8007962 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	799b      	ldrb	r3, [r3, #6]
 800795e:	2b03      	cmp	r3, #3
 8007960:	d10b      	bne.n	800797a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	79db      	ldrb	r3, [r3, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d10b      	bne.n	8007982 <USBH_ParseCfgDesc+0x14e>
 800796a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	2b09      	cmp	r3, #9
 8007970:	d007      	beq.n	8007982 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8007972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007974:	2209      	movs	r2, #9
 8007976:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007978:	e003      	b.n	8007982 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800797a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800797c:	2207      	movs	r2, #7
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	e000      	b.n	8007984 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007982:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007988:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800798c:	3201      	adds	r2, #1
 800798e:	00d2      	lsls	r2, r2, #3
 8007990:	211a      	movs	r1, #26
 8007992:	fb01 f303 	mul.w	r3, r1, r3
 8007996:	4413      	add	r3, r2
 8007998:	3308      	adds	r3, #8
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	4413      	add	r3, r2
 800799e:	3304      	adds	r3, #4
 80079a0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80079a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80079a4:	69b9      	ldr	r1, [r7, #24]
 80079a6:	68f8      	ldr	r0, [r7, #12]
 80079a8:	f000 f870 	bl	8007a8c <USBH_ParseEPDesc>
 80079ac:	4603      	mov	r3, r0
 80079ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80079b2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079b6:	3301      	adds	r3, #1
 80079b8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	791b      	ldrb	r3, [r3, #4]
 80079c0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d204      	bcs.n	80079d2 <USBH_ParseCfgDesc+0x19e>
 80079c8:	6a3b      	ldr	r3, [r7, #32]
 80079ca:	885a      	ldrh	r2, [r3, #2]
 80079cc:	8afb      	ldrh	r3, [r7, #22]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d8b0      	bhi.n	8007934 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	791b      	ldrb	r3, [r3, #4]
 80079d6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80079da:	429a      	cmp	r2, r3
 80079dc:	d201      	bcs.n	80079e2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 80079de:	2303      	movs	r3, #3
 80079e0:	e01c      	b.n	8007a1c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80079e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079e6:	3301      	adds	r3, #1
 80079e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80079ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	d805      	bhi.n	8007a00 <USBH_ParseCfgDesc+0x1cc>
 80079f4:	6a3b      	ldr	r3, [r7, #32]
 80079f6:	885a      	ldrh	r2, [r3, #2]
 80079f8:	8afb      	ldrh	r3, [r7, #22]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	f63f af74 	bhi.w	80078e8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007a00:	6a3b      	ldr	r3, [r7, #32]
 8007a02:	791b      	ldrb	r3, [r3, #4]
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	bf28      	it	cs
 8007a08:	2302      	movcs	r3, #2
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d201      	bcs.n	8007a18 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e001      	b.n	8007a1c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8007a18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3730      	adds	r7, #48	@ 0x30
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	781a      	ldrb	r2, [r3, #0]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	785a      	ldrb	r2, [r3, #1]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	789a      	ldrb	r2, [r3, #2]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	78da      	ldrb	r2, [r3, #3]
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	3304      	adds	r3, #4
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	2b02      	cmp	r3, #2
 8007a56:	bf28      	it	cs
 8007a58:	2302      	movcs	r3, #2
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	795a      	ldrb	r2, [r3, #5]
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	799a      	ldrb	r2, [r3, #6]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	79da      	ldrb	r2, [r3, #7]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	7a1a      	ldrb	r2, [r3, #8]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	721a      	strb	r2, [r3, #8]
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	781a      	ldrb	r2, [r3, #0]
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	785a      	ldrb	r2, [r3, #1]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	789a      	ldrb	r2, [r3, #2]
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	78da      	ldrb	r2, [r3, #3]
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3304      	adds	r3, #4
 8007ac0:	781b      	ldrb	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	3305      	adds	r3, #5
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	021b      	lsls	r3, r3, #8
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	799a      	ldrb	r2, [r3, #6]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	889b      	ldrh	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d009      	beq.n	8007afa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8007aea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aee:	d804      	bhi.n	8007afa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8007af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007af8:	d901      	bls.n	8007afe <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8007afa:	2303      	movs	r3, #3
 8007afc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d136      	bne.n	8007b76 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	78db      	ldrb	r3, [r3, #3]
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d108      	bne.n	8007b26 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	889b      	ldrh	r3, [r3, #4]
 8007b18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b1c:	f240 8097 	bls.w	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b20:	2303      	movs	r3, #3
 8007b22:	75fb      	strb	r3, [r7, #23]
 8007b24:	e093      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	78db      	ldrb	r3, [r3, #3]
 8007b2a:	f003 0303 	and.w	r3, r3, #3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d107      	bne.n	8007b42 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	889b      	ldrh	r3, [r3, #4]
 8007b36:	2b40      	cmp	r3, #64	@ 0x40
 8007b38:	f240 8089 	bls.w	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	75fb      	strb	r3, [r7, #23]
 8007b40:	e085      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	78db      	ldrb	r3, [r3, #3]
 8007b46:	f003 0303 	and.w	r3, r3, #3
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d005      	beq.n	8007b5a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	78db      	ldrb	r3, [r3, #3]
 8007b52:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	d10a      	bne.n	8007b70 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	799b      	ldrb	r3, [r3, #6]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d003      	beq.n	8007b6a <USBH_ParseEPDesc+0xde>
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	799b      	ldrb	r3, [r3, #6]
 8007b66:	2b10      	cmp	r3, #16
 8007b68:	d970      	bls.n	8007c4c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007b6e:	e06d      	b.n	8007c4c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007b70:	2303      	movs	r3, #3
 8007b72:	75fb      	strb	r3, [r7, #23]
 8007b74:	e06b      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	d13c      	bne.n	8007bfa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	78db      	ldrb	r3, [r3, #3]
 8007b84:	f003 0303 	and.w	r3, r3, #3
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d005      	beq.n	8007b98 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	78db      	ldrb	r3, [r3, #3]
 8007b90:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d106      	bne.n	8007ba6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	889b      	ldrh	r3, [r3, #4]
 8007b9c:	2b40      	cmp	r3, #64	@ 0x40
 8007b9e:	d956      	bls.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007ba0:	2303      	movs	r3, #3
 8007ba2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8007ba4:	e053      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	78db      	ldrb	r3, [r3, #3]
 8007baa:	f003 0303 	and.w	r3, r3, #3
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d10e      	bne.n	8007bd0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	799b      	ldrb	r3, [r3, #6]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8007bbe:	2b10      	cmp	r3, #16
 8007bc0:	d803      	bhi.n	8007bca <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8007bc6:	2b40      	cmp	r3, #64	@ 0x40
 8007bc8:	d941      	bls.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	75fb      	strb	r3, [r7, #23]
 8007bce:	e03e      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	78db      	ldrb	r3, [r3, #3]
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	2b03      	cmp	r3, #3
 8007bda:	d10b      	bne.n	8007bf4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	799b      	ldrb	r3, [r3, #6]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d004      	beq.n	8007bee <USBH_ParseEPDesc+0x162>
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	889b      	ldrh	r3, [r3, #4]
 8007be8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bec:	d32f      	bcc.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	75fb      	strb	r3, [r7, #23]
 8007bf2:	e02c      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	75fb      	strb	r3, [r7, #23]
 8007bf8:	e029      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d120      	bne.n	8007c46 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	78db      	ldrb	r3, [r3, #3]
 8007c08:	f003 0303 	and.w	r3, r3, #3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d106      	bne.n	8007c1e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	889b      	ldrh	r3, [r3, #4]
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d01a      	beq.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	75fb      	strb	r3, [r7, #23]
 8007c1c:	e017      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	78db      	ldrb	r3, [r3, #3]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d10a      	bne.n	8007c40 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	799b      	ldrb	r3, [r3, #6]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <USBH_ParseEPDesc+0x1ae>
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	889b      	ldrh	r3, [r3, #4]
 8007c36:	2b08      	cmp	r3, #8
 8007c38:	d909      	bls.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	75fb      	strb	r3, [r7, #23]
 8007c3e:	e006      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8007c40:	2303      	movs	r3, #3
 8007c42:	75fb      	strb	r3, [r7, #23]
 8007c44:	e003      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8007c46:	2303      	movs	r3, #3
 8007c48:	75fb      	strb	r3, [r7, #23]
 8007c4a:	e000      	b.n	8007c4e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007c4c:	bf00      	nop
  }

  return status;
 8007c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	371c      	adds	r7, #28
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b087      	sub	sp, #28
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	60f8      	str	r0, [r7, #12]
 8007c64:	60b9      	str	r1, [r7, #8]
 8007c66:	4613      	mov	r3, r2
 8007c68:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b03      	cmp	r3, #3
 8007c72:	d120      	bne.n	8007cb6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	1e9a      	subs	r2, r3, #2
 8007c7a:	88fb      	ldrh	r3, [r7, #6]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	bf28      	it	cs
 8007c80:	4613      	movcs	r3, r2
 8007c82:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	3302      	adds	r3, #2
 8007c88:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	82fb      	strh	r3, [r7, #22]
 8007c8e:	e00b      	b.n	8007ca8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007c90:	8afb      	ldrh	r3, [r7, #22]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	4413      	add	r3, r2
 8007c96:	781a      	ldrb	r2, [r3, #0]
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8007ca2:	8afb      	ldrh	r3, [r7, #22]
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	82fb      	strh	r3, [r7, #22]
 8007ca8:	8afa      	ldrh	r2, [r7, #22]
 8007caa:	8abb      	ldrh	r3, [r7, #20]
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d3ef      	bcc.n	8007c90 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	701a      	strb	r2, [r3, #0]
  }
}
 8007cb6:	bf00      	nop
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b085      	sub	sp, #20
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	687a      	ldr	r2, [r7, #4]
 8007cd2:	7812      	ldrb	r2, [r2, #0]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	781b      	ldrb	r3, [r3, #0]
 8007ce0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007ce8:	68fb      	ldr	r3, [r7, #12]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b086      	sub	sp, #24
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	60f8      	str	r0, [r7, #12]
 8007cfe:	60b9      	str	r1, [r7, #8]
 8007d00:	4613      	mov	r3, r2
 8007d02:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007d04:	2301      	movs	r3, #1
 8007d06:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	789b      	ldrb	r3, [r3, #2]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d002      	beq.n	8007d16 <USBH_CtlReq+0x20>
 8007d10:	2b02      	cmp	r3, #2
 8007d12:	d00f      	beq.n	8007d34 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007d14:	e027      	b.n	8007d66 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	88fa      	ldrh	r2, [r7, #6]
 8007d20:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2201      	movs	r2, #1
 8007d26:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2202      	movs	r2, #2
 8007d2c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	75fb      	strb	r3, [r7, #23]
      break;
 8007d32:	e018      	b.n	8007d66 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007d34:	68f8      	ldr	r0, [r7, #12]
 8007d36:	f000 f81b 	bl	8007d70 <USBH_HandleControl>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007d3e:	7dfb      	ldrb	r3, [r7, #23]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <USBH_CtlReq+0x54>
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d106      	bne.n	8007d58 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	761a      	strb	r2, [r3, #24]
      break;
 8007d56:	e005      	b.n	8007d64 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007d58:	7dfb      	ldrb	r3, [r7, #23]
 8007d5a:	2b02      	cmp	r3, #2
 8007d5c:	d102      	bne.n	8007d64 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2201      	movs	r2, #1
 8007d62:	709a      	strb	r2, [r3, #2]
      break;
 8007d64:	bf00      	nop
  }
  return status;
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d68:	4618      	mov	r0, r3
 8007d6a:	3718      	adds	r7, #24
 8007d6c:	46bd      	mov	sp, r7
 8007d6e:	bd80      	pop	{r7, pc}

08007d70 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	7e1b      	ldrb	r3, [r3, #24]
 8007d84:	3b01      	subs	r3, #1
 8007d86:	2b0a      	cmp	r3, #10
 8007d88:	f200 8156 	bhi.w	8008038 <USBH_HandleControl+0x2c8>
 8007d8c:	a201      	add	r2, pc, #4	@ (adr r2, 8007d94 <USBH_HandleControl+0x24>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007dc1 	.word	0x08007dc1
 8007d98:	08007ddb 	.word	0x08007ddb
 8007d9c:	08007e45 	.word	0x08007e45
 8007da0:	08007e6b 	.word	0x08007e6b
 8007da4:	08007ea3 	.word	0x08007ea3
 8007da8:	08007ecd 	.word	0x08007ecd
 8007dac:	08007f1f 	.word	0x08007f1f
 8007db0:	08007f41 	.word	0x08007f41
 8007db4:	08007f7d 	.word	0x08007f7d
 8007db8:	08007fa3 	.word	0x08007fa3
 8007dbc:	08007fe1 	.word	0x08007fe1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 0110 	add.w	r1, r3, #16
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	795b      	ldrb	r3, [r3, #5]
 8007dca:	461a      	mov	r2, r3
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 f943 	bl	8008058 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2202      	movs	r2, #2
 8007dd6:	761a      	strb	r2, [r3, #24]
      break;
 8007dd8:	e139      	b.n	800804e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	795b      	ldrb	r3, [r3, #5]
 8007dde:	4619      	mov	r1, r3
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 fcc5 	bl	8008770 <USBH_LL_GetURBState>
 8007de6:	4603      	mov	r3, r0
 8007de8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007dea:	7bbb      	ldrb	r3, [r7, #14]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d11e      	bne.n	8007e2e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	7c1b      	ldrb	r3, [r3, #16]
 8007df4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007df8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	8adb      	ldrh	r3, [r3, #22]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d00a      	beq.n	8007e18 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007e02:	7b7b      	ldrb	r3, [r7, #13]
 8007e04:	2b80      	cmp	r3, #128	@ 0x80
 8007e06:	d103      	bne.n	8007e10 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2203      	movs	r2, #3
 8007e0c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e0e:	e115      	b.n	800803c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2205      	movs	r2, #5
 8007e14:	761a      	strb	r2, [r3, #24]
      break;
 8007e16:	e111      	b.n	800803c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007e18:	7b7b      	ldrb	r3, [r7, #13]
 8007e1a:	2b80      	cmp	r3, #128	@ 0x80
 8007e1c:	d103      	bne.n	8007e26 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2209      	movs	r2, #9
 8007e22:	761a      	strb	r2, [r3, #24]
      break;
 8007e24:	e10a      	b.n	800803c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2207      	movs	r2, #7
 8007e2a:	761a      	strb	r2, [r3, #24]
      break;
 8007e2c:	e106      	b.n	800803c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
 8007e30:	2b04      	cmp	r3, #4
 8007e32:	d003      	beq.n	8007e3c <USBH_HandleControl+0xcc>
 8007e34:	7bbb      	ldrb	r3, [r7, #14]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	f040 8100 	bne.w	800803c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	220b      	movs	r2, #11
 8007e40:	761a      	strb	r2, [r3, #24]
      break;
 8007e42:	e0fb      	b.n	800803c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e4a:	b29a      	uxth	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6899      	ldr	r1, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	899a      	ldrh	r2, [r3, #12]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	791b      	ldrb	r3, [r3, #4]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 f93a 	bl	80080d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2204      	movs	r2, #4
 8007e66:	761a      	strb	r2, [r3, #24]
      break;
 8007e68:	e0f1      	b.n	800804e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	791b      	ldrb	r3, [r3, #4]
 8007e6e:	4619      	mov	r1, r3
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f000 fc7d 	bl	8008770 <USBH_LL_GetURBState>
 8007e76:	4603      	mov	r3, r0
 8007e78:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e7a:	7bbb      	ldrb	r3, [r7, #14]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d102      	bne.n	8007e86 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2209      	movs	r2, #9
 8007e84:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007e86:	7bbb      	ldrb	r3, [r7, #14]
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	d102      	bne.n	8007e92 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007e90:	e0d6      	b.n	8008040 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	f040 80d3 	bne.w	8008040 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	220b      	movs	r2, #11
 8007e9e:	761a      	strb	r2, [r3, #24]
      break;
 8007ea0:	e0ce      	b.n	8008040 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6899      	ldr	r1, [r3, #8]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	899a      	ldrh	r2, [r3, #12]
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	795b      	ldrb	r3, [r3, #5]
 8007eae:	2001      	movs	r0, #1
 8007eb0:	9000      	str	r0, [sp, #0]
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 f8ea 	bl	800808c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007ebe:	b29a      	uxth	r2, r3
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	2206      	movs	r2, #6
 8007ec8:	761a      	strb	r2, [r3, #24]
      break;
 8007eca:	e0c0      	b.n	800804e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	795b      	ldrb	r3, [r3, #5]
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fc4c 	bl	8008770 <USBH_LL_GetURBState>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007edc:	7bbb      	ldrb	r3, [r7, #14]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d103      	bne.n	8007eea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2207      	movs	r2, #7
 8007ee6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007ee8:	e0ac      	b.n	8008044 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007eea:	7bbb      	ldrb	r3, [r7, #14]
 8007eec:	2b05      	cmp	r3, #5
 8007eee:	d105      	bne.n	8007efc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	220c      	movs	r2, #12
 8007ef4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007ef6:	2303      	movs	r3, #3
 8007ef8:	73fb      	strb	r3, [r7, #15]
      break;
 8007efa:	e0a3      	b.n	8008044 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007efc:	7bbb      	ldrb	r3, [r7, #14]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d103      	bne.n	8007f0a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2205      	movs	r2, #5
 8007f06:	761a      	strb	r2, [r3, #24]
      break;
 8007f08:	e09c      	b.n	8008044 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007f0a:	7bbb      	ldrb	r3, [r7, #14]
 8007f0c:	2b04      	cmp	r3, #4
 8007f0e:	f040 8099 	bne.w	8008044 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	220b      	movs	r2, #11
 8007f16:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007f18:	2302      	movs	r3, #2
 8007f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8007f1c:	e092      	b.n	8008044 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	791b      	ldrb	r3, [r3, #4]
 8007f22:	2200      	movs	r2, #0
 8007f24:	2100      	movs	r1, #0
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8d5 	bl	80080d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2208      	movs	r2, #8
 8007f3c:	761a      	strb	r2, [r3, #24]

      break;
 8007f3e:	e086      	b.n	800804e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	791b      	ldrb	r3, [r3, #4]
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fc12 	bl	8008770 <USBH_LL_GetURBState>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f50:	7bbb      	ldrb	r3, [r7, #14]
 8007f52:	2b01      	cmp	r3, #1
 8007f54:	d105      	bne.n	8007f62 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	220d      	movs	r2, #13
 8007f5a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f60:	e072      	b.n	8008048 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007f62:	7bbb      	ldrb	r3, [r7, #14]
 8007f64:	2b04      	cmp	r3, #4
 8007f66:	d103      	bne.n	8007f70 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	220b      	movs	r2, #11
 8007f6c:	761a      	strb	r2, [r3, #24]
      break;
 8007f6e:	e06b      	b.n	8008048 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007f70:	7bbb      	ldrb	r3, [r7, #14]
 8007f72:	2b05      	cmp	r3, #5
 8007f74:	d168      	bne.n	8008048 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007f76:	2303      	movs	r3, #3
 8007f78:	73fb      	strb	r3, [r7, #15]
      break;
 8007f7a:	e065      	b.n	8008048 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	795b      	ldrb	r3, [r3, #5]
 8007f80:	2201      	movs	r2, #1
 8007f82:	9200      	str	r2, [sp, #0]
 8007f84:	2200      	movs	r2, #0
 8007f86:	2100      	movs	r1, #0
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f87f 	bl	800808c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007f94:	b29a      	uxth	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	220a      	movs	r2, #10
 8007f9e:	761a      	strb	r2, [r3, #24]
      break;
 8007fa0:	e055      	b.n	800804e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	795b      	ldrb	r3, [r3, #5]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fbe1 	bl	8008770 <USBH_LL_GetURBState>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d105      	bne.n	8007fc4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	220d      	movs	r2, #13
 8007fc0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007fc2:	e043      	b.n	800804c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d103      	bne.n	8007fd2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2209      	movs	r2, #9
 8007fce:	761a      	strb	r2, [r3, #24]
      break;
 8007fd0:	e03c      	b.n	800804c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d139      	bne.n	800804c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	220b      	movs	r2, #11
 8007fdc:	761a      	strb	r2, [r3, #24]
      break;
 8007fde:	e035      	b.n	800804c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	7e5b      	ldrb	r3, [r3, #25]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	b2da      	uxtb	r2, r3
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	765a      	strb	r2, [r3, #25]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	7e5b      	ldrb	r3, [r3, #25]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d806      	bhi.n	8008002 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2201      	movs	r2, #1
 8007ffe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008000:	e025      	b.n	800804e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008008:	2106      	movs	r1, #6
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	795b      	ldrb	r3, [r3, #5]
 8008018:	4619      	mov	r1, r3
 800801a:	6878      	ldr	r0, [r7, #4]
 800801c:	f000 f90c 	bl	8008238 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	791b      	ldrb	r3, [r3, #4]
 8008024:	4619      	mov	r1, r3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f906 	bl	8008238 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008032:	2302      	movs	r3, #2
 8008034:	73fb      	strb	r3, [r7, #15]
      break;
 8008036:	e00a      	b.n	800804e <USBH_HandleControl+0x2de>

    default:
      break;
 8008038:	bf00      	nop
 800803a:	e008      	b.n	800804e <USBH_HandleControl+0x2de>
      break;
 800803c:	bf00      	nop
 800803e:	e006      	b.n	800804e <USBH_HandleControl+0x2de>
      break;
 8008040:	bf00      	nop
 8008042:	e004      	b.n	800804e <USBH_HandleControl+0x2de>
      break;
 8008044:	bf00      	nop
 8008046:	e002      	b.n	800804e <USBH_HandleControl+0x2de>
      break;
 8008048:	bf00      	nop
 800804a:	e000      	b.n	800804e <USBH_HandleControl+0x2de>
      break;
 800804c:	bf00      	nop
  }

  return status;
 800804e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b088      	sub	sp, #32
 800805c:	af04      	add	r7, sp, #16
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008066:	79f9      	ldrb	r1, [r7, #7]
 8008068:	2300      	movs	r3, #0
 800806a:	9303      	str	r3, [sp, #12]
 800806c:	2308      	movs	r3, #8
 800806e:	9302      	str	r3, [sp, #8]
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	9301      	str	r3, [sp, #4]
 8008074:	2300      	movs	r3, #0
 8008076:	9300      	str	r3, [sp, #0]
 8008078:	2300      	movs	r3, #0
 800807a:	2200      	movs	r2, #0
 800807c:	68f8      	ldr	r0, [r7, #12]
 800807e:	f000 fb46 	bl	800870e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008082:	2300      	movs	r3, #0
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b088      	sub	sp, #32
 8008090:	af04      	add	r7, sp, #16
 8008092:	60f8      	str	r0, [r7, #12]
 8008094:	60b9      	str	r1, [r7, #8]
 8008096:	4611      	mov	r1, r2
 8008098:	461a      	mov	r2, r3
 800809a:	460b      	mov	r3, r1
 800809c:	80fb      	strh	r3, [r7, #6]
 800809e:	4613      	mov	r3, r2
 80080a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080b0:	7979      	ldrb	r1, [r7, #5]
 80080b2:	7e3b      	ldrb	r3, [r7, #24]
 80080b4:	9303      	str	r3, [sp, #12]
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	9302      	str	r3, [sp, #8]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	9301      	str	r3, [sp, #4]
 80080be:	2301      	movs	r3, #1
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	2300      	movs	r3, #0
 80080c4:	2200      	movs	r2, #0
 80080c6:	68f8      	ldr	r0, [r7, #12]
 80080c8:	f000 fb21 	bl	800870e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80080cc:	2300      	movs	r3, #0
}
 80080ce:	4618      	mov	r0, r3
 80080d0:	3710      	adds	r7, #16
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}

080080d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80080d6:	b580      	push	{r7, lr}
 80080d8:	b088      	sub	sp, #32
 80080da:	af04      	add	r7, sp, #16
 80080dc:	60f8      	str	r0, [r7, #12]
 80080de:	60b9      	str	r1, [r7, #8]
 80080e0:	4611      	mov	r1, r2
 80080e2:	461a      	mov	r2, r3
 80080e4:	460b      	mov	r3, r1
 80080e6:	80fb      	strh	r3, [r7, #6]
 80080e8:	4613      	mov	r3, r2
 80080ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80080ec:	7979      	ldrb	r1, [r7, #5]
 80080ee:	2300      	movs	r3, #0
 80080f0:	9303      	str	r3, [sp, #12]
 80080f2:	88fb      	ldrh	r3, [r7, #6]
 80080f4:	9302      	str	r3, [sp, #8]
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	9301      	str	r3, [sp, #4]
 80080fa:	2301      	movs	r3, #1
 80080fc:	9300      	str	r3, [sp, #0]
 80080fe:	2300      	movs	r3, #0
 8008100:	2201      	movs	r2, #1
 8008102:	68f8      	ldr	r0, [r7, #12]
 8008104:	f000 fb03 	bl	800870e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008108:	2300      	movs	r3, #0

}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008112:	b580      	push	{r7, lr}
 8008114:	b088      	sub	sp, #32
 8008116:	af04      	add	r7, sp, #16
 8008118:	60f8      	str	r0, [r7, #12]
 800811a:	60b9      	str	r1, [r7, #8]
 800811c:	4611      	mov	r1, r2
 800811e:	461a      	mov	r2, r3
 8008120:	460b      	mov	r3, r1
 8008122:	80fb      	strh	r3, [r7, #6]
 8008124:	4613      	mov	r3, r2
 8008126:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008136:	7979      	ldrb	r1, [r7, #5]
 8008138:	7e3b      	ldrb	r3, [r7, #24]
 800813a:	9303      	str	r3, [sp, #12]
 800813c:	88fb      	ldrh	r3, [r7, #6]
 800813e:	9302      	str	r3, [sp, #8]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	2301      	movs	r3, #1
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	2302      	movs	r3, #2
 800814a:	2200      	movs	r2, #0
 800814c:	68f8      	ldr	r0, [r7, #12]
 800814e:	f000 fade 	bl	800870e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008152:	2300      	movs	r3, #0
}
 8008154:	4618      	mov	r0, r3
 8008156:	3710      	adds	r7, #16
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}

0800815c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b088      	sub	sp, #32
 8008160:	af04      	add	r7, sp, #16
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	4611      	mov	r1, r2
 8008168:	461a      	mov	r2, r3
 800816a:	460b      	mov	r3, r1
 800816c:	80fb      	strh	r3, [r7, #6]
 800816e:	4613      	mov	r3, r2
 8008170:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008172:	7979      	ldrb	r1, [r7, #5]
 8008174:	2300      	movs	r3, #0
 8008176:	9303      	str	r3, [sp, #12]
 8008178:	88fb      	ldrh	r3, [r7, #6]
 800817a:	9302      	str	r3, [sp, #8]
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	9301      	str	r3, [sp, #4]
 8008180:	2301      	movs	r3, #1
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2302      	movs	r3, #2
 8008186:	2201      	movs	r2, #1
 8008188:	68f8      	ldr	r0, [r7, #12]
 800818a:	f000 fac0 	bl	800870e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3710      	adds	r7, #16
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af04      	add	r7, sp, #16
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	4608      	mov	r0, r1
 80081a2:	4611      	mov	r1, r2
 80081a4:	461a      	mov	r2, r3
 80081a6:	4603      	mov	r3, r0
 80081a8:	70fb      	strb	r3, [r7, #3]
 80081aa:	460b      	mov	r3, r1
 80081ac:	70bb      	strb	r3, [r7, #2]
 80081ae:	4613      	mov	r3, r2
 80081b0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80081b2:	7878      	ldrb	r0, [r7, #1]
 80081b4:	78ba      	ldrb	r2, [r7, #2]
 80081b6:	78f9      	ldrb	r1, [r7, #3]
 80081b8:	8b3b      	ldrh	r3, [r7, #24]
 80081ba:	9302      	str	r3, [sp, #8]
 80081bc:	7d3b      	ldrb	r3, [r7, #20]
 80081be:	9301      	str	r3, [sp, #4]
 80081c0:	7c3b      	ldrb	r3, [r7, #16]
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	4603      	mov	r3, r0
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fa53 	bl	8008672 <USBH_LL_OpenPipe>

  return USBH_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	460b      	mov	r3, r1
 80081e0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80081e2:	78fb      	ldrb	r3, [r7, #3]
 80081e4:	4619      	mov	r1, r3
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f000 fa72 	bl	80086d0 <USBH_LL_ClosePipe>

  return USBH_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
 80081fe:	460b      	mov	r3, r1
 8008200:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f836 	bl	8008274 <USBH_GetFreePipe>
 8008208:	4603      	mov	r3, r0
 800820a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800820c:	89fb      	ldrh	r3, [r7, #14]
 800820e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008212:	4293      	cmp	r3, r2
 8008214:	d00a      	beq.n	800822c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008216:	78fa      	ldrb	r2, [r7, #3]
 8008218:	89fb      	ldrh	r3, [r7, #14]
 800821a:	f003 030f 	and.w	r3, r3, #15
 800821e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008222:	6879      	ldr	r1, [r7, #4]
 8008224:	33e0      	adds	r3, #224	@ 0xe0
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800822c:	89fb      	ldrh	r3, [r7, #14]
 800822e:	b2db      	uxtb	r3, r3
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	460b      	mov	r3, r1
 8008242:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	2b0f      	cmp	r3, #15
 8008248:	d80d      	bhi.n	8008266 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800824a:	78fb      	ldrb	r3, [r7, #3]
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	33e0      	adds	r3, #224	@ 0xe0
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	685a      	ldr	r2, [r3, #4]
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800825c:	6879      	ldr	r1, [r7, #4]
 800825e:	33e0      	adds	r3, #224	@ 0xe0
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	440b      	add	r3, r1
 8008264:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008274:	b480      	push	{r7}
 8008276:	b085      	sub	sp, #20
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800827c:	2300      	movs	r3, #0
 800827e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008280:	2300      	movs	r3, #0
 8008282:	73fb      	strb	r3, [r7, #15]
 8008284:	e00f      	b.n	80082a6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008286:	7bfb      	ldrb	r3, [r7, #15]
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	33e0      	adds	r3, #224	@ 0xe0
 800828c:	009b      	lsls	r3, r3, #2
 800828e:	4413      	add	r3, r2
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008296:	2b00      	cmp	r3, #0
 8008298:	d102      	bne.n	80082a0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800829a:	7bfb      	ldrb	r3, [r7, #15]
 800829c:	b29b      	uxth	r3, r3
 800829e:	e007      	b.n	80082b0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80082a0:	7bfb      	ldrb	r3, [r7, #15]
 80082a2:	3301      	adds	r3, #1
 80082a4:	73fb      	strb	r3, [r7, #15]
 80082a6:	7bfb      	ldrb	r3, [r7, #15]
 80082a8:	2b0f      	cmp	r3, #15
 80082aa:	d9ec      	bls.n	8008286 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80082ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3714      	adds	r7, #20
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80082c0:	2201      	movs	r2, #1
 80082c2:	490e      	ldr	r1, [pc, #56]	@ (80082fc <MX_USB_HOST_Init+0x40>)
 80082c4:	480e      	ldr	r0, [pc, #56]	@ (8008300 <MX_USB_HOST_Init+0x44>)
 80082c6:	f7fe fb15 	bl	80068f4 <USBH_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80082d0:	f7f8 fb20 	bl	8000914 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80082d4:	490b      	ldr	r1, [pc, #44]	@ (8008304 <MX_USB_HOST_Init+0x48>)
 80082d6:	480a      	ldr	r0, [pc, #40]	@ (8008300 <MX_USB_HOST_Init+0x44>)
 80082d8:	f7fe fbb9 	bl	8006a4e <USBH_RegisterClass>
 80082dc:	4603      	mov	r3, r0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80082e2:	f7f8 fb17 	bl	8000914 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80082e6:	4806      	ldr	r0, [pc, #24]	@ (8008300 <MX_USB_HOST_Init+0x44>)
 80082e8:	f7fe fc3d 	bl	8006b66 <USBH_Start>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d001      	beq.n	80082f6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80082f2:	f7f8 fb0f 	bl	8000914 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80082f6:	bf00      	nop
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	0800831d 	.word	0x0800831d
 8008300:	20000194 	.word	0x20000194
 8008304:	2000000c 	.word	0x2000000c

08008308 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800830c:	4802      	ldr	r0, [pc, #8]	@ (8008318 <MX_USB_HOST_Process+0x10>)
 800830e:	f7fe fc3b 	bl	8006b88 <USBH_Process>
}
 8008312:	bf00      	nop
 8008314:	bd80      	pop	{r7, pc}
 8008316:	bf00      	nop
 8008318:	20000194 	.word	0x20000194

0800831c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008328:	78fb      	ldrb	r3, [r7, #3]
 800832a:	3b01      	subs	r3, #1
 800832c:	2b04      	cmp	r3, #4
 800832e:	d819      	bhi.n	8008364 <USBH_UserProcess+0x48>
 8008330:	a201      	add	r2, pc, #4	@ (adr r2, 8008338 <USBH_UserProcess+0x1c>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	08008365 	.word	0x08008365
 800833c:	08008355 	.word	0x08008355
 8008340:	08008365 	.word	0x08008365
 8008344:	0800835d 	.word	0x0800835d
 8008348:	0800834d 	.word	0x0800834d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800834c:	4b09      	ldr	r3, [pc, #36]	@ (8008374 <USBH_UserProcess+0x58>)
 800834e:	2203      	movs	r2, #3
 8008350:	701a      	strb	r2, [r3, #0]
  break;
 8008352:	e008      	b.n	8008366 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008354:	4b07      	ldr	r3, [pc, #28]	@ (8008374 <USBH_UserProcess+0x58>)
 8008356:	2202      	movs	r2, #2
 8008358:	701a      	strb	r2, [r3, #0]
  break;
 800835a:	e004      	b.n	8008366 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800835c:	4b05      	ldr	r3, [pc, #20]	@ (8008374 <USBH_UserProcess+0x58>)
 800835e:	2201      	movs	r2, #1
 8008360:	701a      	strb	r2, [r3, #0]
  break;
 8008362:	e000      	b.n	8008366 <USBH_UserProcess+0x4a>

  default:
  break;
 8008364:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008366:	bf00      	nop
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	2000056c 	.word	0x2000056c

08008378 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	@ 0x28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008380:	f107 0314 	add.w	r3, r7, #20
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	609a      	str	r2, [r3, #8]
 800838c:	60da      	str	r2, [r3, #12]
 800838e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008398:	d147      	bne.n	800842a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800839a:	2300      	movs	r3, #0
 800839c:	613b      	str	r3, [r7, #16]
 800839e:	4b25      	ldr	r3, [pc, #148]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 80083a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a2:	4a24      	ldr	r2, [pc, #144]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80083aa:	4b22      	ldr	r3, [pc, #136]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 80083ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ae:	f003 0301 	and.w	r3, r3, #1
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80083b6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80083ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80083bc:	2300      	movs	r3, #0
 80083be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083c0:	2300      	movs	r3, #0
 80083c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80083c4:	f107 0314 	add.w	r3, r7, #20
 80083c8:	4619      	mov	r1, r3
 80083ca:	481b      	ldr	r0, [pc, #108]	@ (8008438 <HAL_HCD_MspInit+0xc0>)
 80083cc:	f7f8 fe3a 	bl	8001044 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80083d0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80083d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083d6:	2302      	movs	r3, #2
 80083d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083da:	2300      	movs	r3, #0
 80083dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083de:	2300      	movs	r3, #0
 80083e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80083e2:	230a      	movs	r3, #10
 80083e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083e6:	f107 0314 	add.w	r3, r7, #20
 80083ea:	4619      	mov	r1, r3
 80083ec:	4812      	ldr	r0, [pc, #72]	@ (8008438 <HAL_HCD_MspInit+0xc0>)
 80083ee:	f7f8 fe29 	bl	8001044 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80083f2:	4b10      	ldr	r3, [pc, #64]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 80083f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80083f6:	4a0f      	ldr	r2, [pc, #60]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 80083f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083fc:	6353      	str	r3, [r2, #52]	@ 0x34
 80083fe:	2300      	movs	r3, #0
 8008400:	60fb      	str	r3, [r7, #12]
 8008402:	4b0c      	ldr	r3, [pc, #48]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 8008404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008406:	4a0b      	ldr	r2, [pc, #44]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 8008408:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800840c:	6453      	str	r3, [r2, #68]	@ 0x44
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <HAL_HCD_MspInit+0xbc>)
 8008410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008412:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008416:	60fb      	str	r3, [r7, #12]
 8008418:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	2043      	movs	r0, #67	@ 0x43
 8008420:	f7f8 fdd9 	bl	8000fd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008424:	2043      	movs	r0, #67	@ 0x43
 8008426:	f7f8 fdf2 	bl	800100e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800842a:	bf00      	nop
 800842c:	3728      	adds	r7, #40	@ 0x28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	40023800 	.word	0x40023800
 8008438:	40020000 	.word	0x40020000

0800843c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800844a:	4618      	mov	r0, r3
 800844c:	f7fe ff73 	bl	8007336 <USBH_LL_IncTimer>
}
 8008450:	bf00      	nop
 8008452:	3708      	adds	r7, #8
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b082      	sub	sp, #8
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe ffab 	bl	80073c2 <USBH_LL_Connect>
}
 800846c:	bf00      	nop
 800846e:	3708      	adds	r7, #8
 8008470:	46bd      	mov	sp, r7
 8008472:	bd80      	pop	{r7, pc}

08008474 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b082      	sub	sp, #8
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008482:	4618      	mov	r0, r3
 8008484:	f7fe ffb4 	bl	80073f0 <USBH_LL_Disconnect>
}
 8008488:	bf00      	nop
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	460b      	mov	r3, r1
 800849a:	70fb      	strb	r3, [r7, #3]
 800849c:	4613      	mov	r3, r2
 800849e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80084a0:	bf00      	nop
 80084a2:	370c      	adds	r7, #12
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe ff65 	bl	800738a <USBH_LL_PortEnabled>
}
 80084c0:	bf00      	nop
 80084c2:	3708      	adds	r7, #8
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fe ff65 	bl	80073a6 <USBH_LL_PortDisabled>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d12a      	bne.n	800854c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80084f6:	4a18      	ldr	r2, [pc, #96]	@ (8008558 <USBH_LL_Init+0x74>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4a15      	ldr	r2, [pc, #84]	@ (8008558 <USBH_LL_Init+0x74>)
 8008502:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008506:	4b14      	ldr	r3, [pc, #80]	@ (8008558 <USBH_LL_Init+0x74>)
 8008508:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800850c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800850e:	4b12      	ldr	r3, [pc, #72]	@ (8008558 <USBH_LL_Init+0x74>)
 8008510:	2208      	movs	r2, #8
 8008512:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008514:	4b10      	ldr	r3, [pc, #64]	@ (8008558 <USBH_LL_Init+0x74>)
 8008516:	2201      	movs	r2, #1
 8008518:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800851a:	4b0f      	ldr	r3, [pc, #60]	@ (8008558 <USBH_LL_Init+0x74>)
 800851c:	2200      	movs	r2, #0
 800851e:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008520:	4b0d      	ldr	r3, [pc, #52]	@ (8008558 <USBH_LL_Init+0x74>)
 8008522:	2202      	movs	r2, #2
 8008524:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008526:	4b0c      	ldr	r3, [pc, #48]	@ (8008558 <USBH_LL_Init+0x74>)
 8008528:	2200      	movs	r2, #0
 800852a:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800852c:	480a      	ldr	r0, [pc, #40]	@ (8008558 <USBH_LL_Init+0x74>)
 800852e:	f7f8 ff71 	bl	8001414 <HAL_HCD_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008538:	f7f8 f9ec 	bl	8000914 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800853c:	4806      	ldr	r0, [pc, #24]	@ (8008558 <USBH_LL_Init+0x74>)
 800853e:	f7f9 fbd1 	bl	8001ce4 <HAL_HCD_GetCurrentFrame>
 8008542:	4603      	mov	r3, r0
 8008544:	4619      	mov	r1, r3
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f7fe fee6 	bl	8007318 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3708      	adds	r7, #8
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}
 8008556:	bf00      	nop
 8008558:	20000570 	.word	0x20000570

0800855c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008568:	2300      	movs	r3, #0
 800856a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008572:	4618      	mov	r0, r3
 8008574:	f7f9 fb3e 	bl	8001bf4 <HAL_HCD_Start>
 8008578:	4603      	mov	r3, r0
 800857a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 f95e 	bl	8008840 <USBH_Get_USB_Status>
 8008584:	4603      	mov	r3, r0
 8008586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008588:	7bbb      	ldrb	r3, [r7, #14]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b084      	sub	sp, #16
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800859e:	2300      	movs	r3, #0
 80085a0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7f9 fb46 	bl	8001c3a <HAL_HCD_Stop>
 80085ae:	4603      	mov	r3, r0
 80085b0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80085b2:	7bfb      	ldrb	r3, [r7, #15]
 80085b4:	4618      	mov	r0, r3
 80085b6:	f000 f943 	bl	8008840 <USBH_Get_USB_Status>
 80085ba:	4603      	mov	r3, r0
 80085bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085be:	7bbb      	ldrb	r3, [r7, #14]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3710      	adds	r7, #16
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}

080085c8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b084      	sub	sp, #16
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 80085d0:	2301      	movs	r3, #1
 80085d2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80085da:	4618      	mov	r0, r3
 80085dc:	f7f9 fb90 	bl	8001d00 <HAL_HCD_GetCurrentSpeed>
 80085e0:	4603      	mov	r3, r0
 80085e2:	2b02      	cmp	r3, #2
 80085e4:	d00c      	beq.n	8008600 <USBH_LL_GetSpeed+0x38>
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d80d      	bhi.n	8008606 <USBH_LL_GetSpeed+0x3e>
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d002      	beq.n	80085f4 <USBH_LL_GetSpeed+0x2c>
 80085ee:	2b01      	cmp	r3, #1
 80085f0:	d003      	beq.n	80085fa <USBH_LL_GetSpeed+0x32>
 80085f2:	e008      	b.n	8008606 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73fb      	strb	r3, [r7, #15]
    break;
 80085f8:	e008      	b.n	800860c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80085fa:	2301      	movs	r3, #1
 80085fc:	73fb      	strb	r3, [r7, #15]
    break;
 80085fe:	e005      	b.n	800860c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008600:	2302      	movs	r3, #2
 8008602:	73fb      	strb	r3, [r7, #15]
    break;
 8008604:	e002      	b.n	800860c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008606:	2301      	movs	r3, #1
 8008608:	73fb      	strb	r3, [r7, #15]
    break;
 800860a:	bf00      	nop
  }
  return  speed;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}

08008616 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b084      	sub	sp, #16
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800861e:	2300      	movs	r3, #0
 8008620:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800862c:	4618      	mov	r0, r3
 800862e:	f7f9 fb21 	bl	8001c74 <HAL_HCD_ResetPort>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008636:	7bfb      	ldrb	r3, [r7, #15]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 f901 	bl	8008840 <USBH_Get_USB_Status>
 800863e:	4603      	mov	r3, r0
 8008640:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008642:	7bbb      	ldrb	r3, [r7, #14]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	460b      	mov	r3, r1
 8008656:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800865e:	78fa      	ldrb	r2, [r7, #3]
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f7f9 fb29 	bl	8001cba <HAL_HCD_HC_GetXferCount>
 8008668:	4603      	mov	r3, r0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3708      	adds	r7, #8
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}

08008672 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008672:	b590      	push	{r4, r7, lr}
 8008674:	b089      	sub	sp, #36	@ 0x24
 8008676:	af04      	add	r7, sp, #16
 8008678:	6078      	str	r0, [r7, #4]
 800867a:	4608      	mov	r0, r1
 800867c:	4611      	mov	r1, r2
 800867e:	461a      	mov	r2, r3
 8008680:	4603      	mov	r3, r0
 8008682:	70fb      	strb	r3, [r7, #3]
 8008684:	460b      	mov	r3, r1
 8008686:	70bb      	strb	r3, [r7, #2]
 8008688:	4613      	mov	r3, r2
 800868a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008690:	2300      	movs	r3, #0
 8008692:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800869a:	787c      	ldrb	r4, [r7, #1]
 800869c:	78ba      	ldrb	r2, [r7, #2]
 800869e:	78f9      	ldrb	r1, [r7, #3]
 80086a0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80086a2:	9302      	str	r3, [sp, #8]
 80086a4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80086a8:	9301      	str	r3, [sp, #4]
 80086aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	4623      	mov	r3, r4
 80086b2:	f7f8 ff16 	bl	80014e2 <HAL_HCD_HC_Init>
 80086b6:	4603      	mov	r3, r0
 80086b8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086ba:	7bfb      	ldrb	r3, [r7, #15]
 80086bc:	4618      	mov	r0, r3
 80086be:	f000 f8bf 	bl	8008840 <USBH_Get_USB_Status>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	bd90      	pop	{r4, r7, pc}

080086d0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086dc:	2300      	movs	r3, #0
 80086de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e0:	2300      	movs	r3, #0
 80086e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80086ea:	78fa      	ldrb	r2, [r7, #3]
 80086ec:	4611      	mov	r1, r2
 80086ee:	4618      	mov	r0, r3
 80086f0:	f7f8 ffaf 	bl	8001652 <HAL_HCD_HC_Halt>
 80086f4:	4603      	mov	r3, r0
 80086f6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
 80086fa:	4618      	mov	r0, r3
 80086fc:	f000 f8a0 	bl	8008840 <USBH_Get_USB_Status>
 8008700:	4603      	mov	r3, r0
 8008702:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008704:	7bbb      	ldrb	r3, [r7, #14]
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}

0800870e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800870e:	b590      	push	{r4, r7, lr}
 8008710:	b089      	sub	sp, #36	@ 0x24
 8008712:	af04      	add	r7, sp, #16
 8008714:	6078      	str	r0, [r7, #4]
 8008716:	4608      	mov	r0, r1
 8008718:	4611      	mov	r1, r2
 800871a:	461a      	mov	r2, r3
 800871c:	4603      	mov	r3, r0
 800871e:	70fb      	strb	r3, [r7, #3]
 8008720:	460b      	mov	r3, r1
 8008722:	70bb      	strb	r3, [r7, #2]
 8008724:	4613      	mov	r3, r2
 8008726:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800872c:	2300      	movs	r3, #0
 800872e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8008736:	787c      	ldrb	r4, [r7, #1]
 8008738:	78ba      	ldrb	r2, [r7, #2]
 800873a:	78f9      	ldrb	r1, [r7, #3]
 800873c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008740:	9303      	str	r3, [sp, #12]
 8008742:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008744:	9302      	str	r3, [sp, #8]
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	9301      	str	r3, [sp, #4]
 800874a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800874e:	9300      	str	r3, [sp, #0]
 8008750:	4623      	mov	r3, r4
 8008752:	f7f8 ffa1 	bl	8001698 <HAL_HCD_HC_SubmitRequest>
 8008756:	4603      	mov	r3, r0
 8008758:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800875a:	7bfb      	ldrb	r3, [r7, #15]
 800875c:	4618      	mov	r0, r3
 800875e:	f000 f86f 	bl	8008840 <USBH_Get_USB_Status>
 8008762:	4603      	mov	r3, r0
 8008764:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008766:	7bbb      	ldrb	r3, [r7, #14]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3714      	adds	r7, #20
 800876c:	46bd      	mov	sp, r7
 800876e:	bd90      	pop	{r4, r7, pc}

08008770 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	460b      	mov	r3, r1
 800877a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8008782:	78fa      	ldrb	r2, [r7, #3]
 8008784:	4611      	mov	r1, r2
 8008786:	4618      	mov	r0, r3
 8008788:	f7f9 fa82 	bl	8001c90 <HAL_HCD_HC_GetURBState>
 800878c:	4603      	mov	r3, r0
}
 800878e:	4618      	mov	r0, r3
 8008790:	3708      	adds	r7, #8
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008796:	b580      	push	{r7, lr}
 8008798:	b082      	sub	sp, #8
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
 800879e:	460b      	mov	r3, r1
 80087a0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80087a8:	2b01      	cmp	r3, #1
 80087aa:	d103      	bne.n	80087b4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087ac:	78fb      	ldrb	r3, [r7, #3]
 80087ae:	4618      	mov	r0, r3
 80087b0:	f000 f872 	bl	8008898 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087b4:	20c8      	movs	r0, #200	@ 0xc8
 80087b6:	f7f8 fb0f 	bl	8000dd8 <HAL_Delay>
  return USBH_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b085      	sub	sp, #20
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	460b      	mov	r3, r1
 80087ce:	70fb      	strb	r3, [r7, #3]
 80087d0:	4613      	mov	r3, r2
 80087d2:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80087da:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	68f9      	ldr	r1, [r7, #12]
 80087e0:	4613      	mov	r3, r2
 80087e2:	011b      	lsls	r3, r3, #4
 80087e4:	1a9b      	subs	r3, r3, r2
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	440b      	add	r3, r1
 80087ea:	3317      	adds	r3, #23
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d00a      	beq.n	8008808 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087f2:	78fa      	ldrb	r2, [r7, #3]
 80087f4:	68f9      	ldr	r1, [r7, #12]
 80087f6:	4613      	mov	r3, r2
 80087f8:	011b      	lsls	r3, r3, #4
 80087fa:	1a9b      	subs	r3, r3, r2
 80087fc:	009b      	lsls	r3, r3, #2
 80087fe:	440b      	add	r3, r1
 8008800:	333c      	adds	r3, #60	@ 0x3c
 8008802:	78ba      	ldrb	r2, [r7, #2]
 8008804:	701a      	strb	r2, [r3, #0]
 8008806:	e009      	b.n	800881c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008808:	78fa      	ldrb	r2, [r7, #3]
 800880a:	68f9      	ldr	r1, [r7, #12]
 800880c:	4613      	mov	r3, r2
 800880e:	011b      	lsls	r3, r3, #4
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	440b      	add	r3, r1
 8008816:	333d      	adds	r3, #61	@ 0x3d
 8008818:	78ba      	ldrb	r2, [r7, #2]
 800881a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3714      	adds	r7, #20
 8008822:	46bd      	mov	sp, r7
 8008824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008828:	4770      	bx	lr

0800882a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7f8 fad0 	bl	8000dd8 <HAL_Delay>
}
 8008838:	bf00      	nop
 800883a:	3708      	adds	r7, #8
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008840:	b480      	push	{r7}
 8008842:	b085      	sub	sp, #20
 8008844:	af00      	add	r7, sp, #0
 8008846:	4603      	mov	r3, r0
 8008848:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800884a:	2300      	movs	r3, #0
 800884c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800884e:	79fb      	ldrb	r3, [r7, #7]
 8008850:	2b03      	cmp	r3, #3
 8008852:	d817      	bhi.n	8008884 <USBH_Get_USB_Status+0x44>
 8008854:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <USBH_Get_USB_Status+0x1c>)
 8008856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885a:	bf00      	nop
 800885c:	0800886d 	.word	0x0800886d
 8008860:	08008873 	.word	0x08008873
 8008864:	08008879 	.word	0x08008879
 8008868:	0800887f 	.word	0x0800887f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800886c:	2300      	movs	r3, #0
 800886e:	73fb      	strb	r3, [r7, #15]
    break;
 8008870:	e00b      	b.n	800888a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008872:	2302      	movs	r3, #2
 8008874:	73fb      	strb	r3, [r7, #15]
    break;
 8008876:	e008      	b.n	800888a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
    break;
 800887c:	e005      	b.n	800888a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800887e:	2302      	movs	r3, #2
 8008880:	73fb      	strb	r3, [r7, #15]
    break;
 8008882:	e002      	b.n	800888a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008884:	2302      	movs	r3, #2
 8008886:	73fb      	strb	r3, [r7, #15]
    break;
 8008888:	bf00      	nop
  }
  return usb_status;
 800888a:	7bfb      	ldrb	r3, [r7, #15]
}
 800888c:	4618      	mov	r0, r3
 800888e:	3714      	adds	r7, #20
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b084      	sub	sp, #16
 800889c:	af00      	add	r7, sp, #0
 800889e:	4603      	mov	r3, r0
 80088a0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80088a2:	79fb      	ldrb	r3, [r7, #7]
 80088a4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	e001      	b.n	80088b6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80088b2:	2301      	movs	r3, #1
 80088b4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088b6:	7bfb      	ldrb	r3, [r7, #15]
 80088b8:	461a      	mov	r2, r3
 80088ba:	2101      	movs	r1, #1
 80088bc:	4803      	ldr	r0, [pc, #12]	@ (80088cc <MX_DriverVbusFS+0x34>)
 80088be:	f7f8 fd5d 	bl	800137c <HAL_GPIO_WritePin>
}
 80088c2:	bf00      	nop
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40020800 	.word	0x40020800

080088d0 <malloc>:
 80088d0:	4b02      	ldr	r3, [pc, #8]	@ (80088dc <malloc+0xc>)
 80088d2:	4601      	mov	r1, r0
 80088d4:	6818      	ldr	r0, [r3, #0]
 80088d6:	f000 b82d 	b.w	8008934 <_malloc_r>
 80088da:	bf00      	nop
 80088dc:	2000002c 	.word	0x2000002c

080088e0 <free>:
 80088e0:	4b02      	ldr	r3, [pc, #8]	@ (80088ec <free+0xc>)
 80088e2:	4601      	mov	r1, r0
 80088e4:	6818      	ldr	r0, [r3, #0]
 80088e6:	f000 b8f5 	b.w	8008ad4 <_free_r>
 80088ea:	bf00      	nop
 80088ec:	2000002c 	.word	0x2000002c

080088f0 <sbrk_aligned>:
 80088f0:	b570      	push	{r4, r5, r6, lr}
 80088f2:	4e0f      	ldr	r6, [pc, #60]	@ (8008930 <sbrk_aligned+0x40>)
 80088f4:	460c      	mov	r4, r1
 80088f6:	6831      	ldr	r1, [r6, #0]
 80088f8:	4605      	mov	r5, r0
 80088fa:	b911      	cbnz	r1, 8008902 <sbrk_aligned+0x12>
 80088fc:	f000 f8ae 	bl	8008a5c <_sbrk_r>
 8008900:	6030      	str	r0, [r6, #0]
 8008902:	4621      	mov	r1, r4
 8008904:	4628      	mov	r0, r5
 8008906:	f000 f8a9 	bl	8008a5c <_sbrk_r>
 800890a:	1c43      	adds	r3, r0, #1
 800890c:	d103      	bne.n	8008916 <sbrk_aligned+0x26>
 800890e:	f04f 34ff 	mov.w	r4, #4294967295
 8008912:	4620      	mov	r0, r4
 8008914:	bd70      	pop	{r4, r5, r6, pc}
 8008916:	1cc4      	adds	r4, r0, #3
 8008918:	f024 0403 	bic.w	r4, r4, #3
 800891c:	42a0      	cmp	r0, r4
 800891e:	d0f8      	beq.n	8008912 <sbrk_aligned+0x22>
 8008920:	1a21      	subs	r1, r4, r0
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f89a 	bl	8008a5c <_sbrk_r>
 8008928:	3001      	adds	r0, #1
 800892a:	d1f2      	bne.n	8008912 <sbrk_aligned+0x22>
 800892c:	e7ef      	b.n	800890e <sbrk_aligned+0x1e>
 800892e:	bf00      	nop
 8008930:	20000950 	.word	0x20000950

08008934 <_malloc_r>:
 8008934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008938:	1ccd      	adds	r5, r1, #3
 800893a:	f025 0503 	bic.w	r5, r5, #3
 800893e:	3508      	adds	r5, #8
 8008940:	2d0c      	cmp	r5, #12
 8008942:	bf38      	it	cc
 8008944:	250c      	movcc	r5, #12
 8008946:	2d00      	cmp	r5, #0
 8008948:	4606      	mov	r6, r0
 800894a:	db01      	blt.n	8008950 <_malloc_r+0x1c>
 800894c:	42a9      	cmp	r1, r5
 800894e:	d904      	bls.n	800895a <_malloc_r+0x26>
 8008950:	230c      	movs	r3, #12
 8008952:	6033      	str	r3, [r6, #0]
 8008954:	2000      	movs	r0, #0
 8008956:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800895a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008a30 <_malloc_r+0xfc>
 800895e:	f000 f869 	bl	8008a34 <__malloc_lock>
 8008962:	f8d8 3000 	ldr.w	r3, [r8]
 8008966:	461c      	mov	r4, r3
 8008968:	bb44      	cbnz	r4, 80089bc <_malloc_r+0x88>
 800896a:	4629      	mov	r1, r5
 800896c:	4630      	mov	r0, r6
 800896e:	f7ff ffbf 	bl	80088f0 <sbrk_aligned>
 8008972:	1c43      	adds	r3, r0, #1
 8008974:	4604      	mov	r4, r0
 8008976:	d158      	bne.n	8008a2a <_malloc_r+0xf6>
 8008978:	f8d8 4000 	ldr.w	r4, [r8]
 800897c:	4627      	mov	r7, r4
 800897e:	2f00      	cmp	r7, #0
 8008980:	d143      	bne.n	8008a0a <_malloc_r+0xd6>
 8008982:	2c00      	cmp	r4, #0
 8008984:	d04b      	beq.n	8008a1e <_malloc_r+0xea>
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	4639      	mov	r1, r7
 800898a:	4630      	mov	r0, r6
 800898c:	eb04 0903 	add.w	r9, r4, r3
 8008990:	f000 f864 	bl	8008a5c <_sbrk_r>
 8008994:	4581      	cmp	r9, r0
 8008996:	d142      	bne.n	8008a1e <_malloc_r+0xea>
 8008998:	6821      	ldr	r1, [r4, #0]
 800899a:	1a6d      	subs	r5, r5, r1
 800899c:	4629      	mov	r1, r5
 800899e:	4630      	mov	r0, r6
 80089a0:	f7ff ffa6 	bl	80088f0 <sbrk_aligned>
 80089a4:	3001      	adds	r0, #1
 80089a6:	d03a      	beq.n	8008a1e <_malloc_r+0xea>
 80089a8:	6823      	ldr	r3, [r4, #0]
 80089aa:	442b      	add	r3, r5
 80089ac:	6023      	str	r3, [r4, #0]
 80089ae:	f8d8 3000 	ldr.w	r3, [r8]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	bb62      	cbnz	r2, 8008a10 <_malloc_r+0xdc>
 80089b6:	f8c8 7000 	str.w	r7, [r8]
 80089ba:	e00f      	b.n	80089dc <_malloc_r+0xa8>
 80089bc:	6822      	ldr	r2, [r4, #0]
 80089be:	1b52      	subs	r2, r2, r5
 80089c0:	d420      	bmi.n	8008a04 <_malloc_r+0xd0>
 80089c2:	2a0b      	cmp	r2, #11
 80089c4:	d917      	bls.n	80089f6 <_malloc_r+0xc2>
 80089c6:	1961      	adds	r1, r4, r5
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	6025      	str	r5, [r4, #0]
 80089cc:	bf18      	it	ne
 80089ce:	6059      	strne	r1, [r3, #4]
 80089d0:	6863      	ldr	r3, [r4, #4]
 80089d2:	bf08      	it	eq
 80089d4:	f8c8 1000 	streq.w	r1, [r8]
 80089d8:	5162      	str	r2, [r4, r5]
 80089da:	604b      	str	r3, [r1, #4]
 80089dc:	4630      	mov	r0, r6
 80089de:	f000 f82f 	bl	8008a40 <__malloc_unlock>
 80089e2:	f104 000b 	add.w	r0, r4, #11
 80089e6:	1d23      	adds	r3, r4, #4
 80089e8:	f020 0007 	bic.w	r0, r0, #7
 80089ec:	1ac2      	subs	r2, r0, r3
 80089ee:	bf1c      	itt	ne
 80089f0:	1a1b      	subne	r3, r3, r0
 80089f2:	50a3      	strne	r3, [r4, r2]
 80089f4:	e7af      	b.n	8008956 <_malloc_r+0x22>
 80089f6:	6862      	ldr	r2, [r4, #4]
 80089f8:	42a3      	cmp	r3, r4
 80089fa:	bf0c      	ite	eq
 80089fc:	f8c8 2000 	streq.w	r2, [r8]
 8008a00:	605a      	strne	r2, [r3, #4]
 8008a02:	e7eb      	b.n	80089dc <_malloc_r+0xa8>
 8008a04:	4623      	mov	r3, r4
 8008a06:	6864      	ldr	r4, [r4, #4]
 8008a08:	e7ae      	b.n	8008968 <_malloc_r+0x34>
 8008a0a:	463c      	mov	r4, r7
 8008a0c:	687f      	ldr	r7, [r7, #4]
 8008a0e:	e7b6      	b.n	800897e <_malloc_r+0x4a>
 8008a10:	461a      	mov	r2, r3
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	42a3      	cmp	r3, r4
 8008a16:	d1fb      	bne.n	8008a10 <_malloc_r+0xdc>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6053      	str	r3, [r2, #4]
 8008a1c:	e7de      	b.n	80089dc <_malloc_r+0xa8>
 8008a1e:	230c      	movs	r3, #12
 8008a20:	6033      	str	r3, [r6, #0]
 8008a22:	4630      	mov	r0, r6
 8008a24:	f000 f80c 	bl	8008a40 <__malloc_unlock>
 8008a28:	e794      	b.n	8008954 <_malloc_r+0x20>
 8008a2a:	6005      	str	r5, [r0, #0]
 8008a2c:	e7d6      	b.n	80089dc <_malloc_r+0xa8>
 8008a2e:	bf00      	nop
 8008a30:	20000954 	.word	0x20000954

08008a34 <__malloc_lock>:
 8008a34:	4801      	ldr	r0, [pc, #4]	@ (8008a3c <__malloc_lock+0x8>)
 8008a36:	f000 b84b 	b.w	8008ad0 <__retarget_lock_acquire_recursive>
 8008a3a:	bf00      	nop
 8008a3c:	20000a94 	.word	0x20000a94

08008a40 <__malloc_unlock>:
 8008a40:	4801      	ldr	r0, [pc, #4]	@ (8008a48 <__malloc_unlock+0x8>)
 8008a42:	f000 b846 	b.w	8008ad2 <__retarget_lock_release_recursive>
 8008a46:	bf00      	nop
 8008a48:	20000a94 	.word	0x20000a94

08008a4c <memset>:
 8008a4c:	4402      	add	r2, r0
 8008a4e:	4603      	mov	r3, r0
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d100      	bne.n	8008a56 <memset+0xa>
 8008a54:	4770      	bx	lr
 8008a56:	f803 1b01 	strb.w	r1, [r3], #1
 8008a5a:	e7f9      	b.n	8008a50 <memset+0x4>

08008a5c <_sbrk_r>:
 8008a5c:	b538      	push	{r3, r4, r5, lr}
 8008a5e:	4d06      	ldr	r5, [pc, #24]	@ (8008a78 <_sbrk_r+0x1c>)
 8008a60:	2300      	movs	r3, #0
 8008a62:	4604      	mov	r4, r0
 8008a64:	4608      	mov	r0, r1
 8008a66:	602b      	str	r3, [r5, #0]
 8008a68:	f7f8 f8d2 	bl	8000c10 <_sbrk>
 8008a6c:	1c43      	adds	r3, r0, #1
 8008a6e:	d102      	bne.n	8008a76 <_sbrk_r+0x1a>
 8008a70:	682b      	ldr	r3, [r5, #0]
 8008a72:	b103      	cbz	r3, 8008a76 <_sbrk_r+0x1a>
 8008a74:	6023      	str	r3, [r4, #0]
 8008a76:	bd38      	pop	{r3, r4, r5, pc}
 8008a78:	20000a90 	.word	0x20000a90

08008a7c <__errno>:
 8008a7c:	4b01      	ldr	r3, [pc, #4]	@ (8008a84 <__errno+0x8>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	2000002c 	.word	0x2000002c

08008a88 <__libc_init_array>:
 8008a88:	b570      	push	{r4, r5, r6, lr}
 8008a8a:	4d0d      	ldr	r5, [pc, #52]	@ (8008ac0 <__libc_init_array+0x38>)
 8008a8c:	4c0d      	ldr	r4, [pc, #52]	@ (8008ac4 <__libc_init_array+0x3c>)
 8008a8e:	1b64      	subs	r4, r4, r5
 8008a90:	10a4      	asrs	r4, r4, #2
 8008a92:	2600      	movs	r6, #0
 8008a94:	42a6      	cmp	r6, r4
 8008a96:	d109      	bne.n	8008aac <__libc_init_array+0x24>
 8008a98:	4d0b      	ldr	r5, [pc, #44]	@ (8008ac8 <__libc_init_array+0x40>)
 8008a9a:	4c0c      	ldr	r4, [pc, #48]	@ (8008acc <__libc_init_array+0x44>)
 8008a9c:	f000 f864 	bl	8008b68 <_init>
 8008aa0:	1b64      	subs	r4, r4, r5
 8008aa2:	10a4      	asrs	r4, r4, #2
 8008aa4:	2600      	movs	r6, #0
 8008aa6:	42a6      	cmp	r6, r4
 8008aa8:	d105      	bne.n	8008ab6 <__libc_init_array+0x2e>
 8008aaa:	bd70      	pop	{r4, r5, r6, pc}
 8008aac:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ab0:	4798      	blx	r3
 8008ab2:	3601      	adds	r6, #1
 8008ab4:	e7ee      	b.n	8008a94 <__libc_init_array+0xc>
 8008ab6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008aba:	4798      	blx	r3
 8008abc:	3601      	adds	r6, #1
 8008abe:	e7f2      	b.n	8008aa6 <__libc_init_array+0x1e>
 8008ac0:	08008ba4 	.word	0x08008ba4
 8008ac4:	08008ba4 	.word	0x08008ba4
 8008ac8:	08008ba4 	.word	0x08008ba4
 8008acc:	08008ba8 	.word	0x08008ba8

08008ad0 <__retarget_lock_acquire_recursive>:
 8008ad0:	4770      	bx	lr

08008ad2 <__retarget_lock_release_recursive>:
 8008ad2:	4770      	bx	lr

08008ad4 <_free_r>:
 8008ad4:	b538      	push	{r3, r4, r5, lr}
 8008ad6:	4605      	mov	r5, r0
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d041      	beq.n	8008b60 <_free_r+0x8c>
 8008adc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ae0:	1f0c      	subs	r4, r1, #4
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	bfb8      	it	lt
 8008ae6:	18e4      	addlt	r4, r4, r3
 8008ae8:	f7ff ffa4 	bl	8008a34 <__malloc_lock>
 8008aec:	4a1d      	ldr	r2, [pc, #116]	@ (8008b64 <_free_r+0x90>)
 8008aee:	6813      	ldr	r3, [r2, #0]
 8008af0:	b933      	cbnz	r3, 8008b00 <_free_r+0x2c>
 8008af2:	6063      	str	r3, [r4, #4]
 8008af4:	6014      	str	r4, [r2, #0]
 8008af6:	4628      	mov	r0, r5
 8008af8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008afc:	f7ff bfa0 	b.w	8008a40 <__malloc_unlock>
 8008b00:	42a3      	cmp	r3, r4
 8008b02:	d908      	bls.n	8008b16 <_free_r+0x42>
 8008b04:	6820      	ldr	r0, [r4, #0]
 8008b06:	1821      	adds	r1, r4, r0
 8008b08:	428b      	cmp	r3, r1
 8008b0a:	bf01      	itttt	eq
 8008b0c:	6819      	ldreq	r1, [r3, #0]
 8008b0e:	685b      	ldreq	r3, [r3, #4]
 8008b10:	1809      	addeq	r1, r1, r0
 8008b12:	6021      	streq	r1, [r4, #0]
 8008b14:	e7ed      	b.n	8008af2 <_free_r+0x1e>
 8008b16:	461a      	mov	r2, r3
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	b10b      	cbz	r3, 8008b20 <_free_r+0x4c>
 8008b1c:	42a3      	cmp	r3, r4
 8008b1e:	d9fa      	bls.n	8008b16 <_free_r+0x42>
 8008b20:	6811      	ldr	r1, [r2, #0]
 8008b22:	1850      	adds	r0, r2, r1
 8008b24:	42a0      	cmp	r0, r4
 8008b26:	d10b      	bne.n	8008b40 <_free_r+0x6c>
 8008b28:	6820      	ldr	r0, [r4, #0]
 8008b2a:	4401      	add	r1, r0
 8008b2c:	1850      	adds	r0, r2, r1
 8008b2e:	4283      	cmp	r3, r0
 8008b30:	6011      	str	r1, [r2, #0]
 8008b32:	d1e0      	bne.n	8008af6 <_free_r+0x22>
 8008b34:	6818      	ldr	r0, [r3, #0]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	6053      	str	r3, [r2, #4]
 8008b3a:	4408      	add	r0, r1
 8008b3c:	6010      	str	r0, [r2, #0]
 8008b3e:	e7da      	b.n	8008af6 <_free_r+0x22>
 8008b40:	d902      	bls.n	8008b48 <_free_r+0x74>
 8008b42:	230c      	movs	r3, #12
 8008b44:	602b      	str	r3, [r5, #0]
 8008b46:	e7d6      	b.n	8008af6 <_free_r+0x22>
 8008b48:	6820      	ldr	r0, [r4, #0]
 8008b4a:	1821      	adds	r1, r4, r0
 8008b4c:	428b      	cmp	r3, r1
 8008b4e:	bf04      	itt	eq
 8008b50:	6819      	ldreq	r1, [r3, #0]
 8008b52:	685b      	ldreq	r3, [r3, #4]
 8008b54:	6063      	str	r3, [r4, #4]
 8008b56:	bf04      	itt	eq
 8008b58:	1809      	addeq	r1, r1, r0
 8008b5a:	6021      	streq	r1, [r4, #0]
 8008b5c:	6054      	str	r4, [r2, #4]
 8008b5e:	e7ca      	b.n	8008af6 <_free_r+0x22>
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	20000954 	.word	0x20000954

08008b68 <_init>:
 8008b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b6a:	bf00      	nop
 8008b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b6e:	bc08      	pop	{r3}
 8008b70:	469e      	mov	lr, r3
 8008b72:	4770      	bx	lr

08008b74 <_fini>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr
