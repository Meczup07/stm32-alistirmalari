
led_timer_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094b8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08009640  08009640  0000a640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800965c  0800965c  0000b07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800965c  0800965c  0000a65c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009664  08009664  0000b07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009664  08009664  0000a664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009668  08009668  0000a668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800966c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b07c  2**0
                  CONTENTS
 10 .bss          00000ab4  2000007c  2000007c  0000b07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b30  20000b30  0000b07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a8de  00000000  00000000  0000b0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000457a  00000000  00000000  0002598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  00029f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011c5  00000000  00000000  0002b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024e9a  00000000  00000000  0002c7ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204b2  00000000  00000000  00051687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d4091  00000000  00000000  00071b39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00145bca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063dc  00000000  00000000  00145c10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  0014bfec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009628 	.word	0x08009628

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08009628 	.word	0x08009628

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <MX_GPIO_Init>:
        * EXTI
     PC3   ------> I2S2_SD
     PB10   ------> I2S2_CK
*/
void MX_GPIO_Init(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08c      	sub	sp, #48	@ 0x30
 80004bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004be:	f107 031c 	add.w	r3, r7, #28
 80004c2:	2200      	movs	r2, #0
 80004c4:	601a      	str	r2, [r3, #0]
 80004c6:	605a      	str	r2, [r3, #4]
 80004c8:	609a      	str	r2, [r3, #8]
 80004ca:	60da      	str	r2, [r3, #12]
 80004cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ce:	2300      	movs	r3, #0
 80004d0:	61bb      	str	r3, [r7, #24]
 80004d2:	4b72      	ldr	r3, [pc, #456]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a71      	ldr	r2, [pc, #452]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004d8:	f043 0310 	orr.w	r3, r3, #16
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004de:	4b6f      	ldr	r3, [pc, #444]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e2:	f003 0310 	and.w	r3, r3, #16
 80004e6:	61bb      	str	r3, [r7, #24]
 80004e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	617b      	str	r3, [r7, #20]
 80004ee:	4b6b      	ldr	r3, [pc, #428]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f2:	4a6a      	ldr	r2, [pc, #424]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004f4:	f043 0304 	orr.w	r3, r3, #4
 80004f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80004fa:	4b68      	ldr	r3, [pc, #416]	@ (800069c <MX_GPIO_Init+0x1e4>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004fe:	f003 0304 	and.w	r3, r3, #4
 8000502:	617b      	str	r3, [r7, #20]
 8000504:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	613b      	str	r3, [r7, #16]
 800050a:	4b64      	ldr	r3, [pc, #400]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a63      	ldr	r2, [pc, #396]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b61      	ldr	r3, [pc, #388]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800051e:	613b      	str	r3, [r7, #16]
 8000520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	4b5d      	ldr	r3, [pc, #372]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a5c      	ldr	r2, [pc, #368]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b5a      	ldr	r3, [pc, #360]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60bb      	str	r3, [r7, #8]
 8000542:	4b56      	ldr	r3, [pc, #344]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000546:	4a55      	ldr	r2, [pc, #340]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6313      	str	r3, [r2, #48]	@ 0x30
 800054e:	4b53      	ldr	r3, [pc, #332]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000552:	f003 0302 	and.w	r3, r3, #2
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	607b      	str	r3, [r7, #4]
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	4a4e      	ldr	r2, [pc, #312]	@ (800069c <MX_GPIO_Init+0x1e4>)
 8000564:	f043 0308 	orr.w	r3, r3, #8
 8000568:	6313      	str	r3, [r2, #48]	@ 0x30
 800056a:	4b4c      	ldr	r3, [pc, #304]	@ (800069c <MX_GPIO_Init+0x1e4>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056e:	f003 0308 	and.w	r3, r3, #8
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000576:	2200      	movs	r2, #0
 8000578:	2108      	movs	r1, #8
 800057a:	4849      	ldr	r0, [pc, #292]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800057c:	f001 f800 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	2101      	movs	r1, #1
 8000584:	4847      	ldr	r0, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 8000586:	f000 fffb 	bl	8001580 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800058a:	2200      	movs	r2, #0
 800058c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000590:	4845      	ldr	r0, [pc, #276]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000592:	f000 fff5 	bl	8001580 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000596:	2308      	movs	r3, #8
 8000598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800059a:	2301      	movs	r3, #1
 800059c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005a2:	2300      	movs	r3, #0
 80005a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005a6:	f107 031c 	add.w	r3, r7, #28
 80005aa:	4619      	mov	r1, r3
 80005ac:	483c      	ldr	r0, [pc, #240]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 80005ae:	f000 fe4b 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80005b2:	2301      	movs	r3, #1
 80005b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b6:	2301      	movs	r3, #1
 80005b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ba:	2300      	movs	r3, #0
 80005bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005be:	2300      	movs	r3, #0
 80005c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	4619      	mov	r1, r3
 80005c8:	4836      	ldr	r0, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ca:	f000 fe3d 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80005ce:	2308      	movs	r3, #8
 80005d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d2:	2302      	movs	r3, #2
 80005d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	2300      	movs	r3, #0
 80005d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005da:	2300      	movs	r3, #0
 80005dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80005de:	2305      	movs	r3, #5
 80005e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	482e      	ldr	r0, [pc, #184]	@ (80006a4 <MX_GPIO_Init+0x1ec>)
 80005ea:	f000 fe2d 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80005f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x1f4>)
 8000604:	f000 fe20 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000608:	2304      	movs	r3, #4
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800060c:	2300      	movs	r3, #0
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4825      	ldr	r0, [pc, #148]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800061c:	f000 fe14 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000620:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000626:	2302      	movs	r3, #2
 8000628:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062a:	2300      	movs	r3, #0
 800062c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062e:	2300      	movs	r3, #0
 8000630:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000632:	2305      	movs	r3, #5
 8000634:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	481c      	ldr	r0, [pc, #112]	@ (80006b0 <MX_GPIO_Init+0x1f8>)
 800063e:	f000 fe03 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000642:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000646:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000648:	2301      	movs	r3, #1
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4619      	mov	r1, r3
 800065a:	4813      	ldr	r0, [pc, #76]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 800065c:	f000 fdf4 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000660:	2320      	movs	r3, #32
 8000662:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	@ (80006a8 <MX_GPIO_Init+0x1f0>)
 8000674:	f000 fde8 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800067c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0x1e8>)
 800068e:	f000 fddb 	bl	8001248 <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3730      	adds	r7, #48	@ 0x30
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40021000 	.word	0x40021000
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020c00 	.word	0x40020c00
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006b8:	4b12      	ldr	r3, [pc, #72]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ba:	4a13      	ldr	r2, [pc, #76]	@ (8000708 <MX_I2C1_Init+0x54>)
 80006bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006be:	4b11      	ldr	r3, [pc, #68]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c0:	4a12      	ldr	r2, [pc, #72]	@ (800070c <MX_I2C1_Init+0x58>)
 80006c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006d6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006d8:	4b0a      	ldr	r3, [pc, #40]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006da:	2200      	movs	r2, #0
 80006dc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006de:	4b09      	ldr	r3, [pc, #36]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006e4:	4b07      	ldr	r3, [pc, #28]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ea:	4b06      	ldr	r3, [pc, #24]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006f0:	4804      	ldr	r0, [pc, #16]	@ (8000704 <MX_I2C1_Init+0x50>)
 80006f2:	f003 f8ad 	bl	8003850 <HAL_I2C_Init>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9bc 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000700:	bf00      	nop
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000098 	.word	0x20000098
 8000708:	40005400 	.word	0x40005400
 800070c:	000186a0 	.word	0x000186a0

08000710 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b08a      	sub	sp, #40	@ 0x28
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000718:	f107 0314 	add.w	r3, r7, #20
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <HAL_I2C_MspInit+0x84>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d12c      	bne.n	800078c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b18      	ldr	r3, [pc, #96]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a17      	ldr	r2, [pc, #92]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800074e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000754:	2312      	movs	r3, #18
 8000756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000760:	2304      	movs	r3, #4
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	480c      	ldr	r0, [pc, #48]	@ (800079c <HAL_I2C_MspInit+0x8c>)
 800076c:	f000 fd6c 	bl	8001248 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000770:	2300      	movs	r3, #0
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000778:	4a07      	ldr	r2, [pc, #28]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 800077a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800077e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000780:	4b05      	ldr	r3, [pc, #20]	@ (8000798 <HAL_I2C_MspInit+0x88>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800078c:	bf00      	nop
 800078e:	3728      	adds	r7, #40	@ 0x28
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	40005400 	.word	0x40005400
 8000798:	40023800 	.word	0x40023800
 800079c:	40020400 	.word	0x40020400

080007a0 <MX_I2S3_Init>:

I2S_HandleTypeDef hi2s3;

/* I2S3 init function */
void MX_I2S3_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80007a4:	4b13      	ldr	r3, [pc, #76]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007a6:	4a14      	ldr	r2, [pc, #80]	@ (80007f8 <MX_I2S3_Init+0x58>)
 80007a8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80007aa:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007b0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80007b2:	4b10      	ldr	r3, [pc, #64]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80007b8:	4b0e      	ldr	r3, [pc, #56]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80007be:	4b0d      	ldr	r3, [pc, #52]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007c8:	4a0c      	ldr	r2, [pc, #48]	@ (80007fc <MX_I2S3_Init+0x5c>)
 80007ca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80007d2:	4b08      	ldr	r3, [pc, #32]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80007d8:	4b06      	ldr	r3, [pc, #24]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80007de:	4805      	ldr	r0, [pc, #20]	@ (80007f4 <MX_I2S3_Init+0x54>)
 80007e0:	f003 f97a 	bl	8003ad8 <HAL_I2S_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80007ea:	f000 f945 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000ec 	.word	0x200000ec
 80007f8:	40003c00 	.word	0x40003c00
 80007fc:	00017700 	.word	0x00017700

08000800 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	@ 0x38
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(i2sHandle->Instance==SPI3)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a31      	ldr	r2, [pc, #196]	@ (80008f0 <HAL_I2S_MspInit+0xf0>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d15a      	bne.n	80008e6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000834:	23c0      	movs	r3, #192	@ 0xc0
 8000836:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000838:	2302      	movs	r3, #2
 800083a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4618      	mov	r0, r3
 8000842:	f004 fa6d 	bl	8004d20 <HAL_RCCEx_PeriphCLKConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800084c:	f000 f914 	bl	8000a78 <Error_Handler>
    }

    /* I2S3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800085a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000860:	4b24      	ldr	r3, [pc, #144]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000864:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000868:	613b      	str	r3, [r7, #16]
 800086a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	2300      	movs	r3, #0
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	4b20      	ldr	r3, [pc, #128]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000874:	4a1f      	ldr	r2, [pc, #124]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6313      	str	r3, [r2, #48]	@ 0x30
 800087c:	4b1d      	ldr	r3, [pc, #116]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800087e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000880:	f003 0301 	and.w	r3, r3, #1
 8000884:	60fb      	str	r3, [r7, #12]
 8000886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	4b19      	ldr	r3, [pc, #100]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000890:	4a18      	ldr	r2, [pc, #96]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6313      	str	r3, [r2, #48]	@ 0x30
 8000898:	4b16      	ldr	r3, [pc, #88]	@ (80008f4 <HAL_I2S_MspInit+0xf4>)
 800089a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a4:	2310      	movs	r3, #16
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a8:	2302      	movs	r3, #2
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b4:	2306      	movs	r3, #6
 80008b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	480e      	ldr	r0, [pc, #56]	@ (80008f8 <HAL_I2S_MspInit+0xf8>)
 80008c0:	f000 fcc2 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008c4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2300      	movs	r3, #0
 80008d4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008d6:	2306      	movs	r3, #6
 80008d8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008de:	4619      	mov	r1, r3
 80008e0:	4806      	ldr	r0, [pc, #24]	@ (80008fc <HAL_I2S_MspInit+0xfc>)
 80008e2:	f000 fcb1 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80008e6:	bf00      	nop
 80008e8:	3738      	adds	r7, #56	@ 0x38
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40003c00 	.word	0x40003c00
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020000 	.word	0x40020000
 80008fc:	40020800 	.word	0x40020800

08000900 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM1){
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a0f      	ldr	r2, [pc, #60]	@ (800094c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d109      	bne.n	8000926 <HAL_TIM_PeriodElapsedCallback+0x26>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000912:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000916:	480e      	ldr	r0, [pc, #56]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000918:	f000 fe4b 	bl	80015b2 <HAL_GPIO_TogglePin>
		count_1 = HAL_GetTick();
 800091c:	f000 fb52 	bl	8000fc4 <HAL_GetTick>
 8000920:	4603      	mov	r3, r0
 8000922:	4a0c      	ldr	r2, [pc, #48]	@ (8000954 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000924:	6013      	str	r3, [r2, #0]

	}

	if (htim->Instance == TIM3){
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a0b      	ldr	r2, [pc, #44]	@ (8000958 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800092c:	4293      	cmp	r3, r2
 800092e:	d109      	bne.n	8000944 <HAL_TIM_PeriodElapsedCallback+0x44>

		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000930:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000934:	4806      	ldr	r0, [pc, #24]	@ (8000950 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000936:	f000 fe3c 	bl	80015b2 <HAL_GPIO_TogglePin>
		count_2 = HAL_GetTick();
 800093a:	f000 fb43 	bl	8000fc4 <HAL_GetTick>
 800093e:	4603      	mov	r3, r0
 8000940:	4a06      	ldr	r2, [pc, #24]	@ (800095c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000942:	6013      	str	r3, [r2, #0]
	}
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40010000 	.word	0x40010000
 8000950:	40020c00 	.word	0x40020c00
 8000954:	20000134 	.word	0x20000134
 8000958:	40000400 	.word	0x40000400
 800095c:	20000138 	.word	0x20000138

08000960 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000964:	f000 fac8 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000968:	f000 f81c 	bl	80009a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800096c:	f7ff fda4 	bl	80004b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000970:	f7ff fea0 	bl	80006b4 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000974:	f7ff ff14 	bl	80007a0 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000978:	f000 f884 	bl	8000a84 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 800097c:	f008 f9fe 	bl	8008d7c <MX_USB_HOST_Init>
  MX_TIM1_Init();
 8000980:	f000 f9b2 	bl	8000ce8 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000984:	f000 fa02 	bl	8000d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1);
 8000988:	4804      	ldr	r0, [pc, #16]	@ (800099c <main+0x3c>)
 800098a:	f004 fbe3 	bl	8005154 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 800098e:	4804      	ldr	r0, [pc, #16]	@ (80009a0 <main+0x40>)
 8000990:	f004 fbe0 	bl	8005154 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000994:	f008 fa18 	bl	8008dc8 <MX_USB_HOST_Process>
 8000998:	e7fc      	b.n	8000994 <main+0x34>
 800099a:	bf00      	nop
 800099c:	20000198 	.word	0x20000198
 80009a0:	200001e0 	.word	0x200001e0

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b094      	sub	sp, #80	@ 0x50
 80009a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009aa:	f107 0320 	add.w	r3, r7, #32
 80009ae:	2230      	movs	r2, #48	@ 0x30
 80009b0:	2100      	movs	r1, #0
 80009b2:	4618      	mov	r0, r3
 80009b4:	f008 fdaa 	bl	800950c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c8:	2300      	movs	r3, #0
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	4b28      	ldr	r3, [pc, #160]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d0:	4a27      	ldr	r2, [pc, #156]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d8:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <SystemClock_Config+0xcc>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	60bb      	str	r3, [r7, #8]
 80009e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	2300      	movs	r3, #0
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <SystemClock_Config+0xd0>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a21      	ldr	r2, [pc, #132]	@ (8000a74 <SystemClock_Config+0xd0>)
 80009ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a74 <SystemClock_Config+0xd0>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009fc:	607b      	str	r3, [r7, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a14:	2308      	movs	r3, #8
 8000a16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a18:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000a22:	2307      	movs	r3, #7
 8000a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a26:	f107 0320 	add.w	r3, r7, #32
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f003 fcf4 	bl	8004418 <HAL_RCC_OscConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a36:	f000 f81f 	bl	8000a78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a3a:	230f      	movs	r3, #15
 8000a3c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a46:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a4a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	2105      	movs	r1, #5
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f003 ff55 	bl	8004908 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a64:	f000 f808 	bl	8000a78 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3750      	adds	r7, #80	@ 0x50
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40023800 	.word	0x40023800
 8000a74:	40007000 	.word	0x40007000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7c:	b672      	cpsid	i
}
 8000a7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <Error_Handler+0x8>

08000a84 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000a8a:	4a18      	ldr	r2, [pc, #96]	@ (8000aec <MX_SPI1_Init+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a8e:	4b16      	ldr	r3, [pc, #88]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000a90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ab4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000abc:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ace:	4b06      	ldr	r3, [pc, #24]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad0:	220a      	movs	r2, #10
 8000ad2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <MX_SPI1_Init+0x64>)
 8000ad6:	f004 fa65 	bl	8004fa4 <HAL_SPI_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ae0:	f7ff ffca 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	2000013c 	.word	0x2000013c
 8000aec:	40013000 	.word	0x40013000

08000af0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	@ 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a19      	ldr	r2, [pc, #100]	@ (8000b74 <HAL_SPI_MspInit+0x84>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d12b      	bne.n	8000b6a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b18      	ldr	r3, [pc, #96]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b1a:	4a17      	ldr	r2, [pc, #92]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b1c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b22:	4b15      	ldr	r3, [pc, #84]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	4b11      	ldr	r3, [pc, #68]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	4a10      	ldr	r2, [pc, #64]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b38:	f043 0301 	orr.w	r3, r3, #1
 8000b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b78 <HAL_SPI_MspInit+0x88>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b42:	f003 0301 	and.w	r3, r3, #1
 8000b46:	60fb      	str	r3, [r7, #12]
 8000b48:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b4a:	23e0      	movs	r3, #224	@ 0xe0
 8000b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b5a:	2305      	movs	r3, #5
 8000b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <HAL_SPI_MspInit+0x8c>)
 8000b66:	f000 fb6f 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000b6a:	bf00      	nop
 8000b6c:	3728      	adds	r7, #40	@ 0x28
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40013000 	.word	0x40013000
 8000b78:	40023800 	.word	0x40023800
 8000b7c:	40020000 	.word	0x40020000

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	607b      	str	r3, [r7, #4]
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000baa:	4a08      	ldr	r2, [pc, #32]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_MspInit+0x4c>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bbe:	2007      	movs	r0, #7
 8000bc0:	f000 fb00 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <HardFault_Handler+0x4>

08000be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <MemManage_Handler+0x4>

08000be8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfc:	bf00      	nop
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c26:	f000 f9b9 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c34:	4802      	ldr	r0, [pc, #8]	@ (8000c40 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000c36:	f004 fafd 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000198 	.word	0x20000198

08000c44 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <OTG_FS_IRQHandler+0x10>)
 8000c4a:	f000 ffad 	bl	8001ba8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000608 	.word	0x20000608

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	@ (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	@ (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f008 fc58 	bl	800953c <__errno>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	f04f 33ff 	mov.w	r3, #4294967295
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	@ (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	@ (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	4a05      	ldr	r2, [pc, #20]	@ (8000cbc <_sbrk+0x64>)
 8000ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3718      	adds	r7, #24
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20020000 	.word	0x20020000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000194 	.word	0x20000194
 8000cc0:	20000b30 	.word	0x20000b30

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <SystemInit+0x20>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cce:	4a05      	ldr	r2, [pc, #20]	@ (8000ce4 <SystemInit+0x20>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cee:	f107 0308 	add.w	r3, r7, #8
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d04:	4b1f      	ldr	r3, [pc, #124]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d06:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <MX_TIM1_Init+0xa0>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 8400-1;
 8000d0a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d0c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000d10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d1a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000d1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b18      	ldr	r3, [pc, #96]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d26:	4b17      	ldr	r3, [pc, #92]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d32:	4814      	ldr	r0, [pc, #80]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d34:	f004 f9bf 	bl	80050b6 <HAL_TIM_Base_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d3e:	f7ff fe9b 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d42:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d46:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d48:	f107 0308 	add.w	r3, r7, #8
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d50:	f004 fb60 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000d5a:	f7ff fe8d 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d62:	2300      	movs	r3, #0
 8000d64:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d66:	463b      	mov	r3, r7
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <MX_TIM1_Init+0x9c>)
 8000d6c:	f004 fd88 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000d76:	f7ff fe7f 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	3718      	adds	r7, #24
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000198 	.word	0x20000198
 8000d88:	40010000 	.word	0x40010000

08000d8c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000daa:	4a1e      	ldr	r2, [pc, #120]	@ (8000e24 <MX_TIM3_Init+0x98>)
 8000dac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400-1;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000db0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000db4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8000dbc:	4b18      	ldr	r3, [pc, #96]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000dc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000dd2:	f004 f970 	bl	80050b6 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000ddc:	f7ff fe4c 	bl	8000a78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000dee:	f004 fb11 	bl	8005414 <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000df8:	f7ff fe3e 	bl	8000a78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	@ (8000e20 <MX_TIM3_Init+0x94>)
 8000e0a:	f004 fd39 	bl	8005880 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f7ff fe30 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200001e0 	.word	0x200001e0
 8000e24:	40000400 	.word	0x40000400

08000e28 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a18      	ldr	r2, [pc, #96]	@ (8000e98 <HAL_TIM_Base_MspInit+0x70>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d116      	bne.n	8000e68 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e42:	4a16      	ldr	r2, [pc, #88]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e4a:	4b14      	ldr	r3, [pc, #80]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2019      	movs	r0, #25
 8000e5c:	f000 f9bd 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e60:	2019      	movs	r0, #25
 8000e62:	f000 f9d6 	bl	8001212 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000e66:	e012      	b.n	8000e8e <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x78>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d10d      	bne.n	8000e8e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
 8000e76:	4b09      	ldr	r3, [pc, #36]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e7a:	4a08      	ldr	r2, [pc, #32]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_TIM_Base_MspInit+0x74>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	60bb      	str	r3, [r7, #8]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
}
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40010000 	.word	0x40010000
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40000400 	.word	0x40000400

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000edc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea8:	f7ff ff0c 	bl	8000cc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f008 fb39 	bl	8009548 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fd43 	bl	8000960 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000ee8:	0800966c 	.word	0x0800966c
  ldr r2, =_sbss
 8000eec:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000ef0:	20000b30 	.word	0x20000b30

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	@ (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	@ (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	@ (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	@ (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	@ (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f94f 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fe28 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	@ (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f967 	bl	800122e <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f92f 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	@ (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	20000008 	.word	0x20000008
 8000f98:	20000004 	.word	0x20000004

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000008 	.word	0x20000008
 8000fc0:	20000228 	.word	0x20000228

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	@ (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	20000228 	.word	0x20000228

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	@ (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000008 	.word	0x20000008

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	@ (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	@ (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	@ (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	@ (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	@ (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	@ 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	@ 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	@ (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	@ (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e16b      	b.n	800153c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 815a 	bne.w	8001536 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80b4 	beq.w	8001536 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b60      	ldr	r3, [pc, #384]	@ (8001554 <HAL_GPIO_Init+0x30c>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a5f      	ldr	r2, [pc, #380]	@ (8001554 <HAL_GPIO_Init+0x30c>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b5d      	ldr	r3, [pc, #372]	@ (8001554 <HAL_GPIO_Init+0x30c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a5b      	ldr	r2, [pc, #364]	@ (8001558 <HAL_GPIO_Init+0x310>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a52      	ldr	r2, [pc, #328]	@ (800155c <HAL_GPIO_Init+0x314>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d02b      	beq.n	800146e <HAL_GPIO_Init+0x226>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a51      	ldr	r2, [pc, #324]	@ (8001560 <HAL_GPIO_Init+0x318>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d025      	beq.n	800146a <HAL_GPIO_Init+0x222>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a50      	ldr	r2, [pc, #320]	@ (8001564 <HAL_GPIO_Init+0x31c>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01f      	beq.n	8001466 <HAL_GPIO_Init+0x21e>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4f      	ldr	r2, [pc, #316]	@ (8001568 <HAL_GPIO_Init+0x320>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d019      	beq.n	8001462 <HAL_GPIO_Init+0x21a>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4e      	ldr	r2, [pc, #312]	@ (800156c <HAL_GPIO_Init+0x324>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d013      	beq.n	800145e <HAL_GPIO_Init+0x216>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4d      	ldr	r2, [pc, #308]	@ (8001570 <HAL_GPIO_Init+0x328>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d00d      	beq.n	800145a <HAL_GPIO_Init+0x212>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4c      	ldr	r2, [pc, #304]	@ (8001574 <HAL_GPIO_Init+0x32c>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d007      	beq.n	8001456 <HAL_GPIO_Init+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4b      	ldr	r2, [pc, #300]	@ (8001578 <HAL_GPIO_Init+0x330>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_GPIO_Init+0x20a>
 800144e:	2307      	movs	r3, #7
 8001450:	e00e      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001452:	2308      	movs	r3, #8
 8001454:	e00c      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001456:	2306      	movs	r3, #6
 8001458:	e00a      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145a:	2305      	movs	r3, #5
 800145c:	e008      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800145e:	2304      	movs	r3, #4
 8001460:	e006      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001462:	2303      	movs	r3, #3
 8001464:	e004      	b.n	8001470 <HAL_GPIO_Init+0x228>
 8001466:	2302      	movs	r3, #2
 8001468:	e002      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146a:	2301      	movs	r3, #1
 800146c:	e000      	b.n	8001470 <HAL_GPIO_Init+0x228>
 800146e:	2300      	movs	r3, #0
 8001470:	69fa      	ldr	r2, [r7, #28]
 8001472:	f002 0203 	and.w	r2, r2, #3
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	4093      	lsls	r3, r2
 800147a:	69ba      	ldr	r2, [r7, #24]
 800147c:	4313      	orrs	r3, r2
 800147e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001480:	4935      	ldr	r1, [pc, #212]	@ (8001558 <HAL_GPIO_Init+0x310>)
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	089b      	lsrs	r3, r3, #2
 8001486:	3302      	adds	r3, #2
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800148e:	4b3b      	ldr	r3, [pc, #236]	@ (800157c <HAL_GPIO_Init+0x334>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	43db      	mvns	r3, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4013      	ands	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014b2:	4a32      	ldr	r2, [pc, #200]	@ (800157c <HAL_GPIO_Init+0x334>)
 80014b4:	69bb      	ldr	r3, [r7, #24]
 80014b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <HAL_GPIO_Init+0x334>)
 80014ba:	68db      	ldr	r3, [r3, #12]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	43db      	mvns	r3, r3
 80014c2:	69ba      	ldr	r2, [r7, #24]
 80014c4:	4013      	ands	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d003      	beq.n	80014dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	4313      	orrs	r3, r2
 80014da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014dc:	4a27      	ldr	r2, [pc, #156]	@ (800157c <HAL_GPIO_Init+0x334>)
 80014de:	69bb      	ldr	r3, [r7, #24]
 80014e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014e2:	4b26      	ldr	r3, [pc, #152]	@ (800157c <HAL_GPIO_Init+0x334>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001506:	4a1d      	ldr	r2, [pc, #116]	@ (800157c <HAL_GPIO_Init+0x334>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150c:	4b1b      	ldr	r3, [pc, #108]	@ (800157c <HAL_GPIO_Init+0x334>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001530:	4a12      	ldr	r2, [pc, #72]	@ (800157c <HAL_GPIO_Init+0x334>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3301      	adds	r3, #1
 800153a:	61fb      	str	r3, [r7, #28]
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	2b0f      	cmp	r3, #15
 8001540:	f67f ae90 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001544:	bf00      	nop
 8001546:	bf00      	nop
 8001548:	3724      	adds	r7, #36	@ 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40013c00 	.word	0x40013c00

08001580 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
 800158c:	4613      	mov	r3, r2
 800158e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001590:	787b      	ldrb	r3, [r7, #1]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d003      	beq.n	800159e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001596:	887a      	ldrh	r2, [r7, #2]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800159c:	e003      	b.n	80015a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800159e:	887b      	ldrh	r3, [r7, #2]
 80015a0:	041a      	lsls	r2, r3, #16
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	619a      	str	r2, [r3, #24]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b085      	sub	sp, #20
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	695b      	ldr	r3, [r3, #20]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80015c4:	887a      	ldrh	r2, [r7, #2]
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	4013      	ands	r3, r2
 80015ca:	041a      	lsls	r2, r3, #16
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	43d9      	mvns	r1, r3
 80015d0:	887b      	ldrh	r3, [r7, #2]
 80015d2:	400b      	ands	r3, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	619a      	str	r2, [r3, #24]
}
 80015da:	bf00      	nop
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr

080015e6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b086      	sub	sp, #24
 80015ea:	af02      	add	r7, sp, #8
 80015ec:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e059      	b.n	80016ac <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d106      	bne.n	8001618 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f007 fc10 	bl	8008e38 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2203      	movs	r2, #3
 800161c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001626:	d102      	bne.n	800162e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f004 fa29 	bl	8005a8a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7c1a      	ldrb	r2, [r3, #16]
 8001640:	f88d 2000 	strb.w	r2, [sp]
 8001644:	3304      	adds	r3, #4
 8001646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001648:	f004 f9aa 	bl	80059a0 <USB_CoreInit>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2202      	movs	r2, #2
 8001656:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e026      	b.n	80016ac <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2101      	movs	r1, #1
 8001664:	4618      	mov	r0, r3
 8001666:	f004 fa21 	bl	8005aac <USB_SetCurrentMode>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d005      	beq.n	800167c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2202      	movs	r2, #2
 8001674:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e017      	b.n	80016ac <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6818      	ldr	r0, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	7c1a      	ldrb	r2, [r3, #16]
 8001684:	f88d 2000 	strb.w	r2, [sp]
 8001688:	3304      	adds	r3, #4
 800168a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800168c:	f004 fbc4 	bl	8005e18 <USB_HostInit>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2202      	movs	r2, #2
 800169a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e004      	b.n	80016ac <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80016b4:	b590      	push	{r4, r7, lr}
 80016b6:	b08b      	sub	sp, #44	@ 0x2c
 80016b8:	af04      	add	r7, sp, #16
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	4608      	mov	r0, r1
 80016be:	4611      	mov	r1, r2
 80016c0:	461a      	mov	r2, r3
 80016c2:	4603      	mov	r3, r0
 80016c4:	70fb      	strb	r3, [r7, #3]
 80016c6:	460b      	mov	r3, r1
 80016c8:	70bb      	strb	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80016ce:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80016d0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d101      	bne.n	80016e0 <HAL_HCD_HC_Init+0x2c>
 80016dc:	2302      	movs	r3, #2
 80016de:	e09d      	b.n	800181c <HAL_HCD_HC_Init+0x168>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80016e8:	78fa      	ldrb	r2, [r7, #3]
 80016ea:	6879      	ldr	r1, [r7, #4]
 80016ec:	4613      	mov	r3, r2
 80016ee:	011b      	lsls	r3, r3, #4
 80016f0:	1a9b      	subs	r3, r3, r2
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	440b      	add	r3, r1
 80016f6:	3319      	adds	r3, #25
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016fc:	78fa      	ldrb	r2, [r7, #3]
 80016fe:	6879      	ldr	r1, [r7, #4]
 8001700:	4613      	mov	r3, r2
 8001702:	011b      	lsls	r3, r3, #4
 8001704:	1a9b      	subs	r3, r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	440b      	add	r3, r1
 800170a:	3314      	adds	r3, #20
 800170c:	787a      	ldrb	r2, [r7, #1]
 800170e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001710:	78fa      	ldrb	r2, [r7, #3]
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	011b      	lsls	r3, r3, #4
 8001718:	1a9b      	subs	r3, r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3315      	adds	r3, #21
 8001720:	78fa      	ldrb	r2, [r7, #3]
 8001722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001724:	78fa      	ldrb	r2, [r7, #3]
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	4613      	mov	r3, r2
 800172a:	011b      	lsls	r3, r3, #4
 800172c:	1a9b      	subs	r3, r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3326      	adds	r3, #38	@ 0x26
 8001734:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001738:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800173a:	78fa      	ldrb	r2, [r7, #3]
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001742:	b2d8      	uxtb	r0, r3
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	3316      	adds	r3, #22
 8001752:	4602      	mov	r2, r0
 8001754:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	4619      	mov	r1, r3
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fbc8 	bl	8001ef0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001760:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da0a      	bge.n	800177e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001768:	78fa      	ldrb	r2, [r7, #3]
 800176a:	6879      	ldr	r1, [r7, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	011b      	lsls	r3, r3, #4
 8001770:	1a9b      	subs	r3, r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3317      	adds	r3, #23
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]
 800177c:	e009      	b.n	8001792 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800177e:	78fa      	ldrb	r2, [r7, #3]
 8001780:	6879      	ldr	r1, [r7, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	011b      	lsls	r3, r3, #4
 8001786:	1a9b      	subs	r3, r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	440b      	add	r3, r1
 800178c:	3317      	adds	r3, #23
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f004 fca2 	bl	80060e0 <USB_GetHostSpeed>
 800179c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800179e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d10b      	bne.n	80017be <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80017a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d107      	bne.n	80017be <HAL_HCD_HC_Init+0x10a>
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d104      	bne.n	80017be <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	2bbc      	cmp	r3, #188	@ 0xbc
 80017b8:	d901      	bls.n	80017be <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80017ba:	23bc      	movs	r3, #188	@ 0xbc
 80017bc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80017be:	78fa      	ldrb	r2, [r7, #3]
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	4613      	mov	r3, r2
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	1a9b      	subs	r3, r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3318      	adds	r3, #24
 80017ce:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	b298      	uxth	r0, r3
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	3328      	adds	r3, #40	@ 0x28
 80017e8:	4602      	mov	r2, r0
 80017ea:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	787c      	ldrb	r4, [r7, #1]
 80017f6:	78ba      	ldrb	r2, [r7, #2]
 80017f8:	78f9      	ldrb	r1, [r7, #3]
 80017fa:	9302      	str	r3, [sp, #8]
 80017fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001800:	9301      	str	r3, [sp, #4]
 8001802:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	4623      	mov	r3, r4
 800180a:	f004 fc91 	bl	8006130 <USB_HC_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
}
 800181c:	4618      	mov	r0, r3
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd90      	pop	{r4, r7, pc}

08001824 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800183a:	2b01      	cmp	r3, #1
 800183c:	d101      	bne.n	8001842 <HAL_HCD_HC_Halt+0x1e>
 800183e:	2302      	movs	r3, #2
 8001840:	e00f      	b.n	8001862 <HAL_HCD_HC_Halt+0x3e>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f005 f823 	bl	800689e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
	...

0800186c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	4608      	mov	r0, r1
 8001876:	4611      	mov	r1, r2
 8001878:	461a      	mov	r2, r3
 800187a:	4603      	mov	r3, r0
 800187c:	70fb      	strb	r3, [r7, #3]
 800187e:	460b      	mov	r3, r1
 8001880:	70bb      	strb	r3, [r7, #2]
 8001882:	4613      	mov	r3, r2
 8001884:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001886:	78fa      	ldrb	r2, [r7, #3]
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	011b      	lsls	r3, r3, #4
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	440b      	add	r3, r1
 8001894:	3317      	adds	r3, #23
 8001896:	78ba      	ldrb	r2, [r7, #2]
 8001898:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	6879      	ldr	r1, [r7, #4]
 800189e:	4613      	mov	r3, r2
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	440b      	add	r3, r1
 80018a8:	3326      	adds	r3, #38	@ 0x26
 80018aa:	787a      	ldrb	r2, [r7, #1]
 80018ac:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80018ae:	7c3b      	ldrb	r3, [r7, #16]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d114      	bne.n	80018de <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80018b4:	78fa      	ldrb	r2, [r7, #3]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	1a9b      	subs	r3, r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	332a      	adds	r3, #42	@ 0x2a
 80018c4:	2203      	movs	r2, #3
 80018c6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80018c8:	78fa      	ldrb	r2, [r7, #3]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	1a9b      	subs	r3, r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	3319      	adds	r3, #25
 80018d8:	7f3a      	ldrb	r2, [r7, #28]
 80018da:	701a      	strb	r2, [r3, #0]
 80018dc:	e009      	b.n	80018f2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018de:	78fa      	ldrb	r2, [r7, #3]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	011b      	lsls	r3, r3, #4
 80018e6:	1a9b      	subs	r3, r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	440b      	add	r3, r1
 80018ec:	332a      	adds	r3, #42	@ 0x2a
 80018ee:	2202      	movs	r2, #2
 80018f0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80018f2:	787b      	ldrb	r3, [r7, #1]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	f200 8102 	bhi.w	8001afe <HAL_HCD_HC_SubmitRequest+0x292>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_HCD_HC_SubmitRequest+0x94>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	08001911 	.word	0x08001911
 8001904:	08001ae9 	.word	0x08001ae9
 8001908:	080019d5 	.word	0x080019d5
 800190c:	08001a5f 	.word	0x08001a5f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001910:	7c3b      	ldrb	r3, [r7, #16]
 8001912:	2b01      	cmp	r3, #1
 8001914:	f040 80f5 	bne.w	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001918:	78bb      	ldrb	r3, [r7, #2]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d12d      	bne.n	800197a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800191e:	8b3b      	ldrh	r3, [r7, #24]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d109      	bne.n	8001938 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001924:	78fa      	ldrb	r2, [r7, #3]
 8001926:	6879      	ldr	r1, [r7, #4]
 8001928:	4613      	mov	r3, r2
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	1a9b      	subs	r3, r3, r2
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	333d      	adds	r3, #61	@ 0x3d
 8001934:	2201      	movs	r2, #1
 8001936:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001938:	78fa      	ldrb	r2, [r7, #3]
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	4613      	mov	r3, r2
 800193e:	011b      	lsls	r3, r3, #4
 8001940:	1a9b      	subs	r3, r3, r2
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	440b      	add	r3, r1
 8001946:	333d      	adds	r3, #61	@ 0x3d
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10a      	bne.n	8001964 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800194e:	78fa      	ldrb	r2, [r7, #3]
 8001950:	6879      	ldr	r1, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	011b      	lsls	r3, r3, #4
 8001956:	1a9b      	subs	r3, r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	332a      	adds	r3, #42	@ 0x2a
 800195e:	2200      	movs	r2, #0
 8001960:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001962:	e0ce      	b.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001964:	78fa      	ldrb	r2, [r7, #3]
 8001966:	6879      	ldr	r1, [r7, #4]
 8001968:	4613      	mov	r3, r2
 800196a:	011b      	lsls	r3, r3, #4
 800196c:	1a9b      	subs	r3, r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	440b      	add	r3, r1
 8001972:	332a      	adds	r3, #42	@ 0x2a
 8001974:	2202      	movs	r2, #2
 8001976:	701a      	strb	r2, [r3, #0]
      break;
 8001978:	e0c3      	b.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800197a:	78fa      	ldrb	r2, [r7, #3]
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	4613      	mov	r3, r2
 8001980:	011b      	lsls	r3, r3, #4
 8001982:	1a9b      	subs	r3, r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	440b      	add	r3, r1
 8001988:	331a      	adds	r3, #26
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	f040 80b8 	bne.w	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	1a9b      	subs	r3, r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	333c      	adds	r3, #60	@ 0x3c
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10a      	bne.n	80019be <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019a8:	78fa      	ldrb	r2, [r7, #3]
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	4613      	mov	r3, r2
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	1a9b      	subs	r3, r3, r2
 80019b2:	009b      	lsls	r3, r3, #2
 80019b4:	440b      	add	r3, r1
 80019b6:	332a      	adds	r3, #42	@ 0x2a
 80019b8:	2200      	movs	r2, #0
 80019ba:	701a      	strb	r2, [r3, #0]
      break;
 80019bc:	e0a1      	b.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019be:	78fa      	ldrb	r2, [r7, #3]
 80019c0:	6879      	ldr	r1, [r7, #4]
 80019c2:	4613      	mov	r3, r2
 80019c4:	011b      	lsls	r3, r3, #4
 80019c6:	1a9b      	subs	r3, r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	440b      	add	r3, r1
 80019cc:	332a      	adds	r3, #42	@ 0x2a
 80019ce:	2202      	movs	r2, #2
 80019d0:	701a      	strb	r2, [r3, #0]
      break;
 80019d2:	e096      	b.n	8001b02 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d120      	bne.n	8001a1c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019da:	78fa      	ldrb	r2, [r7, #3]
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4613      	mov	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	440b      	add	r3, r1
 80019e8:	333d      	adds	r3, #61	@ 0x3d
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f0:	78fa      	ldrb	r2, [r7, #3]
 80019f2:	6879      	ldr	r1, [r7, #4]
 80019f4:	4613      	mov	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	1a9b      	subs	r3, r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	440b      	add	r3, r1
 80019fe:	332a      	adds	r3, #42	@ 0x2a
 8001a00:	2200      	movs	r2, #0
 8001a02:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001a04:	e07e      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	332a      	adds	r3, #42	@ 0x2a
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e073      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4613      	mov	r3, r2
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	1a9b      	subs	r3, r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	440b      	add	r3, r1
 8001a2a:	333c      	adds	r3, #60	@ 0x3c
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d10a      	bne.n	8001a48 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a32:	78fa      	ldrb	r2, [r7, #3]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	1a9b      	subs	r3, r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	332a      	adds	r3, #42	@ 0x2a
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
      break;
 8001a46:	e05d      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	6879      	ldr	r1, [r7, #4]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	1a9b      	subs	r3, r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	440b      	add	r3, r1
 8001a56:	332a      	adds	r3, #42	@ 0x2a
 8001a58:	2202      	movs	r2, #2
 8001a5a:	701a      	strb	r2, [r3, #0]
      break;
 8001a5c:	e052      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001a5e:	78bb      	ldrb	r3, [r7, #2]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d120      	bne.n	8001aa6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001a64:	78fa      	ldrb	r2, [r7, #3]
 8001a66:	6879      	ldr	r1, [r7, #4]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	1a9b      	subs	r3, r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	440b      	add	r3, r1
 8001a72:	333d      	adds	r3, #61	@ 0x3d
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d10a      	bne.n	8001a90 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	6879      	ldr	r1, [r7, #4]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	011b      	lsls	r3, r3, #4
 8001a82:	1a9b      	subs	r3, r3, r2
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	440b      	add	r3, r1
 8001a88:	332a      	adds	r3, #42	@ 0x2a
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001a8e:	e039      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a90:	78fa      	ldrb	r2, [r7, #3]
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	4613      	mov	r3, r2
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	1a9b      	subs	r3, r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	440b      	add	r3, r1
 8001a9e:	332a      	adds	r3, #42	@ 0x2a
 8001aa0:	2202      	movs	r2, #2
 8001aa2:	701a      	strb	r2, [r3, #0]
      break;
 8001aa4:	e02e      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001aa6:	78fa      	ldrb	r2, [r7, #3]
 8001aa8:	6879      	ldr	r1, [r7, #4]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	1a9b      	subs	r3, r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	333c      	adds	r3, #60	@ 0x3c
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001abc:	78fa      	ldrb	r2, [r7, #3]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	011b      	lsls	r3, r3, #4
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	440b      	add	r3, r1
 8001aca:	332a      	adds	r3, #42	@ 0x2a
 8001acc:	2200      	movs	r2, #0
 8001ace:	701a      	strb	r2, [r3, #0]
      break;
 8001ad0:	e018      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ad2:	78fa      	ldrb	r2, [r7, #3]
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	011b      	lsls	r3, r3, #4
 8001ada:	1a9b      	subs	r3, r3, r2
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	440b      	add	r3, r1
 8001ae0:	332a      	adds	r3, #42	@ 0x2a
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	701a      	strb	r2, [r3, #0]
      break;
 8001ae6:	e00d      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ae8:	78fa      	ldrb	r2, [r7, #3]
 8001aea:	6879      	ldr	r1, [r7, #4]
 8001aec:	4613      	mov	r3, r2
 8001aee:	011b      	lsls	r3, r3, #4
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	440b      	add	r3, r1
 8001af6:	332a      	adds	r3, #42	@ 0x2a
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
      break;
 8001afc:	e002      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001afe:	bf00      	nop
 8001b00:	e000      	b.n	8001b04 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001b02:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001b04:	78fa      	ldrb	r2, [r7, #3]
 8001b06:	6879      	ldr	r1, [r7, #4]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	011b      	lsls	r3, r3, #4
 8001b0c:	1a9b      	subs	r3, r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	440b      	add	r3, r1
 8001b12:	332c      	adds	r3, #44	@ 0x2c
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001b18:	78fa      	ldrb	r2, [r7, #3]
 8001b1a:	8b39      	ldrh	r1, [r7, #24]
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	1a9b      	subs	r3, r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	4403      	add	r3, r0
 8001b28:	3334      	adds	r3, #52	@ 0x34
 8001b2a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001b2c:	78fa      	ldrb	r2, [r7, #3]
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	011b      	lsls	r3, r3, #4
 8001b34:	1a9b      	subs	r3, r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	334c      	adds	r3, #76	@ 0x4c
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001b40:	78fa      	ldrb	r2, [r7, #3]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	011b      	lsls	r3, r3, #4
 8001b48:	1a9b      	subs	r3, r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3338      	adds	r3, #56	@ 0x38
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b54:	78fa      	ldrb	r2, [r7, #3]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	011b      	lsls	r3, r3, #4
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3315      	adds	r3, #21
 8001b64:	78fa      	ldrb	r2, [r7, #3]
 8001b66:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001b68:	78fa      	ldrb	r2, [r7, #3]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	011b      	lsls	r3, r3, #4
 8001b70:	1a9b      	subs	r3, r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	334d      	adds	r3, #77	@ 0x4d
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6818      	ldr	r0, [r3, #0]
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	4613      	mov	r3, r2
 8001b84:	011b      	lsls	r3, r3, #4
 8001b86:	1a9b      	subs	r3, r3, r2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	3310      	adds	r3, #16
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	1d19      	adds	r1, r3, #4
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	799b      	ldrb	r3, [r3, #6]
 8001b96:	461a      	mov	r2, r3
 8001b98:	f004 fbf6 	bl	8006388 <USB_HC_StartXfer>
 8001b9c:	4603      	mov	r3, r0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop

08001ba8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 f8ea 	bl	8005d98 <USB_GetMode>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	f040 80fb 	bne.w	8001dc2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f004 f8ad 	bl	8005d30 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80f1 	beq.w	8001dc0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f004 f8a4 	bl	8005d30 <USB_ReadInterrupts>
 8001be8:	4603      	mov	r3, r0
 8001bea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001bf2:	d104      	bne.n	8001bfe <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001bfc:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f004 f894 	bl	8005d30 <USB_ReadInterrupts>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c12:	d104      	bne.n	8001c1e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001c1c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f004 f884 	bl	8005d30 <USB_ReadInterrupts>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c2e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001c32:	d104      	bne.n	8001c3e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001c3c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f004 f874 	bl	8005d30 <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d103      	bne.n	8001c5a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2202      	movs	r2, #2
 8001c58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f004 f866 	bl	8005d30 <USB_ReadInterrupts>
 8001c64:	4603      	mov	r3, r0
 8001c66:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c6e:	d120      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001c78:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0301 	and.w	r3, r3, #1
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d113      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001c8a:	2110      	movs	r1, #16
 8001c8c:	6938      	ldr	r0, [r7, #16]
 8001c8e:	f003 ff59 	bl	8005b44 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001c92:	6938      	ldr	r0, [r7, #16]
 8001c94:	f003 ff88 	bl	8005ba8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	7a5b      	ldrb	r3, [r3, #9]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d105      	bne.n	8001cac <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f004 f97a 	bl	8005fa0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f007 f941 	bl	8008f34 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f004 f83a 	bl	8005d30 <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cc6:	d102      	bne.n	8001cce <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f001 fd4d 	bl	8003768 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f004 f82c 	bl	8005d30 <USB_ReadInterrupts>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	f003 0308 	and.w	r3, r3, #8
 8001cde:	2b08      	cmp	r3, #8
 8001ce0:	d106      	bne.n	8001cf0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f007 f90a 	bl	8008efc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2208      	movs	r2, #8
 8001cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f004 f81b 	bl	8005d30 <USB_ReadInterrupts>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d04:	d139      	bne.n	8001d7a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f004 fdb6 	bl	800687c <USB_HC_ReadInterrupt>
 8001d10:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
 8001d16:	e025      	b.n	8001d64 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
 8001d24:	f003 0301 	and.w	r3, r3, #1
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	015a      	lsls	r2, r3, #5
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d42:	d106      	bne.n	8001d52 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f905 	bl	8001f5a <HCD_HC_IN_IRQHandler>
 8001d50:	e005      	b.n	8001d5e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	4619      	mov	r1, r3
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 ff67 	bl	8002c2c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	3301      	adds	r3, #1
 8001d62:	617b      	str	r3, [r7, #20]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	795b      	ldrb	r3, [r3, #5]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d3d3      	bcc.n	8001d18 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 ffd6 	bl	8005d30 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d101      	bne.n	8001d92 <HAL_HCD_IRQHandler+0x1ea>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <HAL_HCD_IRQHandler+0x1ec>
 8001d92:	2300      	movs	r3, #0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d014      	beq.n	8001dc2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	699a      	ldr	r2, [r3, #24]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0210 	bic.w	r2, r2, #16
 8001da6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f001 fbfe 	bl	80035aa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0210 	orr.w	r2, r2, #16
 8001dbc:	619a      	str	r2, [r3, #24]
 8001dbe:	e000      	b.n	8001dc2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001dc0:	bf00      	nop
    }
  }
}
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d101      	bne.n	8001dde <HAL_HCD_Start+0x16>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e013      	b.n	8001e06 <HAL_HCD_Start+0x3e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2101      	movs	r1, #1
 8001dec:	4618      	mov	r0, r3
 8001dee:	f004 f93e 	bl	800606e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fe36 	bl	8005a68 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b082      	sub	sp, #8
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d101      	bne.n	8001e24 <HAL_HCD_Stop+0x16>
 8001e20:	2302      	movs	r3, #2
 8001e22:	e00d      	b.n	8001e40 <HAL_HCD_Stop+0x32>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fe91 	bl	8006b58 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f004 f8e0 	bl	800601a <USB_ResetPort>
 8001e5a:	4603      	mov	r3, r0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3708      	adds	r7, #8
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001e70:	78fa      	ldrb	r2, [r7, #3]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	1a9b      	subs	r3, r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	334c      	adds	r3, #76	@ 0x4c
 8001e80:	781b      	ldrb	r3, [r3, #0]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001e8e:	b480      	push	{r7}
 8001e90:	b083      	sub	sp, #12
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
 8001e96:	460b      	mov	r3, r1
 8001e98:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001e9a:	78fa      	ldrb	r2, [r7, #3]
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	1a9b      	subs	r3, r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	440b      	add	r3, r1
 8001ea8:	3338      	adds	r3, #56	@ 0x38
 8001eaa:	681b      	ldr	r3, [r3, #0]
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f004 f922 	bl	800610e <USB_GetCurrentFrame>
 8001eca:	4603      	mov	r3, r0
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f004 f8fd 	bl	80060e0 <USB_GetHostSpeed>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001efc:	78fa      	ldrb	r2, [r7, #3]
 8001efe:	6879      	ldr	r1, [r7, #4]
 8001f00:	4613      	mov	r3, r2
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	1a9b      	subs	r3, r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	331a      	adds	r3, #26
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001f10:	78fa      	ldrb	r2, [r7, #3]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	011b      	lsls	r3, r3, #4
 8001f18:	1a9b      	subs	r3, r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	331b      	adds	r3, #27
 8001f20:	2200      	movs	r2, #0
 8001f22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	3325      	adds	r3, #37	@ 0x25
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001f38:	78fa      	ldrb	r2, [r7, #3]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	011b      	lsls	r3, r3, #4
 8001f40:	1a9b      	subs	r3, r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3324      	adds	r3, #36	@ 0x24
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b086      	sub	sp, #24
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
 8001f62:	460b      	mov	r3, r1
 8001f64:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	78fa      	ldrb	r2, [r7, #3]
 8001f76:	4611      	mov	r1, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f003 feec 	bl	8005d56 <USB_ReadChInterrupts>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b04      	cmp	r3, #4
 8001f86:	d11a      	bne.n	8001fbe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f94:	461a      	mov	r2, r3
 8001f96:	2304      	movs	r3, #4
 8001f98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	334d      	adds	r3, #77	@ 0x4d
 8001faa:	2207      	movs	r2, #7
 8001fac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4611      	mov	r1, r2
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f004 fc71 	bl	800689e <USB_HC_Halt>
 8001fbc:	e09e      	b.n	80020fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	78fa      	ldrb	r2, [r7, #3]
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fec5 	bl	8005d56 <USB_ReadChInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001fd6:	d11b      	bne.n	8002010 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	015a      	lsls	r2, r3, #5
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4413      	add	r3, r2
 8001fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001fe4:	461a      	mov	r2, r3
 8001fe6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001fec:	78fa      	ldrb	r2, [r7, #3]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	011b      	lsls	r3, r3, #4
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	334d      	adds	r3, #77	@ 0x4d
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	78fa      	ldrb	r2, [r7, #3]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f004 fc48 	bl	800689e <USB_HC_Halt>
 800200e:	e075      	b.n	80020fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	78fa      	ldrb	r2, [r7, #3]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f003 fe9c 	bl	8005d56 <USB_ReadChInterrupts>
 800201e:	4603      	mov	r3, r0
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	2b08      	cmp	r3, #8
 8002026:	d11a      	bne.n	800205e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002034:	461a      	mov	r2, r3
 8002036:	2308      	movs	r3, #8
 8002038:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	334d      	adds	r3, #77	@ 0x4d
 800204a:	2206      	movs	r2, #6
 800204c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	4611      	mov	r1, r2
 8002056:	4618      	mov	r0, r3
 8002058:	f004 fc21 	bl	800689e <USB_HC_Halt>
 800205c:	e04e      	b.n	80020fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	78fa      	ldrb	r2, [r7, #3]
 8002064:	4611      	mov	r1, r2
 8002066:	4618      	mov	r0, r3
 8002068:	f003 fe75 	bl	8005d56 <USB_ReadChInterrupts>
 800206c:	4603      	mov	r3, r0
 800206e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002076:	d11b      	bne.n	80020b0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002078:	78fb      	ldrb	r3, [r7, #3]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002084:	461a      	mov	r2, r3
 8002086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800208a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800208c:	78fa      	ldrb	r2, [r7, #3]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	011b      	lsls	r3, r3, #4
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	334d      	adds	r3, #77	@ 0x4d
 800209c:	2209      	movs	r2, #9
 800209e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 fbf8 	bl	800689e <USB_HC_Halt>
 80020ae:	e025      	b.n	80020fc <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	78fa      	ldrb	r2, [r7, #3]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f003 fe4c 	bl	8005d56 <USB_ReadChInterrupts>
 80020be:	4603      	mov	r3, r0
 80020c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020c4:	2b80      	cmp	r3, #128	@ 0x80
 80020c6:	d119      	bne.n	80020fc <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80020c8:	78fb      	ldrb	r3, [r7, #3]
 80020ca:	015a      	lsls	r2, r3, #5
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	4413      	add	r3, r2
 80020d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020d4:	461a      	mov	r2, r3
 80020d6:	2380      	movs	r3, #128	@ 0x80
 80020d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	334d      	adds	r3, #77	@ 0x4d
 80020ea:	2207      	movs	r2, #7
 80020ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	78fa      	ldrb	r2, [r7, #3]
 80020f4:	4611      	mov	r1, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 fbd1 	bl	800689e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	4611      	mov	r1, r2
 8002104:	4618      	mov	r0, r3
 8002106:	f003 fe26 	bl	8005d56 <USB_ReadChInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002110:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002114:	d112      	bne.n	800213c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	4611      	mov	r1, r2
 800211e:	4618      	mov	r0, r3
 8002120:	f004 fbbd 	bl	800689e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	015a      	lsls	r2, r3, #5
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	4413      	add	r3, r2
 800212c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002130:	461a      	mov	r2, r3
 8002132:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002136:	6093      	str	r3, [r2, #8]
 8002138:	f000 bd75 	b.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	78fa      	ldrb	r2, [r7, #3]
 8002142:	4611      	mov	r1, r2
 8002144:	4618      	mov	r0, r3
 8002146:	f003 fe06 	bl	8005d56 <USB_ReadChInterrupts>
 800214a:	4603      	mov	r3, r0
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b01      	cmp	r3, #1
 8002152:	f040 8128 	bne.w	80023a6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2320      	movs	r3, #32
 8002166:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002168:	78fa      	ldrb	r2, [r7, #3]
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	4613      	mov	r3, r2
 800216e:	011b      	lsls	r3, r3, #4
 8002170:	1a9b      	subs	r3, r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	440b      	add	r3, r1
 8002176:	331b      	adds	r3, #27
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d119      	bne.n	80021b2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800217e:	78fa      	ldrb	r2, [r7, #3]
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	4613      	mov	r3, r2
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	1a9b      	subs	r3, r3, r2
 8002188:	009b      	lsls	r3, r3, #2
 800218a:	440b      	add	r3, r1
 800218c:	331b      	adds	r3, #27
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	015a      	lsls	r2, r3, #5
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	4413      	add	r3, r2
 800219a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	0151      	lsls	r1, r2, #5
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	440a      	add	r2, r1
 80021a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80021ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	799b      	ldrb	r3, [r3, #6]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01b      	beq.n	80021f2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3330      	adds	r3, #48	@ 0x30
 80021ca:	6819      	ldr	r1, [r3, #0]
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	015a      	lsls	r2, r3, #5
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	4413      	add	r3, r2
 80021d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	78fa      	ldrb	r2, [r7, #3]
 80021e0:	1ac9      	subs	r1, r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	011b      	lsls	r3, r3, #4
 80021e8:	1a9b      	subs	r3, r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4403      	add	r3, r0
 80021ee:	3338      	adds	r3, #56	@ 0x38
 80021f0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	334d      	adds	r3, #77	@ 0x4d
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002206:	78fa      	ldrb	r2, [r7, #3]
 8002208:	6879      	ldr	r1, [r7, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	1a9b      	subs	r3, r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3344      	adds	r3, #68	@ 0x44
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800221a:	78fb      	ldrb	r3, [r7, #3]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002226:	461a      	mov	r2, r3
 8002228:	2301      	movs	r3, #1
 800222a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3326      	adds	r3, #38	@ 0x26
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	3326      	adds	r3, #38	@ 0x26
 8002252:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002254:	2b02      	cmp	r3, #2
 8002256:	d110      	bne.n	800227a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f004 fb1c 	bl	800689e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	015a      	lsls	r2, r3, #5
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4413      	add	r3, r2
 800226e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002272:	461a      	mov	r2, r3
 8002274:	2310      	movs	r3, #16
 8002276:	6093      	str	r3, [r2, #8]
 8002278:	e03d      	b.n	80022f6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800227a:	78fa      	ldrb	r2, [r7, #3]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	1a9b      	subs	r3, r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3326      	adds	r3, #38	@ 0x26
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b03      	cmp	r3, #3
 800228e:	d00a      	beq.n	80022a6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002290:	78fa      	ldrb	r2, [r7, #3]
 8002292:	6879      	ldr	r1, [r7, #4]
 8002294:	4613      	mov	r3, r2
 8002296:	011b      	lsls	r3, r3, #4
 8002298:	1a9b      	subs	r3, r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	3326      	adds	r3, #38	@ 0x26
 80022a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d127      	bne.n	80022f6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	015a      	lsls	r2, r3, #5
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4413      	add	r3, r2
 80022ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	78fa      	ldrb	r2, [r7, #3]
 80022b6:	0151      	lsls	r1, r2, #5
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	440a      	add	r2, r1
 80022bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80022c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80022c4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	4613      	mov	r3, r2
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	1a9b      	subs	r3, r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	334c      	adds	r3, #76	@ 0x4c
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	334c      	adds	r3, #76	@ 0x4c
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	78fb      	ldrb	r3, [r7, #3]
 80022ee:	4619      	mov	r1, r3
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f006 fe2d 	bl	8008f50 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	799b      	ldrb	r3, [r3, #6]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d13b      	bne.n	8002376 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80022fe:	78fa      	ldrb	r2, [r7, #3]
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	440b      	add	r3, r1
 800230c:	3338      	adds	r3, #56	@ 0x38
 800230e:	6819      	ldr	r1, [r3, #0]
 8002310:	78fa      	ldrb	r2, [r7, #3]
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	4613      	mov	r3, r2
 8002316:	011b      	lsls	r3, r3, #4
 8002318:	1a9b      	subs	r3, r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4403      	add	r3, r0
 800231e:	3328      	adds	r3, #40	@ 0x28
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	440b      	add	r3, r1
 8002324:	1e59      	subs	r1, r3, #1
 8002326:	78fa      	ldrb	r2, [r7, #3]
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4403      	add	r3, r0
 8002334:	3328      	adds	r3, #40	@ 0x28
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	fbb1 f3f3 	udiv	r3, r1, r3
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	f000 8470 	beq.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002346:	78fa      	ldrb	r2, [r7, #3]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	333c      	adds	r3, #60	@ 0x3c
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	78fa      	ldrb	r2, [r7, #3]
 800235a:	f083 0301 	eor.w	r3, r3, #1
 800235e:	b2d8      	uxtb	r0, r3
 8002360:	6879      	ldr	r1, [r7, #4]
 8002362:	4613      	mov	r3, r2
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	440b      	add	r3, r1
 800236c:	333c      	adds	r3, #60	@ 0x3c
 800236e:	4602      	mov	r2, r0
 8002370:	701a      	strb	r2, [r3, #0]
 8002372:	f000 bc58 	b.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002376:	78fa      	ldrb	r2, [r7, #3]
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	1a9b      	subs	r3, r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	333c      	adds	r3, #60	@ 0x3c
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	f083 0301 	eor.w	r3, r3, #1
 800238e:	b2d8      	uxtb	r0, r3
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	1a9b      	subs	r3, r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	333c      	adds	r3, #60	@ 0x3c
 800239e:	4602      	mov	r2, r0
 80023a0:	701a      	strb	r2, [r3, #0]
 80023a2:	f000 bc40 	b.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	78fa      	ldrb	r2, [r7, #3]
 80023ac:	4611      	mov	r1, r2
 80023ae:	4618      	mov	r0, r3
 80023b0:	f003 fcd1 	bl	8005d56 <USB_ReadChInterrupts>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d131      	bne.n	8002422 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	015a      	lsls	r2, r3, #5
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4413      	add	r3, r2
 80023c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023ca:	461a      	mov	r2, r3
 80023cc:	2320      	movs	r3, #32
 80023ce:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80023d0:	78fa      	ldrb	r2, [r7, #3]
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	4613      	mov	r3, r2
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	1a9b      	subs	r3, r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	440b      	add	r3, r1
 80023de:	331a      	adds	r3, #26
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	f040 841f 	bne.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	6879      	ldr	r1, [r7, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	011b      	lsls	r3, r3, #4
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	331b      	adds	r3, #27
 80023f8:	2201      	movs	r2, #1
 80023fa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	334d      	adds	r3, #77	@ 0x4d
 800240c:	2203      	movs	r2, #3
 800240e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fa40 	bl	800689e <USB_HC_Halt>
 800241e:	f000 bc02 	b.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fc93 	bl	8005d56 <USB_ReadChInterrupts>
 8002430:	4603      	mov	r3, r0
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b02      	cmp	r3, #2
 8002438:	f040 8305 	bne.w	8002a46 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800243c:	78fb      	ldrb	r3, [r7, #3]
 800243e:	015a      	lsls	r2, r3, #5
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4413      	add	r3, r2
 8002444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002448:	461a      	mov	r2, r3
 800244a:	2302      	movs	r3, #2
 800244c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	334d      	adds	r3, #77	@ 0x4d
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d114      	bne.n	800248e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	6879      	ldr	r1, [r7, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	011b      	lsls	r3, r3, #4
 800246c:	1a9b      	subs	r3, r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	440b      	add	r3, r1
 8002472:	334d      	adds	r3, #77	@ 0x4d
 8002474:	2202      	movs	r2, #2
 8002476:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	334c      	adds	r3, #76	@ 0x4c
 8002488:	2201      	movs	r2, #1
 800248a:	701a      	strb	r2, [r3, #0]
 800248c:	e2cc      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800248e:	78fa      	ldrb	r2, [r7, #3]
 8002490:	6879      	ldr	r1, [r7, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	334d      	adds	r3, #77	@ 0x4d
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	2b06      	cmp	r3, #6
 80024a2:	d114      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	334d      	adds	r3, #77	@ 0x4d
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2205      	movs	r2, #5
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	e2ac      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	334d      	adds	r3, #77	@ 0x4d
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b07      	cmp	r3, #7
 80024e2:	d00b      	beq.n	80024fc <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	334d      	adds	r3, #77	@ 0x4d
 80024f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80024f6:	2b09      	cmp	r3, #9
 80024f8:	f040 80a6 	bne.w	8002648 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	334d      	adds	r3, #77	@ 0x4d
 800250c:	2202      	movs	r2, #2
 800250e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	3344      	adds	r3, #68	@ 0x44
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	1c59      	adds	r1, r3, #1
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	4403      	add	r3, r0
 8002530:	3344      	adds	r3, #68	@ 0x44
 8002532:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002534:	78fa      	ldrb	r2, [r7, #3]
 8002536:	6879      	ldr	r1, [r7, #4]
 8002538:	4613      	mov	r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	1a9b      	subs	r3, r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	3344      	adds	r3, #68	@ 0x44
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d943      	bls.n	80025d2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800254a:	78fa      	ldrb	r2, [r7, #3]
 800254c:	6879      	ldr	r1, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	011b      	lsls	r3, r3, #4
 8002552:	1a9b      	subs	r3, r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	3344      	adds	r3, #68	@ 0x44
 800255a:	2200      	movs	r2, #0
 800255c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	331a      	adds	r3, #26
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d123      	bne.n	80025bc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002574:	78fa      	ldrb	r2, [r7, #3]
 8002576:	6879      	ldr	r1, [r7, #4]
 8002578:	4613      	mov	r3, r2
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	1a9b      	subs	r3, r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	331b      	adds	r3, #27
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002588:	78fa      	ldrb	r2, [r7, #3]
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	4613      	mov	r3, r2
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	1a9b      	subs	r3, r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	331c      	adds	r3, #28
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800259c:	78fb      	ldrb	r3, [r7, #3]
 800259e:	015a      	lsls	r2, r3, #5
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4413      	add	r3, r2
 80025a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	78fa      	ldrb	r2, [r7, #3]
 80025ac:	0151      	lsls	r1, r2, #5
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	440a      	add	r2, r1
 80025b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80025b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025ba:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334c      	adds	r3, #76	@ 0x4c
 80025cc:	2204      	movs	r2, #4
 80025ce:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80025d0:	e229      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025d2:	78fa      	ldrb	r2, [r7, #3]
 80025d4:	6879      	ldr	r1, [r7, #4]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	334c      	adds	r3, #76	@ 0x4c
 80025e2:	2202      	movs	r2, #2
 80025e4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025e6:	78fa      	ldrb	r2, [r7, #3]
 80025e8:	6879      	ldr	r1, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	011b      	lsls	r3, r3, #4
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3326      	adds	r3, #38	@ 0x26
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025fc:	78fa      	ldrb	r2, [r7, #3]
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	4613      	mov	r3, r2
 8002602:	011b      	lsls	r3, r3, #4
 8002604:	1a9b      	subs	r3, r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	3326      	adds	r3, #38	@ 0x26
 800260c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800260e:	2b02      	cmp	r3, #2
 8002610:	f040 8209 	bne.w	8002a26 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002614:	78fb      	ldrb	r3, [r7, #3]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800262a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002632:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	015a      	lsls	r2, r3, #5
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	4413      	add	r3, r2
 800263c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002640:	461a      	mov	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002646:	e1ee      	b.n	8002a26 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	334d      	adds	r3, #77	@ 0x4d
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b05      	cmp	r3, #5
 800265c:	f040 80c8 	bne.w	80027f0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	334d      	adds	r3, #77	@ 0x4d
 8002670:	2202      	movs	r2, #2
 8002672:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	331b      	adds	r3, #27
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b01      	cmp	r3, #1
 8002688:	f040 81ce 	bne.w	8002a28 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	6879      	ldr	r1, [r7, #4]
 8002690:	4613      	mov	r3, r2
 8002692:	011b      	lsls	r3, r3, #4
 8002694:	1a9b      	subs	r3, r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	3326      	adds	r3, #38	@ 0x26
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b03      	cmp	r3, #3
 80026a0:	d16b      	bne.n	800277a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80026a2:	78fa      	ldrb	r2, [r7, #3]
 80026a4:	6879      	ldr	r1, [r7, #4]
 80026a6:	4613      	mov	r3, r2
 80026a8:	011b      	lsls	r3, r3, #4
 80026aa:	1a9b      	subs	r3, r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	3348      	adds	r3, #72	@ 0x48
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	1c59      	adds	r1, r3, #1
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	011b      	lsls	r3, r3, #4
 80026bc:	1a9b      	subs	r3, r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	4403      	add	r3, r0
 80026c2:	3348      	adds	r3, #72	@ 0x48
 80026c4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80026c6:	78fa      	ldrb	r2, [r7, #3]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	011b      	lsls	r3, r3, #4
 80026ce:	1a9b      	subs	r3, r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	3348      	adds	r3, #72	@ 0x48
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d943      	bls.n	8002764 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80026dc:	78fa      	ldrb	r2, [r7, #3]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	011b      	lsls	r3, r3, #4
 80026e4:	1a9b      	subs	r3, r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	3348      	adds	r3, #72	@ 0x48
 80026ec:	2200      	movs	r2, #0
 80026ee:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	6879      	ldr	r1, [r7, #4]
 80026f4:	4613      	mov	r3, r2
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	1a9b      	subs	r3, r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	331b      	adds	r3, #27
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	4613      	mov	r3, r2
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	1a9b      	subs	r3, r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	3344      	adds	r3, #68	@ 0x44
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b02      	cmp	r3, #2
 8002718:	d809      	bhi.n	800272e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800271a:	78fa      	ldrb	r2, [r7, #3]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4613      	mov	r3, r2
 8002720:	011b      	lsls	r3, r3, #4
 8002722:	1a9b      	subs	r3, r3, r2
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	440b      	add	r3, r1
 8002728:	331c      	adds	r3, #28
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800272e:	78fb      	ldrb	r3, [r7, #3]
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	4413      	add	r3, r2
 8002736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	78fa      	ldrb	r2, [r7, #3]
 800273e:	0151      	lsls	r1, r2, #5
 8002740:	693a      	ldr	r2, [r7, #16]
 8002742:	440a      	add	r2, r1
 8002744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002748:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800274c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800274e:	78fa      	ldrb	r2, [r7, #3]
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	4613      	mov	r3, r2
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	1a9b      	subs	r3, r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	334c      	adds	r3, #76	@ 0x4c
 800275e:	2204      	movs	r2, #4
 8002760:	701a      	strb	r2, [r3, #0]
 8002762:	e014      	b.n	800278e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	6879      	ldr	r1, [r7, #4]
 8002768:	4613      	mov	r3, r2
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	440b      	add	r3, r1
 8002772:	334c      	adds	r3, #76	@ 0x4c
 8002774:	2202      	movs	r2, #2
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	e009      	b.n	800278e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	334c      	adds	r3, #76	@ 0x4c
 800278a:	2202      	movs	r2, #2
 800278c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800278e:	78fa      	ldrb	r2, [r7, #3]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	1a9b      	subs	r3, r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	3326      	adds	r3, #38	@ 0x26
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00b      	beq.n	80027bc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027a4:	78fa      	ldrb	r2, [r7, #3]
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	4613      	mov	r3, r2
 80027aa:	011b      	lsls	r3, r3, #4
 80027ac:	1a9b      	subs	r3, r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	440b      	add	r3, r1
 80027b2:	3326      	adds	r3, #38	@ 0x26
 80027b4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	f040 8136 	bne.w	8002a28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80027d2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80027da:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80027dc:	78fb      	ldrb	r3, [r7, #3]
 80027de:	015a      	lsls	r2, r3, #5
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	4413      	add	r3, r2
 80027e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027e8:	461a      	mov	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	e11b      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80027f0:	78fa      	ldrb	r2, [r7, #3]
 80027f2:	6879      	ldr	r1, [r7, #4]
 80027f4:	4613      	mov	r3, r2
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	1a9b      	subs	r3, r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	440b      	add	r3, r1
 80027fe:	334d      	adds	r3, #77	@ 0x4d
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b03      	cmp	r3, #3
 8002804:	f040 8081 	bne.w	800290a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002808:	78fa      	ldrb	r2, [r7, #3]
 800280a:	6879      	ldr	r1, [r7, #4]
 800280c:	4613      	mov	r3, r2
 800280e:	011b      	lsls	r3, r3, #4
 8002810:	1a9b      	subs	r3, r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	440b      	add	r3, r1
 8002816:	334d      	adds	r3, #77	@ 0x4d
 8002818:	2202      	movs	r2, #2
 800281a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800281c:	78fa      	ldrb	r2, [r7, #3]
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	4613      	mov	r3, r2
 8002822:	011b      	lsls	r3, r3, #4
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	440b      	add	r3, r1
 800282a:	331b      	adds	r3, #27
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b01      	cmp	r3, #1
 8002830:	f040 80fa 	bne.w	8002a28 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002834:	78fa      	ldrb	r2, [r7, #3]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	1a9b      	subs	r3, r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	334c      	adds	r3, #76	@ 0x4c
 8002844:	2202      	movs	r2, #2
 8002846:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002848:	78fb      	ldrb	r3, [r7, #3]
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	4413      	add	r3, r2
 8002850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	78fa      	ldrb	r2, [r7, #3]
 8002858:	0151      	lsls	r1, r2, #5
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	440a      	add	r2, r1
 800285e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002866:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002868:	78fb      	ldrb	r3, [r7, #3]
 800286a:	015a      	lsls	r2, r3, #5
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4413      	add	r3, r2
 8002870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	78fa      	ldrb	r2, [r7, #3]
 8002878:	0151      	lsls	r1, r2, #5
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	440a      	add	r2, r1
 800287e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002886:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	015a      	lsls	r2, r3, #5
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	4413      	add	r3, r2
 8002890:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	0151      	lsls	r1, r2, #5
 800289a:	693a      	ldr	r2, [r7, #16]
 800289c:	440a      	add	r2, r1
 800289e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028a2:	f023 0320 	bic.w	r3, r3, #32
 80028a6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	3326      	adds	r3, #38	@ 0x26
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00b      	beq.n	80028d6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	3326      	adds	r3, #38	@ 0x26
 80028ce:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	f040 80a9 	bne.w	8002a28 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80028d6:	78fb      	ldrb	r3, [r7, #3]
 80028d8:	015a      	lsls	r2, r3, #5
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4413      	add	r3, r2
 80028de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80028ec:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80028f4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	015a      	lsls	r2, r3, #5
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	4413      	add	r3, r2
 80028fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002902:	461a      	mov	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6013      	str	r3, [r2, #0]
 8002908:	e08e      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800290a:	78fa      	ldrb	r2, [r7, #3]
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	4613      	mov	r3, r2
 8002910:	011b      	lsls	r3, r3, #4
 8002912:	1a9b      	subs	r3, r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	440b      	add	r3, r1
 8002918:	334d      	adds	r3, #77	@ 0x4d
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b04      	cmp	r3, #4
 800291e:	d143      	bne.n	80029a8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002920:	78fa      	ldrb	r2, [r7, #3]
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	440b      	add	r3, r1
 800292e:	334d      	adds	r3, #77	@ 0x4d
 8002930:	2202      	movs	r2, #2
 8002932:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	4613      	mov	r3, r2
 800293a:	011b      	lsls	r3, r3, #4
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	440b      	add	r3, r1
 8002942:	334c      	adds	r3, #76	@ 0x4c
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002948:	78fa      	ldrb	r2, [r7, #3]
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	4613      	mov	r3, r2
 800294e:	011b      	lsls	r3, r3, #4
 8002950:	1a9b      	subs	r3, r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	440b      	add	r3, r1
 8002956:	3326      	adds	r3, #38	@ 0x26
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d00a      	beq.n	8002974 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3326      	adds	r3, #38	@ 0x26
 800296e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002970:	2b02      	cmp	r3, #2
 8002972:	d159      	bne.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002974:	78fb      	ldrb	r3, [r7, #3]
 8002976:	015a      	lsls	r2, r3, #5
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	4413      	add	r3, r2
 800297c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800298a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002992:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002994:	78fb      	ldrb	r3, [r7, #3]
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4413      	add	r3, r2
 800299c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6013      	str	r3, [r2, #0]
 80029a6:	e03f      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80029a8:	78fa      	ldrb	r2, [r7, #3]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	4613      	mov	r3, r2
 80029ae:	011b      	lsls	r3, r3, #4
 80029b0:	1a9b      	subs	r3, r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	334d      	adds	r3, #77	@ 0x4d
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b08      	cmp	r3, #8
 80029bc:	d126      	bne.n	8002a0c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	334d      	adds	r3, #77	@ 0x4d
 80029ce:	2202      	movs	r2, #2
 80029d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80029d2:	78fa      	ldrb	r2, [r7, #3]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	011b      	lsls	r3, r3, #4
 80029da:	1a9b      	subs	r3, r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	440b      	add	r3, r1
 80029e0:	3344      	adds	r3, #68	@ 0x44
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	1c59      	adds	r1, r3, #1
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	011b      	lsls	r3, r3, #4
 80029ec:	1a9b      	subs	r3, r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4403      	add	r3, r0
 80029f2:	3344      	adds	r3, #68	@ 0x44
 80029f4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80029f6:	78fa      	ldrb	r2, [r7, #3]
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	4613      	mov	r3, r2
 80029fc:	011b      	lsls	r3, r3, #4
 80029fe:	1a9b      	subs	r3, r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	440b      	add	r3, r1
 8002a04:	334c      	adds	r3, #76	@ 0x4c
 8002a06:	2204      	movs	r2, #4
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e00d      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002a0c:	78fa      	ldrb	r2, [r7, #3]
 8002a0e:	6879      	ldr	r1, [r7, #4]
 8002a10:	4613      	mov	r3, r2
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	334d      	adds	r3, #77	@ 0x4d
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	f000 8100 	beq.w	8002c24 <HCD_HC_IN_IRQHandler+0xcca>
 8002a24:	e000      	b.n	8002a28 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002a26:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	1a9b      	subs	r3, r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	440b      	add	r3, r1
 8002a36:	334c      	adds	r3, #76	@ 0x4c
 8002a38:	781a      	ldrb	r2, [r3, #0]
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f006 fa86 	bl	8008f50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a44:	e0ef      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	78fa      	ldrb	r2, [r7, #3]
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f003 f981 	bl	8005d56 <USB_ReadChInterrupts>
 8002a54:	4603      	mov	r3, r0
 8002a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a5a:	2b40      	cmp	r3, #64	@ 0x40
 8002a5c:	d12f      	bne.n	8002abe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	2340      	movs	r3, #64	@ 0x40
 8002a6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002a70:	78fa      	ldrb	r2, [r7, #3]
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	4613      	mov	r3, r2
 8002a76:	011b      	lsls	r3, r3, #4
 8002a78:	1a9b      	subs	r3, r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	334d      	adds	r3, #77	@ 0x4d
 8002a80:	2205      	movs	r2, #5
 8002a82:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	331a      	adds	r3, #26
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a9a:	78fa      	ldrb	r2, [r7, #3]
 8002a9c:	6879      	ldr	r1, [r7, #4]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	1a9b      	subs	r3, r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	440b      	add	r3, r1
 8002aa8:	3344      	adds	r3, #68	@ 0x44
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	78fa      	ldrb	r2, [r7, #3]
 8002ab4:	4611      	mov	r1, r2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f003 fef1 	bl	800689e <USB_HC_Halt>
 8002abc:	e0b3      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	78fa      	ldrb	r2, [r7, #3]
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 f945 	bl	8005d56 <USB_ReadChInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f003 0310 	and.w	r3, r3, #16
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	f040 80a7 	bne.w	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	3326      	adds	r3, #38	@ 0x26
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b03      	cmp	r3, #3
 8002aec:	d11b      	bne.n	8002b26 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	3344      	adds	r3, #68	@ 0x44
 8002afe:	2200      	movs	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	334d      	adds	r3, #77	@ 0x4d
 8002b12:	2204      	movs	r2, #4
 8002b14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	78fa      	ldrb	r2, [r7, #3]
 8002b1c:	4611      	mov	r1, r2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f003 febd 	bl	800689e <USB_HC_Halt>
 8002b24:	e03f      	b.n	8002ba6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3326      	adds	r3, #38	@ 0x26
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3326      	adds	r3, #38	@ 0x26
 8002b4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d129      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3344      	adds	r3, #68	@ 0x44
 8002b62:	2200      	movs	r2, #0
 8002b64:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	799b      	ldrb	r3, [r3, #6]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <HCD_HC_IN_IRQHandler+0xc2a>
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d110      	bne.n	8002ba6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	6879      	ldr	r1, [r7, #4]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	1a9b      	subs	r3, r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	334d      	adds	r3, #77	@ 0x4d
 8002b94:	2204      	movs	r2, #4
 8002b96:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f003 fe7c 	bl	800689e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	331b      	adds	r3, #27
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d129      	bne.n	8002c10 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331b      	adds	r3, #27
 8002bcc:	2200      	movs	r2, #0
 8002bce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	015a      	lsls	r2, r3, #5
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	0151      	lsls	r1, r2, #5
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	440a      	add	r2, r1
 8002be6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002bea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bee:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002bf0:	78fb      	ldrb	r3, [r7, #3]
 8002bf2:	015a      	lsls	r2, r3, #5
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	0151      	lsls	r1, r2, #5
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	440a      	add	r2, r1
 8002c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c0a:	f043 0320 	orr.w	r3, r3, #32
 8002c0e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002c10:	78fb      	ldrb	r3, [r7, #3]
 8002c12:	015a      	lsls	r2, r3, #5
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	4413      	add	r3, r2
 8002c18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	2310      	movs	r3, #16
 8002c20:	6093      	str	r3, [r2, #8]
 8002c22:	e000      	b.n	8002c26 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002c24:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 f883 	bl	8005d56 <USB_ReadChInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b04      	cmp	r3, #4
 8002c58:	d11b      	bne.n	8002c92 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002c5a:	78fb      	ldrb	r3, [r7, #3]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c66:	461a      	mov	r2, r3
 8002c68:	2304      	movs	r3, #4
 8002c6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002c6c:	78fa      	ldrb	r2, [r7, #3]
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	4613      	mov	r3, r2
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	440b      	add	r3, r1
 8002c7a:	334d      	adds	r3, #77	@ 0x4d
 8002c7c:	2207      	movs	r2, #7
 8002c7e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f003 fe08 	bl	800689e <USB_HC_Halt>
 8002c8e:	f000 bc89 	b.w	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	4611      	mov	r1, r2
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f003 f85b 	bl	8005d56 <USB_ReadChInterrupts>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f003 0320 	and.w	r3, r3, #32
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	f040 8082 	bne.w	8002db0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2320      	movs	r3, #32
 8002cbc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	3319      	adds	r3, #25
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d124      	bne.n	8002d1e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	3319      	adds	r3, #25
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	4613      	mov	r3, r2
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	334c      	adds	r3, #76	@ 0x4c
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	334d      	adds	r3, #77	@ 0x4d
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	4611      	mov	r1, r2
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f003 fdc0 	bl	800689e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	6879      	ldr	r1, [r7, #4]
 8002d22:	4613      	mov	r3, r2
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	1a9b      	subs	r3, r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	440b      	add	r3, r1
 8002d2c:	331a      	adds	r3, #26
 8002d2e:	781b      	ldrb	r3, [r3, #0]
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	f040 8437 	bne.w	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	331b      	adds	r3, #27
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f040 842b 	bne.w	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3326      	adds	r3, #38	@ 0x26
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d009      	beq.n	8002d78 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	331b      	adds	r3, #27
 8002d74:	2201      	movs	r2, #1
 8002d76:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002d78:	78fa      	ldrb	r2, [r7, #3]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	011b      	lsls	r3, r3, #4
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	334d      	adds	r3, #77	@ 0x4d
 8002d88:	2203      	movs	r2, #3
 8002d8a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	78fa      	ldrb	r2, [r7, #3]
 8002d92:	4611      	mov	r1, r2
 8002d94:	4618      	mov	r0, r3
 8002d96:	f003 fd82 	bl	800689e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3344      	adds	r3, #68	@ 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]
 8002dae:	e3f9      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	4611      	mov	r1, r2
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ffcc 	bl	8005d56 <USB_ReadChInterrupts>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002dc8:	d111      	bne.n	8002dee <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002dca:	78fb      	ldrb	r3, [r7, #3]
 8002dcc:	015a      	lsls	r2, r3, #5
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ddc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	4611      	mov	r1, r2
 8002de6:	4618      	mov	r0, r3
 8002de8:	f003 fd59 	bl	800689e <USB_HC_Halt>
 8002dec:	e3da      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	78fa      	ldrb	r2, [r7, #3]
 8002df4:	4611      	mov	r1, r2
 8002df6:	4618      	mov	r0, r3
 8002df8:	f002 ffad 	bl	8005d56 <USB_ReadChInterrupts>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d168      	bne.n	8002ed8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3344      	adds	r3, #68	@ 0x44
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	4611      	mov	r1, r2
 8002e22:	4618      	mov	r0, r3
 8002e24:	f002 ff97 	bl	8005d56 <USB_ReadChInterrupts>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e2e:	2b40      	cmp	r3, #64	@ 0x40
 8002e30:	d112      	bne.n	8002e58 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	440b      	add	r3, r1
 8002e40:	3319      	adds	r3, #25
 8002e42:	2201      	movs	r2, #1
 8002e44:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	015a      	lsls	r2, r3, #5
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e52:	461a      	mov	r2, r3
 8002e54:	2340      	movs	r3, #64	@ 0x40
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	331b      	adds	r3, #27
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d019      	beq.n	8002ea2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	331b      	adds	r3, #27
 8002e7e:	2200      	movs	r2, #0
 8002e80:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e82:	78fb      	ldrb	r3, [r7, #3]
 8002e84:	015a      	lsls	r2, r3, #5
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	4413      	add	r3, r2
 8002e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	78fa      	ldrb	r2, [r7, #3]
 8002e92:	0151      	lsls	r1, r2, #5
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	440a      	add	r2, r1
 8002e98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ea0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334d      	adds	r3, #77	@ 0x4d
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 fce4 	bl	800689e <USB_HC_Halt>
 8002ed6:	e365      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f002 ff38 	bl	8005d56 <USB_ReadChInterrupts>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002eec:	2b40      	cmp	r3, #64	@ 0x40
 8002eee:	d139      	bne.n	8002f64 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	334d      	adds	r3, #77	@ 0x4d
 8002f00:	2205      	movs	r2, #5
 8002f02:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002f04:	78fa      	ldrb	r2, [r7, #3]
 8002f06:	6879      	ldr	r1, [r7, #4]
 8002f08:	4613      	mov	r3, r2
 8002f0a:	011b      	lsls	r3, r3, #4
 8002f0c:	1a9b      	subs	r3, r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	331a      	adds	r3, #26
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d109      	bne.n	8002f2e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002f1a:	78fa      	ldrb	r2, [r7, #3]
 8002f1c:	6879      	ldr	r1, [r7, #4]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	011b      	lsls	r3, r3, #4
 8002f22:	1a9b      	subs	r3, r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	440b      	add	r3, r1
 8002f28:	3319      	adds	r3, #25
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	3344      	adds	r3, #68	@ 0x44
 8002f3e:	2200      	movs	r2, #0
 8002f40:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	4611      	mov	r1, r2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f003 fca7 	bl	800689e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002f50:	78fb      	ldrb	r3, [r7, #3]
 8002f52:	015a      	lsls	r2, r3, #5
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	4413      	add	r3, r2
 8002f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	2340      	movs	r3, #64	@ 0x40
 8002f60:	6093      	str	r3, [r2, #8]
 8002f62:	e31f      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f002 fef2 	bl	8005d56 <USB_ReadChInterrupts>
 8002f72:	4603      	mov	r3, r0
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b08      	cmp	r3, #8
 8002f7a:	d11a      	bne.n	8002fb2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002f7c:	78fb      	ldrb	r3, [r7, #3]
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f88:	461a      	mov	r2, r3
 8002f8a:	2308      	movs	r3, #8
 8002f8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	334d      	adds	r3, #77	@ 0x4d
 8002f9e:	2206      	movs	r2, #6
 8002fa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	78fa      	ldrb	r2, [r7, #3]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f003 fc77 	bl	800689e <USB_HC_Halt>
 8002fb0:	e2f8      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f002 fecb 	bl	8005d56 <USB_ReadChInterrupts>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	f003 0310 	and.w	r3, r3, #16
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d144      	bne.n	8003054 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	3344      	adds	r3, #68	@ 0x44
 8002fda:	2200      	movs	r2, #0
 8002fdc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	@ 0x4d
 8002fee:	2204      	movs	r2, #4
 8002ff0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	3319      	adds	r3, #25
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	3318      	adds	r3, #24
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	3319      	adds	r3, #25
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	4611      	mov	r1, r2
 800303a:	4618      	mov	r0, r3
 800303c:	f003 fc2f 	bl	800689e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	2310      	movs	r3, #16
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	e2a7      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	4611      	mov	r1, r2
 800305c:	4618      	mov	r0, r3
 800305e:	f002 fe7a 	bl	8005d56 <USB_ReadChInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003068:	2b80      	cmp	r3, #128	@ 0x80
 800306a:	f040 8083 	bne.w	8003174 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	799b      	ldrb	r3, [r3, #6]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d111      	bne.n	800309a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003076:	78fa      	ldrb	r2, [r7, #3]
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	334d      	adds	r3, #77	@ 0x4d
 8003086:	2207      	movs	r2, #7
 8003088:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	78fa      	ldrb	r2, [r7, #3]
 8003090:	4611      	mov	r1, r2
 8003092:	4618      	mov	r0, r3
 8003094:	f003 fc03 	bl	800689e <USB_HC_Halt>
 8003098:	e062      	b.n	8003160 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3344      	adds	r3, #68	@ 0x44
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	1c59      	adds	r1, r3, #1
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	011b      	lsls	r3, r3, #4
 80030b4:	1a9b      	subs	r3, r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4403      	add	r3, r0
 80030ba:	3344      	adds	r3, #68	@ 0x44
 80030bc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030be:	78fa      	ldrb	r2, [r7, #3]
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	4613      	mov	r3, r2
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	1a9b      	subs	r3, r3, r2
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	440b      	add	r3, r1
 80030cc:	3344      	adds	r3, #68	@ 0x44
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d922      	bls.n	800311a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80030d4:	78fa      	ldrb	r2, [r7, #3]
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	4613      	mov	r3, r2
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	1a9b      	subs	r3, r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	440b      	add	r3, r1
 80030e2:	3344      	adds	r3, #68	@ 0x44
 80030e4:	2200      	movs	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334c      	adds	r3, #76	@ 0x4c
 80030f8:	2204      	movs	r2, #4
 80030fa:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334c      	adds	r3, #76	@ 0x4c
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	78fb      	ldrb	r3, [r7, #3]
 8003110:	4619      	mov	r1, r3
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f005 ff1c 	bl	8008f50 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003118:	e022      	b.n	8003160 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334c      	adds	r3, #76	@ 0x4c
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	015a      	lsls	r2, r3, #5
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	4413      	add	r3, r2
 8003136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003144:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800314c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800314e:	78fb      	ldrb	r3, [r7, #3]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	4413      	add	r3, r2
 8003156:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800315a:	461a      	mov	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	015a      	lsls	r2, r3, #5
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	4413      	add	r3, r2
 8003168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316c:	461a      	mov	r2, r3
 800316e:	2380      	movs	r3, #128	@ 0x80
 8003170:	6093      	str	r3, [r2, #8]
 8003172:	e217      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f002 fdea 	bl	8005d56 <USB_ReadChInterrupts>
 8003182:	4603      	mov	r3, r0
 8003184:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800318c:	d11b      	bne.n	80031c6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	011b      	lsls	r3, r3, #4
 8003196:	1a9b      	subs	r3, r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	334d      	adds	r3, #77	@ 0x4d
 800319e:	2209      	movs	r2, #9
 80031a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	78fa      	ldrb	r2, [r7, #3]
 80031a8:	4611      	mov	r1, r2
 80031aa:	4618      	mov	r0, r3
 80031ac:	f003 fb77 	bl	800689e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80031b0:	78fb      	ldrb	r3, [r7, #3]
 80031b2:	015a      	lsls	r2, r3, #5
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031bc:	461a      	mov	r2, r3
 80031be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80031c2:	6093      	str	r3, [r2, #8]
 80031c4:	e1ee      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fdc1 	bl	8005d56 <USB_ReadChInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b02      	cmp	r3, #2
 80031dc:	f040 81df 	bne.w	800359e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80031e0:	78fb      	ldrb	r3, [r7, #3]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ec:	461a      	mov	r2, r3
 80031ee:	2302      	movs	r3, #2
 80031f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	334d      	adds	r3, #77	@ 0x4d
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b01      	cmp	r3, #1
 8003206:	f040 8093 	bne.w	8003330 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	334d      	adds	r3, #77	@ 0x4d
 800321a:	2202      	movs	r2, #2
 800321c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800321e:	78fa      	ldrb	r2, [r7, #3]
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4613      	mov	r3, r2
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	1a9b      	subs	r3, r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	334c      	adds	r3, #76	@ 0x4c
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003232:	78fa      	ldrb	r2, [r7, #3]
 8003234:	6879      	ldr	r1, [r7, #4]
 8003236:	4613      	mov	r3, r2
 8003238:	011b      	lsls	r3, r3, #4
 800323a:	1a9b      	subs	r3, r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	440b      	add	r3, r1
 8003240:	3326      	adds	r3, #38	@ 0x26
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d00b      	beq.n	8003260 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	6879      	ldr	r1, [r7, #4]
 800324c:	4613      	mov	r3, r2
 800324e:	011b      	lsls	r3, r3, #4
 8003250:	1a9b      	subs	r3, r3, r2
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	440b      	add	r3, r1
 8003256:	3326      	adds	r3, #38	@ 0x26
 8003258:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800325a:	2b03      	cmp	r3, #3
 800325c:	f040 8190 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	799b      	ldrb	r3, [r3, #6]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d115      	bne.n	8003294 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003268:	78fa      	ldrb	r2, [r7, #3]
 800326a:	6879      	ldr	r1, [r7, #4]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	333d      	adds	r3, #61	@ 0x3d
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2d8      	uxtb	r0, r3
 8003282:	6879      	ldr	r1, [r7, #4]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	333d      	adds	r3, #61	@ 0x3d
 8003290:	4602      	mov	r2, r0
 8003292:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	799b      	ldrb	r3, [r3, #6]
 8003298:	2b01      	cmp	r3, #1
 800329a:	f040 8171 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
 800329e:	78fa      	ldrb	r2, [r7, #3]
 80032a0:	6879      	ldr	r1, [r7, #4]
 80032a2:	4613      	mov	r3, r2
 80032a4:	011b      	lsls	r3, r3, #4
 80032a6:	1a9b      	subs	r3, r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	440b      	add	r3, r1
 80032ac:	3334      	adds	r3, #52	@ 0x34
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8165 	beq.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80032b6:	78fa      	ldrb	r2, [r7, #3]
 80032b8:	6879      	ldr	r1, [r7, #4]
 80032ba:	4613      	mov	r3, r2
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	1a9b      	subs	r3, r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	3334      	adds	r3, #52	@ 0x34
 80032c6:	6819      	ldr	r1, [r3, #0]
 80032c8:	78fa      	ldrb	r2, [r7, #3]
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	4613      	mov	r3, r2
 80032ce:	011b      	lsls	r3, r3, #4
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4403      	add	r3, r0
 80032d6:	3328      	adds	r3, #40	@ 0x28
 80032d8:	881b      	ldrh	r3, [r3, #0]
 80032da:	440b      	add	r3, r1
 80032dc:	1e59      	subs	r1, r3, #1
 80032de:	78fa      	ldrb	r2, [r7, #3]
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4403      	add	r3, r0
 80032ec:	3328      	adds	r3, #40	@ 0x28
 80032ee:	881b      	ldrh	r3, [r3, #0]
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 813f 	beq.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003302:	78fa      	ldrb	r2, [r7, #3]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	011b      	lsls	r3, r3, #4
 800330a:	1a9b      	subs	r3, r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	333d      	adds	r3, #61	@ 0x3d
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	f083 0301 	eor.w	r3, r3, #1
 800331a:	b2d8      	uxtb	r0, r3
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	333d      	adds	r3, #61	@ 0x3d
 800332a:	4602      	mov	r2, r0
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e127      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334d      	adds	r3, #77	@ 0x4d
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	2b03      	cmp	r3, #3
 8003344:	d120      	bne.n	8003388 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003346:	78fa      	ldrb	r2, [r7, #3]
 8003348:	6879      	ldr	r1, [r7, #4]
 800334a:	4613      	mov	r3, r2
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	1a9b      	subs	r3, r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	334d      	adds	r3, #77	@ 0x4d
 8003356:	2202      	movs	r2, #2
 8003358:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	331b      	adds	r3, #27
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b01      	cmp	r3, #1
 800336e:	f040 8107 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	334c      	adds	r3, #76	@ 0x4c
 8003382:	2202      	movs	r2, #2
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	e0fb      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334d      	adds	r3, #77	@ 0x4d
 8003398:	781b      	ldrb	r3, [r3, #0]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d13a      	bne.n	8003414 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800339e:	78fa      	ldrb	r2, [r7, #3]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	334d      	adds	r3, #77	@ 0x4d
 80033ae:	2202      	movs	r2, #2
 80033b0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	334c      	adds	r3, #76	@ 0x4c
 80033c2:	2202      	movs	r2, #2
 80033c4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80033c6:	78fa      	ldrb	r2, [r7, #3]
 80033c8:	6879      	ldr	r1, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	011b      	lsls	r3, r3, #4
 80033ce:	1a9b      	subs	r3, r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	440b      	add	r3, r1
 80033d4:	331b      	adds	r3, #27
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	f040 80d1 	bne.w	8003580 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	6879      	ldr	r1, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	011b      	lsls	r3, r3, #4
 80033e6:	1a9b      	subs	r3, r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	331b      	adds	r3, #27
 80033ee:	2200      	movs	r2, #0
 80033f0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033f2:	78fb      	ldrb	r3, [r7, #3]
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	0151      	lsls	r1, r2, #5
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	440a      	add	r2, r1
 8003408:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800340c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003410:	6053      	str	r3, [r2, #4]
 8003412:	e0b5      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	334d      	adds	r3, #77	@ 0x4d
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b05      	cmp	r3, #5
 8003428:	d114      	bne.n	8003454 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800342a:	78fa      	ldrb	r2, [r7, #3]
 800342c:	6879      	ldr	r1, [r7, #4]
 800342e:	4613      	mov	r3, r2
 8003430:	011b      	lsls	r3, r3, #4
 8003432:	1a9b      	subs	r3, r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	440b      	add	r3, r1
 8003438:	334d      	adds	r3, #77	@ 0x4d
 800343a:	2202      	movs	r2, #2
 800343c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	1a9b      	subs	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	334c      	adds	r3, #76	@ 0x4c
 800344e:	2202      	movs	r2, #2
 8003450:	701a      	strb	r2, [r3, #0]
 8003452:	e095      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	334d      	adds	r3, #77	@ 0x4d
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b06      	cmp	r3, #6
 8003468:	d114      	bne.n	8003494 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	334d      	adds	r3, #77	@ 0x4d
 800347a:	2202      	movs	r2, #2
 800347c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	6879      	ldr	r1, [r7, #4]
 8003482:	4613      	mov	r3, r2
 8003484:	011b      	lsls	r3, r3, #4
 8003486:	1a9b      	subs	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	334c      	adds	r3, #76	@ 0x4c
 800348e:	2205      	movs	r2, #5
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e075      	b.n	8003580 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	334d      	adds	r3, #77	@ 0x4d
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b07      	cmp	r3, #7
 80034a8:	d00a      	beq.n	80034c0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	334d      	adds	r3, #77	@ 0x4d
 80034ba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80034bc:	2b09      	cmp	r3, #9
 80034be:	d170      	bne.n	80035a2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	334d      	adds	r3, #77	@ 0x4d
 80034d0:	2202      	movs	r2, #2
 80034d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3344      	adds	r3, #68	@ 0x44
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	1c59      	adds	r1, r3, #1
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4403      	add	r3, r0
 80034f4:	3344      	adds	r3, #68	@ 0x44
 80034f6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80034f8:	78fa      	ldrb	r2, [r7, #3]
 80034fa:	6879      	ldr	r1, [r7, #4]
 80034fc:	4613      	mov	r3, r2
 80034fe:	011b      	lsls	r3, r3, #4
 8003500:	1a9b      	subs	r3, r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	440b      	add	r3, r1
 8003506:	3344      	adds	r3, #68	@ 0x44
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d914      	bls.n	8003538 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	3344      	adds	r3, #68	@ 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	4613      	mov	r3, r2
 8003528:	011b      	lsls	r3, r3, #4
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	334c      	adds	r3, #76	@ 0x4c
 8003532:	2204      	movs	r2, #4
 8003534:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003536:	e022      	b.n	800357e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	@ 0x4c
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800354c:	78fb      	ldrb	r3, [r7, #3]
 800354e:	015a      	lsls	r2, r3, #5
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4413      	add	r3, r2
 8003554:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003562:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800356a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	4413      	add	r3, r2
 8003574:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003578:	461a      	mov	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800357e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003580:	78fa      	ldrb	r2, [r7, #3]
 8003582:	6879      	ldr	r1, [r7, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	1a9b      	subs	r3, r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	440b      	add	r3, r1
 800358e:	334c      	adds	r3, #76	@ 0x4c
 8003590:	781a      	ldrb	r2, [r3, #0]
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f005 fcda 	bl	8008f50 <HAL_HCD_HC_NotifyURBChange_Callback>
 800359c:	e002      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800359e:	bf00      	nop
 80035a0:	e000      	b.n	80035a4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80035a2:	bf00      	nop
  }
}
 80035a4:	3718      	adds	r7, #24
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}

080035aa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035aa:	b580      	push	{r7, lr}
 80035ac:	b08a      	sub	sp, #40	@ 0x28
 80035ae:	af00      	add	r7, sp, #0
 80035b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035ba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	0c5b      	lsrs	r3, r3, #17
 80035d0:	f003 030f 	and.w	r3, r3, #15
 80035d4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035d6:	69fb      	ldr	r3, [r7, #28]
 80035d8:	091b      	lsrs	r3, r3, #4
 80035da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035de:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d004      	beq.n	80035f0 <HCD_RXQLVL_IRQHandler+0x46>
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	2b05      	cmp	r3, #5
 80035ea:	f000 80b6 	beq.w	800375a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80035ee:	e0b7      	b.n	8003760 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 80b3 	beq.w	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
 80035f8:	6879      	ldr	r1, [r7, #4]
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	332c      	adds	r3, #44	@ 0x2c
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	f000 80a7 	beq.w	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	3338      	adds	r3, #56	@ 0x38
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	18d1      	adds	r1, r2, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	69ba      	ldr	r2, [r7, #24]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4403      	add	r3, r0
 8003634:	3334      	adds	r3, #52	@ 0x34
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4299      	cmp	r1, r3
 800363a:	f200 8083 	bhi.w	8003744 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6818      	ldr	r0, [r3, #0]
 8003642:	6879      	ldr	r1, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	332c      	adds	r3, #44	@ 0x2c
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	b292      	uxth	r2, r2
 8003658:	4619      	mov	r1, r3
 800365a:	f002 fb11 	bl	8005c80 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	332c      	adds	r3, #44	@ 0x2c
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	18d1      	adds	r1, r2, r3
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4403      	add	r3, r0
 8003682:	332c      	adds	r3, #44	@ 0x2c
 8003684:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	3338      	adds	r3, #56	@ 0x38
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	18d1      	adds	r1, r2, r3
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4403      	add	r3, r0
 80036aa:	3338      	adds	r3, #56	@ 0x38
 80036ac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	691b      	ldr	r3, [r3, #16]
 80036bc:	0cdb      	lsrs	r3, r3, #19
 80036be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4613      	mov	r3, r2
 80036ca:	011b      	lsls	r3, r3, #4
 80036cc:	1a9b      	subs	r3, r3, r2
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	3328      	adds	r3, #40	@ 0x28
 80036d4:	881b      	ldrh	r3, [r3, #0]
 80036d6:	461a      	mov	r2, r3
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4293      	cmp	r3, r2
 80036dc:	d13f      	bne.n	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d03c      	beq.n	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036fa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003702:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	015a      	lsls	r2, r3, #5
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	4413      	add	r3, r2
 800370c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003710:	461a      	mov	r2, r3
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	333c      	adds	r3, #60	@ 0x3c
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	f083 0301 	eor.w	r3, r3, #1
 800372c:	b2d8      	uxtb	r0, r3
 800372e:	6879      	ldr	r1, [r7, #4]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	333c      	adds	r3, #60	@ 0x3c
 800373e:	4602      	mov	r2, r0
 8003740:	701a      	strb	r2, [r3, #0]
      break;
 8003742:	e00c      	b.n	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003744:	6879      	ldr	r1, [r7, #4]
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	334c      	adds	r3, #76	@ 0x4c
 8003754:	2204      	movs	r2, #4
 8003756:	701a      	strb	r2, [r3, #0]
      break;
 8003758:	e001      	b.n	800375e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800375e:	bf00      	nop
  }
}
 8003760:	bf00      	nop
 8003762:	3728      	adds	r7, #40	@ 0x28
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b086      	sub	sp, #24
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003794:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	f003 0302 	and.w	r3, r3, #2
 800379c:	2b02      	cmp	r3, #2
 800379e:	d10b      	bne.n	80037b8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d102      	bne.n	80037b0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f005 fbb4 	bl	8008f18 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f043 0302 	orr.w	r3, r3, #2
 80037b6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0308 	and.w	r3, r3, #8
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d132      	bne.n	8003828 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	f043 0308 	orr.w	r3, r3, #8
 80037c8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 0304 	and.w	r3, r3, #4
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d126      	bne.n	8003822 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7a5b      	ldrb	r3, [r3, #9]
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d113      	bne.n	8003804 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80037e2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037e6:	d106      	bne.n	80037f6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f002 fbd6 	bl	8005fa0 <USB_InitFSLSPClkSel>
 80037f4:	e011      	b.n	800381a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2101      	movs	r1, #1
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 fbcf 	bl	8005fa0 <USB_InitFSLSPClkSel>
 8003802:	e00a      	b.n	800381a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	79db      	ldrb	r3, [r3, #7]
 8003808:	2b01      	cmp	r3, #1
 800380a:	d106      	bne.n	800381a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003812:	461a      	mov	r2, r3
 8003814:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003818:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f005 fba6 	bl	8008f6c <HAL_HCD_PortEnabled_Callback>
 8003820:	e002      	b.n	8003828 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f005 fbb0 	bl	8008f88 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0320 	and.w	r3, r3, #32
 800382e:	2b20      	cmp	r3, #32
 8003830:	d103      	bne.n	800383a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f043 0320 	orr.w	r3, r3, #32
 8003838:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003840:	461a      	mov	r2, r3
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	6013      	str	r3, [r2, #0]
}
 8003846:	bf00      	nop
 8003848:	3718      	adds	r7, #24
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}
	...

08003850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e12b      	b.n	8003aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7fc ff4a 	bl	8000710 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	@ 0x24
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80038a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b4:	f001 fa20 	bl	8004cf8 <HAL_RCC_GetPCLK1Freq>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a81      	ldr	r2, [pc, #516]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d807      	bhi.n	80038d4 <HAL_I2C_Init+0x84>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a80      	ldr	r2, [pc, #512]	@ (8003ac8 <HAL_I2C_Init+0x278>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bf94      	ite	ls
 80038cc:	2301      	movls	r3, #1
 80038ce:	2300      	movhi	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e006      	b.n	80038e2 <HAL_I2C_Init+0x92>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a7d      	ldr	r2, [pc, #500]	@ (8003acc <HAL_I2C_Init+0x27c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0e7      	b.n	8003aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a78      	ldr	r2, [pc, #480]	@ (8003ad0 <HAL_I2C_Init+0x280>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0c9b      	lsrs	r3, r3, #18
 80038f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a6a      	ldr	r2, [pc, #424]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d802      	bhi.n	8003924 <HAL_I2C_Init+0xd4>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	e009      	b.n	8003938 <HAL_I2C_Init+0xe8>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	4a69      	ldr	r2, [pc, #420]	@ (8003ad4 <HAL_I2C_Init+0x284>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	3301      	adds	r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800394a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	495c      	ldr	r1, [pc, #368]	@ (8003ac4 <HAL_I2C_Init+0x274>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d819      	bhi.n	800398c <HAL_I2C_Init+0x13c>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e59      	subs	r1, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fbb1 f3f3 	udiv	r3, r1, r3
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800396c:	400b      	ands	r3, r1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_I2C_Init+0x138>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e59      	subs	r1, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	e051      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003988:	2304      	movs	r3, #4
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <HAL_I2C_Init+0x168>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e012      	b.n	80039de <HAL_I2C_Init+0x18e>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x196>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_I2C_Init+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e58      	subs	r0, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6911      	ldr	r1, [r2, #16]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000186a0 	.word	0x000186a0
 8003ac8:	001e847f 	.word	0x001e847f
 8003acc:	003d08ff 	.word	0x003d08ff
 8003ad0:	431bde83 	.word	0x431bde83
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e128      	b.n	8003d3c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a90      	ldr	r2, [pc, #576]	@ (8003d44 <HAL_I2S_Init+0x26c>)
 8003b02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f7fc fe7b 	bl	8000800 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6812      	ldr	r2, [r2, #0]
 8003b1c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003b20:	f023 030f 	bic.w	r3, r3, #15
 8003b24:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	695b      	ldr	r3, [r3, #20]
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d060      	beq.n	8003bf8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003b3e:	2310      	movs	r3, #16
 8003b40:	617b      	str	r3, [r7, #20]
 8003b42:	e001      	b.n	8003b48 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003b44:	2320      	movs	r3, #32
 8003b46:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	2b20      	cmp	r3, #32
 8003b4e:	d802      	bhi.n	8003b56 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003b56:	2001      	movs	r0, #1
 8003b58:	f001 f9c4 	bl	8004ee4 <HAL_RCCEx_GetPeriphCLKFreq>
 8003b5c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b66:	d125      	bne.n	8003bb4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d010      	beq.n	8003b92 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	005b      	lsls	r3, r3, #1
 8003b82:	461a      	mov	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8c:	3305      	adds	r3, #5
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e01f      	b.n	8003bd2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	4413      	add	r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bae:	3305      	adds	r3, #5
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	e00e      	b.n	8003bd2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003bb4:	68fa      	ldr	r2, [r7, #12]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bce:	3305      	adds	r3, #5
 8003bd0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	4a5c      	ldr	r2, [pc, #368]	@ (8003d48 <HAL_I2S_Init+0x270>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	f003 0301 	and.w	r3, r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	085b      	lsrs	r3, r3, #1
 8003bee:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	021b      	lsls	r3, r3, #8
 8003bf4:	61bb      	str	r3, [r7, #24]
 8003bf6:	e003      	b.n	8003c00 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003bf8:	2302      	movs	r3, #2
 8003bfa:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d902      	bls.n	8003c0c <HAL_I2S_Init+0x134>
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	2bff      	cmp	r3, #255	@ 0xff
 8003c0a:	d907      	bls.n	8003c1c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c10:	f043 0210 	orr.w	r2, r3, #16
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e08f      	b.n	8003d3c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	ea42 0103 	orr.w	r1, r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	69fa      	ldr	r2, [r7, #28]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c3a:	f023 030f 	bic.w	r3, r3, #15
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6851      	ldr	r1, [r2, #4]
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6892      	ldr	r2, [r2, #8]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	68d2      	ldr	r2, [r2, #12]
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	6992      	ldr	r2, [r2, #24]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c5e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a1b      	ldr	r3, [r3, #32]
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d161      	bne.n	8003d2c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	4a38      	ldr	r2, [pc, #224]	@ (8003d4c <HAL_I2S_Init+0x274>)
 8003c6c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a37      	ldr	r2, [pc, #220]	@ (8003d50 <HAL_I2S_Init+0x278>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <HAL_I2S_Init+0x1a4>
 8003c78:	4b36      	ldr	r3, [pc, #216]	@ (8003d54 <HAL_I2S_Init+0x27c>)
 8003c7a:	e001      	b.n	8003c80 <HAL_I2S_Init+0x1a8>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6812      	ldr	r2, [r2, #0]
 8003c86:	4932      	ldr	r1, [pc, #200]	@ (8003d50 <HAL_I2S_Init+0x278>)
 8003c88:	428a      	cmp	r2, r1
 8003c8a:	d101      	bne.n	8003c90 <HAL_I2S_Init+0x1b8>
 8003c8c:	4a31      	ldr	r2, [pc, #196]	@ (8003d54 <HAL_I2S_Init+0x27c>)
 8003c8e:	e001      	b.n	8003c94 <HAL_I2S_Init+0x1bc>
 8003c90:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003c94:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003c98:	f023 030f 	bic.w	r3, r3, #15
 8003c9c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a2b      	ldr	r2, [pc, #172]	@ (8003d50 <HAL_I2S_Init+0x278>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d101      	bne.n	8003cac <HAL_I2S_Init+0x1d4>
 8003ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8003d54 <HAL_I2S_Init+0x27c>)
 8003caa:	e001      	b.n	8003cb0 <HAL_I2S_Init+0x1d8>
 8003cac:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a25      	ldr	r2, [pc, #148]	@ (8003d50 <HAL_I2S_Init+0x278>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_I2S_Init+0x1ea>
 8003cbe:	4b25      	ldr	r3, [pc, #148]	@ (8003d54 <HAL_I2S_Init+0x27c>)
 8003cc0:	e001      	b.n	8003cc6 <HAL_I2S_Init+0x1ee>
 8003cc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cd2:	d003      	beq.n	8003cdc <HAL_I2S_Init+0x204>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d103      	bne.n	8003ce4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	e001      	b.n	8003ce8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	68db      	ldr	r3, [r3, #12]
 8003cfa:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003d06:	4313      	orrs	r3, r2
 8003d08:	b29a      	uxth	r2, r3
 8003d0a:	897b      	ldrh	r3, [r7, #10]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003d14:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a0d      	ldr	r2, [pc, #52]	@ (8003d50 <HAL_I2S_Init+0x278>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d101      	bne.n	8003d24 <HAL_I2S_Init+0x24c>
 8003d20:	4b0c      	ldr	r3, [pc, #48]	@ (8003d54 <HAL_I2S_Init+0x27c>)
 8003d22:	e001      	b.n	8003d28 <HAL_I2S_Init+0x250>
 8003d24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d28:	897a      	ldrh	r2, [r7, #10]
 8003d2a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	08003e4f 	.word	0x08003e4f
 8003d48:	cccccccd 	.word	0xcccccccd
 8003d4c:	08003f65 	.word	0x08003f65
 8003d50:	40003800 	.word	0x40003800
 8003d54:	40003400 	.word	0x40003400

08003d58 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d88:	bf00      	nop
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da0:	881a      	ldrh	r2, [r3, #0]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dac:	1c9a      	adds	r2, r3, #2
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d10e      	bne.n	8003de8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003dd8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2201      	movs	r2, #1
 8003dde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7ff ffb8 	bl	8003d58 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	68da      	ldr	r2, [r3, #12]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e02:	b292      	uxth	r2, r2
 8003e04:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	1c9a      	adds	r2, r3, #2
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10e      	bne.n	8003e46 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003e36:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f7ff ff93 	bl	8003d6c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003e46:	bf00      	nop
 8003e48:	3708      	adds	r7, #8
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b086      	sub	sp, #24
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e64:	b2db      	uxtb	r3, r3
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d13a      	bne.n	8003ee0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	f003 0301 	and.w	r3, r3, #1
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d109      	bne.n	8003e88 <I2S_IRQHandler+0x3a>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e7e:	2b40      	cmp	r3, #64	@ 0x40
 8003e80:	d102      	bne.n	8003e88 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f7ff ffb4 	bl	8003df0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8e:	2b40      	cmp	r3, #64	@ 0x40
 8003e90:	d126      	bne.n	8003ee0 <I2S_IRQHandler+0x92>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	f003 0320 	and.w	r3, r3, #32
 8003e9c:	2b20      	cmp	r3, #32
 8003e9e:	d11f      	bne.n	8003ee0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003eae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	613b      	str	r3, [r7, #16]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	613b      	str	r3, [r7, #16]
 8003ec4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2201      	movs	r2, #1
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ed2:	f043 0202 	orr.w	r2, r3, #2
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f7ff ff50 	bl	8003d80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	2b03      	cmp	r3, #3
 8003eea:	d136      	bne.n	8003f5a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	f003 0302 	and.w	r3, r3, #2
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d109      	bne.n	8003f0a <I2S_IRQHandler+0xbc>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f00:	2b80      	cmp	r3, #128	@ 0x80
 8003f02:	d102      	bne.n	8003f0a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff45 	bl	8003d94 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f003 0308 	and.w	r3, r3, #8
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d122      	bne.n	8003f5a <I2S_IRQHandler+0x10c>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d11b      	bne.n	8003f5a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003f30:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f32:	2300      	movs	r3, #0
 8003f34:	60fb      	str	r3, [r7, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff ff13 	bl	8003d80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f5a:	bf00      	nop
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
	...

08003f64 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a92      	ldr	r2, [pc, #584]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f7e:	4b92      	ldr	r3, [pc, #584]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	685b      	ldr	r3, [r3, #4]
 8003f90:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a8b      	ldr	r2, [pc, #556]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d101      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f9c:	4b8a      	ldr	r3, [pc, #552]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f9e:	e001      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003fa0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fb0:	d004      	beq.n	8003fbc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f040 8099 	bne.w	80040ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d107      	bne.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 f925 	bl	8004220 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f003 0301 	and.w	r3, r3, #1
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d107      	bne.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d002      	beq.n	8003ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f9c8 	bl	8004380 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ff6:	2b40      	cmp	r3, #64	@ 0x40
 8003ff8:	d13a      	bne.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f003 0320 	and.w	r3, r3, #32
 8004000:	2b00      	cmp	r3, #0
 8004002:	d035      	beq.n	8004070 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800400e:	4b6e      	ldr	r3, [pc, #440]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4969      	ldr	r1, [pc, #420]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800401e:	428b      	cmp	r3, r1
 8004020:	d101      	bne.n	8004026 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004022:	4b69      	ldr	r3, [pc, #420]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004024:	e001      	b.n	800402a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004026:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800402a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800402e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800403e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004040:	2300      	movs	r3, #0
 8004042:	60fb      	str	r3, [r7, #12]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2201      	movs	r2, #1
 800405a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004062:	f043 0202 	orr.w	r2, r3, #2
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7ff fe88 	bl	8003d80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b08      	cmp	r3, #8
 8004078:	f040 80c3 	bne.w	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	f000 80bd 	beq.w	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	685a      	ldr	r2, [r3, #4]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004096:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a49      	ldr	r2, [pc, #292]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d101      	bne.n	80040a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80040a2:	4b49      	ldr	r3, [pc, #292]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040a4:	e001      	b.n	80040aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80040a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040aa:	685a      	ldr	r2, [r3, #4]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4944      	ldr	r1, [pc, #272]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040b2:	428b      	cmp	r3, r1
 80040b4:	d101      	bne.n	80040ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80040b6:	4b44      	ldr	r3, [pc, #272]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80040b8:	e001      	b.n	80040be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80040ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80040be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80040c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80040c4:	2300      	movs	r3, #0
 80040c6:	60bb      	str	r3, [r7, #8]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff fe4a 	bl	8003d80 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040ec:	e089      	b.n	8004202 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d107      	bne.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f8be 	bl	8004284 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004108:	69fb      	ldr	r3, [r7, #28]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d107      	bne.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f000 f8fd 	bl	800431c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004128:	2b40      	cmp	r3, #64	@ 0x40
 800412a:	d12f      	bne.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800412c:	697b      	ldr	r3, [r7, #20]
 800412e:	f003 0320 	and.w	r3, r3, #32
 8004132:	2b00      	cmp	r3, #0
 8004134:	d02a      	beq.n	800418c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004144:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a1e      	ldr	r2, [pc, #120]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d101      	bne.n	8004154 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004150:	4b1d      	ldr	r3, [pc, #116]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004152:	e001      	b.n	8004158 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004154:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4919      	ldr	r1, [pc, #100]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004160:	428b      	cmp	r3, r1
 8004162:	d101      	bne.n	8004168 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004164:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004166:	e001      	b.n	800416c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004168:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800416c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004170:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2201      	movs	r2, #1
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800417e:	f043 0202 	orr.w	r2, r3, #2
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7ff fdfa 	bl	8003d80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b08      	cmp	r3, #8
 8004194:	d136      	bne.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f003 0320 	and.w	r3, r3, #32
 800419c:	2b00      	cmp	r3, #0
 800419e:	d031      	beq.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a07      	ldr	r2, [pc, #28]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d101      	bne.n	80041ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041ac:	e001      	b.n	80041b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80041ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041b2:	685a      	ldr	r2, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4902      	ldr	r1, [pc, #8]	@ (80041c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80041ba:	428b      	cmp	r3, r1
 80041bc:	d106      	bne.n	80041cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80041be:	4b02      	ldr	r3, [pc, #8]	@ (80041c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80041c0:	e006      	b.n	80041d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80041c2:	bf00      	nop
 80041c4:	40003800 	.word	0x40003800
 80041c8:	40003400 	.word	0x40003400
 80041cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041d0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80041d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80041e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041f2:	f043 0204 	orr.w	r2, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff fdc0 	bl	8003d80 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004200:	e000      	b.n	8004204 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004202:	bf00      	nop
}
 8004204:	bf00      	nop
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	1c99      	adds	r1, r3, #2
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6251      	str	r1, [r2, #36]	@ 0x24
 8004232:	881a      	ldrh	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b29a      	uxth	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d113      	bne.n	800427a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685a      	ldr	r2, [r3, #4]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004260:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	d106      	bne.n	800427a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2201      	movs	r2, #1
 8004270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ffc9 	bl	800420c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
	...

08004284 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004290:	1c99      	adds	r1, r3, #2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6251      	str	r1, [r2, #36]	@ 0x24
 8004296:	8819      	ldrh	r1, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a1d      	ldr	r2, [pc, #116]	@ (8004314 <I2SEx_TxISR_I2SExt+0x90>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <I2SEx_TxISR_I2SExt+0x22>
 80042a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004318 <I2SEx_TxISR_I2SExt+0x94>)
 80042a4:	e001      	b.n	80042aa <I2SEx_TxISR_I2SExt+0x26>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042aa:	460a      	mov	r2, r1
 80042ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d121      	bne.n	800430a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a12      	ldr	r2, [pc, #72]	@ (8004314 <I2SEx_TxISR_I2SExt+0x90>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d101      	bne.n	80042d4 <I2SEx_TxISR_I2SExt+0x50>
 80042d0:	4b11      	ldr	r3, [pc, #68]	@ (8004318 <I2SEx_TxISR_I2SExt+0x94>)
 80042d2:	e001      	b.n	80042d8 <I2SEx_TxISR_I2SExt+0x54>
 80042d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	490d      	ldr	r1, [pc, #52]	@ (8004314 <I2SEx_TxISR_I2SExt+0x90>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d101      	bne.n	80042e8 <I2SEx_TxISR_I2SExt+0x64>
 80042e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004318 <I2SEx_TxISR_I2SExt+0x94>)
 80042e6:	e001      	b.n	80042ec <I2SEx_TxISR_I2SExt+0x68>
 80042e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80042f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d106      	bne.n	800430a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff ff81 	bl	800420c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40003800 	.word	0x40003800
 8004318:	40003400 	.word	0x40003400

0800431c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68d8      	ldr	r0, [r3, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800432e:	1c99      	adds	r1, r3, #2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004334:	b282      	uxth	r2, r0
 8004336:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800433c:	b29b      	uxth	r3, r3
 800433e:	3b01      	subs	r3, #1
 8004340:	b29a      	uxth	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800434a:	b29b      	uxth	r3, r3
 800434c:	2b00      	cmp	r3, #0
 800434e:	d113      	bne.n	8004378 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800435e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff ff4a 	bl	800420c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004378:	bf00      	nop
 800437a:	3708      	adds	r7, #8
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a20      	ldr	r2, [pc, #128]	@ (8004410 <I2SEx_RxISR_I2SExt+0x90>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d101      	bne.n	8004396 <I2SEx_RxISR_I2SExt+0x16>
 8004392:	4b20      	ldr	r3, [pc, #128]	@ (8004414 <I2SEx_RxISR_I2SExt+0x94>)
 8004394:	e001      	b.n	800439a <I2SEx_RxISR_I2SExt+0x1a>
 8004396:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800439a:	68d8      	ldr	r0, [r3, #12]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a0:	1c99      	adds	r1, r3, #2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80043a6:	b282      	uxth	r2, r0
 80043a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	3b01      	subs	r3, #1
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80043bc:	b29b      	uxth	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d121      	bne.n	8004406 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a12      	ldr	r2, [pc, #72]	@ (8004410 <I2SEx_RxISR_I2SExt+0x90>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d101      	bne.n	80043d0 <I2SEx_RxISR_I2SExt+0x50>
 80043cc:	4b11      	ldr	r3, [pc, #68]	@ (8004414 <I2SEx_RxISR_I2SExt+0x94>)
 80043ce:	e001      	b.n	80043d4 <I2SEx_RxISR_I2SExt+0x54>
 80043d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043d4:	685a      	ldr	r2, [r3, #4]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	490d      	ldr	r1, [pc, #52]	@ (8004410 <I2SEx_RxISR_I2SExt+0x90>)
 80043dc:	428b      	cmp	r3, r1
 80043de:	d101      	bne.n	80043e4 <I2SEx_RxISR_I2SExt+0x64>
 80043e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <I2SEx_RxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_RxISR_I2SExt+0x68>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043e8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043f2:	b29b      	uxth	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d106      	bne.n	8004406 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff ff03 	bl	800420c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004406:	bf00      	nop
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	40003800 	.word	0x40003800
 8004414:	40003400 	.word	0x40003400

08004418 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e267      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d075      	beq.n	8004522 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004436:	4b88      	ldr	r3, [pc, #544]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b04      	cmp	r3, #4
 8004440:	d00c      	beq.n	800445c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004442:	4b85      	ldr	r3, [pc, #532]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800444a:	2b08      	cmp	r3, #8
 800444c:	d112      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800444e:	4b82      	ldr	r3, [pc, #520]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004456:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800445a:	d10b      	bne.n	8004474 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800445c:	4b7e      	ldr	r3, [pc, #504]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d05b      	beq.n	8004520 <HAL_RCC_OscConfig+0x108>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d157      	bne.n	8004520 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e242      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800447c:	d106      	bne.n	800448c <HAL_RCC_OscConfig+0x74>
 800447e:	4b76      	ldr	r3, [pc, #472]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a75      	ldr	r2, [pc, #468]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004488:	6013      	str	r3, [r2, #0]
 800448a:	e01d      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004494:	d10c      	bne.n	80044b0 <HAL_RCC_OscConfig+0x98>
 8004496:	4b70      	ldr	r3, [pc, #448]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a6f      	ldr	r2, [pc, #444]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800449c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044ac:	6013      	str	r3, [r2, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_RCC_OscConfig+0xb0>
 80044b0:	4b69      	ldr	r3, [pc, #420]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a68      	ldr	r2, [pc, #416]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b66      	ldr	r3, [pc, #408]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a65      	ldr	r2, [pc, #404]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d013      	beq.n	80044f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044d0:	f7fc fd78 	bl	8000fc4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fc fd74 	bl	8000fc4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	@ 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e207      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b5b      	ldr	r3, [pc, #364]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0f0      	beq.n	80044d8 <HAL_RCC_OscConfig+0xc0>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f8:	f7fc fd64 	bl	8000fc4 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	e008      	b.n	8004512 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004500:	f7fc fd60 	bl	8000fc4 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b64      	cmp	r3, #100	@ 0x64
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e1f3      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004512:	4b51      	ldr	r3, [pc, #324]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1f0      	bne.n	8004500 <HAL_RCC_OscConfig+0xe8>
 800451e:	e000      	b.n	8004522 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d063      	beq.n	80045f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800452e:	4b4a      	ldr	r3, [pc, #296]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00b      	beq.n	8004552 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004542:	2b08      	cmp	r3, #8
 8004544:	d11c      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004546:	4b44      	ldr	r3, [pc, #272]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d116      	bne.n	8004580 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004552:	4b41      	ldr	r3, [pc, #260]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e1c7      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800456a:	4b3b      	ldr	r3, [pc, #236]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	4937      	ldr	r1, [pc, #220]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800457a:	4313      	orrs	r3, r2
 800457c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800457e:	e03a      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d020      	beq.n	80045ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004588:	4b34      	ldr	r3, [pc, #208]	@ (800465c <HAL_RCC_OscConfig+0x244>)
 800458a:	2201      	movs	r2, #1
 800458c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fc fd19 	bl	8000fc4 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004596:	f7fc fd15 	bl	8000fc4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e1a8      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0302 	and.w	r3, r3, #2
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b28      	ldr	r3, [pc, #160]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	00db      	lsls	r3, r3, #3
 80045c2:	4925      	ldr	r1, [pc, #148]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	600b      	str	r3, [r1, #0]
 80045c8:	e015      	b.n	80045f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ca:	4b24      	ldr	r3, [pc, #144]	@ (800465c <HAL_RCC_OscConfig+0x244>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d0:	f7fc fcf8 	bl	8000fc4 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045d8:	f7fc fcf4 	bl	8000fc4 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e187      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80045ea:	4b1b      	ldr	r3, [pc, #108]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0308 	and.w	r3, r3, #8
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d036      	beq.n	8004670 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_RCC_OscConfig+0x248>)
 800460c:	2201      	movs	r2, #1
 800460e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004610:	f7fc fcd8 	bl	8000fc4 <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004618:	f7fc fcd4 	bl	8000fc4 <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e167      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800462a:	4b0b      	ldr	r3, [pc, #44]	@ (8004658 <HAL_RCC_OscConfig+0x240>)
 800462c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x200>
 8004636:	e01b      	b.n	8004670 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004638:	4b09      	ldr	r3, [pc, #36]	@ (8004660 <HAL_RCC_OscConfig+0x248>)
 800463a:	2200      	movs	r2, #0
 800463c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800463e:	f7fc fcc1 	bl	8000fc4 <HAL_GetTick>
 8004642:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004644:	e00e      	b.n	8004664 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004646:	f7fc fcbd 	bl	8000fc4 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d907      	bls.n	8004664 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	e150      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004658:	40023800 	.word	0x40023800
 800465c:	42470000 	.word	0x42470000
 8004660:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004664:	4b88      	ldr	r3, [pc, #544]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004666:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ea      	bne.n	8004646 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b00      	cmp	r3, #0
 800467a:	f000 8097 	beq.w	80047ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800467e:	2300      	movs	r3, #0
 8004680:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004682:	4b81      	ldr	r3, [pc, #516]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10f      	bne.n	80046ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
 8004692:	4b7d      	ldr	r3, [pc, #500]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004696:	4a7c      	ldr	r2, [pc, #496]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004698:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800469c:	6413      	str	r3, [r2, #64]	@ 0x40
 800469e:	4b7a      	ldr	r3, [pc, #488]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046a6:	60bb      	str	r3, [r7, #8]
 80046a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046aa:	2301      	movs	r3, #1
 80046ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046ae:	4b77      	ldr	r3, [pc, #476]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d118      	bne.n	80046ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ba:	4b74      	ldr	r3, [pc, #464]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a73      	ldr	r2, [pc, #460]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046c6:	f7fc fc7d 	bl	8000fc4 <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ce:	f7fc fc79 	bl	8000fc4 <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e10c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e0:	4b6a      	ldr	r3, [pc, #424]	@ (800488c <HAL_RCC_OscConfig+0x474>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d106      	bne.n	8004702 <HAL_RCC_OscConfig+0x2ea>
 80046f4:	4b64      	ldr	r3, [pc, #400]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80046f8:	4a63      	ldr	r2, [pc, #396]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8004700:	e01c      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b05      	cmp	r3, #5
 8004708:	d10c      	bne.n	8004724 <HAL_RCC_OscConfig+0x30c>
 800470a:	4b5f      	ldr	r3, [pc, #380]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800470c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800470e:	4a5e      	ldr	r2, [pc, #376]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	6713      	str	r3, [r2, #112]	@ 0x70
 8004716:	4b5c      	ldr	r3, [pc, #368]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800471a:	4a5b      	ldr	r2, [pc, #364]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6713      	str	r3, [r2, #112]	@ 0x70
 8004722:	e00b      	b.n	800473c <HAL_RCC_OscConfig+0x324>
 8004724:	4b58      	ldr	r3, [pc, #352]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004728:	4a57      	ldr	r2, [pc, #348]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800472a:	f023 0301 	bic.w	r3, r3, #1
 800472e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004730:	4b55      	ldr	r3, [pc, #340]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004732:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004734:	4a54      	ldr	r2, [pc, #336]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004736:	f023 0304 	bic.w	r3, r3, #4
 800473a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d015      	beq.n	8004770 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fc fc3e 	bl	8000fc4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800474a:	e00a      	b.n	8004762 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800474c:	f7fc fc3a 	bl	8000fc4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	f241 3288 	movw	r2, #5000	@ 0x1388
 800475a:	4293      	cmp	r3, r2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e0cb      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004762:	4b49      	ldr	r3, [pc, #292]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0ee      	beq.n	800474c <HAL_RCC_OscConfig+0x334>
 800476e:	e014      	b.n	800479a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004770:	f7fc fc28 	bl	8000fc4 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fc fc24 	bl	8000fc4 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e0b5      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800478e:	4b3e      	ldr	r3, [pc, #248]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004790:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1ee      	bne.n	8004778 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800479a:	7dfb      	ldrb	r3, [r7, #23]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047a0:	4b39      	ldr	r3, [pc, #228]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a4:	4a38      	ldr	r2, [pc, #224]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80a1 	beq.w	80048f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047b6:	4b34      	ldr	r3, [pc, #208]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d05c      	beq.n	800487c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d141      	bne.n	800484e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ca:	4b31      	ldr	r3, [pc, #196]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d0:	f7fc fbf8 	bl	8000fc4 <HAL_GetTick>
 80047d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047d6:	e008      	b.n	80047ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047d8:	f7fc fbf4 	bl	8000fc4 <HAL_GetTick>
 80047dc:	4602      	mov	r2, r0
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	1ad3      	subs	r3, r2, r3
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e087      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ea:	4b27      	ldr	r3, [pc, #156]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d1f0      	bne.n	80047d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	69da      	ldr	r2, [r3, #28]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004804:	019b      	lsls	r3, r3, #6
 8004806:	431a      	orrs	r2, r3
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	3b01      	subs	r3, #1
 8004810:	041b      	lsls	r3, r3, #16
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004818:	061b      	lsls	r3, r3, #24
 800481a:	491b      	ldr	r1, [pc, #108]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 800481c:	4313      	orrs	r3, r2
 800481e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fc fbcd 	bl	8000fc4 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800482e:	f7fc fbc9 	bl	8000fc4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e05c      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004840:	4b11      	ldr	r3, [pc, #68]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x416>
 800484c:	e054      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800484e:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <HAL_RCC_OscConfig+0x478>)
 8004850:	2200      	movs	r2, #0
 8004852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004854:	f7fc fbb6 	bl	8000fc4 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc fbb2 	bl	8000fc4 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e045      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_RCC_OscConfig+0x470>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d1f0      	bne.n	800485c <HAL_RCC_OscConfig+0x444>
 800487a:	e03d      	b.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d107      	bne.n	8004894 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e038      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
 8004888:	40023800 	.word	0x40023800
 800488c:	40007000 	.word	0x40007000
 8004890:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004894:	4b1b      	ldr	r3, [pc, #108]	@ (8004904 <HAL_RCC_OscConfig+0x4ec>)
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d028      	beq.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d121      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d11a      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048be:	68fa      	ldr	r2, [r7, #12]
 80048c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80048c4:	4013      	ands	r3, r2
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d111      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d107      	bne.n	80048f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d001      	beq.n	80048f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e000      	b.n	80048fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	40023800 	.word	0x40023800

08004908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e0cc      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800491c:	4b68      	ldr	r3, [pc, #416]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	683a      	ldr	r2, [r7, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d90c      	bls.n	8004944 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492a:	4b65      	ldr	r3, [pc, #404]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004932:	4b63      	ldr	r3, [pc, #396]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0307 	and.w	r3, r3, #7
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	429a      	cmp	r2, r3
 800493e:	d001      	beq.n	8004944 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e0b8      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0302 	and.w	r3, r3, #2
 800494c:	2b00      	cmp	r3, #0
 800494e:	d020      	beq.n	8004992 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0304 	and.w	r3, r3, #4
 8004958:	2b00      	cmp	r3, #0
 800495a:	d005      	beq.n	8004968 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800495c:	4b59      	ldr	r3, [pc, #356]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	4a58      	ldr	r2, [pc, #352]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004966:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f003 0308 	and.w	r3, r3, #8
 8004970:	2b00      	cmp	r3, #0
 8004972:	d005      	beq.n	8004980 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004974:	4b53      	ldr	r3, [pc, #332]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	4a52      	ldr	r2, [pc, #328]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800497a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800497e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004980:	4b50      	ldr	r3, [pc, #320]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	494d      	ldr	r1, [pc, #308]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	4313      	orrs	r3, r2
 8004990:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	2b00      	cmp	r3, #0
 800499c:	d044      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	2b01      	cmp	r3, #1
 80049a4:	d107      	bne.n	80049b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049a6:	4b47      	ldr	r3, [pc, #284]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d119      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e07f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d003      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d107      	bne.n	80049d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049c6:	4b3f      	ldr	r3, [pc, #252]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e06f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049d6:	4b3b      	ldr	r3, [pc, #236]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e067      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e6:	4b37      	ldr	r3, [pc, #220]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 0203 	bic.w	r2, r3, #3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	4934      	ldr	r1, [pc, #208]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049f8:	f7fc fae4 	bl	8000fc4 <HAL_GetTick>
 80049fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049fe:	e00a      	b.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a00:	f7fc fae0 	bl	8000fc4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e04f      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a16:	4b2b      	ldr	r3, [pc, #172]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 020c 	and.w	r2, r3, #12
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d1eb      	bne.n	8004a00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a28:	4b25      	ldr	r3, [pc, #148]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0307 	and.w	r3, r3, #7
 8004a30:	683a      	ldr	r2, [r7, #0]
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d20c      	bcs.n	8004a50 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a36:	4b22      	ldr	r3, [pc, #136]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a38:	683a      	ldr	r2, [r7, #0]
 8004a3a:	b2d2      	uxtb	r2, r2
 8004a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0307 	and.w	r3, r3, #7
 8004a46:	683a      	ldr	r2, [r7, #0]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d001      	beq.n	8004a50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e032      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d008      	beq.n	8004a6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a5c:	4b19      	ldr	r3, [pc, #100]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	4916      	ldr	r1, [pc, #88]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0308 	and.w	r3, r3, #8
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d009      	beq.n	8004a8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a7a:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	490e      	ldr	r1, [pc, #56]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a8e:	f000 f821 	bl	8004ad4 <HAL_RCC_GetSysClockFreq>
 8004a92:	4602      	mov	r2, r0
 8004a94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ac4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	091b      	lsrs	r3, r3, #4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	490a      	ldr	r1, [pc, #40]	@ (8004ac8 <HAL_RCC_ClockConfig+0x1c0>)
 8004aa0:	5ccb      	ldrb	r3, [r1, r3]
 8004aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa6:	4a09      	ldr	r2, [pc, #36]	@ (8004acc <HAL_RCC_ClockConfig+0x1c4>)
 8004aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fa44 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3710      	adds	r7, #16
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	40023c00 	.word	0x40023c00
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	08009644 	.word	0x08009644
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	20000004 	.word	0x20000004

08004ad4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ad8:	b094      	sub	sp, #80	@ 0x50
 8004ada:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004adc:	2300      	movs	r3, #0
 8004ade:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004aec:	4b79      	ldr	r3, [pc, #484]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f003 030c 	and.w	r3, r3, #12
 8004af4:	2b08      	cmp	r3, #8
 8004af6:	d00d      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x40>
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	f200 80e1 	bhi.w	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d002      	beq.n	8004b08 <HAL_RCC_GetSysClockFreq+0x34>
 8004b02:	2b04      	cmp	r3, #4
 8004b04:	d003      	beq.n	8004b0e <HAL_RCC_GetSysClockFreq+0x3a>
 8004b06:	e0db      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b08:	4b73      	ldr	r3, [pc, #460]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b0a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b0c:	e0db      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b0e:	4b73      	ldr	r3, [pc, #460]	@ (8004cdc <HAL_RCC_GetSysClockFreq+0x208>)
 8004b10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b12:	e0d8      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b14:	4b6f      	ldr	r3, [pc, #444]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b1c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b1e:	4b6d      	ldr	r3, [pc, #436]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	2200      	movs	r2, #0
 8004b32:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b3e:	2300      	movs	r3, #0
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b42:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004b46:	4622      	mov	r2, r4
 8004b48:	462b      	mov	r3, r5
 8004b4a:	f04f 0000 	mov.w	r0, #0
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	0159      	lsls	r1, r3, #5
 8004b54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b58:	0150      	lsls	r0, r2, #5
 8004b5a:	4602      	mov	r2, r0
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	4621      	mov	r1, r4
 8004b60:	1a51      	subs	r1, r2, r1
 8004b62:	6139      	str	r1, [r7, #16]
 8004b64:	4629      	mov	r1, r5
 8004b66:	eb63 0301 	sbc.w	r3, r3, r1
 8004b6a:	617b      	str	r3, [r7, #20]
 8004b6c:	f04f 0200 	mov.w	r2, #0
 8004b70:	f04f 0300 	mov.w	r3, #0
 8004b74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b78:	4659      	mov	r1, fp
 8004b7a:	018b      	lsls	r3, r1, #6
 8004b7c:	4651      	mov	r1, sl
 8004b7e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004b82:	4651      	mov	r1, sl
 8004b84:	018a      	lsls	r2, r1, #6
 8004b86:	4651      	mov	r1, sl
 8004b88:	ebb2 0801 	subs.w	r8, r2, r1
 8004b8c:	4659      	mov	r1, fp
 8004b8e:	eb63 0901 	sbc.w	r9, r3, r1
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004b9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ba2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ba6:	4690      	mov	r8, r2
 8004ba8:	4699      	mov	r9, r3
 8004baa:	4623      	mov	r3, r4
 8004bac:	eb18 0303 	adds.w	r3, r8, r3
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	eb49 0303 	adc.w	r3, r9, r3
 8004bb8:	60fb      	str	r3, [r7, #12]
 8004bba:	f04f 0200 	mov.w	r2, #0
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004bc6:	4629      	mov	r1, r5
 8004bc8:	024b      	lsls	r3, r1, #9
 8004bca:	4621      	mov	r1, r4
 8004bcc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004bd0:	4621      	mov	r1, r4
 8004bd2:	024a      	lsls	r2, r1, #9
 8004bd4:	4610      	mov	r0, r2
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004bda:	2200      	movs	r2, #0
 8004bdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004bde:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004be0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004be4:	f7fb faf0 	bl	80001c8 <__aeabi_uldivmod>
 8004be8:	4602      	mov	r2, r0
 8004bea:	460b      	mov	r3, r1
 8004bec:	4613      	mov	r3, r2
 8004bee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bf0:	e058      	b.n	8004ca4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bf2:	4b38      	ldr	r3, [pc, #224]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	099b      	lsrs	r3, r3, #6
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004c02:	623b      	str	r3, [r7, #32]
 8004c04:	2300      	movs	r3, #0
 8004c06:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c08:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004c0c:	4642      	mov	r2, r8
 8004c0e:	464b      	mov	r3, r9
 8004c10:	f04f 0000 	mov.w	r0, #0
 8004c14:	f04f 0100 	mov.w	r1, #0
 8004c18:	0159      	lsls	r1, r3, #5
 8004c1a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c1e:	0150      	lsls	r0, r2, #5
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	4641      	mov	r1, r8
 8004c26:	ebb2 0a01 	subs.w	sl, r2, r1
 8004c2a:	4649      	mov	r1, r9
 8004c2c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004c3c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004c40:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004c44:	ebb2 040a 	subs.w	r4, r2, sl
 8004c48:	eb63 050b 	sbc.w	r5, r3, fp
 8004c4c:	f04f 0200 	mov.w	r2, #0
 8004c50:	f04f 0300 	mov.w	r3, #0
 8004c54:	00eb      	lsls	r3, r5, #3
 8004c56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c5a:	00e2      	lsls	r2, r4, #3
 8004c5c:	4614      	mov	r4, r2
 8004c5e:	461d      	mov	r5, r3
 8004c60:	4643      	mov	r3, r8
 8004c62:	18e3      	adds	r3, r4, r3
 8004c64:	603b      	str	r3, [r7, #0]
 8004c66:	464b      	mov	r3, r9
 8004c68:	eb45 0303 	adc.w	r3, r5, r3
 8004c6c:	607b      	str	r3, [r7, #4]
 8004c6e:	f04f 0200 	mov.w	r2, #0
 8004c72:	f04f 0300 	mov.w	r3, #0
 8004c76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	028b      	lsls	r3, r1, #10
 8004c7e:	4621      	mov	r1, r4
 8004c80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c84:	4621      	mov	r1, r4
 8004c86:	028a      	lsls	r2, r1, #10
 8004c88:	4610      	mov	r0, r2
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c8e:	2200      	movs	r2, #0
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	61fa      	str	r2, [r7, #28]
 8004c94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c98:	f7fb fa96 	bl	80001c8 <__aeabi_uldivmod>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	460b      	mov	r3, r1
 8004ca0:	4613      	mov	r3, r2
 8004ca2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8004cd4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	3301      	adds	r3, #1
 8004cb0:	005b      	lsls	r3, r3, #1
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004cb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cbe:	e002      	b.n	8004cc6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cc0:	4b05      	ldr	r3, [pc, #20]	@ (8004cd8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3750      	adds	r7, #80	@ 0x50
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	007a1200 	.word	0x007a1200

08004ce0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ce4:	4b03      	ldr	r3, [pc, #12]	@ (8004cf4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	20000000 	.word	0x20000000

08004cf8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004cfc:	f7ff fff0 	bl	8004ce0 <HAL_RCC_GetHCLKFreq>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b05      	ldr	r3, [pc, #20]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	0a9b      	lsrs	r3, r3, #10
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	4903      	ldr	r1, [pc, #12]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d0e:	5ccb      	ldrb	r3, [r1, r3]
 8004d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	08009654 	.word	0x08009654

08004d20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0301 	and.w	r3, r3, #1
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d105      	bne.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d035      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d48:	4b62      	ldr	r3, [pc, #392]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d4e:	f7fc f939 	bl	8000fc4 <HAL_GetTick>
 8004d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d54:	e008      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d56:	f7fc f935 	bl	8000fc4 <HAL_GetTick>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d901      	bls.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0b0      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d68:	4b5b      	ldr	r3, [pc, #364]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d1f0      	bne.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	019a      	lsls	r2, r3, #6
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	071b      	lsls	r3, r3, #28
 8004d80:	4955      	ldr	r1, [pc, #340]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d88:	4b52      	ldr	r3, [pc, #328]	@ (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d8e:	f7fc f919 	bl	8000fc4 <HAL_GetTick>
 8004d92:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d94:	e008      	b.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d96:	f7fc f915 	bl	8000fc4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e090      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004da8:	4b4b      	ldr	r3, [pc, #300]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 8083 	beq.w	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	4b44      	ldr	r3, [pc, #272]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dca:	4a43      	ldr	r2, [pc, #268]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dd0:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd2:	4b41      	ldr	r3, [pc, #260]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dde:	4b3f      	ldr	r3, [pc, #252]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a3e      	ldr	r2, [pc, #248]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dea:	f7fc f8eb 	bl	8000fc4 <HAL_GetTick>
 8004dee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004df2:	f7fc f8e7 	bl	8000fc4 <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e062      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004e04:	4b35      	ldr	r3, [pc, #212]	@ (8004edc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e10:	4b31      	ldr	r3, [pc, #196]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e18:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02f      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d028      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e36:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e38:	4b29      	ldr	r3, [pc, #164]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e44:	4a24      	ldr	r2, [pc, #144]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e4a:	4b23      	ldr	r3, [pc, #140]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d114      	bne.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e56:	f7fc f8b5 	bl	8000fc4 <HAL_GetTick>
 8004e5a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fc f8b1 	bl	8000fc4 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e02a      	b.n	8004eca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	4b18      	ldr	r3, [pc, #96]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ee      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e8c:	d10d      	bne.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e8e:	4b12      	ldr	r3, [pc, #72]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004e9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ea2:	490d      	ldr	r1, [pc, #52]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]
 8004ea8:	e005      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004eaa:	4b0b      	ldr	r3, [pc, #44]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004eb4:	6093      	str	r3, [r2, #8]
 8004eb6:	4b08      	ldr	r3, [pc, #32]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec2:	4905      	ldr	r1, [pc, #20]	@ (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
 8004ed2:	bf00      	nop
 8004ed4:	42470068 	.word	0x42470068
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42470e40 	.word	0x42470e40

08004ee4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004eec:	2300      	movs	r3, #0
 8004eee:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d13f      	bne.n	8004f82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004f02:	4b24      	ldr	r3, [pc, #144]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f0a:	60fb      	str	r3, [r7, #12]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d006      	beq.n	8004f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004f18:	d12f      	bne.n	8004f7a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8004f98 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f1c:	617b      	str	r3, [r7, #20]
          break;
 8004f1e:	e02f      	b.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004f20:	4b1c      	ldr	r3, [pc, #112]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004f2c:	d108      	bne.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f2e:	4b19      	ldr	r3, [pc, #100]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f36:	4a19      	ldr	r2, [pc, #100]	@ (8004f9c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	e007      	b.n	8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f40:	4b14      	ldr	r3, [pc, #80]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004f48:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f50:	4b10      	ldr	r3, [pc, #64]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f56:	099b      	lsrs	r3, r3, #6
 8004f58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f64:	4b0b      	ldr	r3, [pc, #44]	@ (8004f94 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004f66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004f6a:	0f1b      	lsrs	r3, r3, #28
 8004f6c:	f003 0307 	and.w	r3, r3, #7
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f76:	617b      	str	r3, [r7, #20]
          break;
 8004f78:	e002      	b.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
          break;
 8004f7e:	bf00      	nop
        }
      }
      break;
 8004f80:	e000      	b.n	8004f84 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8004f82:	bf00      	nop
    }
  }
  return frequency;
 8004f84:	697b      	ldr	r3, [r7, #20]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	371c      	adds	r7, #28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	40023800 	.word	0x40023800
 8004f98:	00bb8000 	.word	0x00bb8000
 8004f9c:	007a1200 	.word	0x007a1200
 8004fa0:	00f42400 	.word	0x00f42400

08004fa4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e07b      	b.n	80050ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d108      	bne.n	8004fd0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004fc6:	d009      	beq.n	8004fdc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	61da      	str	r2, [r3, #28]
 8004fce:	e005      	b.n	8004fdc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d106      	bne.n	8004ffc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb fd7a 	bl	8000af0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005012:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005024:	431a      	orrs	r2, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	691b      	ldr	r3, [r3, #16]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	69db      	ldr	r3, [r3, #28]
 8005052:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005056:	431a      	orrs	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a1b      	ldr	r3, [r3, #32]
 800505c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005060:	ea42 0103 	orr.w	r1, r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	0c1b      	lsrs	r3, r3, #16
 800507a:	f003 0104 	and.w	r1, r3, #4
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005082:	f003 0210 	and.w	r2, r3, #16
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	430a      	orrs	r2, r1
 800508c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	69da      	ldr	r2, [r3, #28]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800509c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	b082      	sub	sp, #8
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d101      	bne.n	80050c8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e041      	b.n	800514c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d106      	bne.n	80050e2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f7fb fea3 	bl	8000e28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2202      	movs	r2, #2
 80050e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	3304      	adds	r3, #4
 80050f2:	4619      	mov	r1, r3
 80050f4:	4610      	mov	r0, r2
 80050f6:	f000 fa7d 	bl	80055f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2201      	movs	r2, #1
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3708      	adds	r7, #8
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04e      	b.n	800520a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a23      	ldr	r2, [pc, #140]	@ (8005218 <HAL_TIM_Base_Start_IT+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d022      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005196:	d01d      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	@ (800521c <HAL_TIM_Base_Start_IT+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d018      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	@ (8005220 <HAL_TIM_Base_Start_IT+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d013      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	@ (8005224 <HAL_TIM_Base_Start_IT+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d00e      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	@ (8005228 <HAL_TIM_Base_Start_IT+0xd4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d009      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a19      	ldr	r2, [pc, #100]	@ (800522c <HAL_TIM_Base_Start_IT+0xd8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d004      	beq.n	80051d4 <HAL_TIM_Base_Start_IT+0x80>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a18      	ldr	r2, [pc, #96]	@ (8005230 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d111      	bne.n	80051f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 0307 	and.w	r3, r3, #7
 80051de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d010      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f042 0201 	orr.w	r2, r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f6:	e007      	b.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 0201 	orr.w	r2, r2, #1
 8005206:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40010000 	.word	0x40010000
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40000c00 	.word	0x40000c00
 8005228:	40010400 	.word	0x40010400
 800522c:	40014000 	.word	0x40014000
 8005230:	40001800 	.word	0x40001800

08005234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d020      	beq.n	8005298 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f003 0302 	and.w	r3, r3, #2
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01b      	beq.n	8005298 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f06f 0202 	mvn.w	r2, #2
 8005268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d003      	beq.n	8005286 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f999 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 8005284:	e005      	b.n	8005292 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 f98b 	bl	80055a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 f99c 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2200      	movs	r2, #0
 8005296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0304 	and.w	r3, r3, #4
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d020      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d01b      	beq.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0204 	mvn.w	r2, #4
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f973 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f965 	bl	80055a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f976 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d020      	beq.n	8005330 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f003 0308 	and.w	r3, r3, #8
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d01b      	beq.n	8005330 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0208 	mvn.w	r2, #8
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2204      	movs	r2, #4
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f94d 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f93f 	bl	80055a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f950 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f003 0310 	and.w	r3, r3, #16
 8005336:	2b00      	cmp	r3, #0
 8005338:	d020      	beq.n	800537c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01b      	beq.n	800537c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f06f 0210 	mvn.w	r2, #16
 800534c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2208      	movs	r2, #8
 8005352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f927 	bl	80055b6 <HAL_TIM_IC_CaptureCallback>
 8005368:	e005      	b.n	8005376 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f919 	bl	80055a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 f92a 	bl	80055ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d00c      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f06f 0201 	mvn.w	r2, #1
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7fb fab0 	bl	8000900 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00c      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d007      	beq.n	80053c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 fae4 	bl	800598c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d007      	beq.n	80053e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 f8fb 	bl	80055de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00c      	beq.n	800540c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f003 0320 	and.w	r3, r3, #32
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d007      	beq.n	800540c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0220 	mvn.w	r2, #32
 8005404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fab6 	bl	8005978 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005428:	2b01      	cmp	r3, #1
 800542a:	d101      	bne.n	8005430 <HAL_TIM_ConfigClockSource+0x1c>
 800542c:	2302      	movs	r3, #2
 800542e:	e0b4      	b.n	800559a <HAL_TIM_ConfigClockSource+0x186>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800544e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005456:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005468:	d03e      	beq.n	80054e8 <HAL_TIM_ConfigClockSource+0xd4>
 800546a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800546e:	f200 8087 	bhi.w	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005476:	f000 8086 	beq.w	8005586 <HAL_TIM_ConfigClockSource+0x172>
 800547a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800547e:	d87f      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b70      	cmp	r3, #112	@ 0x70
 8005482:	d01a      	beq.n	80054ba <HAL_TIM_ConfigClockSource+0xa6>
 8005484:	2b70      	cmp	r3, #112	@ 0x70
 8005486:	d87b      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b60      	cmp	r3, #96	@ 0x60
 800548a:	d050      	beq.n	800552e <HAL_TIM_ConfigClockSource+0x11a>
 800548c:	2b60      	cmp	r3, #96	@ 0x60
 800548e:	d877      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b50      	cmp	r3, #80	@ 0x50
 8005492:	d03c      	beq.n	800550e <HAL_TIM_ConfigClockSource+0xfa>
 8005494:	2b50      	cmp	r3, #80	@ 0x50
 8005496:	d873      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b40      	cmp	r3, #64	@ 0x40
 800549a:	d058      	beq.n	800554e <HAL_TIM_ConfigClockSource+0x13a>
 800549c:	2b40      	cmp	r3, #64	@ 0x40
 800549e:	d86f      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b30      	cmp	r3, #48	@ 0x30
 80054a2:	d064      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054a4:	2b30      	cmp	r3, #48	@ 0x30
 80054a6:	d86b      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d060      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d867      	bhi.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05c      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d05a      	beq.n	800556e <HAL_TIM_ConfigClockSource+0x15a>
 80054b8:	e062      	b.n	8005580 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ca:	f000 f9b9 	bl	8005840 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80054dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68ba      	ldr	r2, [r7, #8]
 80054e4:	609a      	str	r2, [r3, #8]
      break;
 80054e6:	e04f      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054f8:	f000 f9a2 	bl	8005840 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	689a      	ldr	r2, [r3, #8]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800550a:	609a      	str	r2, [r3, #8]
      break;
 800550c:	e03c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800551a:	461a      	mov	r2, r3
 800551c:	f000 f916 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2150      	movs	r1, #80	@ 0x50
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f96f 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 800552c:	e02c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800553a:	461a      	mov	r2, r3
 800553c:	f000 f935 	bl	80057aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2160      	movs	r1, #96	@ 0x60
 8005546:	4618      	mov	r0, r3
 8005548:	f000 f95f 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 800554c:	e01c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	461a      	mov	r2, r3
 800555c:	f000 f8f6 	bl	800574c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2140      	movs	r1, #64	@ 0x40
 8005566:	4618      	mov	r0, r3
 8005568:	f000 f94f 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 800556c:	e00c      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4619      	mov	r1, r3
 8005578:	4610      	mov	r0, r2
 800557a:	f000 f946 	bl	800580a <TIM_ITRx_SetConfig>
      break;
 800557e:	e003      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	73fb      	strb	r3, [r7, #15]
      break;
 8005584:	e000      	b.n	8005588 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005586:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2201      	movs	r2, #1
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005598:	7bfb      	ldrb	r3, [r7, #15]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b083      	sub	sp, #12
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055aa:	bf00      	nop
 80055ac:	370c      	adds	r7, #12
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr

080055b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055b6:	b480      	push	{r7}
 80055b8:	b083      	sub	sp, #12
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055be:	bf00      	nop
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr

080055ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ca:	b480      	push	{r7}
 80055cc:	b083      	sub	sp, #12
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d2:	bf00      	nop
 80055d4:	370c      	adds	r7, #12
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
	...

080055f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
 80055fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a46      	ldr	r2, [pc, #280]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d013      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005612:	d00f      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4a43      	ldr	r2, [pc, #268]	@ (8005724 <TIM_Base_SetConfig+0x130>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d00b      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a42      	ldr	r2, [pc, #264]	@ (8005728 <TIM_Base_SetConfig+0x134>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d007      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a41      	ldr	r2, [pc, #260]	@ (800572c <TIM_Base_SetConfig+0x138>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0x40>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a40      	ldr	r2, [pc, #256]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d108      	bne.n	8005646 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800563a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a35      	ldr	r2, [pc, #212]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d02b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005654:	d027      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a32      	ldr	r2, [pc, #200]	@ (8005724 <TIM_Base_SetConfig+0x130>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d023      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a31      	ldr	r2, [pc, #196]	@ (8005728 <TIM_Base_SetConfig+0x134>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d01f      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a30      	ldr	r2, [pc, #192]	@ (800572c <TIM_Base_SetConfig+0x138>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d01b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2f      	ldr	r2, [pc, #188]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d017      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a2e      	ldr	r2, [pc, #184]	@ (8005734 <TIM_Base_SetConfig+0x140>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a2d      	ldr	r2, [pc, #180]	@ (8005738 <TIM_Base_SetConfig+0x144>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d00f      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a2c      	ldr	r2, [pc, #176]	@ (800573c <TIM_Base_SetConfig+0x148>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d00b      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	4a2b      	ldr	r2, [pc, #172]	@ (8005740 <TIM_Base_SetConfig+0x14c>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d007      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	4a2a      	ldr	r2, [pc, #168]	@ (8005744 <TIM_Base_SetConfig+0x150>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d003      	beq.n	80056a6 <TIM_Base_SetConfig+0xb2>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	4a29      	ldr	r2, [pc, #164]	@ (8005748 <TIM_Base_SetConfig+0x154>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	68db      	ldr	r3, [r3, #12]
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	689a      	ldr	r2, [r3, #8]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	4a10      	ldr	r2, [pc, #64]	@ (8005720 <TIM_Base_SetConfig+0x12c>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d003      	beq.n	80056ec <TIM_Base_SetConfig+0xf8>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a12      	ldr	r2, [pc, #72]	@ (8005730 <TIM_Base_SetConfig+0x13c>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d103      	bne.n	80056f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	691a      	ldr	r2, [r3, #16]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b01      	cmp	r3, #1
 8005704:	d105      	bne.n	8005712 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691b      	ldr	r3, [r3, #16]
 800570a:	f023 0201 	bic.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	611a      	str	r2, [r3, #16]
  }
}
 8005712:	bf00      	nop
 8005714:	3714      	adds	r7, #20
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr
 800571e:	bf00      	nop
 8005720:	40010000 	.word	0x40010000
 8005724:	40000400 	.word	0x40000400
 8005728:	40000800 	.word	0x40000800
 800572c:	40000c00 	.word	0x40000c00
 8005730:	40010400 	.word	0x40010400
 8005734:	40014000 	.word	0x40014000
 8005738:	40014400 	.word	0x40014400
 800573c:	40014800 	.word	0x40014800
 8005740:	40001800 	.word	0x40001800
 8005744:	40001c00 	.word	0x40001c00
 8005748:	40002000 	.word	0x40002000

0800574c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f023 0201 	bic.w	r2, r3, #1
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	699b      	ldr	r3, [r3, #24]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005776:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	4313      	orrs	r3, r2
 8005780:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f023 030a 	bic.w	r3, r3, #10
 8005788:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578a:	697a      	ldr	r2, [r7, #20]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4313      	orrs	r3, r2
 8005790:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	621a      	str	r2, [r3, #32]
}
 800579e:	bf00      	nop
 80057a0:	371c      	adds	r7, #28
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr

080057aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b087      	sub	sp, #28
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a1b      	ldr	r3, [r3, #32]
 80057c0:	f023 0210 	bic.w	r2, r3, #16
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	031b      	lsls	r3, r3, #12
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	4313      	orrs	r3, r2
 80057de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	621a      	str	r2, [r3, #32]
}
 80057fe:	bf00      	nop
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580a:	b480      	push	{r7}
 800580c:	b085      	sub	sp, #20
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
 8005812:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005820:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	4313      	orrs	r3, r2
 8005828:	f043 0307 	orr.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	68fa      	ldr	r2, [r7, #12]
 8005832:	609a      	str	r2, [r3, #8]
}
 8005834:	bf00      	nop
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800585a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	021a      	lsls	r2, r3, #8
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	431a      	orrs	r2, r3
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4313      	orrs	r3, r2
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	609a      	str	r2, [r3, #8]
}
 8005874:	bf00      	nop
 8005876:	371c      	adds	r7, #28
 8005878:	46bd      	mov	sp, r7
 800587a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587e:	4770      	bx	lr

08005880 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005880:	b480      	push	{r7}
 8005882:	b085      	sub	sp, #20
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005894:	2302      	movs	r3, #2
 8005896:	e05a      	b.n	800594e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2202      	movs	r2, #2
 80058a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a21      	ldr	r2, [pc, #132]	@ (800595c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d022      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058e4:	d01d      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1d      	ldr	r2, [pc, #116]	@ (8005960 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d018      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005964 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a1a      	ldr	r2, [pc, #104]	@ (8005968 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d00e      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a18      	ldr	r2, [pc, #96]	@ (800596c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d009      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a17      	ldr	r2, [pc, #92]	@ (8005970 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d004      	beq.n	8005922 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a15      	ldr	r2, [pc, #84]	@ (8005974 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d10c      	bne.n	800593c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005928:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	4313      	orrs	r3, r2
 8005932:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	40010000 	.word	0x40010000
 8005960:	40000400 	.word	0x40000400
 8005964:	40000800 	.word	0x40000800
 8005968:	40000c00 	.word	0x40000c00
 800596c:	40010400 	.word	0x40010400
 8005970:	40014000 	.word	0x40014000
 8005974:	40001800 	.word	0x40001800

08005978 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005978:	b480      	push	{r7}
 800597a:	b083      	sub	sp, #12
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005994:	bf00      	nop
 8005996:	370c      	adds	r7, #12
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80059a0:	b084      	sub	sp, #16
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	f107 001c 	add.w	r0, r7, #28
 80059ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d123      	bne.n	8005a02 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80059ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80059e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d105      	bne.n	80059f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f9dc 	bl	8005db4 <USB_CoreReset>
 80059fc:	4603      	mov	r3, r0
 80059fe:	73fb      	strb	r3, [r7, #15]
 8005a00:	e01b      	b.n	8005a3a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9d0 	bl	8005db4 <USB_CoreReset>
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005a18:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d106      	bne.n	8005a2e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a24:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8005a2c:	e005      	b.n	8005a3a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a32:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005a3a:	7fbb      	ldrb	r3, [r7, #30]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10b      	bne.n	8005a58 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f043 0206 	orr.w	r2, r3, #6
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f043 0220 	orr.w	r2, r3, #32
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3710      	adds	r7, #16
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a64:	b004      	add	sp, #16
 8005a66:	4770      	bx	lr

08005a68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f043 0201 	orr.w	r2, r3, #1
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	370c      	adds	r7, #12
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr

08005a8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a8a:	b480      	push	{r7}
 8005a8c:	b083      	sub	sp, #12
 8005a8e:	af00      	add	r7, sp, #0
 8005a90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f023 0201 	bic.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	370c      	adds	r7, #12
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d115      	bne.n	8005afa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005ada:	200a      	movs	r0, #10
 8005adc:	f7fb fa7e 	bl	8000fdc <HAL_Delay>
      ms += 10U;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	330a      	adds	r3, #10
 8005ae4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 f956 	bl	8005d98 <USB_GetMode>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d01e      	beq.n	8005b30 <USB_SetCurrentMode+0x84>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2bc7      	cmp	r3, #199	@ 0xc7
 8005af6:	d9f0      	bls.n	8005ada <USB_SetCurrentMode+0x2e>
 8005af8:	e01a      	b.n	8005b30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005afa:	78fb      	ldrb	r3, [r7, #3]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d115      	bne.n	8005b2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005b0c:	200a      	movs	r0, #10
 8005b0e:	f7fb fa65 	bl	8000fdc <HAL_Delay>
      ms += 10U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	330a      	adds	r3, #10
 8005b16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f93d 	bl	8005d98 <USB_GetMode>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d005      	beq.n	8005b30 <USB_SetCurrentMode+0x84>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2bc7      	cmp	r3, #199	@ 0xc7
 8005b28:	d9f0      	bls.n	8005b0c <USB_SetCurrentMode+0x60>
 8005b2a:	e001      	b.n	8005b30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e005      	b.n	8005b3c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2bc8      	cmp	r3, #200	@ 0xc8
 8005b34:	d101      	bne.n	8005b3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b085      	sub	sp, #20
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	3301      	adds	r3, #1
 8005b56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b5e:	d901      	bls.n	8005b64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e01b      	b.n	8005b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	daf2      	bge.n	8005b52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	019b      	lsls	r3, r3, #6
 8005b74:	f043 0220 	orr.w	r2, r3, #32
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	3301      	adds	r3, #1
 8005b80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b88:	d901      	bls.n	8005b8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e006      	b.n	8005b9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b20      	cmp	r3, #32
 8005b98:	d0f0      	beq.n	8005b7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005bc0:	d901      	bls.n	8005bc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005bc2:	2303      	movs	r3, #3
 8005bc4:	e018      	b.n	8005bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	daf2      	bge.n	8005bb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2210      	movs	r2, #16
 8005bd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005be4:	d901      	bls.n	8005bea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e006      	b.n	8005bf8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	f003 0310 	and.w	r3, r3, #16
 8005bf2:	2b10      	cmp	r3, #16
 8005bf4:	d0f0      	beq.n	8005bd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b089      	sub	sp, #36	@ 0x24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	4611      	mov	r1, r2
 8005c10:	461a      	mov	r2, r3
 8005c12:	460b      	mov	r3, r1
 8005c14:	71fb      	strb	r3, [r7, #7]
 8005c16:	4613      	mov	r3, r2
 8005c18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d123      	bne.n	8005c72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c2a:	88bb      	ldrh	r3, [r7, #4]
 8005c2c:	3303      	adds	r3, #3
 8005c2e:	089b      	lsrs	r3, r3, #2
 8005c30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c32:	2300      	movs	r3, #0
 8005c34:	61bb      	str	r3, [r7, #24]
 8005c36:	e018      	b.n	8005c6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	031a      	lsls	r2, r3, #12
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c44:	461a      	mov	r2, r3
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	3301      	adds	r3, #1
 8005c56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	3301      	adds	r3, #1
 8005c5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	3301      	adds	r3, #1
 8005c62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c64:	69bb      	ldr	r3, [r7, #24]
 8005c66:	3301      	adds	r3, #1
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d3e2      	bcc.n	8005c38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3724      	adds	r7, #36	@ 0x24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b08b      	sub	sp, #44	@ 0x2c
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c96:	88fb      	ldrh	r3, [r7, #6]
 8005c98:	089b      	lsrs	r3, r3, #2
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c9e:	88fb      	ldrh	r3, [r7, #6]
 8005ca0:	f003 0303 	and.w	r3, r3, #3
 8005ca4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	623b      	str	r3, [r7, #32]
 8005caa:	e014      	b.n	8005cd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	3301      	adds	r3, #1
 8005cbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	3301      	adds	r3, #1
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	623b      	str	r3, [r7, #32]
 8005cd6:	6a3a      	ldr	r2, [r7, #32]
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d3e6      	bcc.n	8005cac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cde:	8bfb      	ldrh	r3, [r7, #30]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01e      	beq.n	8005d22 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ce8:	69bb      	ldr	r3, [r7, #24]
 8005cea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005cee:	461a      	mov	r2, r3
 8005cf0:	f107 0310 	add.w	r3, r7, #16
 8005cf4:	6812      	ldr	r2, [r2, #0]
 8005cf6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	fa22 f303 	lsr.w	r3, r2, r3
 8005d04:	b2da      	uxtb	r2, r3
 8005d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d08:	701a      	strb	r2, [r3, #0]
      i++;
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	3301      	adds	r3, #1
 8005d14:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005d16:	8bfb      	ldrh	r3, [r7, #30]
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005d1c:	8bfb      	ldrh	r3, [r7, #30]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1ea      	bne.n	8005cf8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	372c      	adds	r7, #44	@ 0x2c
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b085      	sub	sp, #20
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	695b      	ldr	r3, [r3, #20]
 8005d3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	4013      	ands	r3, r2
 8005d46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005d48:	68fb      	ldr	r3, [r7, #12]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3714      	adds	r7, #20
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b085      	sub	sp, #20
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
 8005d5e:	460b      	mov	r3, r1
 8005d60:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8005d66:	78fb      	ldrb	r3, [r7, #3]
 8005d68:	015a      	lsls	r2, r3, #5
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8005d76:	78fb      	ldrb	r3, [r7, #3]
 8005d78:	015a      	lsls	r2, r3, #5
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	4013      	ands	r3, r2
 8005d88:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005d8a:	68bb      	ldr	r3, [r7, #8]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	f003 0301 	and.w	r3, r3, #1
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005dcc:	d901      	bls.n	8005dd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e01b      	b.n	8005e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	daf2      	bge.n	8005dc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f043 0201 	orr.w	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	3301      	adds	r3, #1
 8005dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005df6:	d901      	bls.n	8005dfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005df8:	2303      	movs	r3, #3
 8005dfa:	e006      	b.n	8005e0a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d0f0      	beq.n	8005dea <USB_CoreReset+0x36>

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3714      	adds	r7, #20
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e18:	b084      	sub	sp, #16
 8005e1a:	b580      	push	{r7, lr}
 8005e1c:	b086      	sub	sp, #24
 8005e1e:	af00      	add	r7, sp, #0
 8005e20:	6078      	str	r0, [r7, #4]
 8005e22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005e26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e42:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e4e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e5a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d119      	bne.n	8005ea2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005e6e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d10a      	bne.n	8005e8c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68fa      	ldr	r2, [r7, #12]
 8005e80:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e84:	f043 0304 	orr.w	r3, r3, #4
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e014      	b.n	8005eb6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005e9a:	f023 0304 	bic.w	r3, r3, #4
 8005e9e:	6013      	str	r3, [r2, #0]
 8005ea0:	e009      	b.n	8005eb6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005eb0:	f023 0304 	bic.w	r3, r3, #4
 8005eb4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005eb6:	2110      	movs	r1, #16
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f7ff fe43 	bl	8005b44 <USB_FlushTxFifo>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f7ff fe6d 	bl	8005ba8 <USB_FlushRxFifo>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d001      	beq.n	8005ed8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005ed8:	2300      	movs	r3, #0
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	e015      	b.n	8005f0a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005eea:	461a      	mov	r2, r3
 8005eec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ef0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efe:	461a      	mov	r2, r3
 8005f00:	2300      	movs	r3, #0
 8005f02:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	3301      	adds	r3, #1
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f0e:	461a      	mov	r2, r3
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d3e3      	bcc.n	8005ede <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f22:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a18      	ldr	r2, [pc, #96]	@ (8005f88 <USB_HostInit+0x170>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d10b      	bne.n	8005f44 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f32:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a15      	ldr	r2, [pc, #84]	@ (8005f8c <USB_HostInit+0x174>)
 8005f38:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	@ (8005f90 <USB_HostInit+0x178>)
 8005f3e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005f42:	e009      	b.n	8005f58 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2280      	movs	r2, #128	@ 0x80
 8005f48:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a11      	ldr	r2, [pc, #68]	@ (8005f94 <USB_HostInit+0x17c>)
 8005f4e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	4a11      	ldr	r2, [pc, #68]	@ (8005f98 <USB_HostInit+0x180>)
 8005f54:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005f58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f043 0210 	orr.w	r2, r3, #16
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	4b0a      	ldr	r3, [pc, #40]	@ (8005f9c <USB_HostInit+0x184>)
 8005f72:	4313      	orrs	r3, r2
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005f78:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3718      	adds	r7, #24
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f84:	b004      	add	sp, #16
 8005f86:	4770      	bx	lr
 8005f88:	40040000 	.word	0x40040000
 8005f8c:	01000200 	.word	0x01000200
 8005f90:	00e00300 	.word	0x00e00300
 8005f94:	00600080 	.word	0x00600080
 8005f98:	004000e0 	.word	0x004000e0
 8005f9c:	a3200008 	.word	0xa3200008

08005fa0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005fbe:	f023 0303 	bic.w	r3, r3, #3
 8005fc2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005fdc:	78fb      	ldrb	r3, [r7, #3]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d107      	bne.n	8005ff2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005fe8:	461a      	mov	r2, r3
 8005fea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005fee:	6053      	str	r3, [r2, #4]
 8005ff0:	e00c      	b.n	800600c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005ff2:	78fb      	ldrb	r3, [r7, #3]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d107      	bne.n	8006008 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005ffe:	461a      	mov	r2, r3
 8006000:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006004:	6053      	str	r3, [r2, #4]
 8006006:	e001      	b.n	800600c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800601a:	b580      	push	{r7, lr}
 800601c:	b084      	sub	sp, #16
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8006026:	2300      	movs	r3, #0
 8006028:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800603a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006044:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006048:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800604a:	2064      	movs	r0, #100	@ 0x64
 800604c:	f7fa ffc6 	bl	8000fdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006058:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800605c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800605e:	200a      	movs	r0, #10
 8006060:	f7fa ffbc 	bl	8000fdc <HAL_Delay>

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800606e:	b480      	push	{r7}
 8006070:	b085      	sub	sp, #20
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	460b      	mov	r3, r1
 8006078:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006092:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <USB_DriveVbus+0x44>
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d106      	bne.n	80060b2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	68fa      	ldr	r2, [r7, #12]
 80060a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80060ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80060b0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060bc:	d109      	bne.n	80060d2 <USB_DriveVbus+0x64>
 80060be:	78fb      	ldrb	r3, [r7, #3]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d106      	bne.n	80060d2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80060cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060d0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b085      	sub	sp, #20
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	0c5b      	lsrs	r3, r3, #17
 80060fe:	f003 0303 	and.w	r3, r3, #3
}
 8006102:	4618      	mov	r0, r3
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr

0800610e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800610e:	b480      	push	{r7}
 8006110:	b085      	sub	sp, #20
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	b29b      	uxth	r3, r3
}
 8006124:	4618      	mov	r0, r3
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b088      	sub	sp, #32
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	4608      	mov	r0, r1
 800613a:	4611      	mov	r1, r2
 800613c:	461a      	mov	r2, r3
 800613e:	4603      	mov	r3, r0
 8006140:	70fb      	strb	r3, [r7, #3]
 8006142:	460b      	mov	r3, r1
 8006144:	70bb      	strb	r3, [r7, #2]
 8006146:	4613      	mov	r3, r2
 8006148:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	015a      	lsls	r2, r3, #5
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	4413      	add	r3, r2
 800615a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800615e:	461a      	mov	r2, r3
 8006160:	f04f 33ff 	mov.w	r3, #4294967295
 8006164:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006166:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800616a:	2b03      	cmp	r3, #3
 800616c:	d87c      	bhi.n	8006268 <USB_HC_Init+0x138>
 800616e:	a201      	add	r2, pc, #4	@ (adr r2, 8006174 <USB_HC_Init+0x44>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006185 	.word	0x08006185
 8006178:	0800622b 	.word	0x0800622b
 800617c:	08006185 	.word	0x08006185
 8006180:	080061ed 	.word	0x080061ed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006190:	461a      	mov	r2, r3
 8006192:	f240 439d 	movw	r3, #1181	@ 0x49d
 8006196:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006198:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800619c:	2b00      	cmp	r3, #0
 800619e:	da10      	bge.n	80061c2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80061a0:	78fb      	ldrb	r3, [r7, #3]
 80061a2:	015a      	lsls	r2, r3, #5
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	4413      	add	r3, r2
 80061a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	0151      	lsls	r1, r2, #5
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	440a      	add	r2, r1
 80061b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061be:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80061c0:	e055      	b.n	800626e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a6f      	ldr	r2, [pc, #444]	@ (8006384 <USB_HC_Init+0x254>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d151      	bne.n	800626e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80061ca:	78fb      	ldrb	r3, [r7, #3]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	78fa      	ldrb	r2, [r7, #3]
 80061da:	0151      	lsls	r1, r2, #5
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	440a      	add	r2, r1
 80061e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80061e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80061e8:	60d3      	str	r3, [r2, #12]
      break;
 80061ea:	e040      	b.n	800626e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	015a      	lsls	r2, r3, #5
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	4413      	add	r3, r2
 80061f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061f8:	461a      	mov	r2, r3
 80061fa:	f240 639d 	movw	r3, #1693	@ 0x69d
 80061fe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006200:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006204:	2b00      	cmp	r3, #0
 8006206:	da34      	bge.n	8006272 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	015a      	lsls	r2, r3, #5
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	4413      	add	r3, r2
 8006210:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006214:	68db      	ldr	r3, [r3, #12]
 8006216:	78fa      	ldrb	r2, [r7, #3]
 8006218:	0151      	lsls	r1, r2, #5
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	440a      	add	r2, r1
 800621e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006226:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006228:	e023      	b.n	8006272 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800622a:	78fb      	ldrb	r3, [r7, #3]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	4413      	add	r3, r2
 8006232:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006236:	461a      	mov	r2, r3
 8006238:	f240 2325 	movw	r3, #549	@ 0x225
 800623c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800623e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006242:	2b00      	cmp	r3, #0
 8006244:	da17      	bge.n	8006276 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006246:	78fb      	ldrb	r3, [r7, #3]
 8006248:	015a      	lsls	r2, r3, #5
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	4413      	add	r3, r2
 800624e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	0151      	lsls	r1, r2, #5
 8006258:	693a      	ldr	r2, [r7, #16]
 800625a:	440a      	add	r2, r1
 800625c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006260:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8006264:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006266:	e006      	b.n	8006276 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	77fb      	strb	r3, [r7, #31]
      break;
 800626c:	e004      	b.n	8006278 <USB_HC_Init+0x148>
      break;
 800626e:	bf00      	nop
 8006270:	e002      	b.n	8006278 <USB_HC_Init+0x148>
      break;
 8006272:	bf00      	nop
 8006274:	e000      	b.n	8006278 <USB_HC_Init+0x148>
      break;
 8006276:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006278:	78fb      	ldrb	r3, [r7, #3]
 800627a:	015a      	lsls	r2, r3, #5
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4413      	add	r3, r2
 8006280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006284:	461a      	mov	r2, r3
 8006286:	2300      	movs	r3, #0
 8006288:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800628a:	78fb      	ldrb	r3, [r7, #3]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	4413      	add	r3, r2
 8006292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	78fa      	ldrb	r2, [r7, #3]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80062a4:	f043 0302 	orr.w	r3, r3, #2
 80062a8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80062b0:	699a      	ldr	r2, [r3, #24]
 80062b2:	78fb      	ldrb	r3, [r7, #3]
 80062b4:	f003 030f 	and.w	r3, r3, #15
 80062b8:	2101      	movs	r1, #1
 80062ba:	fa01 f303 	lsl.w	r3, r1, r3
 80062be:	6939      	ldr	r1, [r7, #16]
 80062c0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80062c4:	4313      	orrs	r3, r2
 80062c6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80062d4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da03      	bge.n	80062e4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80062dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062e0:	61bb      	str	r3, [r7, #24]
 80062e2:	e001      	b.n	80062e8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff fef9 	bl	80060e0 <USB_GetHostSpeed>
 80062ee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80062f0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d106      	bne.n	8006306 <USB_HC_Init+0x1d6>
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b02      	cmp	r3, #2
 80062fc:	d003      	beq.n	8006306 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80062fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006302:	617b      	str	r3, [r7, #20]
 8006304:	e001      	b.n	800630a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800630a:	787b      	ldrb	r3, [r7, #1]
 800630c:	059b      	lsls	r3, r3, #22
 800630e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006312:	78bb      	ldrb	r3, [r7, #2]
 8006314:	02db      	lsls	r3, r3, #11
 8006316:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800631a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800631c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006320:	049b      	lsls	r3, r3, #18
 8006322:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006326:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006328:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800632a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800632e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	431a      	orrs	r2, r3
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006338:	78fa      	ldrb	r2, [r7, #3]
 800633a:	0151      	lsls	r1, r2, #5
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	440a      	add	r2, r1
 8006340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006344:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006348:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800634a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800634e:	2b03      	cmp	r3, #3
 8006350:	d003      	beq.n	800635a <USB_HC_Init+0x22a>
 8006352:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006356:	2b01      	cmp	r3, #1
 8006358:	d10f      	bne.n	800637a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	4413      	add	r3, r2
 8006362:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	78fa      	ldrb	r2, [r7, #3]
 800636a:	0151      	lsls	r1, r2, #5
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	440a      	add	r2, r1
 8006370:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006378:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800637a:	7ffb      	ldrb	r3, [r7, #31]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3720      	adds	r7, #32
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40040000 	.word	0x40040000

08006388 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b08c      	sub	sp, #48	@ 0x30
 800638c:	af02      	add	r7, sp, #8
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	785b      	ldrb	r3, [r3, #1]
 800639e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80063a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063a4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	4a5d      	ldr	r2, [pc, #372]	@ (8006520 <USB_HC_StartXfer+0x198>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d12f      	bne.n	800640e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80063ae:	79fb      	ldrb	r3, [r7, #7]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d11c      	bne.n	80063ee <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	7c9b      	ldrb	r3, [r3, #18]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <USB_HC_StartXfer+0x3c>
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	7c9b      	ldrb	r3, [r3, #18]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d124      	bne.n	800640e <USB_HC_StartXfer+0x86>
 80063c4:	68bb      	ldr	r3, [r7, #8]
 80063c6:	799b      	ldrb	r3, [r3, #6]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d120      	bne.n	800640e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	69fa      	ldr	r2, [r7, #28]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	6a3a      	ldr	r2, [r7, #32]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ea:	60d3      	str	r3, [r2, #12]
 80063ec:	e00f      	b.n	800640e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	791b      	ldrb	r3, [r3, #4]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <USB_HC_StartXfer+0x86>
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	795b      	ldrb	r3, [r3, #5]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d107      	bne.n	800640e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	785b      	ldrb	r3, [r3, #1]
 8006402:	4619      	mov	r1, r3
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 fb6b 	bl	8006ae0 <USB_DoPing>
        return HAL_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	e232      	b.n	8006874 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	799b      	ldrb	r3, [r3, #6]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d158      	bne.n	80064c8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006416:	2301      	movs	r3, #1
 8006418:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	78db      	ldrb	r3, [r3, #3]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d007      	beq.n	8006432 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006422:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	8a92      	ldrh	r2, [r2, #20]
 8006428:	fb03 f202 	mul.w	r2, r3, r2
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	61da      	str	r2, [r3, #28]
 8006430:	e07c      	b.n	800652c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	7c9b      	ldrb	r3, [r3, #18]
 8006436:	2b01      	cmp	r3, #1
 8006438:	d130      	bne.n	800649c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	2bbc      	cmp	r3, #188	@ 0xbc
 8006440:	d918      	bls.n	8006474 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	8a9b      	ldrh	r3, [r3, #20]
 8006446:	461a      	mov	r2, r3
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	69da      	ldr	r2, [r3, #28]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	2b01      	cmp	r3, #1
 800645a:	d003      	beq.n	8006464 <USB_HC_StartXfer+0xdc>
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	68db      	ldr	r3, [r3, #12]
 8006460:	2b02      	cmp	r3, #2
 8006462:	d103      	bne.n	800646c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	2202      	movs	r2, #2
 8006468:	60da      	str	r2, [r3, #12]
 800646a:	e05f      	b.n	800652c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	2201      	movs	r2, #1
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	e05b      	b.n	800652c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1a      	ldr	r2, [r3, #32]
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	2b01      	cmp	r3, #1
 8006482:	d007      	beq.n	8006494 <USB_HC_StartXfer+0x10c>
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d003      	beq.n	8006494 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2204      	movs	r2, #4
 8006490:	60da      	str	r2, [r3, #12]
 8006492:	e04b      	b.n	800652c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2203      	movs	r2, #3
 8006498:	60da      	str	r2, [r3, #12]
 800649a:	e047      	b.n	800652c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d10d      	bne.n	80064be <USB_HC_StartXfer+0x136>
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	8a92      	ldrh	r2, [r2, #20]
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d907      	bls.n	80064be <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064ae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	8a92      	ldrh	r2, [r2, #20]
 80064b4:	fb03 f202 	mul.w	r2, r3, r2
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	61da      	str	r2, [r3, #28]
 80064bc:	e036      	b.n	800652c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	6a1a      	ldr	r2, [r3, #32]
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	61da      	str	r2, [r3, #28]
 80064c6:	e031      	b.n	800652c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	6a1b      	ldr	r3, [r3, #32]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d018      	beq.n	8006502 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	6a1b      	ldr	r3, [r3, #32]
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	8a92      	ldrh	r2, [r2, #20]
 80064d8:	4413      	add	r3, r2
 80064da:	3b01      	subs	r3, #1
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	8a92      	ldrh	r2, [r2, #20]
 80064e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80064e6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80064e8:	8b7b      	ldrh	r3, [r7, #26]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d90b      	bls.n	8006506 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80064ee:	8b7b      	ldrh	r3, [r7, #26]
 80064f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80064f2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	8a92      	ldrh	r2, [r2, #20]
 80064f8:	fb03 f202 	mul.w	r2, r3, r2
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	61da      	str	r2, [r3, #28]
 8006500:	e001      	b.n	8006506 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006502:	2301      	movs	r3, #1
 8006504:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	78db      	ldrb	r3, [r3, #3]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d00a      	beq.n	8006524 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800650e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	8a92      	ldrh	r2, [r2, #20]
 8006514:	fb03 f202 	mul.w	r2, r3, r2
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	61da      	str	r2, [r3, #28]
 800651c:	e006      	b.n	800652c <USB_HC_StartXfer+0x1a4>
 800651e:	bf00      	nop
 8006520:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	6a1a      	ldr	r2, [r3, #32]
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006534:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006536:	04d9      	lsls	r1, r3, #19
 8006538:	4ba3      	ldr	r3, [pc, #652]	@ (80067c8 <USB_HC_StartXfer+0x440>)
 800653a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800653c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	7d9b      	ldrb	r3, [r3, #22]
 8006542:	075b      	lsls	r3, r3, #29
 8006544:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006548:	69f9      	ldr	r1, [r7, #28]
 800654a:	0148      	lsls	r0, r1, #5
 800654c:	6a39      	ldr	r1, [r7, #32]
 800654e:	4401      	add	r1, r0
 8006550:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006554:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006556:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d009      	beq.n	8006572 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	6999      	ldr	r1, [r3, #24]
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	015a      	lsls	r2, r3, #5
 8006566:	6a3b      	ldr	r3, [r7, #32]
 8006568:	4413      	add	r3, r2
 800656a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800656e:	460a      	mov	r2, r1
 8006570:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006572:	6a3b      	ldr	r3, [r7, #32]
 8006574:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f003 0301 	and.w	r3, r3, #1
 800657e:	2b00      	cmp	r3, #0
 8006580:	bf0c      	ite	eq
 8006582:	2301      	moveq	r3, #1
 8006584:	2300      	movne	r3, #0
 8006586:	b2db      	uxtb	r3, r3
 8006588:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800658a:	69fb      	ldr	r3, [r7, #28]
 800658c:	015a      	lsls	r2, r3, #5
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	4413      	add	r3, r2
 8006592:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	69fa      	ldr	r2, [r7, #28]
 800659a:	0151      	lsls	r1, r2, #5
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	440a      	add	r2, r1
 80065a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80065a4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80065a8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80065aa:	69fb      	ldr	r3, [r7, #28]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	7e7b      	ldrb	r3, [r7, #25]
 80065ba:	075b      	lsls	r3, r3, #29
 80065bc:	69f9      	ldr	r1, [r7, #28]
 80065be:	0148      	lsls	r0, r1, #5
 80065c0:	6a39      	ldr	r1, [r7, #32]
 80065c2:	4401      	add	r1, r0
 80065c4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80065c8:	4313      	orrs	r3, r2
 80065ca:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	799b      	ldrb	r3, [r3, #6]
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	f040 80c3 	bne.w	800675c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	7c5b      	ldrb	r3, [r3, #17]
 80065da:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065e0:	4313      	orrs	r3, r2
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	6a3a      	ldr	r2, [r7, #32]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80065ee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80065f2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006600:	68db      	ldr	r3, [r3, #12]
 8006602:	69fa      	ldr	r2, [r7, #28]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	6a3a      	ldr	r2, [r7, #32]
 8006608:	440a      	add	r2, r1
 800660a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800660e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006612:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	79db      	ldrb	r3, [r3, #7]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d123      	bne.n	8006664 <USB_HC_StartXfer+0x2dc>
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	78db      	ldrb	r3, [r3, #3]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d11f      	bne.n	8006664 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	015a      	lsls	r2, r3, #5
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	4413      	add	r3, r2
 800662c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	69fa      	ldr	r2, [r7, #28]
 8006634:	0151      	lsls	r1, r2, #5
 8006636:	6a3a      	ldr	r2, [r7, #32]
 8006638:	440a      	add	r2, r1
 800663a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800663e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006642:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006644:	69fb      	ldr	r3, [r7, #28]
 8006646:	015a      	lsls	r2, r3, #5
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	4413      	add	r3, r2
 800664c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	69fa      	ldr	r2, [r7, #28]
 8006654:	0151      	lsls	r1, r2, #5
 8006656:	6a3a      	ldr	r2, [r7, #32]
 8006658:	440a      	add	r2, r1
 800665a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800665e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006662:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	7c9b      	ldrb	r3, [r3, #18]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d003      	beq.n	8006674 <USB_HC_StartXfer+0x2ec>
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	7c9b      	ldrb	r3, [r3, #18]
 8006670:	2b03      	cmp	r3, #3
 8006672:	d117      	bne.n	80066a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006678:	2b01      	cmp	r3, #1
 800667a:	d113      	bne.n	80066a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	78db      	ldrb	r3, [r3, #3]
 8006680:	2b01      	cmp	r3, #1
 8006682:	d10f      	bne.n	80066a4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	015a      	lsls	r2, r3, #5
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	4413      	add	r3, r2
 800668c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	69fa      	ldr	r2, [r7, #28]
 8006694:	0151      	lsls	r1, r2, #5
 8006696:	6a3a      	ldr	r2, [r7, #32]
 8006698:	440a      	add	r2, r1
 800669a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800669e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066a2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	7c9b      	ldrb	r3, [r3, #18]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d162      	bne.n	8006772 <USB_HC_StartXfer+0x3ea>
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	78db      	ldrb	r3, [r3, #3]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d15e      	bne.n	8006772 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	2b03      	cmp	r3, #3
 80066bc:	d858      	bhi.n	8006770 <USB_HC_StartXfer+0x3e8>
 80066be:	a201      	add	r2, pc, #4	@ (adr r2, 80066c4 <USB_HC_StartXfer+0x33c>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	080066d5 	.word	0x080066d5
 80066c8:	080066f7 	.word	0x080066f7
 80066cc:	08006719 	.word	0x08006719
 80066d0:	0800673b 	.word	0x0800673b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	015a      	lsls	r2, r3, #5
 80066d8:	6a3b      	ldr	r3, [r7, #32]
 80066da:	4413      	add	r3, r2
 80066dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	69fa      	ldr	r2, [r7, #28]
 80066e4:	0151      	lsls	r1, r2, #5
 80066e6:	6a3a      	ldr	r2, [r7, #32]
 80066e8:	440a      	add	r2, r1
 80066ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80066ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80066f2:	6053      	str	r3, [r2, #4]
          break;
 80066f4:	e03d      	b.n	8006772 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	015a      	lsls	r2, r3, #5
 80066fa:	6a3b      	ldr	r3, [r7, #32]
 80066fc:	4413      	add	r3, r2
 80066fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	0151      	lsls	r1, r2, #5
 8006708:	6a3a      	ldr	r2, [r7, #32]
 800670a:	440a      	add	r2, r1
 800670c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006710:	f043 030e 	orr.w	r3, r3, #14
 8006714:	6053      	str	r3, [r2, #4]
          break;
 8006716:	e02c      	b.n	8006772 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	015a      	lsls	r2, r3, #5
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	4413      	add	r3, r2
 8006720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	0151      	lsls	r1, r2, #5
 800672a:	6a3a      	ldr	r2, [r7, #32]
 800672c:	440a      	add	r2, r1
 800672e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006732:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006736:	6053      	str	r3, [r2, #4]
          break;
 8006738:	e01b      	b.n	8006772 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800673a:	69fb      	ldr	r3, [r7, #28]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	69fa      	ldr	r2, [r7, #28]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	6a3a      	ldr	r2, [r7, #32]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006754:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006758:	6053      	str	r3, [r2, #4]
          break;
 800675a:	e00a      	b.n	8006772 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	6a3b      	ldr	r3, [r7, #32]
 8006762:	4413      	add	r3, r2
 8006764:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006768:	461a      	mov	r2, r3
 800676a:	2300      	movs	r3, #0
 800676c:	6053      	str	r3, [r2, #4]
 800676e:	e000      	b.n	8006772 <USB_HC_StartXfer+0x3ea>
          break;
 8006770:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	015a      	lsls	r2, r3, #5
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	4413      	add	r3, r2
 800677a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006788:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	78db      	ldrb	r3, [r3, #3]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d004      	beq.n	800679c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006798:	613b      	str	r3, [r7, #16]
 800679a:	e003      	b.n	80067a4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80067a2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80067aa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b8:	461a      	mov	r2, r3
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e055      	b.n	8006874 <USB_HC_StartXfer+0x4ec>
 80067c8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d14e      	bne.n	8006872 <USB_HC_StartXfer+0x4ea>
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	6a1b      	ldr	r3, [r3, #32]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d04a      	beq.n	8006872 <USB_HC_StartXfer+0x4ea>
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	79db      	ldrb	r3, [r3, #7]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d146      	bne.n	8006872 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	7c9b      	ldrb	r3, [r3, #18]
 80067e8:	2b03      	cmp	r3, #3
 80067ea:	d831      	bhi.n	8006850 <USB_HC_StartXfer+0x4c8>
 80067ec:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <USB_HC_StartXfer+0x46c>)
 80067ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f2:	bf00      	nop
 80067f4:	08006805 	.word	0x08006805
 80067f8:	08006829 	.word	0x08006829
 80067fc:	08006805 	.word	0x08006805
 8006800:	08006829 	.word	0x08006829
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	6a1b      	ldr	r3, [r3, #32]
 8006808:	3303      	adds	r3, #3
 800680a:	089b      	lsrs	r3, r3, #2
 800680c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800680e:	8afa      	ldrh	r2, [r7, #22]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006814:	b29b      	uxth	r3, r3
 8006816:	429a      	cmp	r2, r3
 8006818:	d91c      	bls.n	8006854 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f043 0220 	orr.w	r2, r3, #32
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	619a      	str	r2, [r3, #24]
        }
        break;
 8006826:	e015      	b.n	8006854 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	3303      	adds	r3, #3
 800682e:	089b      	lsrs	r3, r3, #2
 8006830:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006832:	8afa      	ldrh	r2, [r7, #22]
 8006834:	6a3b      	ldr	r3, [r7, #32]
 8006836:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800683a:	691b      	ldr	r3, [r3, #16]
 800683c:	b29b      	uxth	r3, r3
 800683e:	429a      	cmp	r2, r3
 8006840:	d90a      	bls.n	8006858 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	619a      	str	r2, [r3, #24]
        }
        break;
 800684e:	e003      	b.n	8006858 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006850:	bf00      	nop
 8006852:	e002      	b.n	800685a <USB_HC_StartXfer+0x4d2>
        break;
 8006854:	bf00      	nop
 8006856:	e000      	b.n	800685a <USB_HC_StartXfer+0x4d2>
        break;
 8006858:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	6999      	ldr	r1, [r3, #24]
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	785a      	ldrb	r2, [r3, #1]
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	b29b      	uxth	r3, r3
 8006868:	2000      	movs	r0, #0
 800686a:	9000      	str	r0, [sp, #0]
 800686c:	68f8      	ldr	r0, [r7, #12]
 800686e:	f7ff f9c9 	bl	8005c04 <USB_WritePacket>
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3728      	adds	r7, #40	@ 0x28
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800688e:	695b      	ldr	r3, [r3, #20]
 8006890:	b29b      	uxth	r3, r3
}
 8006892:	4618      	mov	r0, r3
 8006894:	3714      	adds	r7, #20
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr

0800689e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800689e:	b480      	push	{r7}
 80068a0:	b089      	sub	sp, #36	@ 0x24
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
 80068a6:	460b      	mov	r3, r1
 80068a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80068ae:	78fb      	ldrb	r3, [r7, #3]
 80068b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	0c9b      	lsrs	r3, r3, #18
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80068cc:	69bb      	ldr	r3, [r7, #24]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	69fb      	ldr	r3, [r7, #28]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	0fdb      	lsrs	r3, r3, #31
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	0fdb      	lsrs	r3, r3, #31
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b20      	cmp	r3, #32
 8006902:	d10d      	bne.n	8006920 <USB_HC_Halt+0x82>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10a      	bne.n	8006920 <USB_HC_Halt+0x82>
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d005      	beq.n	800691c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d002      	beq.n	800691c <USB_HC_Halt+0x7e>
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b03      	cmp	r3, #3
 800691a:	d101      	bne.n	8006920 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800691c:	2300      	movs	r3, #0
 800691e:	e0d8      	b.n	8006ad2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d002      	beq.n	800692c <USB_HC_Halt+0x8e>
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	2b02      	cmp	r3, #2
 800692a:	d173      	bne.n	8006a14 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	4413      	add	r3, r2
 8006934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	0151      	lsls	r1, r2, #5
 800693e:	69fa      	ldr	r2, [r7, #28]
 8006940:	440a      	add	r2, r1
 8006942:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006946:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800694a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d14a      	bne.n	80069ee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d133      	bne.n	80069cc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69ba      	ldr	r2, [r7, #24]
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800697e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006982:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800699e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069a2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	3301      	adds	r3, #1
 80069a8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80069b0:	d82e      	bhi.n	8006a10 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80069c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80069c8:	d0ec      	beq.n	80069a4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069ca:	e081      	b.n	8006ad0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	015a      	lsls	r2, r3, #5
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	4413      	add	r3, r2
 80069d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	0151      	lsls	r1, r2, #5
 80069de:	69fa      	ldr	r2, [r7, #28]
 80069e0:	440a      	add	r2, r1
 80069e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80069ea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80069ec:	e070      	b.n	8006ad0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a0c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a0e:	e05f      	b.n	8006ad0 <USB_HC_Halt+0x232>
            break;
 8006a10:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006a12:	e05d      	b.n	8006ad0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	69ba      	ldr	r2, [r7, #24]
 8006a24:	0151      	lsls	r1, r2, #5
 8006a26:	69fa      	ldr	r2, [r7, #28]
 8006a28:	440a      	add	r2, r1
 8006a2a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006a32:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d133      	bne.n	8006aac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006a44:	69bb      	ldr	r3, [r7, #24]
 8006a46:	015a      	lsls	r2, r3, #5
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	69ba      	ldr	r2, [r7, #24]
 8006a54:	0151      	lsls	r1, r2, #5
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	440a      	add	r2, r1
 8006a5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006a62:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	015a      	lsls	r2, r3, #5
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	4413      	add	r3, r2
 8006a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69ba      	ldr	r2, [r7, #24]
 8006a74:	0151      	lsls	r1, r2, #5
 8006a76:	69fa      	ldr	r2, [r7, #28]
 8006a78:	440a      	add	r2, r1
 8006a7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006a82:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	3301      	adds	r3, #1
 8006a88:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a90:	d81d      	bhi.n	8006ace <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006aa8:	d0ec      	beq.n	8006a84 <USB_HC_Halt+0x1e6>
 8006aaa:	e011      	b.n	8006ad0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	015a      	lsls	r2, r3, #5
 8006ab0:	69fb      	ldr	r3, [r7, #28]
 8006ab2:	4413      	add	r3, r2
 8006ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69ba      	ldr	r2, [r7, #24]
 8006abc:	0151      	lsls	r1, r2, #5
 8006abe:	69fa      	ldr	r2, [r7, #28]
 8006ac0:	440a      	add	r2, r1
 8006ac2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ac6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006aca:	6013      	str	r3, [r2, #0]
 8006acc:	e000      	b.n	8006ad0 <USB_HC_Halt+0x232>
          break;
 8006ace:	bf00      	nop
    }
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3724      	adds	r7, #36	@ 0x24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
	...

08006ae0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b087      	sub	sp, #28
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	460b      	mov	r3, r1
 8006aea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006af4:	2301      	movs	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	04da      	lsls	r2, r3, #19
 8006afc:	4b15      	ldr	r3, [pc, #84]	@ (8006b54 <USB_DoPing+0x74>)
 8006afe:	4013      	ands	r3, r2
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	0151      	lsls	r1, r2, #5
 8006b04:	697a      	ldr	r2, [r7, #20]
 8006b06:	440a      	add	r2, r1
 8006b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b10:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	015a      	lsls	r2, r3, #5
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	4413      	add	r3, r2
 8006b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006b28:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006b30:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	015a      	lsls	r2, r3, #5
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	4413      	add	r3, r2
 8006b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b3e:	461a      	mov	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	371c      	adds	r7, #28
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	1ff80000 	.word	0x1ff80000

08006b58 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b088      	sub	sp, #32
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7fe ff8c 	bl	8005a8a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b72:	2110      	movs	r1, #16
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7fe ffe5 	bl	8005b44 <USB_FlushTxFifo>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d001      	beq.n	8006b84 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006b80:	2301      	movs	r3, #1
 8006b82:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f7ff f80f 	bl	8005ba8 <USB_FlushRxFifo>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d001      	beq.n	8006b94 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e01f      	b.n	8006bda <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bb0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006bb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006bc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006bc2:	69bb      	ldr	r3, [r7, #24]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bce:	461a      	mov	r2, r3
 8006bd0:	693b      	ldr	r3, [r7, #16]
 8006bd2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	61bb      	str	r3, [r7, #24]
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	2b0f      	cmp	r3, #15
 8006bde:	d9dc      	bls.n	8006b9a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006be0:	2300      	movs	r3, #0
 8006be2:	61bb      	str	r3, [r7, #24]
 8006be4:	e034      	b.n	8006c50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006be6:	69bb      	ldr	r3, [r7, #24]
 8006be8:	015a      	lsls	r2, r3, #5
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	4413      	add	r3, r2
 8006bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006bfc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006c04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006c0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	015a      	lsls	r2, r3, #5
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	4413      	add	r3, r2
 8006c16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	3301      	adds	r3, #1
 8006c24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006c2c:	d80c      	bhi.n	8006c48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	015a      	lsls	r2, r3, #5
 8006c32:	697b      	ldr	r3, [r7, #20]
 8006c34:	4413      	add	r3, r2
 8006c36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006c40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006c44:	d0ec      	beq.n	8006c20 <USB_StopHost+0xc8>
 8006c46:	e000      	b.n	8006c4a <USB_StopHost+0xf2>
        break;
 8006c48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	3301      	adds	r3, #1
 8006c4e:	61bb      	str	r3, [r7, #24]
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	2b0f      	cmp	r3, #15
 8006c54:	d9c7      	bls.n	8006be6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8006c62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f04f 32ff 	mov.w	r2, #4294967295
 8006c6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f7fe fefb 	bl	8005a68 <USB_EnableGlobalInt>

  return ret;
 8006c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006c7c:	b590      	push	{r4, r7, lr}
 8006c7e:	b089      	sub	sp, #36	@ 0x24
 8006c80:	af04      	add	r7, sp, #16
 8006c82:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006c84:	2301      	movs	r3, #1
 8006c86:	2202      	movs	r2, #2
 8006c88:	2102      	movs	r1, #2
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fc85 	bl	800759a <USBH_FindInterface>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2bff      	cmp	r3, #255	@ 0xff
 8006c98:	d002      	beq.n	8006ca0 <USBH_CDC_InterfaceInit+0x24>
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d901      	bls.n	8006ca4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e13d      	b.n	8006f20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ca4:	7bfb      	ldrb	r3, [r7, #15]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc5a 	bl	8007562 <USBH_SelectInterface>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006cb2:	7bbb      	ldrb	r3, [r7, #14]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d001      	beq.n	8006cbc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006cb8:	2302      	movs	r3, #2
 8006cba:	e131      	b.n	8006f20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006cc2:	2050      	movs	r0, #80	@ 0x50
 8006cc4:	f002 fb64 	bl	8009390 <malloc>
 8006cc8:	4603      	mov	r3, r0
 8006cca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006cd6:	68bb      	ldr	r3, [r7, #8]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d101      	bne.n	8006ce0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e11f      	b.n	8006f20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006ce0:	2250      	movs	r2, #80	@ 0x50
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	68b8      	ldr	r0, [r7, #8]
 8006ce6:	f002 fc11 	bl	800950c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	211a      	movs	r1, #26
 8006cf0:	fb01 f303 	mul.w	r3, r1, r3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	b25b      	sxtb	r3, r3
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da15      	bge.n	8006d2e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	211a      	movs	r1, #26
 8006d08:	fb01 f303 	mul.w	r3, r1, r3
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006d12:	781a      	ldrb	r2, [r3, #0]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	211a      	movs	r1, #26
 8006d1e:	fb01 f303 	mul.w	r3, r1, r3
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006d28:	881a      	ldrh	r2, [r3, #0]
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	785b      	ldrb	r3, [r3, #1]
 8006d32:	4619      	mov	r1, r3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 ffbe 	bl	8008cb6 <USBH_AllocPipe>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	7819      	ldrb	r1, [r3, #0]
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	7858      	ldrb	r0, [r3, #1]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006d56:	68ba      	ldr	r2, [r7, #8]
 8006d58:	8952      	ldrh	r2, [r2, #10]
 8006d5a:	9202      	str	r2, [sp, #8]
 8006d5c:	2203      	movs	r2, #3
 8006d5e:	9201      	str	r2, [sp, #4]
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	4623      	mov	r3, r4
 8006d64:	4602      	mov	r2, r0
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f001 ff76 	bl	8008c58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f002 fa85 	bl	8009284 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	210a      	movs	r1, #10
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fc0a 	bl	800759a <USBH_FindInterface>
 8006d86:	4603      	mov	r3, r0
 8006d88:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	2bff      	cmp	r3, #255	@ 0xff
 8006d8e:	d002      	beq.n	8006d96 <USBH_CDC_InterfaceInit+0x11a>
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	d901      	bls.n	8006d9a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006d96:	2302      	movs	r3, #2
 8006d98:	e0c2      	b.n	8006f20 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006d9a:	7bfb      	ldrb	r3, [r7, #15]
 8006d9c:	687a      	ldr	r2, [r7, #4]
 8006d9e:	211a      	movs	r1, #26
 8006da0:	fb01 f303 	mul.w	r3, r1, r3
 8006da4:	4413      	add	r3, r2
 8006da6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006daa:	781b      	ldrb	r3, [r3, #0]
 8006dac:	b25b      	sxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	da16      	bge.n	8006de0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	687a      	ldr	r2, [r7, #4]
 8006db6:	211a      	movs	r1, #26
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	4413      	add	r3, r2
 8006dbe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006dc2:	781a      	ldrb	r2, [r3, #0]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006dc8:	7bfb      	ldrb	r3, [r7, #15]
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	211a      	movs	r1, #26
 8006dce:	fb01 f303 	mul.w	r3, r1, r3
 8006dd2:	4413      	add	r3, r2
 8006dd4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006dd8:	881a      	ldrh	r2, [r3, #0]
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	835a      	strh	r2, [r3, #26]
 8006dde:	e015      	b.n	8006e0c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	211a      	movs	r1, #26
 8006de6:	fb01 f303 	mul.w	r3, r1, r3
 8006dea:	4413      	add	r3, r2
 8006dec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006df0:	781a      	ldrb	r2, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006df6:	7bfb      	ldrb	r3, [r7, #15]
 8006df8:	687a      	ldr	r2, [r7, #4]
 8006dfa:	211a      	movs	r1, #26
 8006dfc:	fb01 f303 	mul.w	r3, r1, r3
 8006e00:	4413      	add	r3, r2
 8006e02:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006e06:	881a      	ldrh	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006e0c:	7bfb      	ldrb	r3, [r7, #15]
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	211a      	movs	r1, #26
 8006e12:	fb01 f303 	mul.w	r3, r1, r3
 8006e16:	4413      	add	r3, r2
 8006e18:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	b25b      	sxtb	r3, r3
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	da16      	bge.n	8006e52 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	687a      	ldr	r2, [r7, #4]
 8006e28:	211a      	movs	r1, #26
 8006e2a:	fb01 f303 	mul.w	r3, r1, r3
 8006e2e:	4413      	add	r3, r2
 8006e30:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	687a      	ldr	r2, [r7, #4]
 8006e3e:	211a      	movs	r1, #26
 8006e40:	fb01 f303 	mul.w	r3, r1, r3
 8006e44:	4413      	add	r3, r2
 8006e46:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006e4a:	881a      	ldrh	r2, [r3, #0]
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	835a      	strh	r2, [r3, #26]
 8006e50:	e015      	b.n	8006e7e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	211a      	movs	r1, #26
 8006e58:	fb01 f303 	mul.w	r3, r1, r3
 8006e5c:	4413      	add	r3, r2
 8006e5e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006e62:	781a      	ldrb	r2, [r3, #0]
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006e68:	7bfb      	ldrb	r3, [r7, #15]
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	211a      	movs	r1, #26
 8006e6e:	fb01 f303 	mul.w	r3, r1, r3
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006e78:	881a      	ldrh	r2, [r3, #0]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	7b9b      	ldrb	r3, [r3, #14]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 ff16 	bl	8008cb6 <USBH_AllocPipe>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	68bb      	ldr	r3, [r7, #8]
 8006e90:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006e92:	68bb      	ldr	r3, [r7, #8]
 8006e94:	7bdb      	ldrb	r3, [r3, #15]
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f001 ff0c 	bl	8008cb6 <USBH_AllocPipe>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	7b59      	ldrb	r1, [r3, #13]
 8006eaa:	68bb      	ldr	r3, [r7, #8]
 8006eac:	7b98      	ldrb	r0, [r3, #14]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006eba:	68ba      	ldr	r2, [r7, #8]
 8006ebc:	8b12      	ldrh	r2, [r2, #24]
 8006ebe:	9202      	str	r2, [sp, #8]
 8006ec0:	2202      	movs	r2, #2
 8006ec2:	9201      	str	r2, [sp, #4]
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	4623      	mov	r3, r4
 8006ec8:	4602      	mov	r2, r0
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f001 fec4 	bl	8008c58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	7b19      	ldrb	r1, [r3, #12]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	7bd8      	ldrb	r0, [r3, #15]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	8b52      	ldrh	r2, [r2, #26]
 8006ee8:	9202      	str	r2, [sp, #8]
 8006eea:	2202      	movs	r2, #2
 8006eec:	9201      	str	r2, [sp, #4]
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4623      	mov	r3, r4
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f001 feaf 	bl	8008c58 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	7b5b      	ldrb	r3, [r3, #13]
 8006f06:	2200      	movs	r2, #0
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f002 f9ba 	bl	8009284 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	7b1b      	ldrb	r3, [r3, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f002 f9b3 	bl	8009284 <USBH_LL_SetToggle>

  return USBH_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3714      	adds	r7, #20
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd90      	pop	{r4, r7, pc}

08006f28 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f36:	69db      	ldr	r3, [r3, #28]
 8006f38:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00e      	beq.n	8006f60 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f001 fea4 	bl	8008c96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	4619      	mov	r1, r3
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f001 fecf 	bl	8008cf8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	7b1b      	ldrb	r3, [r3, #12]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00e      	beq.n	8006f86 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	7b1b      	ldrb	r3, [r3, #12]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f001 fe91 	bl	8008c96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	7b1b      	ldrb	r3, [r3, #12]
 8006f78:	4619      	mov	r1, r3
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f001 febc 	bl	8008cf8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	2200      	movs	r2, #0
 8006f84:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	7b5b      	ldrb	r3, [r3, #13]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d00e      	beq.n	8006fac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	7b5b      	ldrb	r3, [r3, #13]
 8006f92:	4619      	mov	r1, r3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 fe7e 	bl	8008c96 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	7b5b      	ldrb	r3, [r3, #13]
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	6878      	ldr	r0, [r7, #4]
 8006fa2:	f001 fea9 	bl	8008cf8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f002 f9ed 	bl	80093a0 <free>
    phost->pActiveClass->pData = 0U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fcc:	2200      	movs	r2, #0
 8006fce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3710      	adds	r7, #16
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}

08006fda <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006fda:	b580      	push	{r7, lr}
 8006fdc:	b084      	sub	sp, #16
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fe8:	69db      	ldr	r3, [r3, #28]
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3340      	adds	r3, #64	@ 0x40
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f8b1 	bl	800715a <GetLineCoding>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d105      	bne.n	800700e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007008:	2102      	movs	r1, #2
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800700e:	7afb      	ldrb	r3, [r7, #11]
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800702e:	69db      	ldr	r3, [r3, #28]
 8007030:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007038:	2b04      	cmp	r3, #4
 800703a:	d877      	bhi.n	800712c <USBH_CDC_Process+0x114>
 800703c:	a201      	add	r2, pc, #4	@ (adr r2, 8007044 <USBH_CDC_Process+0x2c>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	08007059 	.word	0x08007059
 8007048:	0800705f 	.word	0x0800705f
 800704c:	0800708f 	.word	0x0800708f
 8007050:	08007103 	.word	0x08007103
 8007054:	08007111 	.word	0x08007111
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007058:	2300      	movs	r3, #0
 800705a:	73fb      	strb	r3, [r7, #15]
      break;
 800705c:	e06d      	b.n	800713a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800705e:	68bb      	ldr	r3, [r7, #8]
 8007060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007062:	4619      	mov	r1, r3
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 f897 	bl	8007198 <SetLineCoding>
 800706a:	4603      	mov	r3, r0
 800706c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d104      	bne.n	800707e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800707c:	e058      	b.n	8007130 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	2b01      	cmp	r3, #1
 8007082:	d055      	beq.n	8007130 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2204      	movs	r2, #4
 8007088:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800708c:	e050      	b.n	8007130 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	3340      	adds	r3, #64	@ 0x40
 8007092:	4619      	mov	r1, r3
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f860 	bl	800715a <GetLineCoding>
 800709a:	4603      	mov	r3, r0
 800709c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800709e:	7bbb      	ldrb	r3, [r7, #14]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d126      	bne.n	80070f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2200      	movs	r2, #0
 80070a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d13b      	bne.n	8007134 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d133      	bne.n	8007134 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070cc:	68bb      	ldr	r3, [r7, #8]
 80070ce:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80070d8:	429a      	cmp	r2, r3
 80070da:	d12b      	bne.n	8007134 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80070e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d124      	bne.n	8007134 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f958 	bl	80073a0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80070f0:	e020      	b.n	8007134 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80070f2:	7bbb      	ldrb	r3, [r7, #14]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d01d      	beq.n	8007134 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	2204      	movs	r2, #4
 80070fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007100:	e018      	b.n	8007134 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f867 	bl	80071d6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f8da 	bl	80072c2 <CDC_ProcessReception>
      break;
 800710e:	e014      	b.n	800713a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007110:	2100      	movs	r1, #0
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 f81a 	bl	800814c <USBH_ClrFeature>
 8007118:	4603      	mov	r3, r0
 800711a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800711c:	7bbb      	ldrb	r3, [r7, #14]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10a      	bne.n	8007138 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	2200      	movs	r2, #0
 8007126:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800712a:	e005      	b.n	8007138 <USBH_CDC_Process+0x120>

    default:
      break;
 800712c:	bf00      	nop
 800712e:	e004      	b.n	800713a <USBH_CDC_Process+0x122>
      break;
 8007130:	bf00      	nop
 8007132:	e002      	b.n	800713a <USBH_CDC_Process+0x122>
      break;
 8007134:	bf00      	nop
 8007136:	e000      	b.n	800713a <USBH_CDC_Process+0x122>
      break;
 8007138:	bf00      	nop

  }

  return status;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
}
 800713c:	4618      	mov	r0, r3
 800713e:	3710      	adds	r7, #16
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}

08007144 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr

0800715a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b082      	sub	sp, #8
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	22a1      	movs	r2, #161	@ 0xa1
 8007168:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2221      	movs	r2, #33	@ 0x21
 800716e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2207      	movs	r2, #7
 8007180:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2207      	movs	r2, #7
 8007186:	4619      	mov	r1, r3
 8007188:	6878      	ldr	r0, [r7, #4]
 800718a:	f001 fb14 	bl	80087b6 <USBH_CtlReq>
 800718e:	4603      	mov	r3, r0
}
 8007190:	4618      	mov	r0, r3
 8007192:	3708      	adds	r7, #8
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2221      	movs	r2, #33	@ 0x21
 80071a6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2200      	movs	r2, #0
 80071b8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2207      	movs	r2, #7
 80071be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2207      	movs	r2, #7
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 faf5 	bl	80087b6 <USBH_CtlReq>
 80071cc:	4603      	mov	r3, r0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}

080071d6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b086      	sub	sp, #24
 80071da:	af02      	add	r7, sp, #8
 80071dc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80071e8:	2300      	movs	r3, #0
 80071ea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d002      	beq.n	80071fc <CDC_ProcessTransmission+0x26>
 80071f6:	2b02      	cmp	r3, #2
 80071f8:	d023      	beq.n	8007242 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80071fa:	e05e      	b.n	80072ba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	8b12      	ldrh	r2, [r2, #24]
 8007204:	4293      	cmp	r3, r2
 8007206:	d90b      	bls.n	8007220 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	69d9      	ldr	r1, [r3, #28]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8b1a      	ldrh	r2, [r3, #24]
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	7b5b      	ldrb	r3, [r3, #13]
 8007214:	2001      	movs	r0, #1
 8007216:	9000      	str	r0, [sp, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f001 fcda 	bl	8008bd2 <USBH_BulkSendData>
 800721e:	e00b      	b.n	8007238 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007228:	b29a      	uxth	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	7b5b      	ldrb	r3, [r3, #13]
 800722e:	2001      	movs	r0, #1
 8007230:	9000      	str	r0, [sp, #0]
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f001 fccd 	bl	8008bd2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2202      	movs	r2, #2
 800723c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007240:	e03b      	b.n	80072ba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	7b5b      	ldrb	r3, [r3, #13]
 8007246:	4619      	mov	r1, r3
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	f001 fff1 	bl	8009230 <USBH_LL_GetURBState>
 800724e:	4603      	mov	r3, r0
 8007250:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007252:	7afb      	ldrb	r3, [r7, #11]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d128      	bne.n	80072aa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	8b12      	ldrh	r2, [r2, #24]
 8007260:	4293      	cmp	r3, r2
 8007262:	d90e      	bls.n	8007282 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	8b12      	ldrh	r2, [r2, #24]
 800726c:	1a9a      	subs	r2, r3, r2
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	68fa      	ldr	r2, [r7, #12]
 8007278:	8b12      	ldrh	r2, [r2, #24]
 800727a:	441a      	add	r2, r3
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	61da      	str	r2, [r3, #28]
 8007280:	e002      	b.n	8007288 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2200      	movs	r2, #0
 8007286:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	2b00      	cmp	r3, #0
 800728e:	d004      	beq.n	800729a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2201      	movs	r2, #1
 8007294:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007298:	e00e      	b.n	80072b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	2200      	movs	r2, #0
 800729e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f868 	bl	8007378 <USBH_CDC_TransmitCallback>
      break;
 80072a8:	e006      	b.n	80072b8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80072aa:	7afb      	ldrb	r3, [r7, #11]
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d103      	bne.n	80072b8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2201      	movs	r2, #1
 80072b4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80072b8:	bf00      	nop
  }
}
 80072ba:	bf00      	nop
 80072bc:	3710      	adds	r7, #16
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}

080072c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80072c2:	b580      	push	{r7, lr}
 80072c4:	b086      	sub	sp, #24
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072d0:	69db      	ldr	r3, [r3, #28]
 80072d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80072d4:	2300      	movs	r3, #0
 80072d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80072de:	2b03      	cmp	r3, #3
 80072e0:	d002      	beq.n	80072e8 <CDC_ProcessReception+0x26>
 80072e2:	2b04      	cmp	r3, #4
 80072e4:	d00e      	beq.n	8007304 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80072e6:	e043      	b.n	8007370 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	6a19      	ldr	r1, [r3, #32]
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	8b5a      	ldrh	r2, [r3, #26]
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	7b1b      	ldrb	r3, [r3, #12]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f001 fc91 	bl	8008c1c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2204      	movs	r2, #4
 80072fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007302:	e035      	b.n	8007370 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	7b1b      	ldrb	r3, [r3, #12]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f001 ff90 	bl	8009230 <USBH_LL_GetURBState>
 8007310:	4603      	mov	r3, r0
 8007312:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d129      	bne.n	800736e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	7b1b      	ldrb	r3, [r3, #12]
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f001 fef3 	bl	800910c <USBH_LL_GetLastXferSize>
 8007326:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	429a      	cmp	r2, r3
 8007330:	d016      	beq.n	8007360 <CDC_ProcessReception+0x9e>
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	8b5b      	ldrh	r3, [r3, #26]
 8007336:	461a      	mov	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4293      	cmp	r3, r2
 800733c:	d110      	bne.n	8007360 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	1ad2      	subs	r2, r2, r3
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	441a      	add	r2, r3
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	2203      	movs	r2, #3
 800735a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800735e:	e006      	b.n	800736e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2200      	movs	r2, #0
 8007364:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 f80f 	bl	800738c <USBH_CDC_ReceiveCallback>
      break;
 800736e:	bf00      	nop
  }
}
 8007370:	bf00      	nop
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	60f8      	str	r0, [r7, #12]
 80073bc:	60b9      	str	r1, [r7, #8]
 80073be:	4613      	mov	r3, r2
 80073c0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d101      	bne.n	80073cc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80073c8:	2302      	movs	r3, #2
 80073ca:	e029      	b.n	8007420 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	79fa      	ldrb	r2, [r7, #7]
 80073d0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2200      	movs	r2, #0
 80073e0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 f81f 	bl	8007428 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	2200      	movs	r2, #0
 8007406:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007418:	68f8      	ldr	r0, [r7, #12]
 800741a:	f001 fdc3 	bl	8008fa4 <USBH_LL_Init>

  return USBH_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007430:	2300      	movs	r3, #0
 8007432:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007434:	2300      	movs	r3, #0
 8007436:	60fb      	str	r3, [r7, #12]
 8007438:	e009      	b.n	800744e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	33e0      	adds	r3, #224	@ 0xe0
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	2200      	movs	r2, #0
 8007446:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	3301      	adds	r3, #1
 800744c:	60fb      	str	r3, [r7, #12]
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2b0f      	cmp	r3, #15
 8007452:	d9f2      	bls.n	800743a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007454:	2300      	movs	r3, #0
 8007456:	60fb      	str	r3, [r7, #12]
 8007458:	e009      	b.n	800746e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	4413      	add	r3, r2
 8007460:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007464:	2200      	movs	r2, #0
 8007466:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007474:	d3f1      	bcc.n	800745a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2201      	movs	r2, #1
 8007486:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2240      	movs	r2, #64	@ 0x40
 800749a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	331c      	adds	r3, #28
 80074c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80074ca:	2100      	movs	r1, #0
 80074cc:	4618      	mov	r0, r3
 80074ce:	f002 f81d 	bl	800950c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80074d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f002 f814 	bl	800950c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80074ea:	2212      	movs	r2, #18
 80074ec:	2100      	movs	r1, #0
 80074ee:	4618      	mov	r0, r3
 80074f0:	f002 f80c 	bl	800950c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80074fa:	223e      	movs	r2, #62	@ 0x3e
 80074fc:	2100      	movs	r1, #0
 80074fe:	4618      	mov	r0, r3
 8007500:	f002 f804 	bl	800950c <memset>

  return USBH_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800750e:	b480      	push	{r7}
 8007510:	b085      	sub	sp, #20
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d016      	beq.n	8007550 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007528:	2b00      	cmp	r3, #0
 800752a:	d10e      	bne.n	800754a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007532:	1c59      	adds	r1, r3, #1
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	33de      	adds	r3, #222	@ 0xde
 800753e:	6839      	ldr	r1, [r7, #0]
 8007540:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]
 8007548:	e004      	b.n	8007554 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	73fb      	strb	r3, [r7, #15]
 800754e:	e001      	b.n	8007554 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007550:	2302      	movs	r3, #2
 8007552:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007554:	7bfb      	ldrb	r3, [r7, #15]
}
 8007556:	4618      	mov	r0, r3
 8007558:	3714      	adds	r7, #20
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007562:	b480      	push	{r7}
 8007564:	b085      	sub	sp, #20
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007578:	78fa      	ldrb	r2, [r7, #3]
 800757a:	429a      	cmp	r2, r3
 800757c:	d204      	bcs.n	8007588 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007586:	e001      	b.n	800758c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007588:	2302      	movs	r3, #2
 800758a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800758c:	7bfb      	ldrb	r3, [r7, #15]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3714      	adds	r7, #20
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	4608      	mov	r0, r1
 80075a4:	4611      	mov	r1, r2
 80075a6:	461a      	mov	r2, r3
 80075a8:	4603      	mov	r3, r0
 80075aa:	70fb      	strb	r3, [r7, #3]
 80075ac:	460b      	mov	r3, r1
 80075ae:	70bb      	strb	r3, [r7, #2]
 80075b0:	4613      	mov	r3, r2
 80075b2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80075b8:	2300      	movs	r3, #0
 80075ba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80075c2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80075c4:	e025      	b.n	8007612 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80075c6:	7dfb      	ldrb	r3, [r7, #23]
 80075c8:	221a      	movs	r2, #26
 80075ca:	fb02 f303 	mul.w	r3, r2, r3
 80075ce:	3308      	adds	r3, #8
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4413      	add	r3, r2
 80075d4:	3302      	adds	r3, #2
 80075d6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	795b      	ldrb	r3, [r3, #5]
 80075dc:	78fa      	ldrb	r2, [r7, #3]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d002      	beq.n	80075e8 <USBH_FindInterface+0x4e>
 80075e2:	78fb      	ldrb	r3, [r7, #3]
 80075e4:	2bff      	cmp	r3, #255	@ 0xff
 80075e6:	d111      	bne.n	800760c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80075ec:	78ba      	ldrb	r2, [r7, #2]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d002      	beq.n	80075f8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075f2:	78bb      	ldrb	r3, [r7, #2]
 80075f4:	2bff      	cmp	r3, #255	@ 0xff
 80075f6:	d109      	bne.n	800760c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80075fc:	787a      	ldrb	r2, [r7, #1]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d002      	beq.n	8007608 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007602:	787b      	ldrb	r3, [r7, #1]
 8007604:	2bff      	cmp	r3, #255	@ 0xff
 8007606:	d101      	bne.n	800760c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007608:	7dfb      	ldrb	r3, [r7, #23]
 800760a:	e006      	b.n	800761a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800760c:	7dfb      	ldrb	r3, [r7, #23]
 800760e:	3301      	adds	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007612:	7dfb      	ldrb	r3, [r7, #23]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d9d6      	bls.n	80075c6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007618:	23ff      	movs	r3, #255	@ 0xff
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	f001 fcf4 	bl	800901c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007634:	2101      	movs	r1, #1
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f001 fe0d 	bl	8009256 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800763c:	2300      	movs	r3, #0
}
 800763e:	4618      	mov	r0, r3
 8007640:	3708      	adds	r7, #8
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
	...

08007648 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b088      	sub	sp, #32
 800764c:	af04      	add	r7, sp, #16
 800764e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007650:	2302      	movs	r3, #2
 8007652:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800765e:	b2db      	uxtb	r3, r3
 8007660:	2b01      	cmp	r3, #1
 8007662:	d102      	bne.n	800766a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2203      	movs	r2, #3
 8007668:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	b2db      	uxtb	r3, r3
 8007670:	2b0b      	cmp	r3, #11
 8007672:	f200 81bb 	bhi.w	80079ec <USBH_Process+0x3a4>
 8007676:	a201      	add	r2, pc, #4	@ (adr r2, 800767c <USBH_Process+0x34>)
 8007678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800767c:	080076ad 	.word	0x080076ad
 8007680:	080076df 	.word	0x080076df
 8007684:	08007747 	.word	0x08007747
 8007688:	08007987 	.word	0x08007987
 800768c:	080079ed 	.word	0x080079ed
 8007690:	080077e7 	.word	0x080077e7
 8007694:	0800792d 	.word	0x0800792d
 8007698:	0800781d 	.word	0x0800781d
 800769c:	0800783d 	.word	0x0800783d
 80076a0:	0800785b 	.word	0x0800785b
 80076a4:	0800789f 	.word	0x0800789f
 80076a8:	0800796f 	.word	0x0800796f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80076b2:	b2db      	uxtb	r3, r3
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 819b 	beq.w	80079f0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80076c0:	20c8      	movs	r0, #200	@ 0xc8
 80076c2:	f001 fe12 	bl	80092ea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f001 fd05 	bl	80090d6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80076dc:	e188      	b.n	80079f0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d107      	bne.n	80076f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2200      	movs	r2, #0
 80076ec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2202      	movs	r2, #2
 80076f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80076f6:	e18a      	b.n	8007a0e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80076fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007702:	d914      	bls.n	800772e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800770a:	3301      	adds	r3, #1
 800770c:	b2da      	uxtb	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800771a:	2b03      	cmp	r3, #3
 800771c:	d903      	bls.n	8007726 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	220d      	movs	r2, #13
 8007722:	701a      	strb	r2, [r3, #0]
      break;
 8007724:	e173      	b.n	8007a0e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
      break;
 800772c:	e16f      	b.n	8007a0e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007734:	f103 020a 	add.w	r2, r3, #10
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800773e:	200a      	movs	r0, #10
 8007740:	f001 fdd3 	bl	80092ea <USBH_Delay>
      break;
 8007744:	e163      	b.n	8007a0e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800774c:	2b00      	cmp	r3, #0
 800774e:	d005      	beq.n	800775c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007756:	2104      	movs	r1, #4
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800775c:	2064      	movs	r0, #100	@ 0x64
 800775e:	f001 fdc4 	bl	80092ea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f001 fc90 	bl	8009088 <USBH_LL_GetSpeed>
 8007768:	4603      	mov	r3, r0
 800776a:	461a      	mov	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2205      	movs	r2, #5
 8007776:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007778:	2100      	movs	r1, #0
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fa9b 	bl	8008cb6 <USBH_AllocPipe>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007788:	2180      	movs	r1, #128	@ 0x80
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f001 fa93 	bl	8008cb6 <USBH_AllocPipe>
 8007790:	4603      	mov	r3, r0
 8007792:	461a      	mov	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	7919      	ldrb	r1, [r3, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077a8:	687a      	ldr	r2, [r7, #4]
 80077aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 80077ac:	9202      	str	r2, [sp, #8]
 80077ae:	2200      	movs	r2, #0
 80077b0:	9201      	str	r2, [sp, #4]
 80077b2:	9300      	str	r3, [sp, #0]
 80077b4:	4603      	mov	r3, r0
 80077b6:	2280      	movs	r2, #128	@ 0x80
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f001 fa4d 	bl	8008c58 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	7959      	ldrb	r1, [r3, #5]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80077d2:	9202      	str	r2, [sp, #8]
 80077d4:	2200      	movs	r2, #0
 80077d6:	9201      	str	r2, [sp, #4]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4603      	mov	r3, r0
 80077dc:	2200      	movs	r2, #0
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f001 fa3a 	bl	8008c58 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80077e4:	e113      	b.n	8007a0e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f000 f916 	bl	8007a18 <USBH_HandleEnum>
 80077ec:	4603      	mov	r3, r0
 80077ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80077f0:	7bbb      	ldrb	r3, [r7, #14]
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	f040 80fd 	bne.w	80079f4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2200      	movs	r2, #0
 80077fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007808:	2b01      	cmp	r3, #1
 800780a:	d103      	bne.n	8007814 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2208      	movs	r2, #8
 8007810:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007812:	e0ef      	b.n	80079f4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2207      	movs	r2, #7
 8007818:	701a      	strb	r2, [r3, #0]
      break;
 800781a:	e0eb      	b.n	80079f4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007822:	2b00      	cmp	r3, #0
 8007824:	f000 80e8 	beq.w	80079f8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800782e:	2101      	movs	r1, #1
 8007830:	6878      	ldr	r0, [r7, #4]
 8007832:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2208      	movs	r2, #8
 8007838:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800783a:	e0dd      	b.n	80079f8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007842:	4619      	mov	r1, r3
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 fc3a 	bl	80080be <USBH_SetCfg>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 80d5 	bne.w	80079fc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2209      	movs	r2, #9
 8007856:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007858:	e0d0      	b.n	80079fc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007860:	f003 0320 	and.w	r3, r3, #32
 8007864:	2b00      	cmp	r3, #0
 8007866:	d016      	beq.n	8007896 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007868:	2101      	movs	r1, #1
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f000 fc4a 	bl	8008104 <USBH_SetFeature>
 8007870:	4603      	mov	r3, r0
 8007872:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007874:	7bbb      	ldrb	r3, [r7, #14]
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b00      	cmp	r3, #0
 800787a:	d103      	bne.n	8007884 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	220a      	movs	r2, #10
 8007880:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007882:	e0bd      	b.n	8007a00 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	b2db      	uxtb	r3, r3
 8007888:	2b03      	cmp	r3, #3
 800788a:	f040 80b9 	bne.w	8007a00 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	220a      	movs	r2, #10
 8007892:	701a      	strb	r2, [r3, #0]
      break;
 8007894:	e0b4      	b.n	8007a00 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	220a      	movs	r2, #10
 800789a:	701a      	strb	r2, [r3, #0]
      break;
 800789c:	e0b0      	b.n	8007a00 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80ad 	beq.w	8007a04 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078b2:	2300      	movs	r3, #0
 80078b4:	73fb      	strb	r3, [r7, #15]
 80078b6:	e016      	b.n	80078e6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80078b8:	7bfa      	ldrb	r2, [r7, #15]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	32de      	adds	r2, #222	@ 0xde
 80078be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078c2:	791a      	ldrb	r2, [r3, #4]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d108      	bne.n	80078e0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80078ce:	7bfa      	ldrb	r2, [r7, #15]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	32de      	adds	r2, #222	@ 0xde
 80078d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80078de:	e005      	b.n	80078ec <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	3301      	adds	r3, #1
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0e5      	beq.n	80078b8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d016      	beq.n	8007924 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d109      	bne.n	800791c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2206      	movs	r2, #6
 800790c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007914:	2103      	movs	r1, #3
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800791a:	e073      	b.n	8007a04 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	220d      	movs	r2, #13
 8007920:	701a      	strb	r2, [r3, #0]
      break;
 8007922:	e06f      	b.n	8007a04 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	220d      	movs	r2, #13
 8007928:	701a      	strb	r2, [r3, #0]
      break;
 800792a:	e06b      	b.n	8007a04 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007932:	2b00      	cmp	r3, #0
 8007934:	d017      	beq.n	8007966 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800793c:	691b      	ldr	r3, [r3, #16]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	4798      	blx	r3
 8007942:	4603      	mov	r3, r0
 8007944:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007946:	7bbb      	ldrb	r3, [r7, #14]
 8007948:	b2db      	uxtb	r3, r3
 800794a:	2b00      	cmp	r3, #0
 800794c:	d103      	bne.n	8007956 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	220b      	movs	r2, #11
 8007952:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007954:	e058      	b.n	8007a08 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007956:	7bbb      	ldrb	r3, [r7, #14]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b02      	cmp	r3, #2
 800795c:	d154      	bne.n	8007a08 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	220d      	movs	r2, #13
 8007962:	701a      	strb	r2, [r3, #0]
      break;
 8007964:	e050      	b.n	8007a08 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	220d      	movs	r2, #13
 800796a:	701a      	strb	r2, [r3, #0]
      break;
 800796c:	e04c      	b.n	8007a08 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007974:	2b00      	cmp	r3, #0
 8007976:	d049      	beq.n	8007a0c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800797e:	695b      	ldr	r3, [r3, #20]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	4798      	blx	r3
      }
      break;
 8007984:	e042      	b.n	8007a0c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2200      	movs	r2, #0
 800798a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f7ff fd4a 	bl	8007428 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800799a:	2b00      	cmp	r3, #0
 800799c:	d009      	beq.n	80079b2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d005      	beq.n	80079c8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80079c2:	2105      	movs	r1, #5
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80079ce:	b2db      	uxtb	r3, r3
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d107      	bne.n	80079e4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f7ff fe22 	bl	8007626 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80079e2:	e014      	b.n	8007a0e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80079e4:	6878      	ldr	r0, [r7, #4]
 80079e6:	f001 fb19 	bl	800901c <USBH_LL_Start>
      break;
 80079ea:	e010      	b.n	8007a0e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80079ec:	bf00      	nop
 80079ee:	e00e      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 80079f0:	bf00      	nop
 80079f2:	e00c      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 80079f4:	bf00      	nop
 80079f6:	e00a      	b.n	8007a0e <USBH_Process+0x3c6>
    break;
 80079f8:	bf00      	nop
 80079fa:	e008      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 80079fc:	bf00      	nop
 80079fe:	e006      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 8007a00:	bf00      	nop
 8007a02:	e004      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 8007a04:	bf00      	nop
 8007a06:	e002      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 8007a08:	bf00      	nop
 8007a0a:	e000      	b.n	8007a0e <USBH_Process+0x3c6>
      break;
 8007a0c:	bf00      	nop
  }
  return USBH_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3710      	adds	r7, #16
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af04      	add	r7, sp, #16
 8007a1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007a20:	2301      	movs	r3, #1
 8007a22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007a24:	2301      	movs	r3, #1
 8007a26:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	785b      	ldrb	r3, [r3, #1]
 8007a2c:	2b07      	cmp	r3, #7
 8007a2e:	f200 81bd 	bhi.w	8007dac <USBH_HandleEnum+0x394>
 8007a32:	a201      	add	r2, pc, #4	@ (adr r2, 8007a38 <USBH_HandleEnum+0x20>)
 8007a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a38:	08007a59 	.word	0x08007a59
 8007a3c:	08007b13 	.word	0x08007b13
 8007a40:	08007b7d 	.word	0x08007b7d
 8007a44:	08007c07 	.word	0x08007c07
 8007a48:	08007c71 	.word	0x08007c71
 8007a4c:	08007ce1 	.word	0x08007ce1
 8007a50:	08007d27 	.word	0x08007d27
 8007a54:	08007d6d 	.word	0x08007d6d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8007a58:	2108      	movs	r1, #8
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa4c 	bl	8007ef8 <USBH_Get_DevDesc>
 8007a60:	4603      	mov	r3, r0
 8007a62:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a64:	7bbb      	ldrb	r3, [r7, #14]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d12e      	bne.n	8007ac8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	7919      	ldrb	r1, [r3, #4]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007a8a:	687a      	ldr	r2, [r7, #4]
 8007a8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a8e:	9202      	str	r2, [sp, #8]
 8007a90:	2200      	movs	r2, #0
 8007a92:	9201      	str	r2, [sp, #4]
 8007a94:	9300      	str	r3, [sp, #0]
 8007a96:	4603      	mov	r3, r0
 8007a98:	2280      	movs	r2, #128	@ 0x80
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f001 f8dc 	bl	8008c58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	7959      	ldrb	r1, [r3, #5]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007ab4:	9202      	str	r2, [sp, #8]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	9201      	str	r2, [sp, #4]
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	4603      	mov	r3, r0
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f001 f8c9 	bl	8008c58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007ac6:	e173      	b.n	8007db0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007ac8:	7bbb      	ldrb	r3, [r7, #14]
 8007aca:	2b03      	cmp	r3, #3
 8007acc:	f040 8170 	bne.w	8007db0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007ae6:	2b03      	cmp	r3, #3
 8007ae8:	d903      	bls.n	8007af2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	220d      	movs	r2, #13
 8007aee:	701a      	strb	r2, [r3, #0]
      break;
 8007af0:	e15e      	b.n	8007db0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	795b      	ldrb	r3, [r3, #5]
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f001 f8fd 	bl	8008cf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	791b      	ldrb	r3, [r3, #4]
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f001 f8f7 	bl	8008cf8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	701a      	strb	r2, [r3, #0]
      break;
 8007b10:	e14e      	b.n	8007db0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007b12:	2112      	movs	r1, #18
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f000 f9ef 	bl	8007ef8 <USBH_Get_DevDesc>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b1e:	7bbb      	ldrb	r3, [r7, #14]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d103      	bne.n	8007b2c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2202      	movs	r2, #2
 8007b28:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b2a:	e143      	b.n	8007db4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b2c:	7bbb      	ldrb	r3, [r7, #14]
 8007b2e:	2b03      	cmp	r3, #3
 8007b30:	f040 8140 	bne.w	8007db4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	b2da      	uxtb	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d903      	bls.n	8007b56 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	220d      	movs	r2, #13
 8007b52:	701a      	strb	r2, [r3, #0]
      break;
 8007b54:	e12e      	b.n	8007db4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	795b      	ldrb	r3, [r3, #5]
 8007b5a:	4619      	mov	r1, r3
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f001 f8cb 	bl	8008cf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	791b      	ldrb	r3, [r3, #4]
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f001 f8c5 	bl	8008cf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2200      	movs	r2, #0
 8007b72:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	701a      	strb	r2, [r3, #0]
      break;
 8007b7a:	e11b      	b.n	8007db4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007b7c:	2101      	movs	r1, #1
 8007b7e:	6878      	ldr	r0, [r7, #4]
 8007b80:	f000 fa79 	bl	8008076 <USBH_SetAddress>
 8007b84:	4603      	mov	r3, r0
 8007b86:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b88:	7bbb      	ldrb	r3, [r7, #14]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d130      	bne.n	8007bf0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8007b8e:	2002      	movs	r0, #2
 8007b90:	f001 fbab 	bl	80092ea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2201      	movs	r2, #1
 8007b98:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2203      	movs	r2, #3
 8007ba0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	7919      	ldrb	r1, [r3, #4]
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007bb6:	9202      	str	r2, [sp, #8]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	9201      	str	r2, [sp, #4]
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2280      	movs	r2, #128	@ 0x80
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f001 f848 	bl	8008c58 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	7959      	ldrb	r1, [r3, #5]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8007bd8:	687a      	ldr	r2, [r7, #4]
 8007bda:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007bdc:	9202      	str	r2, [sp, #8]
 8007bde:	2200      	movs	r2, #0
 8007be0:	9201      	str	r2, [sp, #4]
 8007be2:	9300      	str	r3, [sp, #0]
 8007be4:	4603      	mov	r3, r0
 8007be6:	2200      	movs	r2, #0
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 f835 	bl	8008c58 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007bee:	e0e3      	b.n	8007db8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	f040 80e0 	bne.w	8007db8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	220d      	movs	r2, #13
 8007bfc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	705a      	strb	r2, [r3, #1]
      break;
 8007c04:	e0d8      	b.n	8007db8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007c06:	2109      	movs	r1, #9
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f000 f9a1 	bl	8007f50 <USBH_Get_CfgDesc>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c12:	7bbb      	ldrb	r3, [r7, #14]
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d103      	bne.n	8007c20 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2204      	movs	r2, #4
 8007c1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c1e:	e0cd      	b.n	8007dbc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	f040 80ca 	bne.w	8007dbc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c2e:	3301      	adds	r3, #1
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d903      	bls.n	8007c4a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	220d      	movs	r2, #13
 8007c46:	701a      	strb	r2, [r3, #0]
      break;
 8007c48:	e0b8      	b.n	8007dbc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	795b      	ldrb	r3, [r3, #5]
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f001 f851 	bl	8008cf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	791b      	ldrb	r3, [r3, #4]
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f001 f84b 	bl	8008cf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	701a      	strb	r2, [r3, #0]
      break;
 8007c6e:	e0a5      	b.n	8007dbc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 f969 	bl	8007f50 <USBH_Get_CfgDesc>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d103      	bne.n	8007c90 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2205      	movs	r2, #5
 8007c8c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c8e:	e097      	b.n	8007dc0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c90:	7bbb      	ldrb	r3, [r7, #14]
 8007c92:	2b03      	cmp	r3, #3
 8007c94:	f040 8094 	bne.w	8007dc0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	d903      	bls.n	8007cba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	220d      	movs	r2, #13
 8007cb6:	701a      	strb	r2, [r3, #0]
      break;
 8007cb8:	e082      	b.n	8007dc0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	795b      	ldrb	r3, [r3, #5]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f001 f819 	bl	8008cf8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	791b      	ldrb	r3, [r3, #4]
 8007cca:	4619      	mov	r1, r3
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f001 f813 	bl	8008cf8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
      break;
 8007cde:	e06f      	b.n	8007dc0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d019      	beq.n	8007d1e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007cf6:	23ff      	movs	r3, #255	@ 0xff
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 f953 	bl	8007fa4 <USBH_Get_StringDesc>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d103      	bne.n	8007d10 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2206      	movs	r2, #6
 8007d0c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d0e:	e059      	b.n	8007dc4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d10:	7bbb      	ldrb	r3, [r7, #14]
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d156      	bne.n	8007dc4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2206      	movs	r2, #6
 8007d1a:	705a      	strb	r2, [r3, #1]
      break;
 8007d1c:	e052      	b.n	8007dc4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2206      	movs	r2, #6
 8007d22:	705a      	strb	r2, [r3, #1]
      break;
 8007d24:	e04e      	b.n	8007dc4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d019      	beq.n	8007d64 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007d3c:	23ff      	movs	r3, #255	@ 0xff
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f930 	bl	8007fa4 <USBH_Get_StringDesc>
 8007d44:	4603      	mov	r3, r0
 8007d46:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d103      	bne.n	8007d56 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2207      	movs	r2, #7
 8007d52:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007d54:	e038      	b.n	8007dc8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d56:	7bbb      	ldrb	r3, [r7, #14]
 8007d58:	2b03      	cmp	r3, #3
 8007d5a:	d135      	bne.n	8007dc8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2207      	movs	r2, #7
 8007d60:	705a      	strb	r2, [r3, #1]
      break;
 8007d62:	e031      	b.n	8007dc8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2207      	movs	r2, #7
 8007d68:	705a      	strb	r2, [r3, #1]
      break;
 8007d6a:	e02d      	b.n	8007dc8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d017      	beq.n	8007da6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007d82:	23ff      	movs	r3, #255	@ 0xff
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f90d 	bl	8007fa4 <USBH_Get_StringDesc>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d102      	bne.n	8007d9a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d94:	2300      	movs	r3, #0
 8007d96:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d98:	e018      	b.n	8007dcc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d9a:	7bbb      	ldrb	r3, [r7, #14]
 8007d9c:	2b03      	cmp	r3, #3
 8007d9e:	d115      	bne.n	8007dcc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8007da0:	2300      	movs	r3, #0
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e012      	b.n	8007dcc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8007da6:	2300      	movs	r3, #0
 8007da8:	73fb      	strb	r3, [r7, #15]
      break;
 8007daa:	e00f      	b.n	8007dcc <USBH_HandleEnum+0x3b4>

    default:
      break;
 8007dac:	bf00      	nop
 8007dae:	e00e      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007db0:	bf00      	nop
 8007db2:	e00c      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007db4:	bf00      	nop
 8007db6:	e00a      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007db8:	bf00      	nop
 8007dba:	e008      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007dbc:	bf00      	nop
 8007dbe:	e006      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007dc0:	bf00      	nop
 8007dc2:	e004      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007dc4:	bf00      	nop
 8007dc6:	e002      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007dc8:	bf00      	nop
 8007dca:	e000      	b.n	8007dce <USBH_HandleEnum+0x3b6>
      break;
 8007dcc:	bf00      	nop
  }
  return Status;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	3710      	adds	r7, #16
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	bd80      	pop	{r7, pc}

08007dd8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	683a      	ldr	r2, [r7, #0]
 8007de6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8007dea:	bf00      	nop
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b082      	sub	sp, #8
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8007e04:	1c5a      	adds	r2, r3, #1
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f000 f804 	bl	8007e1a <USBH_HandleSof>
}
 8007e12:	bf00      	nop
 8007e14:	3708      	adds	r7, #8
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007e1a:	b580      	push	{r7, lr}
 8007e1c:	b082      	sub	sp, #8
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	781b      	ldrb	r3, [r3, #0]
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b0b      	cmp	r3, #11
 8007e2a:	d10a      	bne.n	8007e42 <USBH_HandleSof+0x28>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d005      	beq.n	8007e42 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	4798      	blx	r3
  }
}
 8007e42:	bf00      	nop
 8007e44:	3708      	adds	r7, #8
 8007e46:	46bd      	mov	sp, r7
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007e4a:	b480      	push	{r7}
 8007e4c:	b083      	sub	sp, #12
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2201      	movs	r2, #1
 8007e56:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007e5a:	bf00      	nop
}
 8007e5c:	370c      	adds	r7, #12
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr

08007e66 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007e66:	b480      	push	{r7}
 8007e68:	b083      	sub	sp, #12
 8007e6a:	af00      	add	r7, sp, #0
 8007e6c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8007e76:	bf00      	nop
}
 8007e78:	370c      	adds	r7, #12
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr

08007e82 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007e82:	b480      	push	{r7}
 8007e84:	b083      	sub	sp, #12
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	2200      	movs	r2, #0
 8007e96:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2201      	movs	r2, #1
 8007ebc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 f8be 	bl	8009052 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	791b      	ldrb	r3, [r3, #4]
 8007eda:	4619      	mov	r1, r3
 8007edc:	6878      	ldr	r0, [r7, #4]
 8007ede:	f000 ff0b 	bl	8008cf8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	795b      	ldrb	r3, [r3, #5]
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 ff05 	bl	8008cf8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af02      	add	r7, sp, #8
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8007f04:	887b      	ldrh	r3, [r7, #2]
 8007f06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f0a:	d901      	bls.n	8007f10 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e01b      	b.n	8007f48 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007f16:	887b      	ldrh	r3, [r7, #2]
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007f20:	2100      	movs	r1, #0
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 f872 	bl	800800c <USBH_GetDescriptor>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d109      	bne.n	8007f46 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007f38:	887a      	ldrh	r2, [r7, #2]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f929 	bl	8008194 <USBH_ParseDevDesc>
 8007f42:	4603      	mov	r3, r0
 8007f44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3710      	adds	r7, #16
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af02      	add	r7, sp, #8
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	331c      	adds	r3, #28
 8007f60:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8007f62:	887b      	ldrh	r3, [r7, #2]
 8007f64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f68:	d901      	bls.n	8007f6e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e016      	b.n	8007f9c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007f6e:	887b      	ldrh	r3, [r7, #2]
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f846 	bl	800800c <USBH_GetDescriptor>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d107      	bne.n	8007f9a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007f8a:	887b      	ldrh	r3, [r7, #2]
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f000 f9af 	bl	80082f4 <USBH_ParseCfgDesc>
 8007f96:	4603      	mov	r3, r0
 8007f98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b088      	sub	sp, #32
 8007fa8:	af02      	add	r7, sp, #8
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	607a      	str	r2, [r7, #4]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	72fb      	strb	r3, [r7, #11]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8007fb8:	893b      	ldrh	r3, [r7, #8]
 8007fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fbe:	d802      	bhi.n	8007fc6 <USBH_Get_StringDesc+0x22>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e01c      	b.n	8008004 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8007fca:	7afb      	ldrb	r3, [r7, #11]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8007fd2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8007fda:	893b      	ldrh	r3, [r7, #8]
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	460b      	mov	r3, r1
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f000 f812 	bl	800800c <USBH_GetDescriptor>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007fec:	7dfb      	ldrb	r3, [r7, #23]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d107      	bne.n	8008002 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ff8:	893a      	ldrh	r2, [r7, #8]
 8007ffa:	6879      	ldr	r1, [r7, #4]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 fb8d 	bl	800871c <USBH_ParseStringDesc>
  }

  return status;
 8008002:	7dfb      	ldrb	r3, [r7, #23]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3718      	adds	r7, #24
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	60f8      	str	r0, [r7, #12]
 8008014:	607b      	str	r3, [r7, #4]
 8008016:	460b      	mov	r3, r1
 8008018:	72fb      	strb	r3, [r7, #11]
 800801a:	4613      	mov	r3, r2
 800801c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	789b      	ldrb	r3, [r3, #2]
 8008022:	2b01      	cmp	r3, #1
 8008024:	d11c      	bne.n	8008060 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008026:	7afb      	ldrb	r3, [r7, #11]
 8008028:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800802c:	b2da      	uxtb	r2, r3
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2206      	movs	r2, #6
 8008036:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	893a      	ldrh	r2, [r7, #8]
 800803c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800803e:	893b      	ldrh	r3, [r7, #8]
 8008040:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008044:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008048:	d104      	bne.n	8008054 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f240 4209 	movw	r2, #1033	@ 0x409
 8008050:	829a      	strh	r2, [r3, #20]
 8008052:	e002      	b.n	800805a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	8b3a      	ldrh	r2, [r7, #24]
 800805e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008060:	8b3b      	ldrh	r3, [r7, #24]
 8008062:	461a      	mov	r2, r3
 8008064:	6879      	ldr	r1, [r7, #4]
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f000 fba5 	bl	80087b6 <USBH_CtlReq>
 800806c:	4603      	mov	r3, r0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3710      	adds	r7, #16
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}

08008076 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008076:	b580      	push	{r7, lr}
 8008078:	b082      	sub	sp, #8
 800807a:	af00      	add	r7, sp, #0
 800807c:	6078      	str	r0, [r7, #4]
 800807e:	460b      	mov	r3, r1
 8008080:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	789b      	ldrb	r3, [r3, #2]
 8008086:	2b01      	cmp	r3, #1
 8008088:	d10f      	bne.n	80080aa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2205      	movs	r2, #5
 8008094:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	b29a      	uxth	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2200      	movs	r2, #0
 80080a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080aa:	2200      	movs	r2, #0
 80080ac:	2100      	movs	r1, #0
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f000 fb81 	bl	80087b6 <USBH_CtlReq>
 80080b4:	4603      	mov	r3, r0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80080be:	b580      	push	{r7, lr}
 80080c0:	b082      	sub	sp, #8
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
 80080c6:	460b      	mov	r3, r1
 80080c8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	789b      	ldrb	r3, [r3, #2]
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d10e      	bne.n	80080f0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2200      	movs	r2, #0
 80080d6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2209      	movs	r2, #9
 80080dc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	887a      	ldrh	r2, [r7, #2]
 80080e2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2200      	movs	r2, #0
 80080ee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80080f0:	2200      	movs	r2, #0
 80080f2:	2100      	movs	r1, #0
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fb5e 	bl	80087b6 <USBH_CtlReq>
 80080fa:	4603      	mov	r3, r0
}
 80080fc:	4618      	mov	r0, r3
 80080fe:	3708      	adds	r7, #8
 8008100:	46bd      	mov	sp, r7
 8008102:	bd80      	pop	{r7, pc}

08008104 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b082      	sub	sp, #8
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
 800810c:	460b      	mov	r3, r1
 800810e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	789b      	ldrb	r3, [r3, #2]
 8008114:	2b01      	cmp	r3, #1
 8008116:	d10f      	bne.n	8008138 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2200      	movs	r2, #0
 800811c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2203      	movs	r2, #3
 8008122:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	b29a      	uxth	r2, r3
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2200      	movs	r2, #0
 8008130:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008138:	2200      	movs	r2, #0
 800813a:	2100      	movs	r1, #0
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 fb3a 	bl	80087b6 <USBH_CtlReq>
 8008142:	4603      	mov	r3, r0
}
 8008144:	4618      	mov	r0, r3
 8008146:	3708      	adds	r7, #8
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	789b      	ldrb	r3, [r3, #2]
 800815c:	2b01      	cmp	r3, #1
 800815e:	d10f      	bne.n	8008180 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2202      	movs	r2, #2
 8008164:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2201      	movs	r2, #1
 800816a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	b29a      	uxth	r2, r3
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008180:	2200      	movs	r2, #0
 8008182:	2100      	movs	r1, #0
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 fb16 	bl	80087b6 <USBH_CtlReq>
 800818a:	4603      	mov	r3, r0
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008194:	b480      	push	{r7}
 8008196:	b087      	sub	sp, #28
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	4613      	mov	r3, r2
 80081a0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80081a8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80081aa:	2300      	movs	r3, #0
 80081ac:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d101      	bne.n	80081b8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80081b4:	2302      	movs	r3, #2
 80081b6:	e094      	b.n	80082e2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	781a      	ldrb	r2, [r3, #0]
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	785a      	ldrb	r2, [r3, #1]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3302      	adds	r3, #2
 80081cc:	781b      	ldrb	r3, [r3, #0]
 80081ce:	461a      	mov	r2, r3
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	3303      	adds	r3, #3
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	021b      	lsls	r3, r3, #8
 80081d8:	b29b      	uxth	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b29a      	uxth	r2, r3
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	791a      	ldrb	r2, [r3, #4]
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	795a      	ldrb	r2, [r3, #5]
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	799a      	ldrb	r2, [r3, #6]
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	79da      	ldrb	r2, [r3, #7]
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008208:	2b00      	cmp	r3, #0
 800820a:	d004      	beq.n	8008216 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008212:	2b01      	cmp	r3, #1
 8008214:	d11b      	bne.n	800824e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	79db      	ldrb	r3, [r3, #7]
 800821a:	2b20      	cmp	r3, #32
 800821c:	dc0f      	bgt.n	800823e <USBH_ParseDevDesc+0xaa>
 800821e:	2b08      	cmp	r3, #8
 8008220:	db0f      	blt.n	8008242 <USBH_ParseDevDesc+0xae>
 8008222:	3b08      	subs	r3, #8
 8008224:	4a32      	ldr	r2, [pc, #200]	@ (80082f0 <USBH_ParseDevDesc+0x15c>)
 8008226:	fa22 f303 	lsr.w	r3, r2, r3
 800822a:	f003 0301 	and.w	r3, r3, #1
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf14      	ite	ne
 8008232:	2301      	movne	r3, #1
 8008234:	2300      	moveq	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <USBH_ParseDevDesc+0xb6>
 800823c:	e001      	b.n	8008242 <USBH_ParseDevDesc+0xae>
 800823e:	2b40      	cmp	r3, #64	@ 0x40
 8008240:	d003      	beq.n	800824a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	2208      	movs	r2, #8
 8008246:	71da      	strb	r2, [r3, #7]
        break;
 8008248:	e000      	b.n	800824c <USBH_ParseDevDesc+0xb8>
        break;
 800824a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800824c:	e00e      	b.n	800826c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008254:	2b02      	cmp	r3, #2
 8008256:	d107      	bne.n	8008268 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	79db      	ldrb	r3, [r3, #7]
 800825c:	2b08      	cmp	r3, #8
 800825e:	d005      	beq.n	800826c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	2208      	movs	r2, #8
 8008264:	71da      	strb	r2, [r3, #7]
 8008266:	e001      	b.n	800826c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008268:	2303      	movs	r3, #3
 800826a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800826c:	88fb      	ldrh	r3, [r7, #6]
 800826e:	2b08      	cmp	r3, #8
 8008270:	d936      	bls.n	80082e0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	3308      	adds	r3, #8
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	461a      	mov	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3309      	adds	r3, #9
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	021b      	lsls	r3, r3, #8
 8008282:	b29b      	uxth	r3, r3
 8008284:	4313      	orrs	r3, r2
 8008286:	b29a      	uxth	r2, r3
 8008288:	693b      	ldr	r3, [r7, #16]
 800828a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	330a      	adds	r3, #10
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	330b      	adds	r3, #11
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	021b      	lsls	r3, r3, #8
 800829c:	b29b      	uxth	r3, r3
 800829e:	4313      	orrs	r3, r2
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80082a6:	68bb      	ldr	r3, [r7, #8]
 80082a8:	330c      	adds	r3, #12
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	461a      	mov	r2, r3
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	330d      	adds	r3, #13
 80082b2:	781b      	ldrb	r3, [r3, #0]
 80082b4:	021b      	lsls	r3, r3, #8
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	4313      	orrs	r3, r2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	7b9a      	ldrb	r2, [r3, #14]
 80082c4:	693b      	ldr	r3, [r7, #16]
 80082c6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	7bda      	ldrb	r2, [r3, #15]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	7c1a      	ldrb	r2, [r3, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	7c5a      	ldrb	r2, [r3, #17]
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80082e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	371c      	adds	r7, #28
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	01000101 	.word	0x01000101

080082f4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b08c      	sub	sp, #48	@ 0x30
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	60f8      	str	r0, [r7, #12]
 80082fc:	60b9      	str	r1, [r7, #8]
 80082fe:	4613      	mov	r3, r2
 8008300:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008308:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008316:	2300      	movs	r3, #0
 8008318:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008322:	2302      	movs	r3, #2
 8008324:	e0da      	b.n	80084dc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b09      	cmp	r3, #9
 8008330:	d002      	beq.n	8008338 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	2209      	movs	r2, #9
 8008336:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	785a      	ldrb	r2, [r3, #1]
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	3302      	adds	r3, #2
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	461a      	mov	r2, r3
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	3303      	adds	r3, #3
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	021b      	lsls	r3, r3, #8
 8008358:	b29b      	uxth	r3, r3
 800835a:	4313      	orrs	r3, r2
 800835c:	b29b      	uxth	r3, r3
 800835e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008362:	bf28      	it	cs
 8008364:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008368:	b29a      	uxth	r2, r3
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800836e:	68bb      	ldr	r3, [r7, #8]
 8008370:	791a      	ldrb	r2, [r3, #4]
 8008372:	6a3b      	ldr	r3, [r7, #32]
 8008374:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	795a      	ldrb	r2, [r3, #5]
 800837a:	6a3b      	ldr	r3, [r7, #32]
 800837c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800837e:	68bb      	ldr	r3, [r7, #8]
 8008380:	799a      	ldrb	r2, [r3, #6]
 8008382:	6a3b      	ldr	r3, [r7, #32]
 8008384:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	79da      	ldrb	r2, [r3, #7]
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	7a1a      	ldrb	r2, [r3, #8]
 8008392:	6a3b      	ldr	r3, [r7, #32]
 8008394:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008396:	88fb      	ldrh	r3, [r7, #6]
 8008398:	2b09      	cmp	r3, #9
 800839a:	f240 809d 	bls.w	80084d8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800839e:	2309      	movs	r3, #9
 80083a0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80083a2:	2300      	movs	r3, #0
 80083a4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80083a6:	e081      	b.n	80084ac <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083a8:	f107 0316 	add.w	r3, r7, #22
 80083ac:	4619      	mov	r1, r3
 80083ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b0:	f000 f9e7 	bl	8008782 <USBH_GetNextDesc>
 80083b4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80083b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b8:	785b      	ldrb	r3, [r3, #1]
 80083ba:	2b04      	cmp	r3, #4
 80083bc:	d176      	bne.n	80084ac <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80083be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	2b09      	cmp	r3, #9
 80083c4:	d002      	beq.n	80083cc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	2209      	movs	r2, #9
 80083ca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80083cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80083d0:	221a      	movs	r2, #26
 80083d2:	fb02 f303 	mul.w	r3, r2, r3
 80083d6:	3308      	adds	r3, #8
 80083d8:	6a3a      	ldr	r2, [r7, #32]
 80083da:	4413      	add	r3, r2
 80083dc:	3302      	adds	r3, #2
 80083de:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80083e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80083e2:	69f8      	ldr	r0, [r7, #28]
 80083e4:	f000 f87e 	bl	80084e4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80083e8:	2300      	movs	r3, #0
 80083ea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80083f2:	e043      	b.n	800847c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80083f4:	f107 0316 	add.w	r3, r7, #22
 80083f8:	4619      	mov	r1, r3
 80083fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083fc:	f000 f9c1 	bl	8008782 <USBH_GetNextDesc>
 8008400:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008404:	785b      	ldrb	r3, [r3, #1]
 8008406:	2b05      	cmp	r3, #5
 8008408:	d138      	bne.n	800847c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800840a:	69fb      	ldr	r3, [r7, #28]
 800840c:	795b      	ldrb	r3, [r3, #5]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d113      	bne.n	800843a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008412:	69fb      	ldr	r3, [r7, #28]
 8008414:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008416:	2b02      	cmp	r3, #2
 8008418:	d003      	beq.n	8008422 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800841a:	69fb      	ldr	r3, [r7, #28]
 800841c:	799b      	ldrb	r3, [r3, #6]
 800841e:	2b03      	cmp	r3, #3
 8008420:	d10b      	bne.n	800843a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008422:	69fb      	ldr	r3, [r7, #28]
 8008424:	79db      	ldrb	r3, [r3, #7]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d10b      	bne.n	8008442 <USBH_ParseCfgDesc+0x14e>
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	2b09      	cmp	r3, #9
 8008430:	d007      	beq.n	8008442 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008434:	2209      	movs	r2, #9
 8008436:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008438:	e003      	b.n	8008442 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800843a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843c:	2207      	movs	r2, #7
 800843e:	701a      	strb	r2, [r3, #0]
 8008440:	e000      	b.n	8008444 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008442:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008444:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008448:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800844c:	3201      	adds	r2, #1
 800844e:	00d2      	lsls	r2, r2, #3
 8008450:	211a      	movs	r1, #26
 8008452:	fb01 f303 	mul.w	r3, r1, r3
 8008456:	4413      	add	r3, r2
 8008458:	3308      	adds	r3, #8
 800845a:	6a3a      	ldr	r2, [r7, #32]
 800845c:	4413      	add	r3, r2
 800845e:	3304      	adds	r3, #4
 8008460:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008462:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008464:	69b9      	ldr	r1, [r7, #24]
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f870 	bl	800854c <USBH_ParseEPDesc>
 800846c:	4603      	mov	r3, r0
 800846e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008472:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008476:	3301      	adds	r3, #1
 8008478:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800847c:	69fb      	ldr	r3, [r7, #28]
 800847e:	791b      	ldrb	r3, [r3, #4]
 8008480:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008484:	429a      	cmp	r2, r3
 8008486:	d204      	bcs.n	8008492 <USBH_ParseCfgDesc+0x19e>
 8008488:	6a3b      	ldr	r3, [r7, #32]
 800848a:	885a      	ldrh	r2, [r3, #2]
 800848c:	8afb      	ldrh	r3, [r7, #22]
 800848e:	429a      	cmp	r2, r3
 8008490:	d8b0      	bhi.n	80083f4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800849a:	429a      	cmp	r2, r3
 800849c:	d201      	bcs.n	80084a2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800849e:	2303      	movs	r3, #3
 80084a0:	e01c      	b.n	80084dc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 80084a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084a6:	3301      	adds	r3, #1
 80084a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80084ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d805      	bhi.n	80084c0 <USBH_ParseCfgDesc+0x1cc>
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	885a      	ldrh	r2, [r3, #2]
 80084b8:	8afb      	ldrh	r3, [r7, #22]
 80084ba:	429a      	cmp	r2, r3
 80084bc:	f63f af74 	bhi.w	80083a8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80084c0:	6a3b      	ldr	r3, [r7, #32]
 80084c2:	791b      	ldrb	r3, [r3, #4]
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	bf28      	it	cs
 80084c8:	2302      	movcs	r3, #2
 80084ca:	b2db      	uxtb	r3, r3
 80084cc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d201      	bcs.n	80084d8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e001      	b.n	80084dc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80084d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3730      	adds	r7, #48	@ 0x30
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	781a      	ldrb	r2, [r3, #0]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80084f6:	683b      	ldr	r3, [r7, #0]
 80084f8:	785a      	ldrb	r2, [r3, #1]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	789a      	ldrb	r2, [r3, #2]
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	78da      	ldrb	r2, [r3, #3]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	3304      	adds	r3, #4
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b02      	cmp	r3, #2
 8008516:	bf28      	it	cs
 8008518:	2302      	movcs	r3, #2
 800851a:	b2da      	uxtb	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008520:	683b      	ldr	r3, [r7, #0]
 8008522:	795a      	ldrb	r2, [r3, #5]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	799a      	ldrb	r2, [r3, #6]
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	79da      	ldrb	r2, [r3, #7]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	7a1a      	ldrb	r2, [r3, #8]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	721a      	strb	r2, [r3, #8]
}
 8008540:	bf00      	nop
 8008542:	370c      	adds	r7, #12
 8008544:	46bd      	mov	sp, r7
 8008546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854a:	4770      	bx	lr

0800854c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800854c:	b480      	push	{r7}
 800854e:	b087      	sub	sp, #28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008558:	2300      	movs	r3, #0
 800855a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	781a      	ldrb	r2, [r3, #0]
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	785a      	ldrb	r2, [r3, #1]
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	789a      	ldrb	r2, [r3, #2]
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	78da      	ldrb	r2, [r3, #3]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	3304      	adds	r3, #4
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	3305      	adds	r3, #5
 8008588:	781b      	ldrb	r3, [r3, #0]
 800858a:	021b      	lsls	r3, r3, #8
 800858c:	b29b      	uxth	r3, r3
 800858e:	4313      	orrs	r3, r2
 8008590:	b29a      	uxth	r2, r3
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	799a      	ldrb	r2, [r3, #6]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	889b      	ldrh	r3, [r3, #4]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d009      	beq.n	80085ba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 80085aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085ae:	d804      	bhi.n	80085ba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 80085b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085b8:	d901      	bls.n	80085be <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 80085ba:	2303      	movs	r3, #3
 80085bc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d136      	bne.n	8008636 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	78db      	ldrb	r3, [r3, #3]
 80085cc:	f003 0303 	and.w	r3, r3, #3
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d108      	bne.n	80085e6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	889b      	ldrh	r3, [r3, #4]
 80085d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085dc:	f240 8097 	bls.w	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085e0:	2303      	movs	r3, #3
 80085e2:	75fb      	strb	r3, [r7, #23]
 80085e4:	e093      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	78db      	ldrb	r3, [r3, #3]
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d107      	bne.n	8008602 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	889b      	ldrh	r3, [r3, #4]
 80085f6:	2b40      	cmp	r3, #64	@ 0x40
 80085f8:	f240 8089 	bls.w	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80085fc:	2303      	movs	r3, #3
 80085fe:	75fb      	strb	r3, [r7, #23]
 8008600:	e085      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	78db      	ldrb	r3, [r3, #3]
 8008606:	f003 0303 	and.w	r3, r3, #3
 800860a:	2b01      	cmp	r3, #1
 800860c:	d005      	beq.n	800861a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	78db      	ldrb	r3, [r3, #3]
 8008612:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008616:	2b03      	cmp	r3, #3
 8008618:	d10a      	bne.n	8008630 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800861a:	68bb      	ldr	r3, [r7, #8]
 800861c:	799b      	ldrb	r3, [r3, #6]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d003      	beq.n	800862a <USBH_ParseEPDesc+0xde>
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	799b      	ldrb	r3, [r3, #6]
 8008626:	2b10      	cmp	r3, #16
 8008628:	d970      	bls.n	800870c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800862a:	2303      	movs	r3, #3
 800862c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800862e:	e06d      	b.n	800870c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008630:	2303      	movs	r3, #3
 8008632:	75fb      	strb	r3, [r7, #23]
 8008634:	e06b      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800863c:	2b01      	cmp	r3, #1
 800863e:	d13c      	bne.n	80086ba <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	78db      	ldrb	r3, [r3, #3]
 8008644:	f003 0303 	and.w	r3, r3, #3
 8008648:	2b02      	cmp	r3, #2
 800864a:	d005      	beq.n	8008658 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	78db      	ldrb	r3, [r3, #3]
 8008650:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008654:	2b00      	cmp	r3, #0
 8008656:	d106      	bne.n	8008666 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	889b      	ldrh	r3, [r3, #4]
 800865c:	2b40      	cmp	r3, #64	@ 0x40
 800865e:	d956      	bls.n	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008660:	2303      	movs	r3, #3
 8008662:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008664:	e053      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	78db      	ldrb	r3, [r3, #3]
 800866a:	f003 0303 	and.w	r3, r3, #3
 800866e:	2b01      	cmp	r3, #1
 8008670:	d10e      	bne.n	8008690 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	799b      	ldrb	r3, [r3, #6]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d007      	beq.n	800868a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800867e:	2b10      	cmp	r3, #16
 8008680:	d803      	bhi.n	800868a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008686:	2b40      	cmp	r3, #64	@ 0x40
 8008688:	d941      	bls.n	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800868a:	2303      	movs	r3, #3
 800868c:	75fb      	strb	r3, [r7, #23]
 800868e:	e03e      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	78db      	ldrb	r3, [r3, #3]
 8008694:	f003 0303 	and.w	r3, r3, #3
 8008698:	2b03      	cmp	r3, #3
 800869a:	d10b      	bne.n	80086b4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	799b      	ldrb	r3, [r3, #6]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d004      	beq.n	80086ae <USBH_ParseEPDesc+0x162>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	889b      	ldrh	r3, [r3, #4]
 80086a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80086ac:	d32f      	bcc.n	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086ae:	2303      	movs	r3, #3
 80086b0:	75fb      	strb	r3, [r7, #23]
 80086b2:	e02c      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80086b4:	2303      	movs	r3, #3
 80086b6:	75fb      	strb	r3, [r7, #23]
 80086b8:	e029      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80086c0:	2b02      	cmp	r3, #2
 80086c2:	d120      	bne.n	8008706 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	78db      	ldrb	r3, [r3, #3]
 80086c8:	f003 0303 	and.w	r3, r3, #3
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d106      	bne.n	80086de <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	889b      	ldrh	r3, [r3, #4]
 80086d4:	2b08      	cmp	r3, #8
 80086d6:	d01a      	beq.n	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086d8:	2303      	movs	r3, #3
 80086da:	75fb      	strb	r3, [r7, #23]
 80086dc:	e017      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	78db      	ldrb	r3, [r3, #3]
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b03      	cmp	r3, #3
 80086e8:	d10a      	bne.n	8008700 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	799b      	ldrb	r3, [r3, #6]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d003      	beq.n	80086fa <USBH_ParseEPDesc+0x1ae>
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	889b      	ldrh	r3, [r3, #4]
 80086f6:	2b08      	cmp	r3, #8
 80086f8:	d909      	bls.n	800870e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80086fa:	2303      	movs	r3, #3
 80086fc:	75fb      	strb	r3, [r7, #23]
 80086fe:	e006      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008700:	2303      	movs	r3, #3
 8008702:	75fb      	strb	r3, [r7, #23]
 8008704:	e003      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008706:	2303      	movs	r3, #3
 8008708:	75fb      	strb	r3, [r7, #23]
 800870a:	e000      	b.n	800870e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800870c:	bf00      	nop
  }

  return status;
 800870e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008710:	4618      	mov	r0, r3
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800871c:	b480      	push	{r7}
 800871e:	b087      	sub	sp, #28
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	4613      	mov	r3, r2
 8008728:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	3301      	adds	r3, #1
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b03      	cmp	r3, #3
 8008732:	d120      	bne.n	8008776 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	1e9a      	subs	r2, r3, #2
 800873a:	88fb      	ldrh	r3, [r7, #6]
 800873c:	4293      	cmp	r3, r2
 800873e:	bf28      	it	cs
 8008740:	4613      	movcs	r3, r2
 8008742:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3302      	adds	r3, #2
 8008748:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800874a:	2300      	movs	r3, #0
 800874c:	82fb      	strh	r3, [r7, #22]
 800874e:	e00b      	b.n	8008768 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008750:	8afb      	ldrh	r3, [r7, #22]
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	781a      	ldrb	r2, [r3, #0]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	3301      	adds	r3, #1
 8008760:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008762:	8afb      	ldrh	r3, [r7, #22]
 8008764:	3302      	adds	r3, #2
 8008766:	82fb      	strh	r3, [r7, #22]
 8008768:	8afa      	ldrh	r2, [r7, #22]
 800876a:	8abb      	ldrh	r3, [r7, #20]
 800876c:	429a      	cmp	r2, r3
 800876e:	d3ef      	bcc.n	8008750 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	2200      	movs	r2, #0
 8008774:	701a      	strb	r2, [r3, #0]
  }
}
 8008776:	bf00      	nop
 8008778:	371c      	adds	r7, #28
 800877a:	46bd      	mov	sp, r7
 800877c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008780:	4770      	bx	lr

08008782 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008782:	b480      	push	{r7}
 8008784:	b085      	sub	sp, #20
 8008786:	af00      	add	r7, sp, #0
 8008788:	6078      	str	r0, [r7, #4]
 800878a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	881b      	ldrh	r3, [r3, #0]
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	7812      	ldrb	r2, [r2, #0]
 8008794:	4413      	add	r3, r2
 8008796:	b29a      	uxth	r2, r3
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	4413      	add	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80087a8:	68fb      	ldr	r3, [r7, #12]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3714      	adds	r7, #20
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr

080087b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b086      	sub	sp, #24
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	60f8      	str	r0, [r7, #12]
 80087be:	60b9      	str	r1, [r7, #8]
 80087c0:	4613      	mov	r3, r2
 80087c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80087c4:	2301      	movs	r3, #1
 80087c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	789b      	ldrb	r3, [r3, #2]
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d002      	beq.n	80087d6 <USBH_CtlReq+0x20>
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	d00f      	beq.n	80087f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80087d4:	e027      	b.n	8008826 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	88fa      	ldrh	r2, [r7, #6]
 80087e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2202      	movs	r2, #2
 80087ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80087ee:	2301      	movs	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
      break;
 80087f2:	e018      	b.n	8008826 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 f81b 	bl	8008830 <USBH_HandleControl>
 80087fa:	4603      	mov	r3, r0
 80087fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80087fe:	7dfb      	ldrb	r3, [r7, #23]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <USBH_CtlReq+0x54>
 8008804:	7dfb      	ldrb	r3, [r7, #23]
 8008806:	2b03      	cmp	r3, #3
 8008808:	d106      	bne.n	8008818 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	761a      	strb	r2, [r3, #24]
      break;
 8008816:	e005      	b.n	8008824 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008818:	7dfb      	ldrb	r3, [r7, #23]
 800881a:	2b02      	cmp	r3, #2
 800881c:	d102      	bne.n	8008824 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2201      	movs	r2, #1
 8008822:	709a      	strb	r2, [r3, #2]
      break;
 8008824:	bf00      	nop
  }
  return status;
 8008826:	7dfb      	ldrb	r3, [r7, #23]
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af02      	add	r7, sp, #8
 8008836:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008838:	2301      	movs	r3, #1
 800883a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800883c:	2300      	movs	r3, #0
 800883e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	7e1b      	ldrb	r3, [r3, #24]
 8008844:	3b01      	subs	r3, #1
 8008846:	2b0a      	cmp	r3, #10
 8008848:	f200 8156 	bhi.w	8008af8 <USBH_HandleControl+0x2c8>
 800884c:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <USBH_HandleControl+0x24>)
 800884e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008852:	bf00      	nop
 8008854:	08008881 	.word	0x08008881
 8008858:	0800889b 	.word	0x0800889b
 800885c:	08008905 	.word	0x08008905
 8008860:	0800892b 	.word	0x0800892b
 8008864:	08008963 	.word	0x08008963
 8008868:	0800898d 	.word	0x0800898d
 800886c:	080089df 	.word	0x080089df
 8008870:	08008a01 	.word	0x08008a01
 8008874:	08008a3d 	.word	0x08008a3d
 8008878:	08008a63 	.word	0x08008a63
 800887c:	08008aa1 	.word	0x08008aa1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	f103 0110 	add.w	r1, r3, #16
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	795b      	ldrb	r3, [r3, #5]
 800888a:	461a      	mov	r2, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f943 	bl	8008b18 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2202      	movs	r2, #2
 8008896:	761a      	strb	r2, [r3, #24]
      break;
 8008898:	e139      	b.n	8008b0e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	795b      	ldrb	r3, [r3, #5]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fcc5 	bl	8009230 <USBH_LL_GetURBState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d11e      	bne.n	80088ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	7c1b      	ldrb	r3, [r3, #16]
 80088b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80088b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	8adb      	ldrh	r3, [r3, #22]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d00a      	beq.n	80088d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80088c2:	7b7b      	ldrb	r3, [r7, #13]
 80088c4:	2b80      	cmp	r3, #128	@ 0x80
 80088c6:	d103      	bne.n	80088d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2203      	movs	r2, #3
 80088cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80088ce:	e115      	b.n	8008afc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2205      	movs	r2, #5
 80088d4:	761a      	strb	r2, [r3, #24]
      break;
 80088d6:	e111      	b.n	8008afc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80088d8:	7b7b      	ldrb	r3, [r7, #13]
 80088da:	2b80      	cmp	r3, #128	@ 0x80
 80088dc:	d103      	bne.n	80088e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	2209      	movs	r2, #9
 80088e2:	761a      	strb	r2, [r3, #24]
      break;
 80088e4:	e10a      	b.n	8008afc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2207      	movs	r2, #7
 80088ea:	761a      	strb	r2, [r3, #24]
      break;
 80088ec:	e106      	b.n	8008afc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80088ee:	7bbb      	ldrb	r3, [r7, #14]
 80088f0:	2b04      	cmp	r3, #4
 80088f2:	d003      	beq.n	80088fc <USBH_HandleControl+0xcc>
 80088f4:	7bbb      	ldrb	r3, [r7, #14]
 80088f6:	2b02      	cmp	r3, #2
 80088f8:	f040 8100 	bne.w	8008afc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	220b      	movs	r2, #11
 8008900:	761a      	strb	r2, [r3, #24]
      break;
 8008902:	e0fb      	b.n	8008afc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800890a:	b29a      	uxth	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6899      	ldr	r1, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	899a      	ldrh	r2, [r3, #12]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	791b      	ldrb	r3, [r3, #4]
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f93a 	bl	8008b96 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2204      	movs	r2, #4
 8008926:	761a      	strb	r2, [r3, #24]
      break;
 8008928:	e0f1      	b.n	8008b0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	791b      	ldrb	r3, [r3, #4]
 800892e:	4619      	mov	r1, r3
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fc7d 	bl	8009230 <USBH_LL_GetURBState>
 8008936:	4603      	mov	r3, r0
 8008938:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	2b01      	cmp	r3, #1
 800893e:	d102      	bne.n	8008946 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2209      	movs	r2, #9
 8008944:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008946:	7bbb      	ldrb	r3, [r7, #14]
 8008948:	2b05      	cmp	r3, #5
 800894a:	d102      	bne.n	8008952 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800894c:	2303      	movs	r3, #3
 800894e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008950:	e0d6      	b.n	8008b00 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008952:	7bbb      	ldrb	r3, [r7, #14]
 8008954:	2b04      	cmp	r3, #4
 8008956:	f040 80d3 	bne.w	8008b00 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	220b      	movs	r2, #11
 800895e:	761a      	strb	r2, [r3, #24]
      break;
 8008960:	e0ce      	b.n	8008b00 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6899      	ldr	r1, [r3, #8]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	899a      	ldrh	r2, [r3, #12]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	795b      	ldrb	r3, [r3, #5]
 800896e:	2001      	movs	r0, #1
 8008970:	9000      	str	r0, [sp, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8ea 	bl	8008b4c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800897e:	b29a      	uxth	r2, r3
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2206      	movs	r2, #6
 8008988:	761a      	strb	r2, [r3, #24]
      break;
 800898a:	e0c0      	b.n	8008b0e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	795b      	ldrb	r3, [r3, #5]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 fc4c 	bl	8009230 <USBH_LL_GetURBState>
 8008998:	4603      	mov	r3, r0
 800899a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800899c:	7bbb      	ldrb	r3, [r7, #14]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d103      	bne.n	80089aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2207      	movs	r2, #7
 80089a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80089a8:	e0ac      	b.n	8008b04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80089aa:	7bbb      	ldrb	r3, [r7, #14]
 80089ac:	2b05      	cmp	r3, #5
 80089ae:	d105      	bne.n	80089bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	220c      	movs	r2, #12
 80089b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80089b6:	2303      	movs	r3, #3
 80089b8:	73fb      	strb	r3, [r7, #15]
      break;
 80089ba:	e0a3      	b.n	8008b04 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80089bc:	7bbb      	ldrb	r3, [r7, #14]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d103      	bne.n	80089ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2205      	movs	r2, #5
 80089c6:	761a      	strb	r2, [r3, #24]
      break;
 80089c8:	e09c      	b.n	8008b04 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80089ca:	7bbb      	ldrb	r3, [r7, #14]
 80089cc:	2b04      	cmp	r3, #4
 80089ce:	f040 8099 	bne.w	8008b04 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	220b      	movs	r2, #11
 80089d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80089d8:	2302      	movs	r3, #2
 80089da:	73fb      	strb	r3, [r7, #15]
      break;
 80089dc:	e092      	b.n	8008b04 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	791b      	ldrb	r3, [r3, #4]
 80089e2:	2200      	movs	r2, #0
 80089e4:	2100      	movs	r1, #0
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f000 f8d5 	bl	8008b96 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2208      	movs	r2, #8
 80089fc:	761a      	strb	r2, [r3, #24]

      break;
 80089fe:	e086      	b.n	8008b0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	791b      	ldrb	r3, [r3, #4]
 8008a04:	4619      	mov	r1, r3
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f000 fc12 	bl	8009230 <USBH_LL_GetURBState>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008a10:	7bbb      	ldrb	r3, [r7, #14]
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d105      	bne.n	8008a22 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	220d      	movs	r2, #13
 8008a1a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a20:	e072      	b.n	8008b08 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008a22:	7bbb      	ldrb	r3, [r7, #14]
 8008a24:	2b04      	cmp	r3, #4
 8008a26:	d103      	bne.n	8008a30 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	220b      	movs	r2, #11
 8008a2c:	761a      	strb	r2, [r3, #24]
      break;
 8008a2e:	e06b      	b.n	8008b08 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008a30:	7bbb      	ldrb	r3, [r7, #14]
 8008a32:	2b05      	cmp	r3, #5
 8008a34:	d168      	bne.n	8008b08 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008a36:	2303      	movs	r3, #3
 8008a38:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3a:	e065      	b.n	8008b08 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	795b      	ldrb	r3, [r3, #5]
 8008a40:	2201      	movs	r2, #1
 8008a42:	9200      	str	r2, [sp, #0]
 8008a44:	2200      	movs	r2, #0
 8008a46:	2100      	movs	r1, #0
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f000 f87f 	bl	8008b4c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008a54:	b29a      	uxth	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	220a      	movs	r2, #10
 8008a5e:	761a      	strb	r2, [r3, #24]
      break;
 8008a60:	e055      	b.n	8008b0e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	795b      	ldrb	r3, [r3, #5]
 8008a66:	4619      	mov	r1, r3
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fbe1 	bl	8009230 <USBH_LL_GetURBState>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008a72:	7bbb      	ldrb	r3, [r7, #14]
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d105      	bne.n	8008a84 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	220d      	movs	r2, #13
 8008a80:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008a82:	e043      	b.n	8008b0c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008a84:	7bbb      	ldrb	r3, [r7, #14]
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d103      	bne.n	8008a92 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2209      	movs	r2, #9
 8008a8e:	761a      	strb	r2, [r3, #24]
      break;
 8008a90:	e03c      	b.n	8008b0c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008a92:	7bbb      	ldrb	r3, [r7, #14]
 8008a94:	2b04      	cmp	r3, #4
 8008a96:	d139      	bne.n	8008b0c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	220b      	movs	r2, #11
 8008a9c:	761a      	strb	r2, [r3, #24]
      break;
 8008a9e:	e035      	b.n	8008b0c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	7e5b      	ldrb	r3, [r3, #25]
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	765a      	strb	r2, [r3, #25]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	7e5b      	ldrb	r3, [r3, #25]
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d806      	bhi.n	8008ac2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2201      	movs	r2, #1
 8008ab8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2201      	movs	r2, #1
 8008abe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008ac0:	e025      	b.n	8008b0e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ac8:	2106      	movs	r1, #6
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	795b      	ldrb	r3, [r3, #5]
 8008ad8:	4619      	mov	r1, r3
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 f90c 	bl	8008cf8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	791b      	ldrb	r3, [r3, #4]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 f906 	bl	8008cf8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8008af2:	2302      	movs	r3, #2
 8008af4:	73fb      	strb	r3, [r7, #15]
      break;
 8008af6:	e00a      	b.n	8008b0e <USBH_HandleControl+0x2de>

    default:
      break;
 8008af8:	bf00      	nop
 8008afa:	e008      	b.n	8008b0e <USBH_HandleControl+0x2de>
      break;
 8008afc:	bf00      	nop
 8008afe:	e006      	b.n	8008b0e <USBH_HandleControl+0x2de>
      break;
 8008b00:	bf00      	nop
 8008b02:	e004      	b.n	8008b0e <USBH_HandleControl+0x2de>
      break;
 8008b04:	bf00      	nop
 8008b06:	e002      	b.n	8008b0e <USBH_HandleControl+0x2de>
      break;
 8008b08:	bf00      	nop
 8008b0a:	e000      	b.n	8008b0e <USBH_HandleControl+0x2de>
      break;
 8008b0c:	bf00      	nop
  }

  return status;
 8008b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b088      	sub	sp, #32
 8008b1c:	af04      	add	r7, sp, #16
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b26:	79f9      	ldrb	r1, [r7, #7]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	9303      	str	r3, [sp, #12]
 8008b2c:	2308      	movs	r3, #8
 8008b2e:	9302      	str	r3, [sp, #8]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	9301      	str	r3, [sp, #4]
 8008b34:	2300      	movs	r3, #0
 8008b36:	9300      	str	r3, [sp, #0]
 8008b38:	2300      	movs	r3, #0
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	68f8      	ldr	r0, [r7, #12]
 8008b3e:	f000 fb46 	bl	80091ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b088      	sub	sp, #32
 8008b50:	af04      	add	r7, sp, #16
 8008b52:	60f8      	str	r0, [r7, #12]
 8008b54:	60b9      	str	r1, [r7, #8]
 8008b56:	4611      	mov	r1, r2
 8008b58:	461a      	mov	r2, r3
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	80fb      	strh	r3, [r7, #6]
 8008b5e:	4613      	mov	r3, r2
 8008b60:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d001      	beq.n	8008b70 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008b70:	7979      	ldrb	r1, [r7, #5]
 8008b72:	7e3b      	ldrb	r3, [r7, #24]
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	88fb      	ldrh	r3, [r7, #6]
 8008b78:	9302      	str	r3, [sp, #8]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	9301      	str	r3, [sp, #4]
 8008b7e:	2301      	movs	r3, #1
 8008b80:	9300      	str	r3, [sp, #0]
 8008b82:	2300      	movs	r3, #0
 8008b84:	2200      	movs	r2, #0
 8008b86:	68f8      	ldr	r0, [r7, #12]
 8008b88:	f000 fb21 	bl	80091ce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}

08008b96 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b088      	sub	sp, #32
 8008b9a:	af04      	add	r7, sp, #16
 8008b9c:	60f8      	str	r0, [r7, #12]
 8008b9e:	60b9      	str	r1, [r7, #8]
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	80fb      	strh	r3, [r7, #6]
 8008ba8:	4613      	mov	r3, r2
 8008baa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bac:	7979      	ldrb	r1, [r7, #5]
 8008bae:	2300      	movs	r3, #0
 8008bb0:	9303      	str	r3, [sp, #12]
 8008bb2:	88fb      	ldrh	r3, [r7, #6]
 8008bb4:	9302      	str	r3, [sp, #8]
 8008bb6:	68bb      	ldr	r3, [r7, #8]
 8008bb8:	9301      	str	r3, [sp, #4]
 8008bba:	2301      	movs	r3, #1
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	68f8      	ldr	r0, [r7, #12]
 8008bc4:	f000 fb03 	bl	80091ce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008bc8:	2300      	movs	r3, #0

}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3710      	adds	r7, #16
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}

08008bd2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008bd2:	b580      	push	{r7, lr}
 8008bd4:	b088      	sub	sp, #32
 8008bd6:	af04      	add	r7, sp, #16
 8008bd8:	60f8      	str	r0, [r7, #12]
 8008bda:	60b9      	str	r1, [r7, #8]
 8008bdc:	4611      	mov	r1, r2
 8008bde:	461a      	mov	r2, r3
 8008be0:	460b      	mov	r3, r1
 8008be2:	80fb      	strh	r3, [r7, #6]
 8008be4:	4613      	mov	r3, r2
 8008be6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008bf6:	7979      	ldrb	r1, [r7, #5]
 8008bf8:	7e3b      	ldrb	r3, [r7, #24]
 8008bfa:	9303      	str	r3, [sp, #12]
 8008bfc:	88fb      	ldrh	r3, [r7, #6]
 8008bfe:	9302      	str	r3, [sp, #8]
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	9301      	str	r3, [sp, #4]
 8008c04:	2301      	movs	r3, #1
 8008c06:	9300      	str	r3, [sp, #0]
 8008c08:	2302      	movs	r3, #2
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 fade 	bl	80091ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8008c12:	2300      	movs	r3, #0
}
 8008c14:	4618      	mov	r0, r3
 8008c16:	3710      	adds	r7, #16
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	bd80      	pop	{r7, pc}

08008c1c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b088      	sub	sp, #32
 8008c20:	af04      	add	r7, sp, #16
 8008c22:	60f8      	str	r0, [r7, #12]
 8008c24:	60b9      	str	r1, [r7, #8]
 8008c26:	4611      	mov	r1, r2
 8008c28:	461a      	mov	r2, r3
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	80fb      	strh	r3, [r7, #6]
 8008c2e:	4613      	mov	r3, r2
 8008c30:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008c32:	7979      	ldrb	r1, [r7, #5]
 8008c34:	2300      	movs	r3, #0
 8008c36:	9303      	str	r3, [sp, #12]
 8008c38:	88fb      	ldrh	r3, [r7, #6]
 8008c3a:	9302      	str	r3, [sp, #8]
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	9301      	str	r3, [sp, #4]
 8008c40:	2301      	movs	r3, #1
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	2302      	movs	r3, #2
 8008c46:	2201      	movs	r2, #1
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fac0 	bl	80091ce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af04      	add	r7, sp, #16
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	4608      	mov	r0, r1
 8008c62:	4611      	mov	r1, r2
 8008c64:	461a      	mov	r2, r3
 8008c66:	4603      	mov	r3, r0
 8008c68:	70fb      	strb	r3, [r7, #3]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70bb      	strb	r3, [r7, #2]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008c72:	7878      	ldrb	r0, [r7, #1]
 8008c74:	78ba      	ldrb	r2, [r7, #2]
 8008c76:	78f9      	ldrb	r1, [r7, #3]
 8008c78:	8b3b      	ldrh	r3, [r7, #24]
 8008c7a:	9302      	str	r3, [sp, #8]
 8008c7c:	7d3b      	ldrb	r3, [r7, #20]
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	7c3b      	ldrb	r3, [r7, #16]
 8008c82:	9300      	str	r3, [sp, #0]
 8008c84:	4603      	mov	r3, r0
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa53 	bl	8009132 <USBH_LL_OpenPipe>

  return USBH_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008ca2:	78fb      	ldrb	r3, [r7, #3]
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 fa72 	bl	8009190 <USBH_LL_ClosePipe>

  return USBH_OK;
 8008cac:	2300      	movs	r3, #0
}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f836 	bl	8008d34 <USBH_GetFreePipe>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8008ccc:	89fb      	ldrh	r3, [r7, #14]
 8008cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00a      	beq.n	8008cec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8008cd6:	78fa      	ldrb	r2, [r7, #3]
 8008cd8:	89fb      	ldrh	r3, [r7, #14]
 8008cda:	f003 030f 	and.w	r3, r3, #15
 8008cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008ce2:	6879      	ldr	r1, [r7, #4]
 8008ce4:	33e0      	adds	r3, #224	@ 0xe0
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	440b      	add	r3, r1
 8008cea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008cec:	89fb      	ldrh	r3, [r7, #14]
 8008cee:	b2db      	uxtb	r3, r3
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b083      	sub	sp, #12
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008d04:	78fb      	ldrb	r3, [r7, #3]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	d80d      	bhi.n	8008d26 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008d0a:	78fb      	ldrb	r3, [r7, #3]
 8008d0c:	687a      	ldr	r2, [r7, #4]
 8008d0e:	33e0      	adds	r3, #224	@ 0xe0
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	4413      	add	r3, r2
 8008d14:	685a      	ldr	r2, [r3, #4]
 8008d16:	78fb      	ldrb	r3, [r7, #3]
 8008d18:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008d1c:	6879      	ldr	r1, [r7, #4]
 8008d1e:	33e0      	adds	r3, #224	@ 0xe0
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	440b      	add	r3, r1
 8008d24:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d40:	2300      	movs	r3, #0
 8008d42:	73fb      	strb	r3, [r7, #15]
 8008d44:	e00f      	b.n	8008d66 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008d46:	7bfb      	ldrb	r3, [r7, #15]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	33e0      	adds	r3, #224	@ 0xe0
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d102      	bne.n	8008d60 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008d5a:	7bfb      	ldrb	r3, [r7, #15]
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	e007      	b.n	8008d70 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	3301      	adds	r3, #1
 8008d64:	73fb      	strb	r3, [r7, #15]
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	2b0f      	cmp	r3, #15
 8008d6a:	d9ec      	bls.n	8008d46 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008d6c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008d80:	2201      	movs	r2, #1
 8008d82:	490e      	ldr	r1, [pc, #56]	@ (8008dbc <MX_USB_HOST_Init+0x40>)
 8008d84:	480e      	ldr	r0, [pc, #56]	@ (8008dc0 <MX_USB_HOST_Init+0x44>)
 8008d86:	f7fe fb15 	bl	80073b4 <USBH_Init>
 8008d8a:	4603      	mov	r3, r0
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d001      	beq.n	8008d94 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008d90:	f7f7 fe72 	bl	8000a78 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008d94:	490b      	ldr	r1, [pc, #44]	@ (8008dc4 <MX_USB_HOST_Init+0x48>)
 8008d96:	480a      	ldr	r0, [pc, #40]	@ (8008dc0 <MX_USB_HOST_Init+0x44>)
 8008d98:	f7fe fbb9 	bl	800750e <USBH_RegisterClass>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008da2:	f7f7 fe69 	bl	8000a78 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008da6:	4806      	ldr	r0, [pc, #24]	@ (8008dc0 <MX_USB_HOST_Init+0x44>)
 8008da8:	f7fe fc3d 	bl	8007626 <USBH_Start>
 8008dac:	4603      	mov	r3, r0
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d001      	beq.n	8008db6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008db2:	f7f7 fe61 	bl	8000a78 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008db6:	bf00      	nop
 8008db8:	bd80      	pop	{r7, pc}
 8008dba:	bf00      	nop
 8008dbc:	08008ddd 	.word	0x08008ddd
 8008dc0:	2000022c 	.word	0x2000022c
 8008dc4:	2000000c 	.word	0x2000000c

08008dc8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8008dcc:	4802      	ldr	r0, [pc, #8]	@ (8008dd8 <MX_USB_HOST_Process+0x10>)
 8008dce:	f7fe fc3b 	bl	8007648 <USBH_Process>
}
 8008dd2:	bf00      	nop
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	2000022c 	.word	0x2000022c

08008ddc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b083      	sub	sp, #12
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	460b      	mov	r3, r1
 8008de6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008de8:	78fb      	ldrb	r3, [r7, #3]
 8008dea:	3b01      	subs	r3, #1
 8008dec:	2b04      	cmp	r3, #4
 8008dee:	d819      	bhi.n	8008e24 <USBH_UserProcess+0x48>
 8008df0:	a201      	add	r2, pc, #4	@ (adr r2, 8008df8 <USBH_UserProcess+0x1c>)
 8008df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df6:	bf00      	nop
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	08008e15 	.word	0x08008e15
 8008e00:	08008e25 	.word	0x08008e25
 8008e04:	08008e1d 	.word	0x08008e1d
 8008e08:	08008e0d 	.word	0x08008e0d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008e0c:	4b09      	ldr	r3, [pc, #36]	@ (8008e34 <USBH_UserProcess+0x58>)
 8008e0e:	2203      	movs	r2, #3
 8008e10:	701a      	strb	r2, [r3, #0]
  break;
 8008e12:	e008      	b.n	8008e26 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008e14:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <USBH_UserProcess+0x58>)
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
  break;
 8008e1a:	e004      	b.n	8008e26 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008e1c:	4b05      	ldr	r3, [pc, #20]	@ (8008e34 <USBH_UserProcess+0x58>)
 8008e1e:	2201      	movs	r2, #1
 8008e20:	701a      	strb	r2, [r3, #0]
  break;
 8008e22:	e000      	b.n	8008e26 <USBH_UserProcess+0x4a>

  default:
  break;
 8008e24:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8008e26:	bf00      	nop
 8008e28:	370c      	adds	r7, #12
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
 8008e32:	bf00      	nop
 8008e34:	20000604 	.word	0x20000604

08008e38 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b08a      	sub	sp, #40	@ 0x28
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e40:	f107 0314 	add.w	r3, r7, #20
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	60da      	str	r2, [r3, #12]
 8008e4e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e58:	d147      	bne.n	8008eea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	613b      	str	r3, [r7, #16]
 8008e5e:	4b25      	ldr	r3, [pc, #148]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e62:	4a24      	ldr	r2, [pc, #144]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008e64:	f043 0301 	orr.w	r3, r3, #1
 8008e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8008e6a:	4b22      	ldr	r3, [pc, #136]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e6e:	f003 0301 	and.w	r3, r3, #1
 8008e72:	613b      	str	r3, [r7, #16]
 8008e74:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e80:	2300      	movs	r3, #0
 8008e82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008e84:	f107 0314 	add.w	r3, r7, #20
 8008e88:	4619      	mov	r1, r3
 8008e8a:	481b      	ldr	r0, [pc, #108]	@ (8008ef8 <HAL_HCD_MspInit+0xc0>)
 8008e8c:	f7f8 f9dc 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008e90:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8008e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e96:	2302      	movs	r3, #2
 8008e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008ea2:	230a      	movs	r3, #10
 8008ea4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ea6:	f107 0314 	add.w	r3, r7, #20
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4812      	ldr	r0, [pc, #72]	@ (8008ef8 <HAL_HCD_MspInit+0xc0>)
 8008eae:	f7f8 f9cb 	bl	8001248 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008eb2:	4b10      	ldr	r3, [pc, #64]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ebc:	6353      	str	r3, [r2, #52]	@ 0x34
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	60fb      	str	r3, [r7, #12]
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ec6:	4a0b      	ldr	r2, [pc, #44]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008ec8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008ecc:	6453      	str	r3, [r2, #68]	@ 0x44
 8008ece:	4b09      	ldr	r3, [pc, #36]	@ (8008ef4 <HAL_HCD_MspInit+0xbc>)
 8008ed0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ed2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008ed6:	60fb      	str	r3, [r7, #12]
 8008ed8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008eda:	2200      	movs	r2, #0
 8008edc:	2100      	movs	r1, #0
 8008ede:	2043      	movs	r0, #67	@ 0x43
 8008ee0:	f7f8 f97b 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008ee4:	2043      	movs	r0, #67	@ 0x43
 8008ee6:	f7f8 f994 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008eea:	bf00      	nop
 8008eec:	3728      	adds	r7, #40	@ 0x28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	bf00      	nop
 8008ef4:	40023800 	.word	0x40023800
 8008ef8:	40020000 	.word	0x40020000

08008efc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fe ff73 	bl	8007df6 <USBH_LL_IncTimer>
}
 8008f10:	bf00      	nop
 8008f12:	3708      	adds	r7, #8
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe ffab 	bl	8007e82 <USBH_LL_Connect>
}
 8008f2c:	bf00      	nop
 8008f2e:	3708      	adds	r7, #8
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f42:	4618      	mov	r0, r3
 8008f44:	f7fe ffb4 	bl	8007eb0 <USBH_LL_Disconnect>
}
 8008f48:	bf00      	nop
 8008f4a:	3708      	adds	r7, #8
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b083      	sub	sp, #12
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	460b      	mov	r3, r1
 8008f5a:	70fb      	strb	r3, [r7, #3]
 8008f5c:	4613      	mov	r3, r2
 8008f5e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fe ff65 	bl	8007e4a <USBH_LL_PortEnabled>
}
 8008f80:	bf00      	nop
 8008f82:	3708      	adds	r7, #8
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fe ff65 	bl	8007e66 <USBH_LL_PortDisabled>
}
 8008f9c:	bf00      	nop
 8008f9e:	3708      	adds	r7, #8
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b082      	sub	sp, #8
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d12a      	bne.n	800900c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008fb6:	4a18      	ldr	r2, [pc, #96]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a15      	ldr	r2, [pc, #84]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fc2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008fc6:	4b14      	ldr	r3, [pc, #80]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fc8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008fcc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8008fce:	4b12      	ldr	r3, [pc, #72]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fd0:	2208      	movs	r2, #8
 8008fd2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008fd4:	4b10      	ldr	r3, [pc, #64]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008fda:	4b0f      	ldr	r3, [pc, #60]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fe2:	2202      	movs	r2, #2
 8008fe4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008fe6:	4b0c      	ldr	r3, [pc, #48]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008fec:	480a      	ldr	r0, [pc, #40]	@ (8009018 <USBH_LL_Init+0x74>)
 8008fee:	f7f8 fafa 	bl	80015e6 <HAL_HCD_Init>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d001      	beq.n	8008ffc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008ff8:	f7f7 fd3e 	bl	8000a78 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008ffc:	4806      	ldr	r0, [pc, #24]	@ (8009018 <USBH_LL_Init+0x74>)
 8008ffe:	f7f8 ff5b 	bl	8001eb8 <HAL_HCD_GetCurrentFrame>
 8009002:	4603      	mov	r3, r0
 8009004:	4619      	mov	r1, r3
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7fe fee6 	bl	8007dd8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	20000608 	.word	0x20000608

0800901c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800901c:	b580      	push	{r7, lr}
 800901e:	b084      	sub	sp, #16
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009028:	2300      	movs	r3, #0
 800902a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009032:	4618      	mov	r0, r3
 8009034:	f7f8 fec8 	bl	8001dc8 <HAL_HCD_Start>
 8009038:	4603      	mov	r3, r0
 800903a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800903c:	7bfb      	ldrb	r3, [r7, #15]
 800903e:	4618      	mov	r0, r3
 8009040:	f000 f95e 	bl	8009300 <USBH_Get_USB_Status>
 8009044:	4603      	mov	r3, r0
 8009046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009048:	7bbb      	ldrb	r3, [r7, #14]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3710      	adds	r7, #16
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}

08009052 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009052:	b580      	push	{r7, lr}
 8009054:	b084      	sub	sp, #16
 8009056:	af00      	add	r7, sp, #0
 8009058:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800905a:	2300      	movs	r3, #0
 800905c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009068:	4618      	mov	r0, r3
 800906a:	f7f8 fed0 	bl	8001e0e <HAL_HCD_Stop>
 800906e:	4603      	mov	r3, r0
 8009070:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009072:	7bfb      	ldrb	r3, [r7, #15]
 8009074:	4618      	mov	r0, r3
 8009076:	f000 f943 	bl	8009300 <USBH_Get_USB_Status>
 800907a:	4603      	mov	r3, r0
 800907c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800907e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009080:	4618      	mov	r0, r3
 8009082:	3710      	adds	r7, #16
 8009084:	46bd      	mov	sp, r7
 8009086:	bd80      	pop	{r7, pc}

08009088 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009090:	2301      	movs	r3, #1
 8009092:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800909a:	4618      	mov	r0, r3
 800909c:	f7f8 ff1a 	bl	8001ed4 <HAL_HCD_GetCurrentSpeed>
 80090a0:	4603      	mov	r3, r0
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d00c      	beq.n	80090c0 <USBH_LL_GetSpeed+0x38>
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d80d      	bhi.n	80090c6 <USBH_LL_GetSpeed+0x3e>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d002      	beq.n	80090b4 <USBH_LL_GetSpeed+0x2c>
 80090ae:	2b01      	cmp	r3, #1
 80090b0:	d003      	beq.n	80090ba <USBH_LL_GetSpeed+0x32>
 80090b2:	e008      	b.n	80090c6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80090b4:	2300      	movs	r3, #0
 80090b6:	73fb      	strb	r3, [r7, #15]
    break;
 80090b8:	e008      	b.n	80090cc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80090ba:	2301      	movs	r3, #1
 80090bc:	73fb      	strb	r3, [r7, #15]
    break;
 80090be:	e005      	b.n	80090cc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80090c0:	2302      	movs	r3, #2
 80090c2:	73fb      	strb	r3, [r7, #15]
    break;
 80090c4:	e002      	b.n	80090cc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80090c6:	2301      	movs	r3, #1
 80090c8:	73fb      	strb	r3, [r7, #15]
    break;
 80090ca:	bf00      	nop
  }
  return  speed;
 80090cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b084      	sub	sp, #16
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090de:	2300      	movs	r3, #0
 80090e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80090ec:	4618      	mov	r0, r3
 80090ee:	f7f8 feab 	bl	8001e48 <HAL_HCD_ResetPort>
 80090f2:	4603      	mov	r3, r0
 80090f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
 80090f8:	4618      	mov	r0, r3
 80090fa:	f000 f901 	bl	8009300 <USBH_Get_USB_Status>
 80090fe:	4603      	mov	r3, r0
 8009100:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009102:	7bbb      	ldrb	r3, [r7, #14]
}
 8009104:	4618      	mov	r0, r3
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b082      	sub	sp, #8
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	460b      	mov	r3, r1
 8009116:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800911e:	78fa      	ldrb	r2, [r7, #3]
 8009120:	4611      	mov	r1, r2
 8009122:	4618      	mov	r0, r3
 8009124:	f7f8 feb3 	bl	8001e8e <HAL_HCD_HC_GetXferCount>
 8009128:	4603      	mov	r3, r0
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}

08009132 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009132:	b590      	push	{r4, r7, lr}
 8009134:	b089      	sub	sp, #36	@ 0x24
 8009136:	af04      	add	r7, sp, #16
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	4608      	mov	r0, r1
 800913c:	4611      	mov	r1, r2
 800913e:	461a      	mov	r2, r3
 8009140:	4603      	mov	r3, r0
 8009142:	70fb      	strb	r3, [r7, #3]
 8009144:	460b      	mov	r3, r1
 8009146:	70bb      	strb	r3, [r7, #2]
 8009148:	4613      	mov	r3, r2
 800914a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800915a:	787c      	ldrb	r4, [r7, #1]
 800915c:	78ba      	ldrb	r2, [r7, #2]
 800915e:	78f9      	ldrb	r1, [r7, #3]
 8009160:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009162:	9302      	str	r3, [sp, #8]
 8009164:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009168:	9301      	str	r3, [sp, #4]
 800916a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800916e:	9300      	str	r3, [sp, #0]
 8009170:	4623      	mov	r3, r4
 8009172:	f7f8 fa9f 	bl	80016b4 <HAL_HCD_HC_Init>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800917a:	7bfb      	ldrb	r3, [r7, #15]
 800917c:	4618      	mov	r0, r3
 800917e:	f000 f8bf 	bl	8009300 <USBH_Get_USB_Status>
 8009182:	4603      	mov	r3, r0
 8009184:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009186:	7bbb      	ldrb	r3, [r7, #14]
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	bd90      	pop	{r4, r7, pc}

08009190 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b084      	sub	sp, #16
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
 8009198:	460b      	mov	r3, r1
 800919a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091a0:	2300      	movs	r3, #0
 80091a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80091aa:	78fa      	ldrb	r2, [r7, #3]
 80091ac:	4611      	mov	r1, r2
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7f8 fb38 	bl	8001824 <HAL_HCD_HC_Halt>
 80091b4:	4603      	mov	r3, r0
 80091b6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f000 f8a0 	bl	8009300 <USBH_Get_USB_Status>
 80091c0:	4603      	mov	r3, r0
 80091c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}

080091ce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80091ce:	b590      	push	{r4, r7, lr}
 80091d0:	b089      	sub	sp, #36	@ 0x24
 80091d2:	af04      	add	r7, sp, #16
 80091d4:	6078      	str	r0, [r7, #4]
 80091d6:	4608      	mov	r0, r1
 80091d8:	4611      	mov	r1, r2
 80091da:	461a      	mov	r2, r3
 80091dc:	4603      	mov	r3, r0
 80091de:	70fb      	strb	r3, [r7, #3]
 80091e0:	460b      	mov	r3, r1
 80091e2:	70bb      	strb	r3, [r7, #2]
 80091e4:	4613      	mov	r3, r2
 80091e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80091ec:	2300      	movs	r3, #0
 80091ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80091f6:	787c      	ldrb	r4, [r7, #1]
 80091f8:	78ba      	ldrb	r2, [r7, #2]
 80091fa:	78f9      	ldrb	r1, [r7, #3]
 80091fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009200:	9303      	str	r3, [sp, #12]
 8009202:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009204:	9302      	str	r3, [sp, #8]
 8009206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009208:	9301      	str	r3, [sp, #4]
 800920a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	4623      	mov	r3, r4
 8009212:	f7f8 fb2b 	bl	800186c <HAL_HCD_HC_SubmitRequest>
 8009216:	4603      	mov	r3, r0
 8009218:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	4618      	mov	r0, r3
 800921e:	f000 f86f 	bl	8009300 <USBH_Get_USB_Status>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009226:	7bbb      	ldrb	r3, [r7, #14]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	bd90      	pop	{r4, r7, pc}

08009230 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	460b      	mov	r3, r1
 800923a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f7f8 fe0c 	bl	8001e64 <HAL_HCD_HC_GetURBState>
 800924c:	4603      	mov	r3, r0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3708      	adds	r7, #8
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009268:	2b01      	cmp	r3, #1
 800926a:	d103      	bne.n	8009274 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800926c:	78fb      	ldrb	r3, [r7, #3]
 800926e:	4618      	mov	r0, r3
 8009270:	f000 f872 	bl	8009358 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009274:	20c8      	movs	r0, #200	@ 0xc8
 8009276:	f7f7 feb1 	bl	8000fdc <HAL_Delay>
  return USBH_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009284:	b480      	push	{r7}
 8009286:	b085      	sub	sp, #20
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
 8009290:	4613      	mov	r3, r2
 8009292:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800929a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800929c:	78fa      	ldrb	r2, [r7, #3]
 800929e:	68f9      	ldr	r1, [r7, #12]
 80092a0:	4613      	mov	r3, r2
 80092a2:	011b      	lsls	r3, r3, #4
 80092a4:	1a9b      	subs	r3, r3, r2
 80092a6:	009b      	lsls	r3, r3, #2
 80092a8:	440b      	add	r3, r1
 80092aa:	3317      	adds	r3, #23
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d00a      	beq.n	80092c8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80092b2:	78fa      	ldrb	r2, [r7, #3]
 80092b4:	68f9      	ldr	r1, [r7, #12]
 80092b6:	4613      	mov	r3, r2
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	1a9b      	subs	r3, r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	440b      	add	r3, r1
 80092c0:	333c      	adds	r3, #60	@ 0x3c
 80092c2:	78ba      	ldrb	r2, [r7, #2]
 80092c4:	701a      	strb	r2, [r3, #0]
 80092c6:	e009      	b.n	80092dc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	4613      	mov	r3, r2
 80092ce:	011b      	lsls	r3, r3, #4
 80092d0:	1a9b      	subs	r3, r3, r2
 80092d2:	009b      	lsls	r3, r3, #2
 80092d4:	440b      	add	r3, r1
 80092d6:	333d      	adds	r3, #61	@ 0x3d
 80092d8:	78ba      	ldrb	r2, [r7, #2]
 80092da:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80092dc:	2300      	movs	r3, #0
}
 80092de:	4618      	mov	r0, r3
 80092e0:	3714      	adds	r7, #20
 80092e2:	46bd      	mov	sp, r7
 80092e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e8:	4770      	bx	lr

080092ea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7f7 fe72 	bl	8000fdc <HAL_Delay>
}
 80092f8:	bf00      	nop
 80092fa:	3708      	adds	r7, #8
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009300:	b480      	push	{r7}
 8009302:	b085      	sub	sp, #20
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800930a:	2300      	movs	r3, #0
 800930c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800930e:	79fb      	ldrb	r3, [r7, #7]
 8009310:	2b03      	cmp	r3, #3
 8009312:	d817      	bhi.n	8009344 <USBH_Get_USB_Status+0x44>
 8009314:	a201      	add	r2, pc, #4	@ (adr r2, 800931c <USBH_Get_USB_Status+0x1c>)
 8009316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800931a:	bf00      	nop
 800931c:	0800932d 	.word	0x0800932d
 8009320:	08009333 	.word	0x08009333
 8009324:	08009339 	.word	0x08009339
 8009328:	0800933f 	.word	0x0800933f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73fb      	strb	r3, [r7, #15]
    break;
 8009330:	e00b      	b.n	800934a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009332:	2302      	movs	r3, #2
 8009334:	73fb      	strb	r3, [r7, #15]
    break;
 8009336:	e008      	b.n	800934a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009338:	2301      	movs	r3, #1
 800933a:	73fb      	strb	r3, [r7, #15]
    break;
 800933c:	e005      	b.n	800934a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800933e:	2302      	movs	r3, #2
 8009340:	73fb      	strb	r3, [r7, #15]
    break;
 8009342:	e002      	b.n	800934a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009344:	2302      	movs	r3, #2
 8009346:	73fb      	strb	r3, [r7, #15]
    break;
 8009348:	bf00      	nop
  }
  return usb_status;
 800934a:	7bfb      	ldrb	r3, [r7, #15]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3714      	adds	r7, #20
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr

08009358 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	4603      	mov	r3, r0
 8009360:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009362:	79fb      	ldrb	r3, [r7, #7]
 8009364:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009366:	79fb      	ldrb	r3, [r7, #7]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d102      	bne.n	8009372 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800936c:	2300      	movs	r3, #0
 800936e:	73fb      	strb	r3, [r7, #15]
 8009370:	e001      	b.n	8009376 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009372:	2301      	movs	r3, #1
 8009374:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009376:	7bfb      	ldrb	r3, [r7, #15]
 8009378:	461a      	mov	r2, r3
 800937a:	2101      	movs	r1, #1
 800937c:	4803      	ldr	r0, [pc, #12]	@ (800938c <MX_DriverVbusFS+0x34>)
 800937e:	f7f8 f8ff 	bl	8001580 <HAL_GPIO_WritePin>
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
 800938a:	bf00      	nop
 800938c:	40020800 	.word	0x40020800

08009390 <malloc>:
 8009390:	4b02      	ldr	r3, [pc, #8]	@ (800939c <malloc+0xc>)
 8009392:	4601      	mov	r1, r0
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	f000 b82d 	b.w	80093f4 <_malloc_r>
 800939a:	bf00      	nop
 800939c:	2000002c 	.word	0x2000002c

080093a0 <free>:
 80093a0:	4b02      	ldr	r3, [pc, #8]	@ (80093ac <free+0xc>)
 80093a2:	4601      	mov	r1, r0
 80093a4:	6818      	ldr	r0, [r3, #0]
 80093a6:	f000 b8f5 	b.w	8009594 <_free_r>
 80093aa:	bf00      	nop
 80093ac:	2000002c 	.word	0x2000002c

080093b0 <sbrk_aligned>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	4e0f      	ldr	r6, [pc, #60]	@ (80093f0 <sbrk_aligned+0x40>)
 80093b4:	460c      	mov	r4, r1
 80093b6:	6831      	ldr	r1, [r6, #0]
 80093b8:	4605      	mov	r5, r0
 80093ba:	b911      	cbnz	r1, 80093c2 <sbrk_aligned+0x12>
 80093bc:	f000 f8ae 	bl	800951c <_sbrk_r>
 80093c0:	6030      	str	r0, [r6, #0]
 80093c2:	4621      	mov	r1, r4
 80093c4:	4628      	mov	r0, r5
 80093c6:	f000 f8a9 	bl	800951c <_sbrk_r>
 80093ca:	1c43      	adds	r3, r0, #1
 80093cc:	d103      	bne.n	80093d6 <sbrk_aligned+0x26>
 80093ce:	f04f 34ff 	mov.w	r4, #4294967295
 80093d2:	4620      	mov	r0, r4
 80093d4:	bd70      	pop	{r4, r5, r6, pc}
 80093d6:	1cc4      	adds	r4, r0, #3
 80093d8:	f024 0403 	bic.w	r4, r4, #3
 80093dc:	42a0      	cmp	r0, r4
 80093de:	d0f8      	beq.n	80093d2 <sbrk_aligned+0x22>
 80093e0:	1a21      	subs	r1, r4, r0
 80093e2:	4628      	mov	r0, r5
 80093e4:	f000 f89a 	bl	800951c <_sbrk_r>
 80093e8:	3001      	adds	r0, #1
 80093ea:	d1f2      	bne.n	80093d2 <sbrk_aligned+0x22>
 80093ec:	e7ef      	b.n	80093ce <sbrk_aligned+0x1e>
 80093ee:	bf00      	nop
 80093f0:	200009e8 	.word	0x200009e8

080093f4 <_malloc_r>:
 80093f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f8:	1ccd      	adds	r5, r1, #3
 80093fa:	f025 0503 	bic.w	r5, r5, #3
 80093fe:	3508      	adds	r5, #8
 8009400:	2d0c      	cmp	r5, #12
 8009402:	bf38      	it	cc
 8009404:	250c      	movcc	r5, #12
 8009406:	2d00      	cmp	r5, #0
 8009408:	4606      	mov	r6, r0
 800940a:	db01      	blt.n	8009410 <_malloc_r+0x1c>
 800940c:	42a9      	cmp	r1, r5
 800940e:	d904      	bls.n	800941a <_malloc_r+0x26>
 8009410:	230c      	movs	r3, #12
 8009412:	6033      	str	r3, [r6, #0]
 8009414:	2000      	movs	r0, #0
 8009416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800941a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80094f0 <_malloc_r+0xfc>
 800941e:	f000 f869 	bl	80094f4 <__malloc_lock>
 8009422:	f8d8 3000 	ldr.w	r3, [r8]
 8009426:	461c      	mov	r4, r3
 8009428:	bb44      	cbnz	r4, 800947c <_malloc_r+0x88>
 800942a:	4629      	mov	r1, r5
 800942c:	4630      	mov	r0, r6
 800942e:	f7ff ffbf 	bl	80093b0 <sbrk_aligned>
 8009432:	1c43      	adds	r3, r0, #1
 8009434:	4604      	mov	r4, r0
 8009436:	d158      	bne.n	80094ea <_malloc_r+0xf6>
 8009438:	f8d8 4000 	ldr.w	r4, [r8]
 800943c:	4627      	mov	r7, r4
 800943e:	2f00      	cmp	r7, #0
 8009440:	d143      	bne.n	80094ca <_malloc_r+0xd6>
 8009442:	2c00      	cmp	r4, #0
 8009444:	d04b      	beq.n	80094de <_malloc_r+0xea>
 8009446:	6823      	ldr	r3, [r4, #0]
 8009448:	4639      	mov	r1, r7
 800944a:	4630      	mov	r0, r6
 800944c:	eb04 0903 	add.w	r9, r4, r3
 8009450:	f000 f864 	bl	800951c <_sbrk_r>
 8009454:	4581      	cmp	r9, r0
 8009456:	d142      	bne.n	80094de <_malloc_r+0xea>
 8009458:	6821      	ldr	r1, [r4, #0]
 800945a:	1a6d      	subs	r5, r5, r1
 800945c:	4629      	mov	r1, r5
 800945e:	4630      	mov	r0, r6
 8009460:	f7ff ffa6 	bl	80093b0 <sbrk_aligned>
 8009464:	3001      	adds	r0, #1
 8009466:	d03a      	beq.n	80094de <_malloc_r+0xea>
 8009468:	6823      	ldr	r3, [r4, #0]
 800946a:	442b      	add	r3, r5
 800946c:	6023      	str	r3, [r4, #0]
 800946e:	f8d8 3000 	ldr.w	r3, [r8]
 8009472:	685a      	ldr	r2, [r3, #4]
 8009474:	bb62      	cbnz	r2, 80094d0 <_malloc_r+0xdc>
 8009476:	f8c8 7000 	str.w	r7, [r8]
 800947a:	e00f      	b.n	800949c <_malloc_r+0xa8>
 800947c:	6822      	ldr	r2, [r4, #0]
 800947e:	1b52      	subs	r2, r2, r5
 8009480:	d420      	bmi.n	80094c4 <_malloc_r+0xd0>
 8009482:	2a0b      	cmp	r2, #11
 8009484:	d917      	bls.n	80094b6 <_malloc_r+0xc2>
 8009486:	1961      	adds	r1, r4, r5
 8009488:	42a3      	cmp	r3, r4
 800948a:	6025      	str	r5, [r4, #0]
 800948c:	bf18      	it	ne
 800948e:	6059      	strne	r1, [r3, #4]
 8009490:	6863      	ldr	r3, [r4, #4]
 8009492:	bf08      	it	eq
 8009494:	f8c8 1000 	streq.w	r1, [r8]
 8009498:	5162      	str	r2, [r4, r5]
 800949a:	604b      	str	r3, [r1, #4]
 800949c:	4630      	mov	r0, r6
 800949e:	f000 f82f 	bl	8009500 <__malloc_unlock>
 80094a2:	f104 000b 	add.w	r0, r4, #11
 80094a6:	1d23      	adds	r3, r4, #4
 80094a8:	f020 0007 	bic.w	r0, r0, #7
 80094ac:	1ac2      	subs	r2, r0, r3
 80094ae:	bf1c      	itt	ne
 80094b0:	1a1b      	subne	r3, r3, r0
 80094b2:	50a3      	strne	r3, [r4, r2]
 80094b4:	e7af      	b.n	8009416 <_malloc_r+0x22>
 80094b6:	6862      	ldr	r2, [r4, #4]
 80094b8:	42a3      	cmp	r3, r4
 80094ba:	bf0c      	ite	eq
 80094bc:	f8c8 2000 	streq.w	r2, [r8]
 80094c0:	605a      	strne	r2, [r3, #4]
 80094c2:	e7eb      	b.n	800949c <_malloc_r+0xa8>
 80094c4:	4623      	mov	r3, r4
 80094c6:	6864      	ldr	r4, [r4, #4]
 80094c8:	e7ae      	b.n	8009428 <_malloc_r+0x34>
 80094ca:	463c      	mov	r4, r7
 80094cc:	687f      	ldr	r7, [r7, #4]
 80094ce:	e7b6      	b.n	800943e <_malloc_r+0x4a>
 80094d0:	461a      	mov	r2, r3
 80094d2:	685b      	ldr	r3, [r3, #4]
 80094d4:	42a3      	cmp	r3, r4
 80094d6:	d1fb      	bne.n	80094d0 <_malloc_r+0xdc>
 80094d8:	2300      	movs	r3, #0
 80094da:	6053      	str	r3, [r2, #4]
 80094dc:	e7de      	b.n	800949c <_malloc_r+0xa8>
 80094de:	230c      	movs	r3, #12
 80094e0:	6033      	str	r3, [r6, #0]
 80094e2:	4630      	mov	r0, r6
 80094e4:	f000 f80c 	bl	8009500 <__malloc_unlock>
 80094e8:	e794      	b.n	8009414 <_malloc_r+0x20>
 80094ea:	6005      	str	r5, [r0, #0]
 80094ec:	e7d6      	b.n	800949c <_malloc_r+0xa8>
 80094ee:	bf00      	nop
 80094f0:	200009ec 	.word	0x200009ec

080094f4 <__malloc_lock>:
 80094f4:	4801      	ldr	r0, [pc, #4]	@ (80094fc <__malloc_lock+0x8>)
 80094f6:	f000 b84b 	b.w	8009590 <__retarget_lock_acquire_recursive>
 80094fa:	bf00      	nop
 80094fc:	20000b2c 	.word	0x20000b2c

08009500 <__malloc_unlock>:
 8009500:	4801      	ldr	r0, [pc, #4]	@ (8009508 <__malloc_unlock+0x8>)
 8009502:	f000 b846 	b.w	8009592 <__retarget_lock_release_recursive>
 8009506:	bf00      	nop
 8009508:	20000b2c 	.word	0x20000b2c

0800950c <memset>:
 800950c:	4402      	add	r2, r0
 800950e:	4603      	mov	r3, r0
 8009510:	4293      	cmp	r3, r2
 8009512:	d100      	bne.n	8009516 <memset+0xa>
 8009514:	4770      	bx	lr
 8009516:	f803 1b01 	strb.w	r1, [r3], #1
 800951a:	e7f9      	b.n	8009510 <memset+0x4>

0800951c <_sbrk_r>:
 800951c:	b538      	push	{r3, r4, r5, lr}
 800951e:	4d06      	ldr	r5, [pc, #24]	@ (8009538 <_sbrk_r+0x1c>)
 8009520:	2300      	movs	r3, #0
 8009522:	4604      	mov	r4, r0
 8009524:	4608      	mov	r0, r1
 8009526:	602b      	str	r3, [r5, #0]
 8009528:	f7f7 fb96 	bl	8000c58 <_sbrk>
 800952c:	1c43      	adds	r3, r0, #1
 800952e:	d102      	bne.n	8009536 <_sbrk_r+0x1a>
 8009530:	682b      	ldr	r3, [r5, #0]
 8009532:	b103      	cbz	r3, 8009536 <_sbrk_r+0x1a>
 8009534:	6023      	str	r3, [r4, #0]
 8009536:	bd38      	pop	{r3, r4, r5, pc}
 8009538:	20000b28 	.word	0x20000b28

0800953c <__errno>:
 800953c:	4b01      	ldr	r3, [pc, #4]	@ (8009544 <__errno+0x8>)
 800953e:	6818      	ldr	r0, [r3, #0]
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	2000002c 	.word	0x2000002c

08009548 <__libc_init_array>:
 8009548:	b570      	push	{r4, r5, r6, lr}
 800954a:	4d0d      	ldr	r5, [pc, #52]	@ (8009580 <__libc_init_array+0x38>)
 800954c:	4c0d      	ldr	r4, [pc, #52]	@ (8009584 <__libc_init_array+0x3c>)
 800954e:	1b64      	subs	r4, r4, r5
 8009550:	10a4      	asrs	r4, r4, #2
 8009552:	2600      	movs	r6, #0
 8009554:	42a6      	cmp	r6, r4
 8009556:	d109      	bne.n	800956c <__libc_init_array+0x24>
 8009558:	4d0b      	ldr	r5, [pc, #44]	@ (8009588 <__libc_init_array+0x40>)
 800955a:	4c0c      	ldr	r4, [pc, #48]	@ (800958c <__libc_init_array+0x44>)
 800955c:	f000 f864 	bl	8009628 <_init>
 8009560:	1b64      	subs	r4, r4, r5
 8009562:	10a4      	asrs	r4, r4, #2
 8009564:	2600      	movs	r6, #0
 8009566:	42a6      	cmp	r6, r4
 8009568:	d105      	bne.n	8009576 <__libc_init_array+0x2e>
 800956a:	bd70      	pop	{r4, r5, r6, pc}
 800956c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009570:	4798      	blx	r3
 8009572:	3601      	adds	r6, #1
 8009574:	e7ee      	b.n	8009554 <__libc_init_array+0xc>
 8009576:	f855 3b04 	ldr.w	r3, [r5], #4
 800957a:	4798      	blx	r3
 800957c:	3601      	adds	r6, #1
 800957e:	e7f2      	b.n	8009566 <__libc_init_array+0x1e>
 8009580:	08009664 	.word	0x08009664
 8009584:	08009664 	.word	0x08009664
 8009588:	08009664 	.word	0x08009664
 800958c:	08009668 	.word	0x08009668

08009590 <__retarget_lock_acquire_recursive>:
 8009590:	4770      	bx	lr

08009592 <__retarget_lock_release_recursive>:
 8009592:	4770      	bx	lr

08009594 <_free_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4605      	mov	r5, r0
 8009598:	2900      	cmp	r1, #0
 800959a:	d041      	beq.n	8009620 <_free_r+0x8c>
 800959c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a0:	1f0c      	subs	r4, r1, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	bfb8      	it	lt
 80095a6:	18e4      	addlt	r4, r4, r3
 80095a8:	f7ff ffa4 	bl	80094f4 <__malloc_lock>
 80095ac:	4a1d      	ldr	r2, [pc, #116]	@ (8009624 <_free_r+0x90>)
 80095ae:	6813      	ldr	r3, [r2, #0]
 80095b0:	b933      	cbnz	r3, 80095c0 <_free_r+0x2c>
 80095b2:	6063      	str	r3, [r4, #4]
 80095b4:	6014      	str	r4, [r2, #0]
 80095b6:	4628      	mov	r0, r5
 80095b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095bc:	f7ff bfa0 	b.w	8009500 <__malloc_unlock>
 80095c0:	42a3      	cmp	r3, r4
 80095c2:	d908      	bls.n	80095d6 <_free_r+0x42>
 80095c4:	6820      	ldr	r0, [r4, #0]
 80095c6:	1821      	adds	r1, r4, r0
 80095c8:	428b      	cmp	r3, r1
 80095ca:	bf01      	itttt	eq
 80095cc:	6819      	ldreq	r1, [r3, #0]
 80095ce:	685b      	ldreq	r3, [r3, #4]
 80095d0:	1809      	addeq	r1, r1, r0
 80095d2:	6021      	streq	r1, [r4, #0]
 80095d4:	e7ed      	b.n	80095b2 <_free_r+0x1e>
 80095d6:	461a      	mov	r2, r3
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	b10b      	cbz	r3, 80095e0 <_free_r+0x4c>
 80095dc:	42a3      	cmp	r3, r4
 80095de:	d9fa      	bls.n	80095d6 <_free_r+0x42>
 80095e0:	6811      	ldr	r1, [r2, #0]
 80095e2:	1850      	adds	r0, r2, r1
 80095e4:	42a0      	cmp	r0, r4
 80095e6:	d10b      	bne.n	8009600 <_free_r+0x6c>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	4401      	add	r1, r0
 80095ec:	1850      	adds	r0, r2, r1
 80095ee:	4283      	cmp	r3, r0
 80095f0:	6011      	str	r1, [r2, #0]
 80095f2:	d1e0      	bne.n	80095b6 <_free_r+0x22>
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	6053      	str	r3, [r2, #4]
 80095fa:	4408      	add	r0, r1
 80095fc:	6010      	str	r0, [r2, #0]
 80095fe:	e7da      	b.n	80095b6 <_free_r+0x22>
 8009600:	d902      	bls.n	8009608 <_free_r+0x74>
 8009602:	230c      	movs	r3, #12
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	e7d6      	b.n	80095b6 <_free_r+0x22>
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	1821      	adds	r1, r4, r0
 800960c:	428b      	cmp	r3, r1
 800960e:	bf04      	itt	eq
 8009610:	6819      	ldreq	r1, [r3, #0]
 8009612:	685b      	ldreq	r3, [r3, #4]
 8009614:	6063      	str	r3, [r4, #4]
 8009616:	bf04      	itt	eq
 8009618:	1809      	addeq	r1, r1, r0
 800961a:	6021      	streq	r1, [r4, #0]
 800961c:	6054      	str	r4, [r2, #4]
 800961e:	e7ca      	b.n	80095b6 <_free_r+0x22>
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	200009ec 	.word	0x200009ec

08009628 <_init>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr

08009634 <_fini>:
 8009634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009636:	bf00      	nop
 8009638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963a:	bc08      	pop	{r3}
 800963c:	469e      	mov	lr, r3
 800963e:	4770      	bx	lr
